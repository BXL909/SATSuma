//!_______________________________________________________________________________________________________
//![](resources\SatsumaButton-4.png)v2.5 
//!A block explorer, Xpub viewer, bitcoin & lightning dashboard, DCA calculator, multiple onchain & market
//!charts, directory, fiat converter and loads more, with the ability to create encryted bookmarks and 
//!notes, select from multiple preset themes or create your own. Xpub queries will only work on the users's
//!own node. Keys to unlock encrypted bookmarks are not stored anywhere and are uncrecoverable. Data and
//!config files (bookmarks, themes and settings) are all saved to the user's application data directory.
//
//!🍊 Homepage.......... https://satsuma.btcdir.org/
//!🍊 Version history... https://satsuma.btcdir.org/version-history/
//!🍊 Download.......... https://satsuma.btcdir.org/download/
//
//TODO LIST______________________________________________________________________________________________
//TODO Taproot support on xpub screen 
//TODO documentation for new pools screens (code done, pages created, just do text)
//TODO documentation for new btc dashboard fields
//TODO cancellation tokens for all async tasks. add cancel button.
//TODO fix width of background image on partial loading screen (stretch or use new image)
//TODO swap distribution and halving sections around on bitcoin dashboard
//TODO testing
//BUG LIST_______________________________________________________________________________________________
//!_______________________________________________________________________________________________________
#nullable enable
#region Using
using CustomControls.RJControls;
using NBitcoin;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using QRCoder;
using SATSuma.Properties;
using ScottPlot;
using ScottPlot.Renderable;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.NetworkInformation;
using System.Numerics;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using static SATSuma.SATSuma;
using Control = System.Windows.Forms.Control;
using ListViewItem = System.Windows.Forms.ListViewItem;
using Panel = System.Windows.Forms.Panel;
#endregion

namespace SATSuma
{
    public partial class SATSuma : Form
    {
        readonly string CurrentVersion = "2.5";
        #region ⚡⚡⚡ rounded form
        [DllImport("Gdi32.dll", EntryPoint = "CreateRoundRectRgn")]
        private static extern IntPtr CreateRoundRectRgn
         (
           int nLeftRect,     // x-coordinate of upper-left corner
           int nTopRect,      // y-coordinate of upper-left corner
           int nRightRect,    // x-coordinate of lower-right corner
           int nBottomRect,   // y-coordinate of lower-right corner
           int nWidthEllipse, // height of ellipse
           int nHeightEllipse // width of ellipse
         );
        #endregion
        //![](resources\tinylogo1.png;;;0.04706,0.04877) 
        #region ⚡⚡⚡ VARIABLE DECLARATION
        #region timers
        private int intDisplayCountdownToRefresh; // countdown in seconds to next refresh, for display only
        private int APIGroup1DisplayTimerIntervalSecsConstant = 60; // seconds, used to reset the countdown display to its original number
        private int APIRefreshFrequency = 1; // mins. Default value 1. Initial value only
        #endregion
        #region header variables
        bool isTextBoxUniversalSearchWatermarkTextDisplayed = true; // header for watermarked universal search
        bool firstTimeGettingBlockTip = true;
        string searchTarget = string.Empty; // used to determine what the search button will search for
        int totalSecondsSinceLastBlock;
        #endregion
        #region address screen variables
        private int TotalAddressTransactionRowsAdded; // keeps track of how many rows of Address transactions have been added to the listview
        int rowsReturnedByAddressTransactionsAPI; // holds number of rows returned by api (differs betweem mempool.space and own node)
        private string addressScreenConfUnconfOrAllTx = "chain"; // used to keep track of whether we're doing transactions requests for conf, unconf, or all transactions
        bool PartOfAnAllAddressTransactionsRequest; // 'all' transactions use an 'all' api for the first call, but afterwards mempoolConforAllTx is set to chain for remaining (confirmed) txs. This is used to keep headings, etc consistent
        #endregion
        #region address UTXO screen variables
        private int TotalAddressUTXORowsAdded; // keeps track of how many rows of Address UTXOs have been added to the listview
        private int addressUTXOsScrollPosition; // used to remember position in scrollable panel to return to that position after paint event
        private bool isUTXOSButtonPressed;
        private bool UTXOsDownButtonPressed;
        private bool UTXOsUpButtonPressed;
        #endregion
        #region mining pools screens
        Color panelColour;
        string poolNameToPass = "empty"; // used to preselect a pool on the poolslist (e.g when selected from the pools by hashrate or pools by blocks screens)
        #region pools by block screen variables
        private int poolsBlocksScrollPosition;
        private bool isPoolsBlocksButtonPressed;
        private bool PoolsBlocksDownButtonPressed;
        private bool PoolsBlocksUpButtonPressed;
        string poolsBlocksTimePeriod = "all";
        #endregion
        #region pools by hashrate screen variables
        private int poolsHashrateScrollPosition;
        private bool isPoolsHashrateButtonPressed;
        private bool PoolsHashrateDownButtonPressed;
        private bool PoolsHashrateUpButtonPressed;
        string poolsHashrateTimePeriod = "all";
        #endregion
        #region mining pools screen variables
        private int poolsListScrollPosition;
        private bool isPoolsListButtonPressed;
        private bool PoolsListDownButtonPressed;
        private bool PoolsListUpButtonPressed;
        #endregion
        #endregion
        #region transaction screen variables
        private int TransactionOutputsScrollPosition; // used to remember position in scrollable panel to return to that position after paint event
        private int TransactionInputsScrollPosition; // used to remember position in scrollable panel to return to that position after paint event
        private bool isInputButtonPressed;
        private bool InputDownButtonPressed;
        private bool InputUpButtonPressed;
        private bool isOutputButtonPressed;
        private bool OutputDownButtonPressed;
        private bool OutputUpButtonPressed;
        private readonly List<Point> linePoints = new List<Point>(); // used to store coordinates for all the lines on the transaction screen
        #endregion
        #region xpub screen variables
        bool xpubScanComplete; // when true the progress bars will disappear after 10 secs
        private bool xpubValid;
        private bool isXpubButtonPressed;
        private bool XpubDownButtonPressed;
        private bool XpubUpButtonPressed;
        private string previousXpubScreenOwnNodeURLStringToCompare = string.Empty;
        private int XpubAddressesScrollPosition; // used to remember position in scrollable panel to return to that position after paint event
        #endregion
        #region block screen variables
        private int TotalBlockTransactionRowsAdded; // keeps track of how many rows of Block transactions have been added to the listview
        int rowsReturnedByBlockTransactionsAPI; // holds number of rows returned by api (differs betweem mempool.space and own node)
        #endregion
        #region directory screen variables
        private bool linkClicked; // used to supress multiple events (and multiple browser tabs) when opening external link in default browser
        #endregion
        #region bookmark screen variables
        private int bookmarksScrollPosition; // used to remember position in scrollable panel to return to that position after paint event
        string bookmarkDataInFullPreserved = string.Empty;
        string bookmarkNoteInFullPreserved = string.Empty;
        string bookmarkKeyCheckPreserved = string.Empty;
        private bool isBookmarksButtonPressed;
        private bool bookmarksDownButtonPressed;
        private bool bookmarksUpButtonPressed;
        private bool isBookmarkKeyWatermarkTextDisplayed = true;
        #endregion
        #region add bookmark tab variables
        private bool isBookmarkNoteWatermarkTextDisplayed = true;
        private bool isEncryptionKeyWatermarkTextDisplayed = true;
        #endregion
        #region blocks screen variables
        private string storedLastSeenBlockNumber = "0"; // restart point to retrieve blocks for block list
        #endregion
        #region btc dashboard variables
        private bool ObtainedHalvingSecondsRemainingYet; // used to check whether we know halvening seconds before we start trying to subtract from them
        double highestAbsValuePriceChange = 0; // holds highest ABS value of periodical percentage changes, used to set max values on progress bars
        #endregion
        #region settings variables
        readonly double UIScale = 3; // defaults to 150%
        double UIScaleToBeSavedToSettings = 3; // (1 = 100%, 2 = 125%, 3 = 150%, 4 = 175%, 5 = 200%)
        bool UIScaleAlreadySavedInFile; // is a UIScale saved in the settings file
        string UIScaleInFile = "3"; // the UIScale saved in the settingss file
        bool offlineMode; // disables all comms apart from to full node
        bool testNet; // testnet or mainnet
        bool isTextBoxSettingsOwnNodeURLWatermarkTextDisplayed = true; // settings screen for watermarked node field
        bool preventSavingSettings = true; // suppress auto-saves during initial launch.
        private string NodeURL = "https://mempool.space/api/"; // default value. Can be changed by user.
        private string xpubNodeURL = string.Empty; // no default value. User must provide path to own node
        string currentlyActiveTheme = string.Empty; // used to prevent user from deleting active theme
        string currencySelected = "D"; // for settings record in settings file
        string alwaysOnTop = "0"; // for settings record in settings file
        string selectedNetwork = "M"; // for settings record in settings file
        string coingeckoAPISelected = "1";
        string mempoolSpacePriceAPISelected = "1";
        string messariJSONSelected = "1"; // for settings record in settings file
        string coinbaseEnpointsSelected = "1"; // for settings record in settings file
        string blockchainInfoEndpointsSelected = "1"; // for settings record in settings file
        string OfflineModeSelected = "0"; // for settings record in settings file 
        string startupScreenToSave = string.Empty; // for settings record in settings file
        bool enableDirectory = true; // enable or disable links directory
        string directoryEnabled = "1"; // for settings record in settings file
        string ownNode = string.Empty;
        string defaultTheme = "Genesis (preset)";
        #endregion
        #region data services
        private UTXOsForAddressService _UTXOsForAddressService = new UTXOsForAddressService("");
        private PoolsByBlockService _PoolsByBlockService = new PoolsByBlockService("");
        private PoolsByHashrateService _PoolsByHashrateService = new PoolsByHashrateService("");
        private TransactionsForAddressService _transactionsForAddressService = new TransactionsForAddressService("");
        private TransactionsForXpubAddressService _transactionsForXpubAddressService = new TransactionsForXpubAddressService("");
        private BlockDataService _blockService = new BlockDataService("");
        private TransactionService _transactionService = new TransactionService("");
        private TransactionsForBlockService _transactionsForBlockService = new TransactionsForBlockService("");
        private HashrateAndDifficultyService _hashrateAndDifficultyService = new HashrateAndDifficultyService("");
        private HistoricPriceDataService _historicPriceDataService = new HistoricPriceDataService();
        private MarketCapDataService _marketCapDataService = new MarketCapDataService();
        private BitcoinsInCirculationDataService _bitcoinsInCirculationDataService = new BitcoinsInCirculationDataService();
        private BlockSizeAndWeightService _blockSizeAndWeightService = new BlockSizeAndWeightService("");
        private UniqueAddressesDataService _uniqueAddressesDataService = new UniqueAddressesDataService();
        private UTXODataService _utxoDataService = new UTXODataService();
        private PoolsRankingDataService _poolsRankingDataService = new PoolsRankingDataService("");
        private MiningPoolsListService _miningPoolsListService = new MiningPoolsListService("");
        private BlocksByPoolService _blocksByPoolService = new BlocksByPoolService("");
        private PoolHashrateService _poolHashrateService = new PoolHashrateService("");
        private PoolDataService _poolDataService = new PoolDataService("");
        private CoinGeckoMarketDataService _coinGeckoMarketDataService = new CoinGeckoMarketDataService();
        private MessariMarketDataService _MessariMarketDataService = new MessariMarketDataService();
        #endregion
        #region api use flag variables
        private bool RunCoinbaseAPI = true; // enable/disable API
        private bool RunBlockchainInfoAPI = true; // enable/disable API
        private bool RunMessariAPI = true; // enable/disable API
        private bool RunMempoolSpaceLightningAPI = true; // enable/disable API
        private bool RunCoingeckoAPI = true; // enable/disable API
        private bool RunMempoolSpacePriceAPI = true;
        #endregion
        #region variables to hold button states
        bool dontDisableButtons = true; // ignore button disables during initial setup

        bool BtnViewTransactionFromAddressUTXOWasEnabled; // Address screen - store button state during queries to return to that state afterwards
        bool BtnViewBlockFromAddressUTXOWasEnabled; // Address screen - store button state during queries to return to that state afterwards
        bool textBoxSubmittedAddressUTXOWasEnabled = true; // Address screen - store button state during queries to return to that state afterwards

        bool btnShowAllAddressTXWasEnabled = true; // Address screen - store button state during queries to return to that state afterwards
        bool btnShowConfirmedAddressTXWasEnabled; // Address screen - store button state during queries to return to that state afterwards
        bool btnShowUnconfirmedAddressTXWasEnabled = true; // Address screen - store button state during queries to return to that state afterwards
        bool BtnViewTransactionFromAddressWasEnabled; // Address screen - store button state during queries to return to that state afterwards
        bool textBoxSubmittedAddressWasEnabled = true; // Address screen - store button state during queries to return to that state afterwards
        bool btnPreviousBlockTransactionsWasEnabled; // Block screen - store button state during queries to return to that state afterwards
        bool btnNextBlockTransactionsWasEnabled; // Block screen - store button state during queries to return to that state afterwards
        bool numericUpDownSubmittedBlockNumberWasEnabled = true; // Block screen - store button state during queries to return to that state afterwards
        bool btnNumericUpDownSubmittedBlockNumberUpWasEnabled = true; // Block screen - store button state during queries to return to that state afterwards
        bool btnNumericUpDownSubmittedBlockNumberDownWasEnabled = true; // Block screen - store button state during queries to return to that state afterwards
        bool btnNextBlockWasEnabled; // Block screen - store button state during queries to return to that state afterwards
        bool btnLookUpBlockWasEnabled; // Block screen - store button state during queries to return to that state afterwards
        bool btnPreviousBlockWasEnabled = true; // Block screen - store button state during queries to return to that state afterwards
        bool btnLookUpBlockListWasEnabled = true; // Block List screen - store button state during queries to return to that state afterwards
        bool btnViewBlockFromBlockListWasEnabled; // Block List screen - store button state during queries to return to that state afterwards
        bool btnViewPoolFromBlockListWasEnabled; // Block List screen - store button state during queries to return to that state afterwards
        bool btnNewer15BlocksWasEnabled; // Block List screen - store button state during queries to return to that state afterwards
        bool btnOlder15BlocksWasEnabled = true; // Block List screen - store button state during queries to return to that state afterwards
        bool numericUpDownBlockHeightToStartListFromWasEnabled = true; // Block List screen - store button state during queries to return to that state afterwards
        bool btnNumericUpDownBlockHeightToStartListFromUpWasEnabled = true; // Block List screen - store button state during queries to return to that state afterwards
        bool btnNumericUpDownBlockHeightToStartListFromDownWasEnabled = true; // Block List screen - store button state during queries to return to that state afterwards
        bool btnHashrateScaleLinearWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnHashrateScaleLogWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartDifficultyLinearWasEnabled; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartDifficultyLogWasEnabled; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartAddressScaleLinearWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartAddressScaleLogWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnPriceChartScaleLogWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnPriceChartScaleLinearWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartMarketCapLogWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartMarketCapLinearWasEnabled = true;
        bool btnTransactionInputsUpWasEnabled; // Transaction screen - store button state during queries to return to that state afterwards
        bool btnTransactionInputDownWasEnabled; // Transaction screen - store button state during queries to return to that state afterwards
        bool btnTransactionOutputsUpWasEnabled; // Transaction screen - store button state during queries to return to that state afterwards
        bool btnTransactionOutputsDownWasEnabled; // Transaction screen - store button state during queries to return to that state afterwards
        bool btnViewAddressFromTXInputWasEnabled; // Transaction screen - store button state during queries to return to that state afterwards
        bool btnViewAddressFromTXOutputWasEnabled; // Transaction screen - store button state during queries to return to that state afterwards
        private bool isSubmittedBlockNumberUpHeldDown; // Block screen - stores numericupdown button states for continuous value changes
        private bool isSubmittedBlockNumberDownHeldDown; // Block screen - stores numericupdown button states for continuous value changes
        private bool isBlockHeightToStartFromUpHeldDown; // Blocks screen - stores numericupdown button states for continuous value changes
        private bool isBlockHeightToStartFromDownHeldDown; // Blocks screen - stores numericupdown button states for continuous value changes
        private bool isDataRefreshPeriodUpHeldDown; // Settings screen - stores numericupdown button states for continuous value changes
        private bool isDataRefreshPeriodDownHeldDown; // Settings screen - stores numericupdown button states for continuous value changes
        private bool isZeroBalanceAdddressUpHeldDown; // Xpub screen - stores numericupdown button states for continuous value changes
        private bool isZeroBalanceAdddressDownHeldDown; // Xpub screen - stores numericupdown button states for continuous value changes
        private bool isDerivationPathsUpHeldDown; // Xpub screen - stores numericupdown button states for continuous value changes
        private bool isDerivationPathsDownHeldDown; // Xpub screen - stores numericupdown button states for continuous value changes
        private bool isOpacityUpHeldDown; // Create theme screen - stores numericupdown button states for continuous value changes
        private bool isOpacityDownHeldDown; // Create theme screen - stores numericupdown button states for continuous value changes
        #endregion
        #region variables used to hold scroll increments for scrollbars
        int addressUTXOScrollbarIncrement;
        int txInScrollbarIncrement;
        int txOutScrollbarIncrement;
        int xpubScrollbarIncrement;
        int poolsBlocksScrollbarIncrement;
        int poolsListScrollbarIncrement;
        int bookmarksScrollbarIncrement;
        #endregion
        #region colour variables
        Color subItemBackColor = Color.FromArgb(20, 20, 20);
        Color labelColor = Color.FromArgb(20, 20, 20);
        Color chartsBackgroundColor = Color.FromArgb(20, 20, 20);
        Color linesColor = Color.FromArgb(106, 72, 9);
        Color titleBackgroundColor = Color.FromArgb(0, 0, 0);
        Color listViewHeaderColor = Color.FromArgb(50, 50, 50);
        Color listViewHeaderTextColor = Color.Silver;
        Color tableTextColor = Color.FromArgb(255, 153, 0);
        #endregion
        #region variables specific to chart screen
        private int LastHighlightedIndex = -1; // used by charts for mousemove events to highlight plots closest to pointer
        private ScottPlot.Plottable.ScatterPlot? scatter; // chart data gets plotted onto this
        private ScottPlot.Plottable.MarkerPlot? HighlightedPoint; // highlighted (closest to pointer) plot gets plotted onto this
        bool ignoreMouseMoveOnChart; // ignore mouse move event while chart is still drawing
        string chartPeriod = "all"; // holds the string needed to generate charts with different time periods
        string chartType = string.Empty; // keeps track of what type of chart is being displayed
        int previouslyShownChart; // combobox reverts to this if a disabled chart is selected
        bool chartRendered; // if false, navigating to chart screen shows default feerates chart
        #endregion
        #region expanding panels
        private int currentHeightExpandingPanel;
        private int currentWidthExpandingPanel;
        private int currentWidthShrinkingPanel;
        private int panelMaxHeight;
        private int panelMaxWidth;
        private int panelMinWidth;
        private Panel panelToExpandVert = new Panel(); // panel animation vertical
        private Panel panelToExpand = new Panel(); // panel animation horizontal
        private Panel panelToShrink = new Panel(); // panel animation horizontal
        #endregion
        #region misc
        bool firstTimeLoadingScreen = true;
        bool firstTimeCustomThemeIndexChanged = true;
        double DCAFrequencyDays = 1; // for dca calculator screen
        Axis? yAxis3; // dca chart
        string ActiveChart = "FeeRates"; // used to determine which chart needs refreshing when a theme change takes place
        bool firstThemeChange = true;
        bool readyToShowRedAndGreenLabelsYet;
        bool readyToShowPriceChangeLabelYet;
        bool fullScreenLoadingScreenVisible; // if the full size loading screen is visible, the smaller one won't be shown on top of it
        decimal calculatedBTCInCirculation = 0;
        private FullSizeLoadingScreen? fullSizeLoadingScreen;
        private LoadingScreen? loadingScreen;
        bool partialLoadingScreenVisible; // flag for non-full size loading screen
        #endregion
        #region market variables
        bool gotMarketDataInLastFewSecs = true; // avoids running getmarketdata() twice at startup.
        decimal OneBTCinSelectedCurrency = 0; // used to perform fiat conversions throughout SATSuma
        string OneBTCInUSD = "0";
        string OneBTCInEUR = "0";
        string OneBTCInGBP = "0";
        string OneBTCInXAU = "0";
        #endregion
        #region counters used as variables in DoTimerBasedStuff()
        int intNodeStatusLightTimeLightLit;
        int intCoingeckoTimeLightLit;
        int intMempoolspaceTimeLightLit;
        int intCoinbaseTimeLightLit;
        int intSavingSettingsTimeLightLit;
        int intAddToBookmarksMessageTimeLightLit;
        int intTimeUntilXpubProgressBarsHidden;
        int intHideAddToBookmarksTimeShown;
        int intExternalLinkClickedFlagToFalse;
        int intThemeNameInUseMessageTimeShown;
        int intThemeDeletedMessageTimeShown;
        int intThemeSavedMessageTimeShown;

        #endregion
        bool DCAChartRendered; // if false, an initial dca illustration will be made when selected from menu
        #endregion
        //![](resources\tinylogo1.png;;;0.04706,0.04877)
        #region ⚡⚡⚡ INITIALISE

        #region custom move form button
        [DllImport("user32.dll", EntryPoint = "ReleaseCapture")]  // needed for the code that moves the form as not using a standard control
        private extern static void ReleaseCapture();

        [DllImport("user32.dll", EntryPoint = "SendMessage")] // needed for the code that moves the form as not using a standard control
        private extern static void SendMessage(System.IntPtr hwnd, int wmsg, int wparam, int lparam);
        #endregion

        public SATSuma()
        {
            this.SetStyle(ControlStyles.OptimizedDoubleBuffer | ControlStyles.AllPaintingInWmPaint, true);

            #region check user data files exist and restore them from restore folder if they don't
            // files to be checked
            string appDataFolder = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
            string bookmarkFilePath = Path.Combine(appDataFolder, "SATSuma", "SATSuma_bookmarks.json");
            string themeFilePath = Path.Combine(appDataFolder, "SATSuma", "SATSuma_themes.json");
            string settingsFilePath = Path.Combine(appDataFolder, "SATSuma", "SATSuma_settings.json");
            // files to be restored if necessary
            string backupFolder = Path.Combine(Application.StartupPath, "Restore");
            string backupBookmarkFilePath = Path.Combine(backupFolder, "SATSuma_bookmarks.json");
            string backupThemeFilePath = Path.Combine(backupFolder, "SATSuma_themes.json");
            string backupSettingsFilePath = Path.Combine(backupFolder, "SATSuma_settings.json");
            // restore files
            if (!File.Exists(bookmarkFilePath))
            {
                // Ensure the directory exists before copying the file
                Directory.CreateDirectory(Path.GetDirectoryName(bookmarkFilePath));
                File.Copy(backupBookmarkFilePath, bookmarkFilePath);
            }

            if (!File.Exists(themeFilePath))
            {
                // Ensure the directory exists before copying the file
                Directory.CreateDirectory(Path.GetDirectoryName(themeFilePath));
                File.Copy(backupThemeFilePath, themeFilePath);
            }

            if (!File.Exists(settingsFilePath))
            {
                // Ensure the directory exists before copying the file
                Directory.CreateDirectory(Path.GetDirectoryName(settingsFilePath));
                File.Copy(backupSettingsFilePath, settingsFilePath);
            }
            #endregion

            #region get settings and themes data
            // get all the settings from the settings file
            SettingsManager.Initialize();
            // get all the themes from the themes file
            ThemesManager.Initialize();
            #endregion

            #region restore saved UIScale
            RestoreUIScale(); // read UIScale from settings file

            Dictionary<string, double> scaleMap = new Dictionary<string, double> // Translate saved UIScale value (1-5) into an actual UIScale value we can use
            {
                { "1", 1 },
                { "2", 1.25 },
                { "3", 1.5 },
                { "4", 1.75 },
                { "5", 2 }
            };

            if (UIScaleAlreadySavedInFile) // Set user's choice of UIScale
            {
                if (scaleMap.ContainsKey(UIScaleInFile))
                {
                    UIScale = scaleMap[UIScaleInFile];
                }
            }
            else // If nothing in settings, set it to the default 150% and save to settings
            {
                UIScale = 1.5;
            }

            InitializeComponent();

            // set the form dimensions
            this.Width = (int)(940 * UIScale);
            this.Height = (int)(754 * UIScale);

            #endregion

            #region rounded panels and form
            #region rounded panels
            Control[] panelsToRound = { panel194, panel198, panel192, panel193, panel7, panel109, panelXpubContainer, panelXpubScrollContainer, panel32, panel74, panel76, panel77, panel99, panel84, panel88, panel89, panel90, panel86, panel87, panel103, panel46, panel51, panel91, panel70, panel71, panel16, panel21, panel85, panel53, panel96, panel106, panel107, panel92, panelAddToBookmarks, panelAddToBookmarksBorder,
                panelLeftPanel, panelOwnNodeAddressTXInfo, panelOwnNodeBlockTXInfo, panelTransactionMiddle, panelErrorMessage, panelSettingsUIScale, panelSettingsUIScaleContainer, panelDCAMessages, panelDCASummary, panelDCAInputs, panel119, panelPriceConvert, panelDCAChartContainer, panel117, panel121,
                panel122, panel101, panel27, panel132, panelPriceSourceIndicators, panelUTXOsContainer, panel137, panelAddressUTXOScrollContainer, panelBookmarksContainer, panelBookmarksScrollContainer, panelPoolsBlocksContainer, panelPoolsHashrateContainer, panelPoolsBlocksScrollContainer, panel147, panel80, panel153, panel158, panelPoolsListScrollContainer,
                panelTransactionInputs, panelTransactionOutputs, panelTXInScrollContainer, panelTXOutScrollContainer, panelAddressTxContainer, panel120, panel123, panel124, panelPriceSourceIndicatorsOuter, panelBookmarksScrollbarInner, panelTXInScrollbarInner, panelTXOutScrollbarInner, panelAddressUTXOScrollbarInner, panelPoolsBlocksScrollbarInner, panelXpubScrollbarInner, panelUTXOError, panel133, panel134, panel188, panel189, panel190, panel191 };
            foreach (Control control in panelsToRound)
            {
                control.Paint += Panel_Paint;
            }
            #endregion
            #region rounded panels (textbox containers)
            Control[] panelContainersToRound = { panelThemeNameContainer, panelOptionalNotesContainer, panelEncryptionKeyContainer, panelSubmittedAddressContainer, panelBlockHeightToStartFromContainer, panelTransactionIDContainer, panelSubmittedXpubContainer, panelXpubScreenOwnNodeURLContainer, panelBookmarkKeyContainer,
                panelConvertBTCToFiatContainer, panelConvertUSDToBTCContainer, panelConvertEURToBTCContainer, panelConvertGBPToBTCContainer, panelConvertXAUToBTCContainer, panelSettingsOwnNodeURLContainer, panelAppearanceTextbox1Container, panelComboBoxStartupScreenContainer, panelCustomizeThemeListContainer,
                panelHeadingBackgroundSelect, panelSelectBlockNumberContainer, panelUniversalSearchContainer, panel75, panel95, panel93, panel98, panel111, panel113, panel114, panel115, panelSubmittedAddressContainerUTXO, panelComboBoxChartSelectContainer, panel149, panel173, panel174, panel175, panel176, panelPoolsListScrollbarInner };
            foreach (Control control in panelContainersToRound)
            {
                control.Paint += Panel_Paint;
            }
            #endregion
            #region panels (heading containers)
            Control[] panelHeadingContainersToRound = { panel1, panel2, panel3, panel4, panel5, panel6, panel8, panel9, panel10, panel11, panel12, panel20, panel23, panel26, panel29, panel31, panel38, panel39, panel40, panel41, panel42, panel43, panel44, panel45, panel78,
                panel94, panelLoadingAnimationContainer, panel141, panel136, panel139, panel138, panel145, panel81, panel146, panel24 };
            foreach (Control control in panelHeadingContainersToRound)
            {
                control.Paint += Panel_Paint;
            }
            #endregion
            #region rounded panels ('tabs' beneath listviews)
            Control[] panelsToTab = { panelBlockTransactionsTab, panelBlockListTab, panelAddressTXTab, panelAddressUTXOTab, panelTransactionInTab, panelTransactionOutTab };
            foreach (Control control in panelsToTab)
            {
                control.Paint += PanelTab_Paint;
            }
            #endregion
            #region rounded form
            this.FormBorderStyle = FormBorderStyle.None;
            Region = System.Drawing.Region.FromHrgn(CreateRoundRectRgn(0, 0, Width, Height, 30, 30));
            // Add a 1-pixel border around the form
            Padding = new Padding(1);
            #endregion
            #endregion
        }

        private async void SATSuma_LoadAsync(object sender, EventArgs e)
        {
            try
            {
                #region apply saved UIScale
                StoreOriginalDimensions(this);

                #region apply UIScale to all controls
                ScaleAllElements();
                #endregion

                #region restore UIScale labels on settings screen and disable/enable bigger/smaller buttons

                Dictionary<string, string> scaleTextMap = new Dictionary<string, string> // Transalte saved UIScale value (1-5) to strings to display on the settings screen
                {
                    //{ "1", "smallest" },
                    //{ "2", "small" },
                    { "3", "normal" },
                    { "4", "big" },
                    { "5", "biggest" }
                };
                if (String.Compare(UIScaleInFile, "3") == 0)
                {
                    lblScaleAmount.Invoke((MethodInvoker)delegate
                    {
                        lblScaleAmount.Text = scaleTextMap["3"];
                    });
                    btnSmallerScale.Invoke((MethodInvoker)delegate
                    {
                        btnSmallerScale.Enabled = false;
                    });
                }
                else if (scaleTextMap.ContainsKey(UIScaleInFile))
                {
                    lblScaleAmount.Invoke((MethodInvoker)delegate
                    {
                        lblScaleAmount.Text = scaleTextMap[UIScaleInFile];
                    });

                    if (String.Compare(UIScaleInFile, "5") == 0)
                    {
                        lblScaleAmount.Invoke((MethodInvoker)delegate
                        {
                            lblScaleAmount.Text = scaleTextMap["5"];
                        });
                        btnBiggerScale.Invoke((MethodInvoker)delegate
                        {
                            btnBiggerScale.Enabled = false;
                        });
                    }
                }
                #endregion

                #endregion

                #region display loading screen
                bool wasOnTop = false;
                fullSizeLoadingScreen = new FullSizeLoadingScreen(UIScale)
                {
                    Owner = this,
                    StartPosition = FormStartPosition.CenterParent,
                    FormBorderStyle = FormBorderStyle.None,
                    BackColor = panel84.BackColor, // Set the background color to match panel colours
                    Opacity = 1,
                    LabelColor = label77.ForeColor,
                    Version = $"v{CurrentVersion}",
                    OtherText = lblCurrentVersion.ForeColor
                };

                if (this.TopMost == true)
                {
                    wasOnTop = true;
                    this.TopMost = false;
                }
                if (!fullScreenLoadingScreenVisible)
                {
                    fullScreenLoadingScreenVisible = true;

                    fullSizeLoadingScreen.StartPosition = FormStartPosition.CenterParent;

                    // Calculate the overlay form's location to place it in the center of the parent form
                    fullSizeLoadingScreen.StartPosition = FormStartPosition.Manual;
                    int parentCenterX = this.Location.X + this.Width / 2;
                    int parentCenterY = this.Location.Y + this.Height / 2;
                    int overlayX = parentCenterX - fullSizeLoadingScreen.Width / 2;
                    int overlayY = parentCenterY - fullSizeLoadingScreen.Height / 2;
                    fullSizeLoadingScreen.Location = new Point(overlayX, overlayY);
                    fullSizeLoadingScreen.Show(this);
                }
                #endregion

                #region restore saved settings
                UpdateLoadingScreenMessage("Restoring saved settings...", "Restoring preferences...");
                RestoreSavedSettings(); // api choices, node, xpub node, theme
                #endregion
                #region check network
                UpdateLoadingScreenMessage("Checking connection...", "Initialising...");
                await CheckNetworkStatusAsync().ConfigureAwait(true);
                #endregion
                #region set/get some initial values (e.g block height, price)
                UpdateLoadingScreenMessage("Getting block height and market data...", "Initialising...");
                panelErrorMessage.Invoke((MethodInvoker)delegate
                {
                    panelErrorMessage.Width = 0;
                });
                lblCurrentVersion.Invoke((MethodInvoker)delegate
                {
                    lblCurrentVersion.Text = $"v{CurrentVersion}";
                    lblCurrentVersion.Location = new Point((lblSatsumaTitle.Location.X + lblSatsumaTitle.Width) - (int)(8 * UIScale), lblCurrentVersion.Location.Y);
                });
                await GetBlockTipAndCirculationAsync().ConfigureAwait(true);
                GetMarketData();

                #region initial values for DCA calculator
                rjDatePickerDCAStartDate.MaxDate = DateTime.Today;
                rjDatePickerDCAEndDate.MaxDate = DateTime.Today;
                rjDatePickerDCAStartDate.Value = new DateTime(2016, 3, 4);
                rjDatePickerDCAEndDate.Value = DateTime.Today;
                comboBoxDCAFrequency.SelectedIndex = 2; // default to monthly
                yAxis3 = formsPlotDCA.Plot.AddAxis(Edge.Right, axisIndex: 2, color: btnMenuDirectory.ForeColor);
                #endregion

                #endregion
                #region populate dashboards and start the timers ticking

                #region Bitcoin dashboard
                UpdateLoadingScreenMessage("Gatting dashboard data...", "Initialising...");
                _ = UpdateBitcoinAndLightningDashboardsAsync(); // setting them now avoids waiting a whole minute for the first refresh
                #endregion

                #region start the timers
                UpdateLoadingScreenMessage("Starting timers...", "Initialising...");
                StartTheClocksTicking();
                #endregion
                #endregion
                dontDisableButtons = false; // from here on, buttons are disabled during queries
                #region set more initial values and populate directory screen
                PopulateThemeComboboxes();
                LoadAndStyleDirectoryBrowser();
                TextBoxSettingsOwnNodeURL_Leave(sender, e); // sets an intial value for path to node to an example url 
                lblHeaderPriceChange.Text = $"+{fiatSymbol}0"; // sets an initial value for pricechange. This value will only be seen if the price doesn't change after the first time it's been retrieved.
                lblUpdateFlasher.Location = new Point((lblOpenHelpAboutMenu.Location.X + lblOpenHelpAboutMenu.Width) - (int)(3 * UIScale), lblUpdateFlasher.Location.Y);
                #endregion
                #region navigate to the saved startup screen
                Dictionary<string, Action> buttonClickEvents = new Dictionary<string, Action>
                {
                    { "blocks", () => BtnMenuBlockList_ClickAsync(sender, e) },
                    { "block", () => BtnMenuBlock_ClickAsync(sender, e) },
                    { "address - tx's", () => BtnMenuAddress_ClickAsync(sender, e) },
                    { "address - utxo's", () => BtnMenuAddressUTXO_ClickAsync(sender, e) },
                    { "transaction", () => BtnMenuTransaction_ClickAsync(sender, e) },
                    { "xpub", () => BtnMenuXpub_ClickAsync(sender, e) },
                    { "bitcoin dashboard", () => BtnMenuBitcoinDashboard_ClickAsync(sender, e) },
                    { "lightning dashboard", () => BtnMenuLightningDashboard_ClickAsync(sender, e) },
                    { "bookmarks", () => BtnMenuBookmarks_ClickAsync(sender, e) },
                    { "directory", () => BtnMenuDirectory_ClickAsync(sender, e) },
                    { "chart - fee rates", () => { BtnMenuCharts_ClickAsync(sender, e); ChartFeeRatesAsync(); } },
                    { "chart - block fees", () => { BtnMenuCharts_ClickAsync(sender, e); ChartBlockFeesAsync(); } },
                    { "chart - block reward", () => { BtnMenuCharts_ClickAsync(sender, e); ChartRewardAsync(); } },
                    { "chart - block size", () => { BtnMenuCharts_ClickAsync(sender, e); ChartBlockSizeAsync(); } },
                    { "chart - hashrate", () => { BtnMenuCharts_ClickAsync(sender, e); ChartHashrateAsync(); } },
                    { "chart - difficulty", () => { BtnMenuCharts_ClickAsync(sender, e); ChartDifficultyAsync(); } },
                    { "chart - circulation", () => { BtnMenuCharts_ClickAsync(sender, e); ChartCirculationAsync(); } },
                    { "chart - addresses", () => { BtnMenuCharts_ClickAsync(sender, e); ChartUniqueAddressesAsync(); } },
                    { "chart - UTXO's", () => { BtnMenuCharts_ClickAsync(sender, e); ChartUTXOAsync(); } },
                    { "chart - pools ranking", () => { BtnMenuCharts_ClickAsync(sender, e); ChartPoolsRankingAsync(); } },
                    { "chart - ⚡nodes by network", () => { BtnMenuCharts_ClickAsync(sender, e); ChartNodesByNetworkAsync(); } },
                    { "chart - ⚡nodes by country", () => { BtnMenuCharts_ClickAsync(sender, e); ChartNodesByCountryAsync(); } },
                    { "chart - ⚡channels", () => { BtnMenuCharts_ClickAsync(sender, e); ChartLightningChannelsAsync(); } },
                    { "chart - price", () => { BtnMenuCharts_ClickAsync(sender, e); ChartPriceAsync(); } },
                    { "chart - market cap.", () => { BtnMenuCharts_ClickAsync(sender, e); ChartMarketCapAsync(); } },
                    { "btc/fiat converter", () => BtnMenuPriceConverter_ClickAsync(sender, e)},
                    { "dca calculator", () => BtnMenuDCACalculator_ClickAsync(sender, e) },
                    { "mining pools", () => BtnMenuMiningPools_ClickAsync(sender, e) },
                    { "pool rankings", () => BtnMenuPoolsByBlocks_ClickAsync(sender, e) }
                };
                if (buttonClickEvents.TryGetValue(comboBoxStartupScreen.Texts, out Action buttonClickEvent))
                {
                    buttonClickEvent.Invoke();
                }
                else
                {
                    BtnMenuBitcoinDashboard_ClickAsync(sender, e);
                }
                #endregion
                #region close loading screen                
                //close the loading screen
                await Wait2SecsAsync().ConfigureAwait(true);
                fullSizeLoadingScreen.Close();
                fullScreenLoadingScreenVisible = false;

                if (wasOnTop)
                {
                    this.TopMost = true;
                }
                #endregion
                #region check for updates to SATSuma
                CheckForUpdates();
                #endregion
            }
            catch (WebException ex)
            {
                HandleException(ex, "SATSuma_Load");
            }
        }

        #endregion
        //![](resources\tinylogo1.png;;;0.04706,0.04877)
        #region ⚡⚡⚡ CLOCK TICK EVENTS
        private void StartTheClocksTicking()
        {
            try
            {
                APIRefreshFrequency = Convert.ToInt32(numericUpDownDashboardRefresh.Value);
                intDisplayCountdownToRefresh = (APIRefreshFrequency * 60); //turn minutes into seconds. This is the number used to display remaning time until refresh
                APIGroup1DisplayTimerIntervalSecsConstant = (APIRefreshFrequency * 60); //turn minutes into seconds. This is kept constant and used to reset the timer to this number
                timer1Sec.Start(); // timer used to refresh the clock values
            }
            catch (Exception ex)
            {
                HandleException(ex, "StartTheClocksTicking");
            }
        }

        private void Timer1Sec_Tick(object sender, EventArgs e) // update the time (if displayed) and refresh countdowns, countups, etc
        {
            try
            {
                this.SuspendLayout();
                #region large 'countdown to refresh' progress bar
                progressBarRefreshData.Value = (progressBarRefreshData.Maximum - (((intDisplayCountdownToRefresh - 1) * 1000) + 1000));
                timer50thSec.Start();
                #endregion
                #region update clocks, timers, reset messages, status lights, and refresh data if required
                // clock visible on genesis theme only
                UpdateOnScreenClock();

                // countdown in lower-left corner
                UpdateOnScreenCountdownFlashLightsRefreshData();
                // seconds to halving on bitcoin dashboard
                UpdateSecondsToHalving();

                if (intDisplayCountdownToRefresh < 11) // when there are only 10 seconds left until the refresh, clear error alert symblol & error message
                {
                    readyToShowRedAndGreenLabelsYet = true; // we suppressed red/green changes on fields at startup, but we're ready to start colouring them now
                    readyToShowPriceChangeLabelYet = true;
                    ClearAlertAndErrorMessage();
                }
                // anything timer based - hiding controls, messages, dim lights that have been flashed, reset flags, etc
                DoTimerBasedStuffAsync();
                #endregion
                #region time since last block mined on header
                totalSecondsSinceLastBlock++;
                int minutesSinceLastBlock = totalSecondsSinceLastBlock / 60;
                int secondsSinceLastBlock = totalSecondsSinceLastBlock % 60;
                string formattedTime = $"{minutesSinceLastBlock}m {secondsSinceLastBlock}s ago";
                lblHeaderBlockAge.Invoke((MethodInvoker)delegate
                {
                    lblHeaderBlockAge.Text = formattedTime;
                });
                #endregion
                #region flash the update button if update available
                if (lblUpdaterLight.Visible)
                {
                    if (secondsSinceLastBlock % 2 == 0)
                    {
                        btnMenuSplash.Invoke((MethodInvoker)delegate
                        {
                            btnMenuSplash.ForeColor = Color.FromArgb(255, 153, 0);
                        });
                        lblUpdateFlasher.Visible = true;

                    }
                    else
                    {
                        btnMenuSplash.Invoke((MethodInvoker)delegate
                        {
                            btnMenuSplash.ForeColor = btnMenuSettings.ForeColor;
                        });
                        lblUpdateFlasher.Visible = false;
                    }
                }
                else
                {
                    lblUpdateFlasher.Visible = false;
                }
                #endregion
                #region reset node activity light
                headerSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                {
                    headerSelectedNodeStatusLight.ForeColor = Color.OliveDrab;
                });
                #endregion
                this.ResumeLayout(false);
            }
            catch (Exception ex)
            {
                HandleException(ex, "Timer1Sec_Tick");
            }
        }

        #region large 'countdown to refresh' progress bar
        private void Timer50thSec_Tick(object sender, EventArgs e) // used for the long refresh countdown progress bar
        {
            if (progressBarRefreshData.Value == (intDisplayCountdownToRefresh * 1000))
            {
                timer50thSec.Stop();
                return;
            }
            progressBarRefreshData.Value += 60;

        }
        #endregion

        #endregion
        //![](resources\tinylogo1.png;;;0.04706,0.04877)
        #region ⚡⚡⚡ BITCOIN AND LIGHTNING DASHBOARD SCREENS

        #region update dashboards
        public async

        Task
        UpdateBitcoinAndLightningDashboardsAsync()
        {
            ToggleLoadingAnimation("enable");
            panelBitcoinDashboard.SuspendLayout();
            panelLightningDashboard.SuspendLayout();
            bool errorOccurred = false;
            #region determine network age
            UpdateLoadingScreenMessage("Determining network age...", "Initialising...");
            DateTime startDate = new DateTime(2009, 1, 3, 18, 15, 0); // Genesis block time
            DateTime currentDate = DateTime.Now; // Current date and time

            // Calculate years, months, days, hours, minutes, and seconds
            int years = currentDate.Year - startDate.Year;
            int months = currentDate.Month - startDate.Month;
            int days = currentDate.Day - startDate.Day;

            // Adjust negative months and days
            if (days < 0)
            {
                months--;
                days += DateTime.DaysInMonth(startDate.Year, startDate.Month);
            }
            if (months < 0)
            {
                years--;
                months += 12;
            }
            UpdateLabelValueAsync(lblNetworkAge, $"{years} years, {months} months, {days} days");
            #endregion
            #region tasks 0 & 1- mempool.space api's
            Task task0 = Task.Run(async () => // mempool.space api's
            {
                #region block height, no. of tx in block, time since block, block size
                try
                {
                    UpdateLoadingScreenMessage("Gathering block data...", "Initialising...");
                    var blocksJson = await _blockService.GetBlockDataAsync("000000").ConfigureAwait(true);  // don't pass a block to start from - we want the tip
                    var blocks = JsonConvert.DeserializeObject<List<Block>>(blocksJson);

                    if (blocks != null)
                    {
                        if (blocks.Count > 0)
                        {
                            lblHeaderTransactions.Invoke((MethodInvoker)delegate
                            {
                                lblHeaderTransactions.Location = new Point(label148.Location.X + label148.Width, lblHeaderTransactions.Location.Y);
                            });
                            UpdateLabelValueAsync(lblHeaderTransactions, Convert.ToString(blocks[0].Tx_count));
                            string newBlockHeight = blocks[0].Height!;
                            string oldBlockHeight = lblHeaderBlockNumber.Text;
                            if (String.Compare(newBlockHeight, oldBlockHeight) != 0 || firstTimeGettingBlockTip)
                            {
                                long timestamp = long.Parse(blocks[0].Timestamp);
                                DateTimeOffset blockTime = DateTimeOffset.FromUnixTimeSeconds(timestamp);
                                TimeSpan timeDifference = DateTimeOffset.Now - blockTime;
                                totalSecondsSinceLastBlock = (int)timeDifference.TotalSeconds;
                                int minutesSinceLastBlock = totalSecondsSinceLastBlock / 60;
                                int secondsSinceLastBlock = totalSecondsSinceLastBlock % 60;
                                string formattedTime = $"{minutesSinceLastBlock}m {secondsSinceLastBlock}s ago";
                                lblHeaderBlockAge.Invoke((MethodInvoker)delegate
                                {
                                    lblHeaderBlockAge.Text = formattedTime;
                                });
                                UpdateLabelValueAsync(lblHeaderBlockNumber, Convert.ToString(blocks[0].Height));

                                // calculate amount of btc issued
                                int blockHeight = Convert.ToInt32(blocks[0].Height);
                                decimal totalBitcoinsIssued = CirculationCalculator.CalculateTotalBitcoinsIssued(blockHeight);
                                calculatedBTCInCirculation = totalBitcoinsIssued;

                                UpdateLabelValueAsync(lblBTCInCirc, $"{calculatedBTCInCirculation:N2}");
                                if (calculatedBTCInCirculation > 0)
                                {
                                    UpdateLabelValueAsync(lblBTCToBeIssued, Convert.ToString(21000000 - calculatedBTCInCirculation));
                                }
                                else
                                {
                                    lblBTCToBeIssued.Invoke((MethodInvoker)delegate
                                    {
                                        lblBTCToBeIssued.Text = "0";
                                    });
                                }
                                lblChartCirculation.Invoke((MethodInvoker)delegate
                                {
                                    lblChartCirculation.Location = new Point(lblBTCInCirc.Location.X + lblBTCInCirc.Width, lblChartCirculation.Location.Y);
                                });
                                decimal percentIssued = Math.Round((100m / 21000000) * calculatedBTCInCirculation, 2);
                                UpdateLabelValueAsync(lblPercentIssued, $"{percentIssued}%");

                                progressBarPercentIssued.Invoke((MethodInvoker)delegate
                                {
                                    progressBarPercentIssued.Value = Convert.ToInt16(percentIssued);
                                });

                                lblHeaderBlockAge.Invoke((MethodInvoker)delegate
                                {
                                    lblHeaderBlockAge.Location = new Point(lblHeaderBlockNumber.Location.X + lblHeaderBlockNumber.Width - (int)(6 * UIScale), lblHeaderBlockAge.Location.Y);
                                });
                                lblHeaderTimestamp.Invoke((MethodInvoker)delegate
                                {
                                    lblHeaderTimestamp.Location = new Point(lblHeaderBlockNumber.Location.X + lblHeaderBlockNumber.Width - (int)(6 * UIScale), lblHeaderTimestamp.Location.Y);
                                });
                                label107.Invoke((MethodInvoker)delegate
                                {
                                    label107.Location = new Point(lblHeaderTimestamp.Location.X + lblHeaderTimestamp.Width - (int)(4 * UIScale), label107.Location.Y);
                                });

                                firstTimeGettingBlockTip = false;
                            }

                            long sizeInBytes = blocks[0].Size;
                            string sizeString; // convert display to bytes/kb/mb accordingly
                            if (sizeInBytes < 1000)
                            {
                                sizeString = $"{sizeInBytes} bytes";
                            }
                            else if (sizeInBytes < 1000 * 1000)
                            {
                                double sizeInKB = (double)sizeInBytes / 1000;
                                sizeString = $"{sizeInKB:N2} KB";
                            }
                            else
                            {
                                double sizeInMB = (double)sizeInBytes / (1000 * 1000);
                                sizeString = $"{sizeInMB:N2} MB";
                            }
                            lblHeaderBlockSize.Invoke((MethodInvoker)delegate
                            {
                                lblHeaderBlockSize.Location = new Point(label149.Location.X + label149.Width, lblHeaderBlockSize.Location.Y);
                            });
                            UpdateLabelValueAsync(lblHeaderBlockSize, sizeString);
                            lblHeaderBlockSizeChart.Invoke((MethodInvoker)delegate
                            {
                                lblHeaderBlockSizeChart.Location = new Point(lblHeaderBlockSize.Location.X + lblHeaderBlockSize.Width, lblHeaderBlockSizeChart.Location.Y);
                            });
                            // difficulty epoch = block height / 2016 rounded up to an integer
                            UpdateLabelValueAsync(lblDifficultyEpoch, Convert.ToString((int)Math.Ceiling(Convert.ToDecimal(lblHeaderBlockNumber.Text) / 2016)));
                        }
                    }
                }
                catch (Exception ex)
                {
                    errorOccurred = true;
                    HandleException(ex, "UpdateDashboards(block size & tx count)");
                }
                #endregion

                #region fees
                try
                {
                    UpdateLoadingScreenMessage("Getting fee priority data...", "Initialising...");
                    var (fastestFee, halfHourFee, hourFee, economyFee) = MemSpGetFees();
                    UpdateLabelValueAsync(lblHeaderfeesHighPriority, fastestFee);
                    label15.Invoke((MethodInvoker)delegate
                    {
                        label15.Location = new Point(lblHeaderfeesHighPriority.Location.X + lblHeaderfeesHighPriority.Width - (int)(13 * UIScale), label15.Location.Y);
                    });
                    lblHeaderFeesMediumPriority.Invoke((MethodInvoker)delegate
                    {
                        lblHeaderFeesMediumPriority.Location = new Point(label15.Location.X + label15.Width - 10, lblHeaderFeesMediumPriority.Location.Y);
                    });
                    UpdateLabelValueAsync(lblHeaderFeesMediumPriority, halfHourFee);
                    label25.Invoke((MethodInvoker)delegate
                    {
                        label25.Location = new Point(lblHeaderFeesMediumPriority.Location.X + lblHeaderFeesMediumPriority.Width - (int)(13 * UIScale), label25.Location.Y);
                    });
                    lblHeaderFeesLowPriority.Invoke((MethodInvoker)delegate
                    {
                        lblHeaderFeesLowPriority.Location = new Point(label25.Location.X + label25.Width - 10, lblHeaderFeesLowPriority.Location.Y);
                    });
                    UpdateLabelValueAsync(lblHeaderFeesLowPriority, hourFee);
                    label28.Invoke((MethodInvoker)delegate
                    {
                        label28.Location = new Point(lblHeaderFeesLowPriority.Location.X + lblHeaderFeesLowPriority.Width - (int)(13 * UIScale), label28.Location.Y);
                    });
                    lblHeaderFeesNoPriority.Invoke((MethodInvoker)delegate
                    {
                        lblHeaderFeesNoPriority.Location = new Point(label28.Location.X + label28.Width - 10, lblHeaderFeesNoPriority.Location.Y);
                    });
                    UpdateLabelValueAsync(lblHeaderFeesNoPriority, economyFee);
                    label29.Invoke((MethodInvoker)delegate
                    {
                        label29.Location = new Point(lblHeaderFeesNoPriority.Location.X + lblHeaderFeesNoPriority.Width - (int)(13 * UIScale), label29.Location.Y);
                    });
                    lblHeaderFeeRatesChart.Invoke((MethodInvoker)delegate
                    {
                        lblHeaderFeeRatesChart.Location = new Point(lblHeaderFeesNoPriority.Location.X + lblHeaderFeesNoPriority.Width - 10, lblHeaderFeeRatesChart.Location.Y);
                    });
                }
                catch (Exception ex)
                {
                    errorOccurred = true;
                    HandleException(ex, "UpdateDashboards(fees)");
                }
                #endregion

                #region hashrate
                try
                {
                    UpdateLoadingScreenMessage("Determining hashrate...", "Initialising...");
                    var currentHashrate = MemSpGetHashrate();
                    BigInteger currentHashrateFormatted = BigInteger.Parse(currentHashrate);

                    UpdateLabelValueAsync(lblEstHashrate, $"{currentHashrateFormatted:n0}");

                    lblHashrateChart.Invoke((MethodInvoker)delegate
                    {
                        lblHashrateChart.Location = new Point(lblEstHashrate.Location.X + lblEstHashrate.Width, lblHashrateChart.Location.Y);
                    });
                    UpdateLabelValueAsync(lblBlockListEstHashRate, $"{currentHashrateFormatted:n0}");
                    lblBlockListHashrateChart.Invoke((MethodInvoker)delegate
                    {
                        lblBlockListHashrateChart.Location = new Point(lblBlockListEstHashRate.Location.X + lblBlockListEstHashRate.Width, lblBlockListHashrateChart.Location.Y);
                    });
                }
                catch (Exception ex)
                {
                    errorOccurred = true;
                    HandleException(ex, "UpdateDashboards(hashrate)");
                }
                #endregion

                #region determine block subsidy, subsidy after halving and fiat values of both
                // determine current block subsidy by calculating it from most recent block
                UpdateLoadingScreenMessage("Gathering block subsidy and halving data...", "Initialising...");
                string blockSubsidy = MemSpGetRewardStats();
                UpdateLabelValueAsync(lblBlockSubsidy, blockSubsidy);

                if (decimal.TryParse(blockSubsidy, out decimal epoch))
                {
                    epoch = (int)(Math.Log(Convert.ToDouble(blockSubsidy) / 50) / Math.Log(0.5)) + 1;
                }
                else
                {
                    epoch = 0;
                }
                UpdateLabelValueAsync(lblSubsidyEpoch, Convert.ToString(epoch));
                label296.Invoke((MethodInvoker)delegate
                {
                    label296.Location = new Point(lblSubsidyEpoch.Location.X + lblSubsidyEpoch.Width, label296.Location.Y);
                });
                lblBlockSubsidy.Invoke((MethodInvoker)delegate
                {
                    lblBlockSubsidy.Location = new Point(label296.Location.X + label296.Width, lblBlockSubsidy.Location.Y);
                });

                if (decimal.TryParse(blockSubsidy, out decimal decimalBlockSubsidy))
                {
                    UpdateLabelValueAsync(lblBlockRewardFiat, $"{fiatSymbol}{(decimalBlockSubsidy * OneBTCinSelectedCurrency):N2}");

                    lblBlockRewardFiat.Invoke((MethodInvoker)delegate
                    {
                        lblBlockRewardFiat.Location = new Point(lblBlockSubsidy.Location.X + lblBlockSubsidy.Width, lblBlockRewardFiat.Location.Y);
                    });
                }
                else
                {
                    lblBlockRewardFiat.Invoke((MethodInvoker)delegate
                    {
                        lblBlockRewardFiat.Text = "0";
                        lblBlockRewardFiat.Location = new Point(lblBlockSubsidy.Location.X + lblBlockSubsidy.Width, lblBlockRewardFiat.Location.Y);
                    });
                }

                if (decimal.TryParse(blockSubsidy, out decimal DecBlockSubsidy))
                {
                    DecBlockSubsidy = Convert.ToDecimal(blockSubsidy);
                }
                else
                {
                    DecBlockSubsidy = 0;
                }
                decimal NextBlockSubsidy = DecBlockSubsidy / 2;
                UpdateLabelValueAsync(lblBlockSubsidyAfterHalving, Convert.ToString(NextBlockSubsidy));
                UpdateLabelValueAsync(lblBlockRewardAfterHalvingFiat, $"{fiatSymbol}{(Convert.ToDecimal(NextBlockSubsidy) * OneBTCinSelectedCurrency):N2}");

                lblBlockRewardAfterHalvingFiat.Invoke((MethodInvoker)delegate
                {
                    lblBlockRewardAfterHalvingFiat.Location = new Point(lblBlockSubsidyAfterHalving.Location.X + lblBlockSubsidyAfterHalving.Width, lblBlockRewardAfterHalvingFiat.Location.Y);
                });
                UpdateLabelValueAsync(lblBlockListBlockSubsidy, blockSubsidy);
                if (decimal.TryParse(blockSubsidy, out decimal blockSubsidy2))
                {
                    UpdateLabelValueAsync(lblBlockListBlockRewardFiat, $"{fiatSymbol}{(blockSubsidy2 * OneBTCinSelectedCurrency):N2}");

                    lblBlockListBlockRewardFiat.Invoke((MethodInvoker)delegate // (Blocks list)
                    {
                        lblBlockListBlockRewardFiat.Location = new Point(lblBlockListBlockSubsidy.Location.X + lblBlockListBlockSubsidy.Width, lblBlockListBlockRewardFiat.Location.Y);
                    });
                }
                else
                {
                    lblBlockListBlockRewardFiat.Invoke((MethodInvoker)delegate // (Blocks list)
                    {
                        lblBlockListBlockRewardFiat.Text = "0";
                        lblBlockListBlockRewardFiat.Location = new Point(lblBlockListBlockSubsidy.Location.X + lblBlockListBlockSubsidy.Width, lblBlockListBlockRewardFiat.Location.Y);
                    });
                }

                #endregion

                #region difficulty adjustment
                try
                {
                    UpdateLoadingScreenMessage("Checking mining difficulty...", "Initialising...");
                    string truncatedPercent = "0%";
                    var (progressPercent, difficultyChange, estimatedRetargetDate, remainingBlocks, _, previousRetarget, nextRetargetHeight, timeAvg, _) = MemSpGetDifficultyAdjustment();
                    if (decimal.TryParse(progressPercent, out decimal progressValue2))
                    {
                        progressValue2 = decimal.Parse(progressPercent.TrimEnd('%')) / 100; // convert to decimal and scale to range [0, 1]
                        truncatedPercent = $"{progressValue2 * 100:F2}%"; // truncate to two decimal places
                    }
                    UpdateLabelValueAsync(lblProgressNextDiffAdjPercentage, truncatedPercent);
                    UpdateLabelValueAsync(lblBlockListProgressNextDiffAdjPercentage, truncatedPercent);
                    if (double.TryParse(previousRetarget, out double retargetValue))
                    {
                        // Format the double with two decimal places
                        string formattedRetarget = retargetValue.ToString("0.00");

                        // Update the label value
                        UpdateLabelValueAsync(lblPrevDiffAdjustment, $"{formattedRetarget}%");
                    }
                    label229.Invoke((MethodInvoker)delegate
                    {
                        label229.Location = new Point(lblPrevDiffAdjustment.Location.X + lblPrevDiffAdjustment.Width, label229.Location.Y);
                    });
                    lblDifficultyAdjEst.Invoke((MethodInvoker)delegate
                    {
                        lblDifficultyAdjEst.Location = new Point(label229.Location.X + label229.Width, lblDifficultyAdjEst.Location.Y);
                    });
                    if (decimal.TryParse(progressPercent, out decimal progressValue))
                    {
                        progressValue = decimal.Parse(progressPercent); // convert to decimal and scale to range [0, 1]
                        progressBarNextDiffAdj.Value = Convert.ToInt16(progressValue); // scale to fit progress bar range
                        progressBarBlockListNextDiffAdj.Value = Convert.ToInt16(progressValue); // scale to fit progress bar range - Block List
                    }
                    UpdateLabelValueAsync(lblDifficultyAdjEst, $"{difficultyChange}%");
                    lblDifficultyChart.Invoke((MethodInvoker)delegate
                    {
                        lblDifficultyChart.Location = new Point(lblDifficultyAdjEst.Location.X + lblDifficultyAdjEst.Width, lblDifficultyChart.Location.Y);
                    });
                    UpdateLabelValueAsync(lblBlockListNextDifficultyAdjustment, $"{difficultyChange}%");
                    lblBlockListDifficultyChart.Invoke((MethodInvoker)delegate  // (Blocks list)
                    {
                        lblBlockListDifficultyChart.Location = new Point(lblBlockListNextDifficultyAdjustment.Location.X + lblBlockListNextDifficultyAdjustment.Width, lblBlockListDifficultyChart.Location.Y);
                    });
                    UpdateLabelValueAsync(lblBlocksUntilDiffAdj, remainingBlocks.ToString());
                    string formattedDate;
                    if (String.Compare(NodeURL, "https://mempool.space/api/") == 0 || String.Compare(NodeURL, "https://mempool.space/testnet/api/") == 0)
                    {
                        long unixTimestamp = Convert.ToInt64(estimatedRetargetDate);
                        DateTime retargetDate = DateTimeExtensions.FromUnixTimeMilliseconds(unixTimestamp);
                        formattedDate = retargetDate.ToString("yyyy-MM-dd");
                    }
                    else
                    {
                        double estRetargetDate = Convert.ToDouble(estimatedRetargetDate);
                        DateTimeOffset dateTimeOffset = DateTimeOffset.FromUnixTimeMilliseconds((long)estRetargetDate);
                        DateTime dateTime = dateTimeOffset.LocalDateTime;
                        formattedDate = dateTime.ToString();
                    }
                    UpdateLabelValueAsync(lblEstDiffAdjDate, formattedDate);
                    UpdateLabelValueAsync(lblNextDiffAdjBlock, nextRetargetHeight);
                    lblBlockListNextDiffAdjBlock.Invoke((MethodInvoker)delegate // (Blocks list)
                    {
                        lblBlockListNextDiffAdjBlock.Text = nextRetargetHeight;
                    });

                    int minutes = 0;
                    int seconds = 0;
                    if (decimal.TryParse(timeAvg, out decimal AvgTimeBetweenBlocks))
                    {
                        AvgTimeBetweenBlocks = (Convert.ToDecimal(timeAvg) / 1000) / 60;
                        minutes = (int)AvgTimeBetweenBlocks;
                        seconds = (int)((AvgTimeBetweenBlocks - minutes) * 60);
                    }
                    string timeString = $"{minutes} mins {seconds} secs";
                    UpdateLabelValueAsync(lblAvgTimeBetweenBlocks, timeString);
                    UpdateLabelValueAsync(lblBlockListAvgTimeBetweenBlocks, timeString);
                }
                catch (Exception ex)
                {
                    errorOccurred = true;
                    HandleException(ex, "UpdateDashboards(difficulty adjustment)");
                }
                #endregion

                #region fees and transactions in next block
                try
                {
                    if (!testNet)
                    {
                        UpdateLoadingScreenMessage("Gettings fees and transactions in next block...", "Initialising...");

                        var (txInNextBlock, nextBlockMinFee, nextBlockMaxFee, nextBlockTotalFees) = MemSpNextBlock();
                        UpdateLabelValueAsync(lblTransInNextBlock, txInNextBlock);
                        UpdateLabelValueAsync(lblBlockListTXInNextBlock, txInNextBlock);

                        lblNextBlockMinMaxFee.Invoke((MethodInvoker)delegate
                        {
                            lblNextBlockMinMaxFee.Text = $"{nextBlockMinFee} / {nextBlockMaxFee}";
                        });
                        lblHeaderNextBlockMinMaxFee.Invoke((MethodInvoker)delegate
                        {
                            lblHeaderNextBlockMinMaxFee.Text = $"{nextBlockMinFee} - {nextBlockMaxFee}";
                            lblHeaderNextBlockMinMaxFee.Location = new Point(label110.Location.X + label110.Width, lblHeaderNextBlockMinMaxFee.Location.Y);
                        });
                        lblBlockListMinMaxInFeeNextBlock.Invoke((MethodInvoker)delegate // Blocks list
                        {
                            lblBlockListMinMaxInFeeNextBlock.Text = $"{nextBlockMinFee} / {nextBlockMaxFee}";
                        });
                        UpdateLabelValueAsync(lblNextBlockTotalFees, nextBlockTotalFees);
                        lblHeaderNextBlockTotalFees.Invoke((MethodInvoker)delegate // Blocks list
                        {
                            lblHeaderNextBlockTotalFees.Location = new Point(label150.Location.X + label150.Width, lblHeaderNextBlockTotalFees.Location.Y);
                        });
                        UpdateLabelValueAsync(lblHeaderNextBlockTotalFees, nextBlockTotalFees);
                        lblHeaderBlockFeesChart.Invoke((MethodInvoker)delegate
                        {
                            lblHeaderBlockFeesChart.Location = new Point(lblHeaderNextBlockTotalFees.Location.X + lblHeaderNextBlockTotalFees.Width, lblHeaderBlockFeesChart.Location.Y);
                        });
                        UpdateLabelValueAsync(lblNextBlockTotalFeesFiat, $"{fiatSymbol}{(Convert.ToDecimal(nextBlockTotalFees) * OneBTCinSelectedCurrency):N2}");
                        lblNextBlockTotalFeesFiat.Invoke((MethodInvoker)delegate
                        {
                            lblNextBlockTotalFeesFiat.Location = new Point(lblNextBlockTotalFees.Location.X + lblNextBlockTotalFees.Width, lblNextBlockTotalFeesFiat.Location.Y);
                        });
                        UpdateLabelValueAsync(lblBlockListTotalFeesInNextBlock, nextBlockTotalFees);
                        lblBlockListTotalFeesInNextBlock.Invoke((MethodInvoker)delegate // Blocks list
                        {
                            lblBlockListTotalFeesInNextBlock.Text = nextBlockTotalFees;
                        });

                        UpdateLabelValueAsync(lblBlockListTotalFeesInNextBlockFiat, $"{fiatSymbol}{(Convert.ToDecimal(nextBlockTotalFees) * OneBTCinSelectedCurrency):N2}");
                        lblBlockListTotalFeesInNextBlockFiat.Invoke((MethodInvoker)delegate // Blocks list
                        {
                            lblBlockListTotalFeesInNextBlockFiat.Location = new Point(lblBlockListTotalFeesInNextBlock.Location.X + lblBlockListTotalFeesInNextBlock.Width, lblBlockListTotalFeesInNextBlockFiat.Location.Y);
                        });
                    }
                    else
                    {
                        Control[] controlsToShowAsTestnet = { lblTransInNextBlock, lblBlockListTXInNextBlock, lblNextBlockMinMaxFee, lblBlockListMinMaxInFeeNextBlock, lblNextBlockTotalFees, lblHeaderNextBlockTotalFees, lblBlockListTotalFeesInNextBlock, lblHeaderNextBlockMinMaxFee };
                        foreach (Control control in controlsToShowAsTestnet)
                        {
                            control.Invoke((MethodInvoker)delegate
                            {
                                control.Text = "unavailable on TestNet";
                            });
                        }

                        lblNextBlockTotalFeesFiat.Invoke((MethodInvoker)delegate
                        {
                            lblNextBlockTotalFeesFiat.Visible = false;
                        });
                    }
                    lblFeeRangeChart.Invoke((MethodInvoker)delegate
                    {
                        lblFeeRangeChart.Location = new Point(lblNextBlockMinMaxFee.Location.X + lblNextBlockMinMaxFee.Width, lblFeeRangeChart.Location.Y);
                    });
                    lblHeaderFeeRangeChart.Invoke((MethodInvoker)delegate
                    {
                        lblHeaderFeeRangeChart.Location = new Point(lblHeaderNextBlockMinMaxFee.Location.X + lblHeaderNextBlockMinMaxFee.Width, lblHeaderFeeRangeChart.Location.Y);
                    });
                    lblBlockListFeeRangeChart2.Invoke((MethodInvoker)delegate
                    {
                        lblBlockListFeeRangeChart2.Location = new Point(lblBlockListMinMaxInFeeNextBlock.Location.X + lblBlockListMinMaxInFeeNextBlock.Width, lblBlockListFeeRangeChart2.Location.Y);
                    });

                    SetLightsMessagesAndResetTimers();
                }
                catch (Exception ex)
                {
                    errorOccurred = true;
                    HandleException(ex, "UpdateDashboards(Task3)");
                }
                #endregion

                #region transactions in mempool
                try
                {
                    var (txCount, _, _) = MemSpGetMempool();
                    string txInMempool = txCount;
                    UpdateLabelValueAsync(lblTXInMempool, txInMempool);
                    UpdateLabelValueAsync(lblBlockListTXInMempool, txInMempool);
                }
                catch (Exception ex)
                {
                    errorOccurred = true;
                    HandleException(ex, "UpdateAPIGroup1DataFields(GetMempool)");
                }
                #endregion

            });
            Task task1 = Task.Run(() => // mempool.space lightning JSON
            {
                try
                {
                    UpdateLoadingScreenMessage("Updating Lightning dashboard...", "Initialising...");
                    if (!testNet)
                    {
                        if (RunMempoolSpaceLightningAPI)
                        {
                            #region lightning stats
                            var (channelCount, nodeCount, totalCapacity, torNodes, clearnetNodes, unannouncedNodes, avgCapacity, avgFeeRate, avgBaseeFeeMtokens, medCapacity, medFeeRate, medBaseeFeeMtokens, clearnetTorNodes) = MempoolSpaceLightning();
                            UpdateLabelValueAsync(lblChannelCount, channelCount);
                            UpdateLabelValueAsync(lblNodeCount, nodeCount);
                            UpdateLabelValueAsync(lblTotalCapacity, totalCapacity);
                            UpdateLabelValueAsync(lblTotalCapacityFiat, $"{fiatSymbol}{(Convert.ToDecimal(lblTotalCapacity.Text) * OneBTCinSelectedCurrency):N2}");

                            UpdateLabelValueAsync(lblTorNodes, torNodes);
                            UpdateLabelValueAsync(lblClearnetNodes, clearnetNodes);
                            UpdateLabelValueAsync(lblAverageCapacity, avgCapacity);
                            string avgcapacity = ConvertSatsToBitcoin(lblAverageCapacity.Text).ToString();
                            UpdateLabelValueAsync(lblAverageCapacityFiat, $"{fiatSymbol}{(Convert.ToDecimal(avgcapacity) * OneBTCinSelectedCurrency):N2}");
                            lblAverageCapacityFiat.Invoke((MethodInvoker)delegate
                            {
                                lblAverageCapacityFiat.Location = new Point(lblAverageCapacity.Location.X + lblAverageCapacity.Width, lblAverageCapacityFiat.Location.Y);
                            });
                            UpdateLabelValueAsync(lblAverageFeeRate, avgFeeRate);
                            string avgfeerate = ConvertSatsToBitcoin(lblAverageFeeRate.Text).ToString();
                            UpdateLabelValueAsync(lblAverageFeeRateFiat, $"{fiatSymbol}{(Convert.ToDecimal(avgfeerate) * OneBTCinSelectedCurrency):N2}");
                            lblAverageFeeRateFiat.Invoke((MethodInvoker)delegate
                            {
                                lblAverageFeeRateFiat.Location = new Point(lblAverageFeeRate.Location.X + lblAverageFeeRate.Width, lblAverageFeeRateFiat.Location.Y);
                            });
                            UpdateLabelValueAsync(lblUnannouncedNodes, unannouncedNodes);
                            UpdateLabelValueAsync(lblAverageBaseFeeMtokens, avgBaseeFeeMtokens);
                            string avgbasefeerate = ConvertSatsToBitcoin(lblAverageBaseFeeMtokens.Text).ToString();
                            UpdateLabelValueAsync(lblAverageBaseFeeMtokensFiat, $"{fiatSymbol}{((Convert.ToDecimal(avgbasefeerate) * OneBTCinSelectedCurrency) / 1000):N4}");
                            lblAverageBaseFeeMtokensFiat.Invoke((MethodInvoker)delegate
                            {
                                lblAverageBaseFeeMtokensFiat.Location = new Point(lblAverageBaseFeeMtokens.Location.X + lblAverageBaseFeeMtokens.Width, lblAverageBaseFeeMtokensFiat.Location.Y);
                            });
                            UpdateLabelValueAsync(lblMedCapacity, medCapacity);
                            string medcapacity = ConvertSatsToBitcoin(lblMedCapacity.Text).ToString();
                            UpdateLabelValueAsync(lblMedCapacityFiat, $"{fiatSymbol}{(Convert.ToDecimal(medcapacity) * OneBTCinSelectedCurrency):N2}");
                            lblMedCapacityFiat.Invoke((MethodInvoker)delegate
                            {
                                lblMedCapacityFiat.Location = new Point(lblMedCapacity.Location.X + lblMedCapacity.Width, lblMedCapacityFiat.Location.Y);
                            });
                            UpdateLabelValueAsync(lblMedFeeRate, medFeeRate);
                            string medfeerate = ConvertSatsToBitcoin(lblMedFeeRate.Text).ToString();
                            UpdateLabelValueAsync(lblMedFeeRateFiat, $"{fiatSymbol}{(Convert.ToDecimal(medfeerate) * OneBTCinSelectedCurrency):N2}");
                            lblMedFeeRateFiat.Invoke((MethodInvoker)delegate
                            {
                                lblMedFeeRateFiat.Location = new Point(lblMedFeeRate.Location.X + lblMedFeeRate.Width, lblMedFeeRateFiat.Location.Y);
                            });
                            UpdateLabelValueAsync(lblMedBaseFeeTokens, medBaseeFeeMtokens);
                            string medbasefeerate = ConvertSatsToBitcoin(lblMedBaseFeeTokens.Text).ToString();
                            UpdateLabelValueAsync(lblMedBaseFeeTokensFiat, $"{fiatSymbol}{((Convert.ToDecimal(medbasefeerate) * OneBTCinSelectedCurrency) / 1000):N4}");
                            lblMedBaseFeeTokensFiat.Invoke((MethodInvoker)delegate
                            {
                                lblMedBaseFeeTokensFiat.Location = new Point(lblMedBaseFeeTokens.Location.X + lblMedBaseFeeTokens.Width, lblMedBaseFeeTokensFiat.Location.Y);
                            });
                            UpdateLabelValueAsync(lblClearnetTorNodes, clearnetTorNodes);
                            #endregion
                        }
                        else
                        {
                            #region mark it all as disabled
                            lblChannelCount.Invoke((MethodInvoker)delegate
                            {
                                lblChannelCount.Text = "Disabled";
                            });
                            lblNodeCount.Invoke((MethodInvoker)delegate
                            {
                                lblNodeCount.Text = "Disabled";
                            });
                            lblTotalCapacity.Invoke((MethodInvoker)delegate
                            {
                                lblTotalCapacity.Text = "Disabled";
                            });
                            lblTorNodes.Invoke((MethodInvoker)delegate
                            {
                                lblTorNodes.Text = "Disabled";
                            });
                            lblClearnetNodes.Invoke((MethodInvoker)delegate
                            {
                                lblClearnetNodes.Text = "Disabled";
                            });
                            lblAverageCapacity.Invoke((MethodInvoker)delegate
                            {
                                lblAverageCapacity.Text = "Disabled";
                            });
                            lblAverageFeeRate.Invoke((MethodInvoker)delegate
                            {
                                lblAverageFeeRate.Text = "Disabled";
                            });
                            lblUnannouncedNodes.Invoke((MethodInvoker)delegate
                            {
                                lblUnannouncedNodes.Text = "Disabled";
                            });
                            lblAverageBaseFeeMtokens.Invoke((MethodInvoker)delegate
                            {
                                lblAverageBaseFeeMtokens.Text = "Disabled";
                            });
                            lblMedCapacity.Invoke((MethodInvoker)delegate
                            {
                                lblMedCapacity.Text = "Disabled";
                            });
                            lblMedFeeRate.Invoke((MethodInvoker)delegate
                            {
                                lblMedFeeRate.Text = "Disabled";
                            });
                            lblMedBaseFeeTokens.Invoke((MethodInvoker)delegate
                            {
                                lblMedBaseFeeTokens.Text = "Disabled";
                            });
                            lblClearnetTorNodes.Invoke((MethodInvoker)delegate
                            {
                                lblClearnetTorNodes.Text = "Disabled";
                            });
                            #endregion
                        }
                        #region shuffle charts in to place
                        lblLightningNodesChart.Invoke((MethodInvoker)delegate
                        {
                            lblLightningNodesChart.Location = new Point(label40.Location.X + label40.Width, lblLightningNodesChart.Location.Y);
                        });
                        lblLightningChannelsChart.Invoke((MethodInvoker)delegate
                        {
                            lblLightningChannelsChart.Location = new Point(label34.Location.X + label34.Width, lblLightningChannelsChart.Location.Y);
                        });
                        lblLightningCapacityChart.Invoke((MethodInvoker)delegate
                        {
                            lblLightningCapacityChart.Location = new Point(label38.Location.X + label38.Width, lblLightningCapacityChart.Location.Y);
                        });
                        #endregion
                        if (RunMempoolSpaceLightningAPI)
                        {
                            #region capacity
                            var (clearnetCapacity, torCapacity, unknownCapacity) = MemSpCapacityBreakdown();
                            UpdateLabelValueAsync(lblClearnetCapacity, clearnetCapacity);
                            UpdateLabelValueAsync(lblClearnetCapacityFiat, $"{fiatSymbol}{(Convert.ToDecimal(lblClearnetCapacity.Text) * OneBTCinSelectedCurrency):N2}");
                            lblClearnetCapacityFiat.Invoke((MethodInvoker)delegate
                            {
                                lblClearnetCapacityFiat.Location = new Point(lblClearnetCapacity.Location.X + lblClearnetCapacity.Width, lblClearnetCapacityFiat.Location.Y);
                            });
                            UpdateLabelValueAsync(lblTorCapacity, torCapacity);
                            UpdateLabelValueAsync(lblTorCapacityFiat, $"{fiatSymbol}{(Convert.ToDecimal(lblTorCapacity.Text) * OneBTCinSelectedCurrency):N2}");
                            lblTorCapacityFiat.Invoke((MethodInvoker)delegate
                            {
                                lblTorCapacityFiat.Location = new Point(lblTorCapacity.Location.X + lblTorCapacity.Width, lblTorCapacityFiat.Location.Y);
                            });
                            UpdateLabelValueAsync(lblUnknownCapacity, unknownCapacity);
                            UpdateLabelValueAsync(lblUnknownCapacityFiat, $"{fiatSymbol}{(Convert.ToDecimal(lblUnknownCapacity.Text) * OneBTCinSelectedCurrency):N2}");
                            lblUnknownCapacityFiat.Invoke((MethodInvoker)delegate
                            {
                                lblUnknownCapacityFiat.Location = new Point(lblUnknownCapacity.Location.X + lblUnknownCapacity.Width, lblUnknownCapacityFiat.Location.Y);
                            });
                            #endregion
                        }
                        else
                        {
                            #region mark as disabled
                            lblClearnetCapacity.Invoke((MethodInvoker)delegate
                            {
                                lblClearnetCapacity.Text = "Disabled";
                            });
                            lblTorCapacity.Invoke((MethodInvoker)delegate
                            {
                                lblTorCapacity.Text = "Disabled";
                            });
                            lblUnknownCapacity.Invoke((MethodInvoker)delegate
                            {
                                lblUnknownCapacity.Text = "Disabled";
                            });
                            #endregion
                        }
                        if (RunMempoolSpaceLightningAPI)
                        {
                            #region liquidity & connectivity rankings
                            var (aliases, capacities) = MemSpLiquidityRanking();
                            for (int i = 0; i < aliases.Count && i < capacities.Count && i < 10; i++)
                            {
                                Label aliasLabel = (Label)this.Controls.Find($"aliasLabel{i + 1}", true)[0];
                                aliasLabel.Invoke((MethodInvoker)delegate
                                {
                                    aliasLabel.Text = aliases[i];
                                });
                                Label capacityLabel = (Label)this.Controls.Find($"capacityLabel{i + 1}", true)[0];
                                Label capacityLabelFiat = (Label)this.Controls.Find($"capacityLabelFiat{i + 1}", true)[0];
                                UpdateLabelValueAsync(capacityLabel, capacities[i]);
                                UpdateLabelValueAsync(capacityLabelFiat, $"{fiatSymbol}{(Convert.ToDecimal(capacityLabel.Text) * OneBTCinSelectedCurrency):N2}");
                                capacityLabelFiat.Invoke((MethodInvoker)delegate
                                {
                                    capacityLabelFiat.Location = new Point(capacityLabel.Location.X + capacityLabel.Width, capacityLabelFiat.Location.Y);
                                });
                            }
                            var result7 = MemSpConnectivityRanking();
                            if (result7.aliases.Count > 0)
                            {
                                for (int i = 0; i < result7.aliases.Count && i < 10; i++)
                                {
                                    Label aliasLabel = (Label)this.Controls.Find($"aliasConnLabel{i + 1}", true)[0];
                                    aliasLabel.Invoke((MethodInvoker)delegate
                                    {
                                        aliasLabel.Text = result7.aliases[i];
                                    });
                                    Label channelLabel = (Label)this.Controls.Find($"channelLabel{i + 1}", true)[0];
                                    UpdateLabelValueAsync(channelLabel, result7.channels[i]);
                                }
                            }
                            #endregion
                        }
                        else
                        {
                            #region mark it all as disabled
                            for (int i = 0; i < 10; i++)
                            {
                                Label aliasLabel = (Label)this.Controls.Find($"aliasLabel{i + 1}", true)[0];
                                aliasLabel.Invoke((MethodInvoker)delegate
                                {
                                    aliasLabel.Text = "disabled";
                                });
                                Label capacityLabel = (Label)this.Controls.Find($"capacityLabel{i + 1}", true)[0];
                                capacityLabel.Invoke((MethodInvoker)delegate
                                {
                                    capacityLabel.Text = "disabled";
                                });
                            }
                            for (int i = 0; i < 10; i++)
                            {
                                Label aliasLabel = (Label)this.Controls.Find($"aliasConnLabel{i + 1}", true)[0];
                                aliasLabel.Invoke((MethodInvoker)delegate
                                {
                                    aliasLabel.Text = "disabled";
                                });
                                Label channelLabel = (Label)this.Controls.Find($"channelLabel{i + 1}", true)[0];
                                channelLabel.Invoke((MethodInvoker)delegate
                                {
                                    channelLabel.Text = "disabled";
                                });
                            }
                            #endregion
                        }
                    }
                    SetLightsMessagesAndResetTimers();
                }
                catch (Exception ex)
                {
                    errorOccurred = true;
                    HandleException(ex, "Dashboards(Task1)");
                }
            });
            #endregion
            #region task 2 - coinbase.com / mempool.space (price) / coingecko.com api (price)
            Task task2 = Task.Run(() =>
            {
                UpdateLoadingScreenMessage("Getting current market data...", "Initialising...");
                if (!offlineMode)
                {
                    try
                    {
                        if (!testNet)
                        {
                            if (RunCoinbaseAPI || RunCoingeckoAPI || RunMempoolSpacePriceAPI)
                            {
                                if (!gotMarketDataInLastFewSecs) // getmarketdata was performed during SATSuma_Load. No point in running it during first data refresh, but we want to run it every time after that
                                {
                                    GetMarketData();
                                }
                            }
                            else
                            {
                                Control[] controlsToShowAsDisabled = { lblPrice, lblMoscowTime, lblMarketCapUSD, lblHeaderPrice, lblHeaderMoscowTime, lblHeaderMarketCap };
                                foreach (Control control in controlsToShowAsDisabled)
                                {
                                    control.Invoke((MethodInvoker)delegate
                                    {
                                        control.Text = "disabled";
                                    });
                                }
                                GetMarketData(); // this time it won't actually get market data. It will just set indicators to grey, set the market tooltip, etc
                            }
                        }
                        else
                        {
                            Control[] controlsToShowAsTestnet = { lblPrice, lblMoscowTime, lblMarketCapUSD, lblHeaderPrice, lblHeaderMoscowTime, lblHeaderMarketCap };
                            foreach (Control control in controlsToShowAsTestnet)
                            {
                                control.Invoke((MethodInvoker)delegate
                                {
                                    control.Text = "0 (TestNet)";
                                });
                            }
                            GetMarketData(); // this time it won't actually get market data. It will just set indicators to grey, set the market tooltip, etc
                        }
                        #region shuffle stuff in to place
                        lblMarketCapChart.Invoke((MethodInvoker)delegate
                        {
                            lblMarketCapChart.Location = new Point(lblMarketCapUSD.Location.X + lblMarketCapUSD.Width, lblMarketCapChart.Location.Y);
                        });
                        lblPriceChart.Invoke((MethodInvoker)delegate
                        {
                            lblPriceChart.Location = new Point(lblPrice.Location.X + lblPrice.Width, lblPriceChart.Location.Y);
                        });
                        lblConverterChart.Invoke((MethodInvoker)delegate
                        {
                            lblConverterChart.Location = new Point(lblMoscowTime.Location.X + lblMoscowTime.Width, lblConverterChart.Location.Y);
                        });
                        if (lblHeaderPriceChange.Visible)
                        {
                            lblHeaderPriceChart.Invoke((MethodInvoker)delegate
                            {
                                lblHeaderPriceChart.Location = new Point(lblHeaderPriceChange.Location.X + lblHeaderPriceChange.Width, lblHeaderPriceChart.Location.Y);
                            });
                        }
                        else
                        {
                            lblHeaderPriceChart.Invoke((MethodInvoker)delegate
                            {
                                lblHeaderPriceChart.Location = new Point((lblHeaderPrice.Location.X + lblHeaderPrice.Width) - (int)(7 * UIScale), lblHeaderPriceChart.Location.Y);
                            });
                        }
                        panelPriceSourceIndicatorsOuter.Invoke((MethodInvoker)delegate
                        {
                            panelPriceSourceIndicatorsOuter.Location = new Point((lblHeaderPrice.Location.X + lblHeaderPrice.Width) - (int)(8 * UIScale), panelPriceSourceIndicatorsOuter.Location.Y);
                        });
                        lblHeaderConverterChart.Invoke((MethodInvoker)delegate
                        {
                            lblHeaderConverterChart.Location = new Point(lblHeaderMoscowTime.Location.X + lblHeaderMoscowTime.Width, lblHeaderConverterChart.Location.Y);
                        });
                        lblHeaderMarketCapChart.Invoke((MethodInvoker)delegate
                        {
                            lblHeaderMarketCapChart.Location = new Point(lblHeaderMarketCap.Location.X + lblHeaderMarketCap.Width, lblHeaderMarketCapChart.Location.Y);
                        });
                        #endregion
                        SetLightsMessagesAndResetTimers();
                    }
                    catch (Exception ex)
                    {
                        errorOccurred = true;
                        HandleException(ex, "Dashboards(Task2)");
                    }
                }
                if (offlineMode || testNet)
                {
                    GetMarketData(); // this time it won't actually get market data. It will just set indicators to grey, set the market tooltip, etc
                }
            });
            #endregion
            #region task 3 - coingecko market data
            Task task3 = Task.Run(async () =>  // coingecko.com for more market data
            {
                try
                {
                    if (!testNet)
                    {
                        if (RunCoingeckoAPI)
                        {
                            UpdateLoadingScreenMessage("Getting historic market stats...", "Initialising...");
                            var CoinGeckoMarketDataJson = await _coinGeckoMarketDataService.GetCoinGeckoMarketDataAsync().ConfigureAwait(true);
                            var coinGeckoMarketData = JsonConvert.DeserializeObject<Rootobject>(CoinGeckoMarketDataJson);

                            if (coinGeckoMarketData != null)
                            {
                                //USD
                                if (btnUSD.Enabled == false)
                                {
                                    UpdateLabelValueAsync(lblATH, $"${coinGeckoMarketData.Market_data!.Ath!.Usd}");
                                    lblATHPercentChange.Invoke((MethodInvoker)delegate
                                    {
                                        lblATHPercentChange.Text = $"{coinGeckoMarketData.Market_data.Ath_change_percentage!.Usd:F2}%";
                                    });
                                    UpdateLabelValueAsync(lblATHDate, Convert.ToString(coinGeckoMarketData.Market_data.Ath_date!.Usd).Substring(0, 10));
                                    UpdateLabelValueAsync(lbl24HoursLowestPrice, $"${coinGeckoMarketData.Market_data.Low_24h!.Usd}");

                                    DateTime parsedDate = DateTime.ParseExact(lblATHDate.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    DateTime currentDate = DateTime.Now.Date;
                                    TimeSpan difference = currentDate - parsedDate;
                                    lblATHDaysElapsed.Invoke((MethodInvoker)delegate
                                    {
                                        lblATHDaysElapsed.Text = $"{difference.Days} days ago";
                                    });

                                    UpdateLabelValueAsync(lbl24HoursHighestPrice, $"${coinGeckoMarketData.Market_data.High_24h!.Usd}");
                                        
                                    #region numeric values next to mini-chart
                                    //24 hours
                                    if (Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_24h_in_currency!.Usd) > highestAbsValuePriceChange)
                                    {
                                        highestAbsValuePriceChange = coinGeckoMarketData.Market_data.Price_change_percentage_24h_in_currency.Usd;
                                    }
                                    UpdateLabelValueAsync(lblPrice24Hours, $"{coinGeckoMarketData.Market_data.Price_change_percentage_24h_in_currency.Usd:F2}%");
                                    //7 days
                                    if (Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_7d_in_currency!.Usd) > highestAbsValuePriceChange)
                                    {
                                        highestAbsValuePriceChange = coinGeckoMarketData.Market_data.Price_change_percentage_7d_in_currency.Usd;
                                    }
                                    UpdateLabelValueAsync(lblPrice7Days, $"{coinGeckoMarketData.Market_data.Price_change_percentage_7d_in_currency.Usd:F2}%");
                                    //14 days 
                                    if (Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_14d_in_currency!.Usd) > highestAbsValuePriceChange)
                                    {
                                        highestAbsValuePriceChange = coinGeckoMarketData.Market_data.Price_change_percentage_14d_in_currency.Usd;
                                    }
                                    UpdateLabelValueAsync(lblPrice14Days, $"{coinGeckoMarketData.Market_data.Price_change_percentage_14d_in_currency.Usd:F2}%");
                                    //30 days
                                    if (Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_30d_in_currency!.Usd) > highestAbsValuePriceChange)
                                    {
                                        highestAbsValuePriceChange = coinGeckoMarketData.Market_data.Price_change_percentage_30d_in_currency.Usd;
                                    }
                                    UpdateLabelValueAsync(lblPrice30Days, $"{coinGeckoMarketData.Market_data.Price_change_percentage_30d_in_currency.Usd:F2}%");
                                    //60 days
                                    if (Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_60d_in_currency!.Usd) > highestAbsValuePriceChange)
                                    {
                                        highestAbsValuePriceChange = coinGeckoMarketData.Market_data.Price_change_percentage_60d_in_currency.Usd;
                                    }
                                    UpdateLabelValueAsync(lblPrice60Days, $"{coinGeckoMarketData.Market_data.Price_change_percentage_60d_in_currency.Usd:F2}%");
                                    //200 days
                                    if (Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_200d_in_currency!.Usd) > highestAbsValuePriceChange)
                                    {
                                        highestAbsValuePriceChange = coinGeckoMarketData.Market_data.Price_change_percentage_200d_in_currency.Usd;
                                    }
                                    UpdateLabelValueAsync(lblPrice200Days, $"{coinGeckoMarketData.Market_data.Price_change_percentage_200d_in_currency.Usd:F2}%");
                                    //1 year
                                    if (Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_1y_in_currency!.Usd) > highestAbsValuePriceChange)
                                    {
                                        highestAbsValuePriceChange = coinGeckoMarketData.Market_data.Price_change_percentage_1y_in_currency.Usd;
                                    }
                                    UpdateLabelValueAsync(lblPrice1Year, $"{coinGeckoMarketData.Market_data.Price_change_percentage_1y_in_currency.Usd:F2}%");
                                    #endregion

                                    if (highestAbsValuePriceChange > 0)
                                    {
                                        //24 hours
                                        panel24hours.Invoke((MethodInvoker)delegate
                                        {
                                            panel24hours.Width = Convert.ToInt32((Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_24h_in_currency.Usd) / highestAbsValuePriceChange) * (60.0 * UIScale));
                                        });
                                        if (panel24hours.Width == 0)
                                        {
                                            panel24hours.Invoke((MethodInvoker)delegate
                                            {
                                                panel24hours.Width = 1;
                                            });
                                        }
                                        if (coinGeckoMarketData.Market_data.Price_change_percentage_24h_in_currency.Usd >= 0)
                                        {
                                            panel24hours.Invoke((MethodInvoker)delegate
                                            {
                                                panel24hours.Location = new Point((int)(61 * UIScale), panel24hours.Location.Y);
                                                panel24hours.BackColor = Color.OliveDrab;
                                            });
                                        }
                                        else
                                        {
                                            panel24hours.Invoke((MethodInvoker)delegate
                                            {
                                                panel24hours.Location = new Point((int)(60 * UIScale) - panel24hours.Width, panel24hours.Location.Y);
                                                panel24hours.BackColor = Color.IndianRed;
                                            });
                                        }

                                        //7 days
                                        panel7days.Invoke((MethodInvoker)delegate
                                        {
                                            panel7days.Width = Convert.ToInt32((Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_7d_in_currency.Usd) / highestAbsValuePriceChange) * (60.0 * UIScale));
                                        });

                                        if (panel7days.Width == 0)
                                        {
                                            panel7days.Invoke((MethodInvoker)delegate
                                            {
                                                panel7days.Width = 1;
                                            });
                                        }
                                        if (coinGeckoMarketData.Market_data.Price_change_percentage_7d_in_currency.Usd >= 0)
                                        {
                                            panel7days.Invoke((MethodInvoker)delegate
                                            {
                                                panel7days.Location = new Point((int)(61 * UIScale), panel7days.Location.Y);
                                                panel7days.BackColor = Color.OliveDrab;
                                            });
                                        }
                                        else
                                        {
                                            panel7days.Invoke((MethodInvoker)delegate
                                            {
                                                panel7days.Location = new Point((int)(60 * UIScale) - panel7days.Width, panel7days.Location.Y);
                                                panel7days.BackColor = Color.IndianRed;
                                            });
                                        }

                                        //14 days
                                        panel14days.Invoke((MethodInvoker)delegate
                                        {
                                            panel14days.Width = Convert.ToInt32((Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_14d_in_currency.Usd) / highestAbsValuePriceChange) * (60.0 * UIScale));
                                        });
                                        if (panel14days.Width == 0)
                                        {
                                            panel14days.Invoke((MethodInvoker)delegate
                                            {
                                                panel14days.Width = 1;
                                            });
                                        }
                                        if (coinGeckoMarketData.Market_data.Price_change_percentage_14d_in_currency.Usd >= 0)
                                        {
                                            panel14days.Invoke((MethodInvoker)delegate
                                            {
                                                panel14days.Location = new Point((int)(61 * UIScale), panel14days.Location.Y);
                                                panel14days.BackColor = Color.OliveDrab;
                                            });
                                        }
                                        else
                                        {
                                            panel14days.Invoke((MethodInvoker)delegate
                                            {
                                                panel14days.Location = new Point((int)(60 * UIScale) - panel14days.Width, panel14days.Location.Y);
                                                panel14days.BackColor = Color.IndianRed;
                                            });
                                        }

                                        //30 days
                                        panel30days.Invoke((MethodInvoker)delegate
                                        {
                                            panel30days.Width = Convert.ToInt32((Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_30d_in_currency.Usd) / highestAbsValuePriceChange) * (60.0 * UIScale));
                                        });

                                        if (panel30days.Width == 0)
                                        {
                                            panel30days.Invoke((MethodInvoker)delegate
                                            {
                                                panel30days.Width = 1;
                                            });
                                        }
                                        if (coinGeckoMarketData.Market_data.Price_change_percentage_30d_in_currency.Usd >= 0)
                                        {
                                            panel30days.Invoke((MethodInvoker)delegate
                                            {
                                                panel30days.Location = new Point((int)(61 * UIScale), panel30days.Location.Y);
                                                panel30days.BackColor = Color.OliveDrab;
                                            });
                                        }
                                        else
                                        {
                                            panel30days.Invoke((MethodInvoker)delegate
                                            {
                                                panel30days.Location = new Point((int)(60 * UIScale) - panel30days.Width, panel30days.Location.Y);
                                                panel30days.BackColor = Color.IndianRed;
                                            });
                                        }

                                        //60 days
                                        panel60days.Invoke((MethodInvoker)delegate
                                        {
                                            panel60days.Width = Convert.ToInt32((Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_60d_in_currency.Usd) / highestAbsValuePriceChange) * (60.0 * UIScale));
                                        });
                                        if (panel60days.Width == 0)
                                        {
                                            panel60days.Invoke((MethodInvoker)delegate
                                            {
                                                panel60days.Width = 1;
                                            });
                                        }
                                        if (coinGeckoMarketData.Market_data.Price_change_percentage_60d_in_currency.Usd >= 0)
                                        {
                                            panel60days.Invoke((MethodInvoker)delegate
                                            {
                                                panel60days.Location = new Point((int)(61 * UIScale), panel60days.Location.Y);
                                                panel60days.BackColor = Color.OliveDrab;
                                            });
                                        }
                                        else
                                        {
                                            panel60days.Invoke((MethodInvoker)delegate
                                            {
                                                panel60days.Location = new Point((int)(60 * UIScale) - panel60days.Width, panel60days.Location.Y);
                                                panel60days.BackColor = Color.IndianRed;
                                            });
                                        }

                                        //200 days
                                        panel200days.Invoke((MethodInvoker)delegate
                                        {
                                            panel200days.Width = Convert.ToInt32((Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_200d_in_currency.Usd) / highestAbsValuePriceChange) * (60.0 * UIScale));
                                        });
                                        if (panel200days.Width == 0)
                                        {
                                            panel200days.Invoke((MethodInvoker)delegate
                                            {
                                                panel200days.Width = 1;
                                            });
                                        }
                                        if (coinGeckoMarketData.Market_data.Price_change_percentage_200d_in_currency.Usd >= 0)
                                        {
                                            panel200days.Invoke((MethodInvoker)delegate
                                            {
                                                panel200days.Location = new Point((int)(61 * UIScale), panel200days.Location.Y);
                                                panel200days.BackColor = Color.OliveDrab;
                                            });
                                        }
                                        else
                                        {
                                            panel200days.Invoke((MethodInvoker)delegate
                                            {
                                                panel200days.Location = new Point((int)(60 * UIScale) - panel200days.Width, panel200days.Location.Y);
                                                panel200days.BackColor = Color.IndianRed;
                                            });
                                        }

                                        //1 year
                                        panel1year.Invoke((MethodInvoker)delegate
                                        {
                                            panel1year.Width = Convert.ToInt32((Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_1y_in_currency.Usd) / highestAbsValuePriceChange) * (60.0 * UIScale));
                                        });
                                        if (panel1year.Width == 0)
                                        {
                                            panel1year.Invoke((MethodInvoker)delegate
                                            {
                                                panel1year.Width = 1;
                                            });
                                        }
                                        if (coinGeckoMarketData.Market_data.Price_change_percentage_1y_in_currency.Usd >= 0)
                                        {
                                            panel1year.Invoke((MethodInvoker)delegate
                                            {
                                                panel1year.Location = new Point((int)(61 * UIScale), panel1year.Location.Y);
                                                panel1year.BackColor = Color.OliveDrab;
                                            });
                                        }
                                        else
                                        {
                                            panel1year.Invoke((MethodInvoker)delegate
                                            {
                                                panel1year.Location = new Point((int)(60 * UIScale) - panel1year.Width, panel1year.Location.Y);
                                                panel1year.BackColor = Color.IndianRed;
                                            });
                                        }
                                    }
                                }
                                //GBP
                                if (btnGBP.Enabled == false)
                                {
                                    UpdateLabelValueAsync(lblATH, $"£{coinGeckoMarketData.Market_data!.Ath!.Gbp}");
                                    lblATHPercentChange.Invoke((MethodInvoker)delegate
                                    {
                                        lblATHPercentChange.Text = $"{coinGeckoMarketData.Market_data.Ath_change_percentage!.Gbp:F2}%";
                                    });
                                    UpdateLabelValueAsync(lblATHDate, Convert.ToString(coinGeckoMarketData.Market_data.Ath_date!.Gbp).Substring(0, 10));

                                    DateTime parsedDate = DateTime.ParseExact(lblATHDate.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    DateTime currentDate = DateTime.Now.Date;
                                    TimeSpan difference = currentDate - parsedDate;
                                    lblATHDaysElapsed.Invoke((MethodInvoker)delegate
                                    {
                                        lblATHDaysElapsed.Text = $"{difference.Days} days ago";
                                    });

                                    UpdateLabelValueAsync(lbl24HoursHighestPrice, $"£{coinGeckoMarketData.Market_data.High_24h!.Gbp}");
                                    UpdateLabelValueAsync(lbl24HoursLowestPrice, $"£{coinGeckoMarketData.Market_data.Low_24h!.Gbp}");

                                    #region numeric values next to mini-chart
                                    //24 hours
                                    if (Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_24h_in_currency!.Gbp) > highestAbsValuePriceChange)
                                    {
                                        highestAbsValuePriceChange = coinGeckoMarketData.Market_data.Price_change_percentage_24h_in_currency.Gbp;
                                    }
                                    UpdateLabelValueAsync(lblPrice24Hours, $"{coinGeckoMarketData.Market_data.Price_change_percentage_24h_in_currency.Gbp:F2}%");
                                    //7 days
                                    if (Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_7d_in_currency!.Gbp) > highestAbsValuePriceChange)
                                    {
                                        highestAbsValuePriceChange = coinGeckoMarketData.Market_data.Price_change_percentage_7d_in_currency.Gbp;
                                    }
                                    UpdateLabelValueAsync(lblPrice7Days, $"{coinGeckoMarketData.Market_data.Price_change_percentage_7d_in_currency.Gbp:F2}%");
                                    //14 days 
                                    if (Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_14d_in_currency!.Gbp) > highestAbsValuePriceChange)
                                    {
                                        highestAbsValuePriceChange = coinGeckoMarketData.Market_data.Price_change_percentage_14d_in_currency.Gbp;
                                    }
                                    UpdateLabelValueAsync(lblPrice14Days, $"{coinGeckoMarketData.Market_data.Price_change_percentage_14d_in_currency.Gbp:F2}%");
                                    //30 days
                                    if (Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_30d_in_currency!.Gbp) > highestAbsValuePriceChange)
                                    {
                                        highestAbsValuePriceChange = coinGeckoMarketData.Market_data.Price_change_percentage_30d_in_currency.Gbp;
                                    }
                                    UpdateLabelValueAsync(lblPrice30Days, $"{coinGeckoMarketData.Market_data.Price_change_percentage_30d_in_currency.Gbp:F2}%");
                                    //60 days
                                    if (Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_60d_in_currency!.Gbp) > highestAbsValuePriceChange)
                                    {
                                        highestAbsValuePriceChange = coinGeckoMarketData.Market_data.Price_change_percentage_60d_in_currency.Gbp;
                                    }
                                    UpdateLabelValueAsync(lblPrice60Days, $"{coinGeckoMarketData.Market_data.Price_change_percentage_60d_in_currency.Gbp:F2}%");
                                    //200 days
                                    if (Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_200d_in_currency!.Gbp) > highestAbsValuePriceChange)
                                    {
                                        highestAbsValuePriceChange = coinGeckoMarketData.Market_data.Price_change_percentage_200d_in_currency.Gbp;
                                    }
                                    UpdateLabelValueAsync(lblPrice200Days, $"{coinGeckoMarketData.Market_data.Price_change_percentage_200d_in_currency.Gbp:F2}%");
                                    //1 year
                                    if (Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_1y_in_currency!.Gbp) > highestAbsValuePriceChange)
                                    {
                                        highestAbsValuePriceChange = coinGeckoMarketData.Market_data.Price_change_percentage_1y_in_currency.Gbp;
                                    }
                                    UpdateLabelValueAsync(lblPrice1Year, $"{coinGeckoMarketData.Market_data.Price_change_percentage_1y_in_currency.Gbp:F2}%");
                                    #endregion

                                    if (highestAbsValuePriceChange > 0)
                                    {
                                        //24 hours
                                        panel24hours.Invoke((MethodInvoker)delegate
                                        {
                                            panel24hours.Width = Convert.ToInt32((Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_24h_in_currency.Gbp) / highestAbsValuePriceChange) * (60.0 * UIScale));
                                        });
                                        if (panel24hours.Width == 0)
                                        {
                                            panel24hours.Invoke((MethodInvoker)delegate
                                            {
                                                panel24hours.Width = 1;
                                            });
                                        }
                                        if (coinGeckoMarketData.Market_data.Price_change_percentage_24h_in_currency.Gbp >= 0)
                                        {
                                            panel24hours.Invoke((MethodInvoker)delegate
                                            {
                                                panel24hours.Location = new Point((int)(61 * UIScale), panel24hours.Location.Y);
                                                panel24hours.BackColor = Color.OliveDrab;
                                            });
                                        }
                                        else
                                        {
                                            panel24hours.Invoke((MethodInvoker)delegate
                                            {
                                                panel24hours.Location = new Point((int)(60 * UIScale) - panel24hours.Width, panel24hours.Location.Y);
                                                panel24hours.BackColor = Color.IndianRed;
                                            });
                                        }

                                        //7 days
                                        panel7days.Invoke((MethodInvoker)delegate
                                        {
                                            panel7days.Width = Convert.ToInt32((Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_7d_in_currency.Gbp) / highestAbsValuePriceChange) * (60.0 * UIScale));
                                        });

                                        if (panel7days.Width == 0)
                                        {
                                            panel7days.Invoke((MethodInvoker)delegate
                                            {
                                                panel7days.Width = 1;
                                            });
                                        }
                                        if (coinGeckoMarketData.Market_data.Price_change_percentage_7d_in_currency.Gbp >= 0)
                                        {
                                            panel7days.Invoke((MethodInvoker)delegate
                                            {
                                                panel7days.Location = new Point((int)(61 * UIScale), panel7days.Location.Y);
                                                panel7days.BackColor = Color.OliveDrab;
                                            });
                                        }
                                        else
                                        {
                                            panel7days.Invoke((MethodInvoker)delegate
                                            {
                                                panel7days.Location = new Point((int)(60 * UIScale) - panel7days.Width, panel7days.Location.Y);
                                                panel7days.BackColor = Color.IndianRed;
                                            });
                                        }

                                        //14 days
                                        panel14days.Invoke((MethodInvoker)delegate
                                        {
                                            panel14days.Width = Convert.ToInt32((Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_14d_in_currency.Gbp) / highestAbsValuePriceChange) * (60.0 * UIScale));
                                        });
                                        if (panel14days.Width == 0)
                                        {
                                            panel14days.Invoke((MethodInvoker)delegate
                                            {
                                                panel14days.Width = 1;
                                            });
                                        }
                                        if (coinGeckoMarketData.Market_data.Price_change_percentage_14d_in_currency.Gbp >= 0)
                                        {
                                            panel14days.Invoke((MethodInvoker)delegate
                                            {
                                                panel14days.Location = new Point((int)(61 * UIScale), panel14days.Location.Y);
                                                panel14days.BackColor = Color.OliveDrab;
                                            });
                                        }
                                        else
                                        {
                                            panel14days.Invoke((MethodInvoker)delegate
                                            {
                                                panel14days.Location = new Point((int)(60 * UIScale) - panel14days.Width, panel14days.Location.Y);
                                                panel14days.BackColor = Color.IndianRed;
                                            });
                                        }

                                        //30 days
                                        panel30days.Invoke((MethodInvoker)delegate
                                        {
                                            panel30days.Width = Convert.ToInt32((Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_30d_in_currency.Gbp) / highestAbsValuePriceChange) * (60.0 * UIScale));
                                        });

                                        if (panel30days.Width == 0)
                                        {
                                            panel30days.Invoke((MethodInvoker)delegate
                                            {
                                                panel30days.Width = 1;
                                            });
                                        }
                                        if (coinGeckoMarketData.Market_data.Price_change_percentage_30d_in_currency.Gbp >= 0)
                                        {
                                            panel30days.Invoke((MethodInvoker)delegate
                                            {
                                                panel30days.Location = new Point((int)(61 * UIScale), panel30days.Location.Y);
                                                panel30days.BackColor = Color.OliveDrab;
                                            });
                                        }
                                        else
                                        {
                                            panel30days.Invoke((MethodInvoker)delegate
                                            {
                                                panel30days.Location = new Point((int)(60 * UIScale) - panel30days.Width, panel30days.Location.Y);
                                                panel30days.BackColor = Color.IndianRed;
                                            });
                                        }

                                        //60 days
                                        panel60days.Invoke((MethodInvoker)delegate
                                        {
                                            panel60days.Width = Convert.ToInt32((Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_60d_in_currency.Gbp) / highestAbsValuePriceChange) * (60.0 * UIScale));
                                        });
                                        if (panel60days.Width == 0)
                                        {
                                            panel60days.Invoke((MethodInvoker)delegate
                                            {
                                                panel60days.Width = 1;
                                            });
                                        }
                                        if (coinGeckoMarketData.Market_data.Price_change_percentage_60d_in_currency.Gbp >= 0)
                                        {
                                            panel60days.Invoke((MethodInvoker)delegate
                                            {
                                                panel60days.Location = new Point((int)(61 * UIScale), panel60days.Location.Y);
                                                panel60days.BackColor = Color.OliveDrab;
                                            });
                                        }
                                        else
                                        {
                                            panel60days.Invoke((MethodInvoker)delegate
                                            {
                                                panel60days.Location = new Point((int)(60 * UIScale) - panel60days.Width, panel60days.Location.Y);
                                                panel60days.BackColor = Color.IndianRed;
                                            });
                                        }

                                        //200 days
                                        panel200days.Invoke((MethodInvoker)delegate
                                        {
                                            panel200days.Width = Convert.ToInt32((Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_200d_in_currency.Gbp) / highestAbsValuePriceChange) * (60.0 * UIScale));
                                        });
                                        if (panel200days.Width == 0)
                                        {
                                            panel200days.Invoke((MethodInvoker)delegate
                                            {
                                                panel200days.Width = 1;
                                            });
                                        }
                                        if (coinGeckoMarketData.Market_data.Price_change_percentage_200d_in_currency.Gbp >= 0)
                                        {
                                            panel200days.Invoke((MethodInvoker)delegate
                                            {
                                                panel200days.Location = new Point((int)(61 * UIScale), panel200days.Location.Y);
                                                panel200days.BackColor = Color.OliveDrab;
                                            });
                                        }
                                        else
                                        {
                                            panel200days.Invoke((MethodInvoker)delegate
                                            {
                                                panel200days.Location = new Point((int)(60 * UIScale) - panel200days.Width, panel200days.Location.Y);
                                                panel200days.BackColor = Color.IndianRed;
                                            });
                                        }

                                        //1 year
                                        panel1year.Invoke((MethodInvoker)delegate
                                        {
                                            panel1year.Width = Convert.ToInt32((Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_1y_in_currency.Gbp) / highestAbsValuePriceChange) * (60.0 * UIScale));
                                        });
                                        if (panel1year.Width == 0)
                                        {
                                            panel1year.Invoke((MethodInvoker)delegate
                                            {
                                                panel1year.Width = 1;
                                            });
                                        }
                                        if (coinGeckoMarketData.Market_data.Price_change_percentage_1y_in_currency.Gbp >= 0)
                                        {
                                            panel1year.Invoke((MethodInvoker)delegate
                                            {
                                                panel1year.Location = new Point((int)(61 * UIScale), panel1year.Location.Y);
                                                panel1year.BackColor = Color.OliveDrab;
                                            });
                                        }
                                        else
                                        {
                                            panel1year.Invoke((MethodInvoker)delegate
                                            {
                                                panel1year.Location = new Point((int)(60 * UIScale) - panel1year.Width, panel1year.Location.Y);
                                                panel1year.BackColor = Color.IndianRed;
                                            });
                                        }
                                    }

                                }
                                //EUR
                                if (btnEUR.Enabled == false)
                                {
                                    UpdateLabelValueAsync(lblATH, $"€{coinGeckoMarketData.Market_data!.Ath!.Eur}");
                                    lblATHPercentChange.Invoke((MethodInvoker)delegate
                                    {
                                        lblATHPercentChange.Text = $"{coinGeckoMarketData.Market_data.Ath_change_percentage!.Eur:F2}%";
                                    });
                                    UpdateLabelValueAsync(lblATHDate, Convert.ToString(coinGeckoMarketData.Market_data.Ath_date!.Eur).Substring(0, 10));

                                    DateTime parsedDate = DateTime.ParseExact(lblATHDate.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    DateTime currentDate = DateTime.Now.Date;
                                    TimeSpan difference = currentDate - parsedDate;
                                    lblATHDaysElapsed.Invoke((MethodInvoker)delegate
                                    {
                                        lblATHDaysElapsed.Text = $"{difference.Days} days ago";
                                    });

                                    UpdateLabelValueAsync(lbl24HoursHighestPrice, $"€{coinGeckoMarketData.Market_data.High_24h!.Eur}");
                                    UpdateLabelValueAsync(lbl24HoursLowestPrice, $"€{coinGeckoMarketData.Market_data.Low_24h!.Eur}");

                                    #region numeric values next to mini-chart
                                    //24 hours
                                    if (Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_24h_in_currency!.Eur) > highestAbsValuePriceChange)
                                    {
                                        highestAbsValuePriceChange = coinGeckoMarketData.Market_data.Price_change_percentage_24h_in_currency.Eur;
                                    }
                                    UpdateLabelValueAsync(lblPrice24Hours, $"{coinGeckoMarketData.Market_data.Price_change_percentage_24h_in_currency.Eur:F2}%");
                                    //7 days
                                    if (Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_7d_in_currency!.Eur) > highestAbsValuePriceChange)
                                    {
                                        highestAbsValuePriceChange = coinGeckoMarketData.Market_data.Price_change_percentage_7d_in_currency.Eur;
                                    }
                                    UpdateLabelValueAsync(lblPrice7Days, $"{coinGeckoMarketData.Market_data.Price_change_percentage_7d_in_currency.Eur:F2}%");
                                    //14 days 
                                    if (Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_14d_in_currency!.Eur) > highestAbsValuePriceChange)
                                    {
                                        highestAbsValuePriceChange = coinGeckoMarketData.Market_data.Price_change_percentage_14d_in_currency.Eur;
                                    }
                                    UpdateLabelValueAsync(lblPrice14Days, $"{coinGeckoMarketData.Market_data.Price_change_percentage_14d_in_currency.Eur:F2}%");
                                    //30 days
                                    if (Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_30d_in_currency!.Eur) > highestAbsValuePriceChange)
                                    {
                                        highestAbsValuePriceChange = coinGeckoMarketData.Market_data.Price_change_percentage_30d_in_currency.Eur;
                                    }
                                    UpdateLabelValueAsync(lblPrice30Days, $"{coinGeckoMarketData.Market_data.Price_change_percentage_30d_in_currency.Eur:F2}%");
                                    //60 days
                                    if (Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_60d_in_currency!.Eur) > highestAbsValuePriceChange)
                                    {
                                        highestAbsValuePriceChange = coinGeckoMarketData.Market_data.Price_change_percentage_60d_in_currency.Eur;
                                    }
                                    UpdateLabelValueAsync(lblPrice60Days, $"{coinGeckoMarketData.Market_data.Price_change_percentage_60d_in_currency.Eur:F2}%");
                                    //200 days
                                    if (Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_200d_in_currency!.Eur) > highestAbsValuePriceChange)
                                    {
                                        highestAbsValuePriceChange = coinGeckoMarketData.Market_data.Price_change_percentage_200d_in_currency.Eur;
                                    }
                                    UpdateLabelValueAsync(lblPrice200Days, $"{coinGeckoMarketData.Market_data.Price_change_percentage_200d_in_currency.Eur:F2}%");
                                    //1 year
                                    if (Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_1y_in_currency!.Eur) > highestAbsValuePriceChange)
                                    {
                                        highestAbsValuePriceChange = coinGeckoMarketData.Market_data.Price_change_percentage_1y_in_currency.Eur;
                                    }
                                    UpdateLabelValueAsync(lblPrice1Year, $"{coinGeckoMarketData.Market_data.Price_change_percentage_1y_in_currency.Eur:F2}%");
                                    #endregion

                                    if (highestAbsValuePriceChange > 0)
                                    {
                                        //24 hours
                                        panel24hours.Invoke((MethodInvoker)delegate
                                        {
                                            panel24hours.Width = Convert.ToInt32((Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_24h_in_currency.Eur) / highestAbsValuePriceChange) * (60.0 * UIScale));
                                        });
                                        if (panel24hours.Width == 0)
                                        {
                                            panel24hours.Invoke((MethodInvoker)delegate
                                            {
                                                panel24hours.Width = 1;
                                            });
                                        }
                                        if (coinGeckoMarketData.Market_data.Price_change_percentage_24h_in_currency.Eur >= 0)
                                        {
                                            panel24hours.Invoke((MethodInvoker)delegate
                                            {
                                                panel24hours.Location = new Point((int)(61 * UIScale), panel24hours.Location.Y);
                                                panel24hours.BackColor = Color.OliveDrab;
                                            });
                                        }
                                        else
                                        {
                                            panel24hours.Invoke((MethodInvoker)delegate
                                            {
                                                panel24hours.Location = new Point((int)(60 * UIScale) - panel24hours.Width, panel24hours.Location.Y);
                                                panel24hours.BackColor = Color.IndianRed;
                                            });
                                        }

                                        //7 days
                                        panel7days.Invoke((MethodInvoker)delegate
                                        {
                                            panel7days.Width = Convert.ToInt32((Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_7d_in_currency.Eur) / highestAbsValuePriceChange) * (60.0 * UIScale));
                                        });

                                        if (panel7days.Width == 0)
                                        {
                                            panel7days.Invoke((MethodInvoker)delegate
                                            {
                                                panel7days.Width = 1;
                                            });
                                        }
                                        if (coinGeckoMarketData.Market_data.Price_change_percentage_7d_in_currency.Eur >= 0)
                                        {
                                            panel7days.Invoke((MethodInvoker)delegate
                                            {
                                                panel7days.Location = new Point((int)(61 * UIScale), panel7days.Location.Y);
                                                panel7days.BackColor = Color.OliveDrab;
                                            });
                                        }
                                        else
                                        {
                                            panel7days.Invoke((MethodInvoker)delegate
                                            {
                                                panel7days.Location = new Point((int)(60 * UIScale) - panel7days.Width, panel7days.Location.Y);
                                                panel7days.BackColor = Color.IndianRed;
                                            });
                                        }

                                        //14 days
                                        panel14days.Invoke((MethodInvoker)delegate
                                        {
                                            panel14days.Width = Convert.ToInt32((Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_14d_in_currency.Eur) / highestAbsValuePriceChange) * (60.0 * UIScale));
                                        });
                                        if (panel14days.Width == 0)
                                        {
                                            panel14days.Invoke((MethodInvoker)delegate
                                            {
                                                panel14days.Width = 1;
                                            });
                                        }
                                        if (coinGeckoMarketData.Market_data.Price_change_percentage_14d_in_currency.Eur >= 0)
                                        {
                                            panel14days.Invoke((MethodInvoker)delegate
                                            {
                                                panel14days.Location = new Point((int)(61 * UIScale), panel14days.Location.Y);
                                                panel14days.BackColor = Color.OliveDrab;
                                            });
                                        }
                                        else
                                        {
                                            panel14days.Invoke((MethodInvoker)delegate
                                            {
                                                panel14days.Location = new Point((int)(60 * UIScale) - panel14days.Width, panel14days.Location.Y);
                                                panel14days.BackColor = Color.IndianRed;
                                            });
                                        }

                                        //30 days
                                        panel30days.Invoke((MethodInvoker)delegate
                                        {
                                            panel30days.Width = Convert.ToInt32((Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_30d_in_currency.Eur) / highestAbsValuePriceChange) * (60.0 * UIScale));
                                        });

                                        if (panel30days.Width == 0)
                                        {
                                            panel30days.Invoke((MethodInvoker)delegate
                                            {
                                                panel30days.Width = 1;
                                            });
                                        }
                                        if (coinGeckoMarketData.Market_data.Price_change_percentage_30d_in_currency.Eur >= 0)
                                        {
                                            panel30days.Invoke((MethodInvoker)delegate
                                            {
                                                panel30days.Location = new Point((int)(61 * UIScale), panel30days.Location.Y);
                                                panel30days.BackColor = Color.OliveDrab;
                                            });
                                        }
                                        else
                                        {
                                            panel30days.Invoke((MethodInvoker)delegate
                                            {
                                                panel30days.Location = new Point((int)(60 * UIScale) - panel30days.Width, panel30days.Location.Y);
                                                panel30days.BackColor = Color.IndianRed;
                                            });
                                        }

                                        //60 days
                                        panel60days.Invoke((MethodInvoker)delegate
                                        {
                                            panel60days.Width = Convert.ToInt32((Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_60d_in_currency.Eur) / highestAbsValuePriceChange) * (60.0 * UIScale));
                                        });
                                        if (panel60days.Width == 0)
                                        {
                                            panel60days.Invoke((MethodInvoker)delegate
                                            {
                                                panel60days.Width = 1;
                                            });
                                        }
                                        if (coinGeckoMarketData.Market_data.Price_change_percentage_60d_in_currency.Eur >= 0)
                                        {
                                            panel60days.Invoke((MethodInvoker)delegate
                                            {
                                                panel60days.Location = new Point((int)(61 * UIScale), panel60days.Location.Y);
                                                panel60days.BackColor = Color.OliveDrab;
                                            });
                                        }
                                        else
                                        {
                                            panel60days.Invoke((MethodInvoker)delegate
                                            {
                                                panel60days.Location = new Point((int)(60 * UIScale) - panel60days.Width, panel60days.Location.Y);
                                                panel60days.BackColor = Color.IndianRed;
                                            });
                                        }

                                        //200 days
                                        panel200days.Invoke((MethodInvoker)delegate
                                        {
                                            panel200days.Width = Convert.ToInt32((Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_200d_in_currency.Eur) / highestAbsValuePriceChange) * (60.0 * UIScale));
                                        });
                                        if (panel200days.Width == 0)
                                        {
                                            panel200days.Invoke((MethodInvoker)delegate
                                            {
                                                panel200days.Width = 1;
                                            });
                                        }
                                        if (coinGeckoMarketData.Market_data.Price_change_percentage_200d_in_currency.Eur >= 0)
                                        {
                                            panel200days.Invoke((MethodInvoker)delegate
                                            {
                                                panel200days.Location = new Point((int)(61 * UIScale), panel200days.Location.Y);
                                                panel200days.BackColor = Color.OliveDrab;
                                            });
                                        }
                                        else
                                        {
                                            panel200days.Invoke((MethodInvoker)delegate
                                            {
                                                panel200days.Location = new Point((int)(60 * UIScale) - panel200days.Width, panel200days.Location.Y);
                                                panel200days.BackColor = Color.IndianRed;
                                            });
                                        }

                                        //1 year
                                        panel1year.Invoke((MethodInvoker)delegate
                                        {
                                            panel1year.Width = Convert.ToInt32((Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_1y_in_currency.Eur) / highestAbsValuePriceChange) * (60.0 * UIScale));
                                        });
                                        if (panel1year.Width == 0)
                                        {
                                            panel1year.Invoke((MethodInvoker)delegate
                                            {
                                                panel1year.Width = 1;
                                            });
                                        }
                                        if (coinGeckoMarketData.Market_data.Price_change_percentage_1y_in_currency.Eur >= 0)
                                        {
                                            panel1year.Invoke((MethodInvoker)delegate
                                            {
                                                panel1year.Location = new Point((int)(61 * UIScale), panel1year.Location.Y);
                                                panel1year.BackColor = Color.OliveDrab;
                                            });
                                        }
                                        else
                                        {
                                            panel1year.Invoke((MethodInvoker)delegate
                                            {
                                                panel1year.Location = new Point((int)(60 * UIScale) - panel1year.Width, panel1year.Location.Y);
                                                panel1year.BackColor = Color.IndianRed;
                                            });
                                        }
                                    }

                                }
                                //XAU
                                if (btnXAU.Enabled == false)
                                {
                                    UpdateLabelValueAsync(lblATH, $"\U0001fa99{coinGeckoMarketData.Market_data!.Ath!.Xau}");
                                    lblATHPercentChange.Invoke((MethodInvoker)delegate
                                    {
                                        lblATHPercentChange.Text = $"{coinGeckoMarketData.Market_data.Ath_change_percentage!.Xau:F2}%";
                                    });
                                    UpdateLabelValueAsync(lblATHDate, Convert.ToString(coinGeckoMarketData.Market_data.Ath_date!.Xau).Substring(0, 10));

                                    DateTime parsedDate = DateTime.ParseExact(lblATHDate.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    DateTime currentDate = DateTime.Now.Date;
                                    TimeSpan difference = currentDate - parsedDate;
                                    lblATHDaysElapsed.Invoke((MethodInvoker)delegate
                                    {
                                        lblATHDaysElapsed.Text = $"{difference.Days} days ago";
                                    });

                                    UpdateLabelValueAsync(lbl24HoursHighestPrice, $"\U0001fa99{coinGeckoMarketData.Market_data.High_24h!.Xau}");
                                    UpdateLabelValueAsync(lbl24HoursLowestPrice, $"\U0001fa99{coinGeckoMarketData.Market_data.Low_24h!.Xau}");

                                    #region numeric values next to mini-chart
                                    //24 hours
                                    if (Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_24h_in_currency!.Xau) > highestAbsValuePriceChange)
                                    {
                                        highestAbsValuePriceChange = coinGeckoMarketData.Market_data.Price_change_percentage_24h_in_currency.Xau;
                                    }
                                    UpdateLabelValueAsync(lblPrice24Hours, $"{coinGeckoMarketData.Market_data.Price_change_percentage_24h_in_currency.Xau:F2}%");
                                    //7 days
                                    if (Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_7d_in_currency!.Xau) > highestAbsValuePriceChange)
                                    {
                                        highestAbsValuePriceChange = coinGeckoMarketData.Market_data.Price_change_percentage_7d_in_currency.Xau;
                                    }
                                    UpdateLabelValueAsync(lblPrice7Days, $"{coinGeckoMarketData.Market_data.Price_change_percentage_7d_in_currency.Xau:F2}%");
                                    //14 days 
                                    if (Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_14d_in_currency!.Xau) > highestAbsValuePriceChange)
                                    {
                                        highestAbsValuePriceChange = coinGeckoMarketData.Market_data.Price_change_percentage_14d_in_currency.Xau;
                                    }
                                    UpdateLabelValueAsync(lblPrice14Days, $"{coinGeckoMarketData.Market_data.Price_change_percentage_14d_in_currency.Xau:F2}%");
                                    //30 days
                                    if (Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_30d_in_currency!.Xau) > highestAbsValuePriceChange)
                                    {
                                        highestAbsValuePriceChange = coinGeckoMarketData.Market_data.Price_change_percentage_30d_in_currency.Xau;
                                    }
                                    UpdateLabelValueAsync(lblPrice30Days, $"{coinGeckoMarketData.Market_data.Price_change_percentage_30d_in_currency.Xau:F2}%");
                                    //60 days
                                    if (Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_60d_in_currency!.Xau) > highestAbsValuePriceChange)
                                    {
                                        highestAbsValuePriceChange = coinGeckoMarketData.Market_data.Price_change_percentage_60d_in_currency.Xau;
                                    }
                                    UpdateLabelValueAsync(lblPrice60Days, $"{coinGeckoMarketData.Market_data.Price_change_percentage_60d_in_currency.Xau:F2}%");
                                    //200 days
                                    if (Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_200d_in_currency!.Xau) > highestAbsValuePriceChange)
                                    {
                                        highestAbsValuePriceChange = coinGeckoMarketData.Market_data.Price_change_percentage_200d_in_currency.Xau;
                                    }
                                    UpdateLabelValueAsync(lblPrice200Days, $"{coinGeckoMarketData.Market_data.Price_change_percentage_200d_in_currency.Xau:F2}%");
                                    //1 year
                                    if (Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_1y_in_currency!.Xau) > highestAbsValuePriceChange)
                                    {
                                        highestAbsValuePriceChange = coinGeckoMarketData.Market_data.Price_change_percentage_1y_in_currency.Xau;
                                    }
                                    UpdateLabelValueAsync(lblPrice1Year, $"{coinGeckoMarketData.Market_data.Price_change_percentage_1y_in_currency.Xau:F2}%");
                                    #endregion

                                    if (highestAbsValuePriceChange > 0)
                                    {
                                        //24 hours
                                        panel24hours.Invoke((MethodInvoker)delegate
                                        {
                                            panel24hours.Width = Convert.ToInt32((Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_24h_in_currency.Xau) / highestAbsValuePriceChange) * (60.0 * UIScale));
                                        });
                                        if (panel24hours.Width == 0)
                                        {
                                            panel24hours.Invoke((MethodInvoker)delegate
                                            {
                                                panel24hours.Width = 1;
                                            });
                                        }
                                        if (coinGeckoMarketData.Market_data.Price_change_percentage_24h_in_currency.Xau >= 0)
                                        {
                                            panel24hours.Invoke((MethodInvoker)delegate
                                            {
                                                panel24hours.Location = new Point((int)(61 * UIScale), panel24hours.Location.Y);
                                                panel24hours.BackColor = Color.OliveDrab;
                                            });
                                        }
                                        else
                                        {
                                            panel24hours.Invoke((MethodInvoker)delegate
                                            {
                                                panel24hours.Location = new Point((int)(60 * UIScale) - panel24hours.Width, panel24hours.Location.Y);
                                                panel24hours.BackColor = Color.IndianRed;
                                            });
                                        }

                                        //7 days
                                        panel7days.Invoke((MethodInvoker)delegate
                                        {
                                            panel7days.Width = Convert.ToInt32((Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_7d_in_currency.Xau) / highestAbsValuePriceChange) * (60.0 * UIScale));
                                        });

                                        if (panel7days.Width == 0)
                                        {
                                            panel7days.Invoke((MethodInvoker)delegate
                                            {
                                                panel7days.Width = 1;
                                            });
                                        }
                                        if (coinGeckoMarketData.Market_data.Price_change_percentage_7d_in_currency.Xau >= 0)
                                        {
                                            panel7days.Invoke((MethodInvoker)delegate
                                            {
                                                panel7days.Location = new Point((int)(61 * UIScale), panel7days.Location.Y);
                                                panel7days.BackColor = Color.OliveDrab;
                                            });
                                        }
                                        else
                                        {
                                            panel7days.Invoke((MethodInvoker)delegate
                                            {
                                                panel7days.Location = new Point((int)(60 * UIScale) - panel7days.Width, panel7days.Location.Y);
                                                panel7days.BackColor = Color.IndianRed;
                                            });
                                        }

                                        //14 days
                                        panel14days.Invoke((MethodInvoker)delegate
                                        {
                                            panel14days.Width = Convert.ToInt32((Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_14d_in_currency.Xau) / highestAbsValuePriceChange) * (60.0 * UIScale));
                                        });
                                        if (panel14days.Width == 0)
                                        {
                                            panel14days.Invoke((MethodInvoker)delegate
                                            {
                                                panel14days.Width = 1;
                                            });
                                        }
                                        if (coinGeckoMarketData.Market_data.Price_change_percentage_14d_in_currency.Xau >= 0)
                                        {
                                            panel14days.Invoke((MethodInvoker)delegate
                                            {
                                                panel14days.Location = new Point((int)(61 * UIScale), panel14days.Location.Y);
                                                panel14days.BackColor = Color.OliveDrab;
                                            });
                                        }
                                        else
                                        {
                                            panel14days.Invoke((MethodInvoker)delegate
                                            {
                                                panel14days.Location = new Point((int)(60 * UIScale) - panel14days.Width, panel14days.Location.Y);
                                                panel14days.BackColor = Color.IndianRed;
                                            });
                                        }

                                        //30 days
                                        panel30days.Invoke((MethodInvoker)delegate
                                        {
                                            panel30days.Width = Convert.ToInt32((Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_30d_in_currency.Xau) / highestAbsValuePriceChange) * (60.0 * UIScale));
                                        });

                                        if (panel30days.Width == 0)
                                        {
                                            panel30days.Invoke((MethodInvoker)delegate
                                            {
                                                panel30days.Width = 1;
                                            });
                                        }
                                        if (coinGeckoMarketData.Market_data.Price_change_percentage_30d_in_currency.Xau >= 0)
                                        {
                                            panel30days.Invoke((MethodInvoker)delegate
                                            {
                                                panel30days.Location = new Point((int)(61 * UIScale), panel30days.Location.Y);
                                                panel30days.BackColor = Color.OliveDrab;
                                            });
                                        }
                                        else
                                        {
                                            panel30days.Invoke((MethodInvoker)delegate
                                            {
                                                panel30days.Location = new Point((int)(60 * UIScale) - panel30days.Width, panel30days.Location.Y);
                                                panel30days.BackColor = Color.IndianRed;
                                            });
                                        }

                                        //60 days
                                        panel60days.Invoke((MethodInvoker)delegate
                                        {
                                            panel60days.Width = Convert.ToInt32((Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_60d_in_currency.Xau) / highestAbsValuePriceChange) * (60.0 * UIScale));
                                        });
                                        if (panel60days.Width == 0)
                                        {
                                            panel60days.Invoke((MethodInvoker)delegate
                                            {
                                                panel60days.Width = 1;
                                            });
                                        }
                                        if (coinGeckoMarketData.Market_data.Price_change_percentage_60d_in_currency.Xau >= 0)
                                        {
                                            panel60days.Invoke((MethodInvoker)delegate
                                            {
                                                panel60days.Location = new Point((int)(61 * UIScale), panel60days.Location.Y);
                                                panel60days.BackColor = Color.OliveDrab;
                                            });
                                        }
                                        else
                                        {
                                            panel60days.Invoke((MethodInvoker)delegate
                                            {
                                                panel60days.Location = new Point((int)(60 * UIScale) - panel60days.Width, panel60days.Location.Y);
                                                panel60days.BackColor = Color.IndianRed;
                                            });
                                        }

                                        //200 days
                                        panel200days.Invoke((MethodInvoker)delegate
                                        {
                                            panel200days.Width = Convert.ToInt32((Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_200d_in_currency.Xau) / highestAbsValuePriceChange) * (60.0 * UIScale));
                                        });
                                        if (panel200days.Width == 0)
                                        {
                                            panel200days.Invoke((MethodInvoker)delegate
                                            {
                                                panel200days.Width = 1;
                                            });
                                        }
                                        if (coinGeckoMarketData.Market_data.Price_change_percentage_200d_in_currency.Xau >= 0)
                                        {
                                            panel200days.Invoke((MethodInvoker)delegate
                                            {
                                                panel200days.Location = new Point((int)(61 * UIScale), panel200days.Location.Y);
                                                panel200days.BackColor = Color.OliveDrab;
                                            });
                                        }
                                        else
                                        {
                                            panel200days.Invoke((MethodInvoker)delegate
                                            {
                                                panel200days.Location = new Point((int)(60 * UIScale) - panel200days.Width, panel200days.Location.Y);
                                                panel200days.BackColor = Color.IndianRed;
                                            });
                                        }

                                        //1 year
                                        panel1year.Invoke((MethodInvoker)delegate
                                        {
                                            panel1year.Width = Convert.ToInt32((Math.Abs(coinGeckoMarketData.Market_data.Price_change_percentage_1y_in_currency.Xau) / highestAbsValuePriceChange) * (60.0 * UIScale));
                                        });
                                        if (panel1year.Width == 0)
                                        {
                                            panel1year.Invoke((MethodInvoker)delegate
                                            {
                                                panel1year.Width = 1;
                                            });
                                        }
                                        if (coinGeckoMarketData.Market_data.Price_change_percentage_1y_in_currency.Xau >= 0)
                                        {
                                            panel1year.Invoke((MethodInvoker)delegate
                                            {
                                                panel1year.Location = new Point((int)(61 * UIScale), panel1year.Location.Y);
                                                panel1year.BackColor = Color.OliveDrab;
                                            });
                                        }
                                        else
                                        {
                                            panel1year.Invoke((MethodInvoker)delegate
                                            {
                                                panel1year.Location = new Point((int)(60 * UIScale) - panel1year.Width, panel1year.Location.Y);
                                                panel1year.BackColor = Color.IndianRed;
                                            });
                                        }
                                    }

                                }
                            }
                        }
                        else
                        {
                            //zz
                            Control[] controlsToShowAsDisabled = { lblATH, lblATHPercentChange, lblATHDate, lblATHDaysElapsed, lbl24HoursHighestPrice, lbl24HoursLowestPrice, lblPrice14Days, lblPrice1Year, lblPrice200Days, lblPrice24Hours, lblPrice30Days, lblPrice60Days, lblPrice7Days };
                            foreach (Control control in controlsToShowAsDisabled)
                            {
                                control.Invoke((MethodInvoker)delegate
                                {
                                    control.Text = "disabled";
                                });
                            }

                            Control[] panelsToShrink = { panel24hours, panel7days, panel14days, panel30days, panel60days, panel200days, panel1year };
                            foreach (Control control in panelsToShrink)
                            {
                                control.Invoke((MethodInvoker)delegate
                                {
                                    control.Width = 0;
                                });
                            }
                        }
                    }
                    else
                    {
                        Control[] controlsToShowAsTestnet = { lblATH, lblATHPercentChange, lblATHDate, lblATHDaysElapsed, lbl24HoursHighestPrice, lbl24HoursLowestPrice, lblPrice14Days, lblPrice1Year, lblPrice200Days, lblPrice24Hours, lblPrice30Days, lblPrice60Days, lblPrice7Days };
                        foreach (Control control in controlsToShowAsTestnet)
                        {
                            control.Invoke((MethodInvoker)delegate
                            {
                                control.Text = "unavailable on TestNet";
                            });
                        }

                        Control[] panelsToShrink = { panel24hours, panel7days, panel14days, panel30days, panel60days, panel200days, panel1year };
                        foreach (Control control in panelsToShrink)
                        {
                            control.Invoke((MethodInvoker)delegate
                            {
                                control.Width = 0;
                            });
                        }
                    }
                    #region shuffle stuff in to place
                    label80.Invoke((MethodInvoker)delegate
                    {
                        label80.Location = new Point(lblATH.Location.X + lblATH.Width, label80.Location.Y);
                    });
                    lblATHPercentChange.Invoke((MethodInvoker)delegate
                    {
                        lblATHPercentChange.Location = new Point(label80.Location.X + label80.Width, lblATHPercentChange.Location.Y);
                    });
                    label333.Invoke((MethodInvoker)delegate
                    {
                        label333.Location = new Point(lblATHDate.Location.X + lblATHDate.Width, label333.Location.Y);
                    });
                    lblATHDaysElapsed.Invoke((MethodInvoker)delegate
                    {
                        lblATHDaysElapsed.Location = new Point(label333.Location.X + label333.Width, lblATHDaysElapsed.Location.Y);
                    });
                    label339.Invoke((MethodInvoker)delegate
                    {
                        label339.Location = new Point(lbl24HoursHighestPrice.Location.X + lbl24HoursHighestPrice.Width, label339.Location.Y);
                    });
                    lbl24HoursLowestPrice.Invoke((MethodInvoker)delegate
                    {
                        lbl24HoursLowestPrice.Location = new Point(label339.Location.X + label339.Width, lbl24HoursLowestPrice.Location.Y);
                    });
                    #endregion
                    SetLightsMessagesAndResetTimers();
                }
                catch (Exception ex)
                {
                    errorOccurred = true;
                    HandleException(ex, "Dashboards(Task3)");
                }
            });

            #endregion
            #region task 4 - messari.io api
            Task task4 = Task.Run(async () =>  // messari.io for various stats
            {
                try
                {
                    if (!testNet)
                    {
                        if (RunMessariAPI)
                        {
                            UpdateLoadingScreenMessage("determining network usage...", "Initialising...");
                            var MessariMarketDataJson = await _MessariMarketDataService.GetMessariMarketDataAsync().ConfigureAwait(true);
                            var messariMarketData = JsonConvert.DeserializeObject<MessariRootobject>(MessariMarketDataJson);

                            if (messariMarketData != null)
                            {
                                int active_addresses = messariMarketData.Data!.Blockchain_stats_24_hours!.Count_of_active_addresses;
                                if (active_addresses > 0) // this api sometimes doesn't populate this field with anything but 0
                                {
                                    UpdateLabelValueAsync(lblActiveAddresses, Convert.ToString(messariMarketData.Data.Blockchain_stats_24_hours.Count_of_active_addresses));
                                }
                                else
                                {
                                    lblActiveAddresses.Invoke((MethodInvoker)delegate
                                    {
                                        lblActiveAddresses.Text = "no data";
                                    });
                                }
                                int total_addresses = messariMarketData.Data.On_chain_data!.Addresses_count;
                                if (total_addresses > 0) // this api sometimes doesn't populate this field with anything but 0
                                {
                                    UpdateLabelValueAsync(lblTotalAddresses, Convert.ToString(messariMarketData.Data.On_chain_data.Addresses_count));
                                }
                                else
                                {
                                    lblTotalAddresses.Invoke((MethodInvoker)delegate
                                    {
                                        lblTotalAddresses.Text = "no data";
                                    });
                                }
                                label32.Invoke((MethodInvoker)delegate
                                {
                                    label32.Location = new Point(lblTotalAddresses.Location.X + lblTotalAddresses.Width, label32.Location.Y);
                                });
                                lblActiveAddresses.Invoke((MethodInvoker)delegate
                                {
                                    lblActiveAddresses.Location = new Point(label32.Location.X + label32.Width, lblActiveAddresses.Location.Y);
                                });


                                UpdateLabelValueAsync(lblBlocksIn24Hours, Convert.ToString(messariMarketData.Data.Blockchain_stats_24_hours.Count_of_blocks_added));
                                UpdateLabelValueAsync(lbl24HourTransCount, Convert.ToString(messariMarketData.Data.Blockchain_stats_24_hours.Count_of_tx));

                                decimal volume24hBTC = Convert.ToDecimal(messariMarketData.Data.On_chain_data.Txn_volume_last_24_hours_native_units);
                                UpdateLabelValueAsync(lbl24HourBTCSent, Convert.ToString(messariMarketData.Data.On_chain_data.Txn_volume_last_24_hours_native_units));
                                UpdateLabelValueAsync(lbl24HourBTCSentFiat, $"{fiatSymbol}{(volume24hBTC * OneBTCinSelectedCurrency):N2}");
                                lbl24HourBTCSentFiat.Invoke((MethodInvoker)delegate
                                {
                                    lbl24HourBTCSentFiat.Location = new Point(lbl24HourBTCSent.Location.X + lbl24HourBTCSent.Width, lbl24HourBTCSentFiat.Location.Y);
                                });
                                UpdateLabelValueAsync(lblChangeSinceCycleLow, $"+{messariMarketData.Data.Cycle_low!.Percent_up:N2}%");
                                label14.Invoke((MethodInvoker)delegate
                                {
                                    label14.Location = new Point(lblATHPercentChange.Location.X + lblATHPercentChange.Width, label14.Location.Y);
                                });
                                lblChangeSinceCycleLow.Invoke((MethodInvoker)delegate
                                {
                                    lblChangeSinceCycleLow.Location = new Point(label14.Location.X + label14.Width, lblChangeSinceCycleLow.Location.Y);
                                });
                                    
                                UpdateLabelValueAsync(lblUTXOAvgAge, $"{(int)(messariMarketData.Data.On_chain_data.Average_utxo_age)} days");
                                UpdateLabelValueAsync(lblUTXOMedAge, $"{(int)(messariMarketData.Data.On_chain_data.Median_utxo_age)} days");

                                #region values next to distribution bars
                                UpdateLabelValueAsync(lblAddresses100kSats, Convert.ToString(messariMarketData.Data.On_chain_data.Addresses_balance_greater_0_001_native_units_count));
                                UpdateLabelValueAsync(lblAddresses1mSats, Convert.ToString(messariMarketData.Data.On_chain_data.Addresses_balance_greater_0_01_native_units_count));
                                UpdateLabelValueAsync(lblAddresses10mSats, Convert.ToString(messariMarketData.Data.On_chain_data.Addresses_balance_greater_0_1_native_units_count));
                                UpdateLabelValueAsync(lblAddresses1BTC, Convert.ToString(messariMarketData.Data.On_chain_data.Addresses_balance_greater_1_native_units_count));
                                UpdateLabelValueAsync(lblAddresses10BTC, Convert.ToString(messariMarketData.Data.On_chain_data.Addresses_balance_greater_10_native_units_count));
                                UpdateLabelValueAsync(lblAddresses100BTC, Convert.ToString(messariMarketData.Data.On_chain_data.Addresses_balance_greater_100_native_units_count));
                                UpdateLabelValueAsync(lblAddresses1000BTC, Convert.ToString(messariMarketData.Data.On_chain_data.Addresses_balance_greater_1k_native_units_count));
                                UpdateLabelValueAsync(lblAddresses10000BTC, Convert.ToString(messariMarketData.Data.On_chain_data.Addresses_balance_greater_10k_native_units_count));
                                UpdateLabelValueAsync(lblAddresses100kBTC, Convert.ToString(messariMarketData.Data.On_chain_data.Addresses_balance_greater_100k_native_units_count));
                                UpdateLabelValueAsync(lblAddresses1mBTC, Convert.ToString(messariMarketData.Data.On_chain_data.Addresses_balance_greater_1m_native_units_count));
                                UpdateLabelValueAsync(lblIssuance, Convert.ToString(messariMarketData.Data.On_chain_data.Issuance_last_24_hours_native_units));
                                UpdateLabelValueAsync(lblTotalUTXOs, Convert.ToString(messariMarketData.Data.On_chain_data.Utxo_count_last_24_hours));
                                #endregion

                                #region distribution bar widths
                                if (!btnDistributionLin.Enabled)
                                {
                                    DistributionBarsLinear();
                                }
                                else
                                {
                                    DistributionBarsLog();
                                }
                                #endregion

                                label33.Invoke((MethodInvoker)delegate
                                {
                                    label33.Location = new Point(lblTotalUTXOs.Location.X + lblTotalUTXOs.Width, label33.Location.Y);
                                });
                                lblUTXOAvgAge.Invoke((MethodInvoker)delegate
                                {
                                    lblUTXOAvgAge.Location = new Point(label33.Location.X + label33.Width, lblUTXOAvgAge.Location.Y);
                                });
                                label360.Invoke((MethodInvoker)delegate
                                {
                                    label360.Location = new Point(lblUTXOAvgAge.Location.X + lblUTXOAvgAge.Width, label360.Location.Y);
                                });
                                lblUTXOMedAge.Invoke((MethodInvoker)delegate
                                {
                                    lblUTXOMedAge.Location = new Point(label360.Location.X + label360.Width, lblUTXOMedAge.Location.Y);
                                });
                            }
                        }
                        else
                        {
                            Control[] controlsToShowAsDisabled = { lblActiveAddresses, lblBlocksIn24Hours, lbl24HourBTCSent, lbl24HourTransCount, lblAddresses100kSats, lblAddresses1mSats, lblAddresses10mSats, lblAddresses1BTC, lblAddresses10BTC, lblAddresses100BTC, lblAddresses1000BTC, lblAddresses10000BTC, lblAddresses100kBTC, lblAddresses1mBTC, lblIssuance, lblTotalUTXOs, lblChangeSinceCycleLow, lblTotalAddresses };
                            foreach (Control control in controlsToShowAsDisabled)
                            {
                                control.Invoke((MethodInvoker)delegate
                                {
                                    control.Text = "disabled";
                                });
                            }
                        }
                    }
                    else
                    {
                        Control[] controlsToShowAsTestnet = { lblActiveAddresses, lblBlocksIn24Hours, lbl24HourBTCSent, lbl24HourTransCount, lblAddresses100kSats, lblAddresses1mSats, lblAddresses10mSats, lblAddresses1BTC, lblAddresses10BTC, lblAddresses100BTC, lblAddresses1000BTC, lblAddresses10000BTC, lblAddresses100kBTC, lblAddresses1mBTC, lblIssuance, lblTotalUTXOs, lblChangeSinceCycleLow, lblTotalAddresses };
                        foreach (Control control in controlsToShowAsTestnet)
                        {
                            control.Invoke((MethodInvoker)delegate
                            {
                                control.Text = "unavailable on TestNet";
                            });
                        }
                    }
                    #region shuffle stuff in to place
                    lblPoolRankingChart.Invoke((MethodInvoker)delegate
                    {
                        lblPoolRankingChart.Location = new Point(lblBlocksIn24Hours.Location.X + lblBlocksIn24Hours.Width, lblPoolRankingChart.Location.Y);
                    });
                    lblUniqueAddressesChart.Invoke((MethodInvoker)delegate
                    {
                        lblUniqueAddressesChart.Location = new Point(lblActiveAddresses.Location.X + lblActiveAddresses.Width, lblUniqueAddressesChart.Location.Y);
                    });
                    #endregion
                    SetLightsMessagesAndResetTimers();
                }
                catch (Exception ex)
                {
                    errorOccurred = true;
                    HandleException(ex, "Dashboards(Task4)");
                }
            });
            #endregion
            #region task 5 - derive halving date etc
            Task task5 = Task.Run(() =>  // derive/estimate halving block/date
            {
                try
                {
                    if (!testNet)
                    {
                        int currentBlock = Convert.ToInt32(lblHeaderBlockNumber.Text);
                        int halvingInterval = 210000;
                        int numberOfHalvings = currentBlock / halvingInterval;
                        int halveningBlock = (numberOfHalvings + 1) * halvingInterval;
                        int blocksLeft = halveningBlock - currentBlock;
                        int minutesRemaining = blocksLeft * 10; //assume 10 mins to mine each block on avg
                        int seconds_left = minutesRemaining * 60;
                        DateTime currentDateTime = DateTime.UtcNow;
                        DateTime estimatedHalvingDateTime = currentDateTime.AddMinutes(minutesRemaining);
                        string halveningTime = estimatedHalvingDateTime.ToString("yyyy-MM-dd HH:mm:ss");

                        UpdateLabelValueAsync(lblProgressToHalving, $"{halveningBlock} / {blocksLeft}");
                        int progressBarValue = 0;
                        try
                        {
                            progressBarValue = 210000 - Convert.ToInt32(blocksLeft);
                            if (progressBarValue > 210000 || progressBarValue < 0)
                            {
                                progressBarValue = 0;
                            }
                        }
                        catch (Exception)
                        {
                            progressBarValue = 0;
                        }
                        progressBarProgressToHalving.Value = progressBarValue;
                        progressBarBlockListHalvingProgress.Value = progressBarValue;
                        UpdateLabelValueAsync(lblBlockListHalvingBlockAndRemaining, $"{halveningBlock} / {blocksLeft}");
                        string halvening_time = halveningTime;
                        string halveningDate = "";
                        try
                        {
                            DateTime halveningDateTime = DateTime.ParseExact(halvening_time, "yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture);
                            halveningDate = halveningDateTime.Date.ToString("yyyy-MM-dd");
                        }
                        catch (Exception)
                        {
                            halveningDate = "9999-12-31";
                        }

                        lblEstimatedHalvingDate.Invoke((MethodInvoker)delegate
                        {
                            lblEstimatedHalvingDate.Text = $"{halveningDate}";
                        });
                        lblHalvingSecondsRemaining.Invoke((MethodInvoker)delegate
                        {
                            lblHalvingSecondsRemaining.Location = new Point(lblEstimatedHalvingDate.Location.X + lblEstimatedHalvingDate.Width - (int)(8 * UIScale), lblEstimatedHalvingDate.Location.Y);
                            if (seconds_left > 0)
                            {
                                lblHalvingSecondsRemaining.Text = Convert.ToString(seconds_left);
                                ObtainedHalvingSecondsRemainingYet = true; // signifies that we can now start deducting from this
                            }
                        });
                    }
                    else
                    {
                        progressBarProgressToHalving.Value = 0;
                        progressBarBlockListHalvingProgress.Value = 0;
                        lblProgressToHalving.Invoke((MethodInvoker)delegate
                        {
                            lblProgressToHalving.Text = "unavailable";
                        });
                        lblBlockListHalvingBlockAndRemaining.Invoke((MethodInvoker)delegate // Blocks list
                        {
                            lblBlockListHalvingBlockAndRemaining.Text = "unavailable";
                        });

                        lblEstimatedHalvingDate.Invoke((MethodInvoker)delegate
                        {
                            lblEstimatedHalvingDate.Text = "unavailable on TestNet";
                        });
                        lblHalvingSecondsRemaining.Invoke((MethodInvoker)delegate
                        {
                            lblHalvingSecondsRemaining.Text = "";
                        });
                    }
                    label301.Invoke((MethodInvoker)delegate
                    {
                        label301.Location = new Point(lblEstimatedHalvingDate.Location.X + lblEstimatedHalvingDate.Width, label301.Location.Y);
                    });
                    lblHalvingSecondsRemaining.Invoke((MethodInvoker)delegate
                    {
                        lblHalvingSecondsRemaining.Location = new Point(label301.Location.X + label301.Width, lblHalvingSecondsRemaining.Location.Y);
                    });
                    SetLightsMessagesAndResetTimers();
                }
                catch (Exception ex)
                {
                    errorOccurred = true;
                    HandleException(ex, "Dashboards(Task5)");
                }
            });
            #endregion
            await Task.WhenAll(task0, task2).ConfigureAwait(true);
            await Task.WhenAll(task3, task1, task4, task5).ConfigureAwait(true);

            if (errorOccurred)
            {
                intDisplayCountdownToRefresh = APIGroup1DisplayTimerIntervalSecsConstant;
                lblStatusLight.Invoke((MethodInvoker)delegate
                {
                    lblStatusLight.ForeColor = Color.Red;
                });
                lblStatusLight.Invoke((MethodInvoker)delegate
                {
                    lblStatusLight.Text = "🔴";
                });
            }
            panelLightningDashboard.ResumeLayout(false);
            panelBitcoinDashboard.ResumeLayout(false);
            ToggleLoadingAnimation("disable");
        }
        #endregion

        #region calculate distribution bar sizes (lin/log)
        private void DistributionBarsLinear()
        {
            try
            {
                panelAddresses100kSats.Invoke((MethodInvoker)delegate
                {
                    panelAddresses100kSats.Width = (int)(102.0 * UIScale);
                });
                panelAddresses1mSats.Invoke((MethodInvoker)delegate
                {
                    double ratio = (double)Convert.ToInt32(lblAddresses1mSats.Text) / Convert.ToInt32(lblAddresses100kSats.Text);
                    panelAddresses1mSats.Width = Convert.ToInt32(ratio * (102.0 * UIScale));
                });
                panelAddresses10mSats.Invoke((MethodInvoker)delegate
                {
                    double ratio = (double)Convert.ToInt32(lblAddresses10mSats.Text) / Convert.ToInt32(lblAddresses100kSats.Text);
                    panelAddresses10mSats.Width = Convert.ToInt32(ratio * (102.0 * UIScale));
                });
                panelAddresses1BTC.Invoke((MethodInvoker)delegate
                {
                    double ratio = (double)Convert.ToInt32(lblAddresses1BTC.Text) / Convert.ToInt32(lblAddresses100kSats.Text);
                    panelAddresses1BTC.Width = Convert.ToInt32(ratio * (102.0 * UIScale));
                });
                panelAddresses10BTC.Invoke((MethodInvoker)delegate
                {
                    double ratio = (double)Convert.ToInt32(lblAddresses10BTC.Text) / Convert.ToInt32(lblAddresses100kSats.Text);
                    panelAddresses10BTC.Width = Convert.ToInt32(ratio * (102.0 * UIScale));
                });
                panelAddresses100BTC.Invoke((MethodInvoker)delegate
                {
                    double ratio = (double)Convert.ToInt32(lblAddresses100BTC.Text) / Convert.ToInt32(lblAddresses100kSats.Text);
                    panelAddresses100BTC.Width = Convert.ToInt32(ratio * (102.0 * UIScale));
                });
                panelAddresses1000BTC.Invoke((MethodInvoker)delegate
                {
                    double ratio = (double)Convert.ToInt32(lblAddresses1000BTC.Text) / Convert.ToInt32(lblAddresses100kSats.Text);
                    panelAddresses1000BTC.Width = Convert.ToInt32(ratio * (102.0 * UIScale));
                });
                panelAddresses10000BTC.Invoke((MethodInvoker)delegate
                {
                    double ratio = (double)Convert.ToInt32(lblAddresses10000BTC.Text) / Convert.ToInt32(lblAddresses100kSats.Text);
                    panelAddresses10000BTC.Width = Convert.ToInt32(ratio * (102.0 * UIScale));
                });
                panelAddresses100kBTC.Invoke((MethodInvoker)delegate
                {
                    double ratio = (double)Convert.ToInt32(lblAddresses100kBTC.Text) / Convert.ToInt32(lblAddresses100kSats.Text);
                    panelAddresses100kBTC.Width = Convert.ToInt32(ratio * (102.0 * UIScale));
                });
                panelAddresses1mBTC.Invoke((MethodInvoker)delegate
                {
                    double ratio = (double)Convert.ToInt32(lblAddresses1mBTC.Text) / Convert.ToInt32(lblAddresses100kSats.Text);
                    panelAddresses1mBTC.Width = Convert.ToInt32(ratio * (102.0 * UIScale));
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "DistributionBarsLinear");
            }
        }

        private void DistributionBarsLog()
        {
            try
            {
                double value2 = Convert.ToDouble(lblAddresses100kSats.Text);

                panelAddresses100kSats.Invoke((MethodInvoker)delegate
                {
                    panelAddresses100kSats.Width = (int)(102.0 * UIScale);
                });
                panelAddresses1mSats.Invoke((MethodInvoker)delegate
                {
                    double value1 = Convert.ToDouble(lblAddresses1mSats.Text);
                    double ratio = Math.Log(value1 > 0 ? value1 : 1) / Math.Log(value2 > 0 ? value2 : 1);
                    panelAddresses1mSats.Width = Convert.ToInt32(ratio * (102.0 * UIScale));
                });

                panelAddresses10mSats.Invoke((MethodInvoker)delegate
                {
                    double value1 = Convert.ToDouble(lblAddresses10mSats.Text);
                    double ratio = Math.Log(value1 > 0 ? value1 : 1) / Math.Log(value2 > 0 ? value2 : 1);
                    panelAddresses10mSats.Width = Convert.ToInt32(ratio * (102.0 * UIScale));
                });

                panelAddresses1BTC.Invoke((MethodInvoker)delegate
                {
                    double value1 = Convert.ToDouble(lblAddresses1BTC.Text);
                    double ratio = Math.Log(value1 > 0 ? value1 : 1) / Math.Log(value2 > 0 ? value2 : 1);
                    panelAddresses1BTC.Width = Convert.ToInt32(ratio * (102.0 * UIScale));
                });

                panelAddresses10BTC.Invoke((MethodInvoker)delegate
                {
                    double value1 = Convert.ToDouble(lblAddresses10BTC.Text);
                    double ratio = Math.Log(value1 > 0 ? value1 : 1) / Math.Log(value2 > 0 ? value2 : 1);
                    panelAddresses10BTC.Width = Convert.ToInt32(ratio * (102.0 * UIScale));
                });

                panelAddresses100BTC.Invoke((MethodInvoker)delegate
                {
                    double value1 = Convert.ToDouble(lblAddresses100BTC.Text);
                    double ratio = Math.Log(value1 > 0 ? value1 : 1) / Math.Log(value2 > 0 ? value2 : 1);
                    panelAddresses100BTC.Width = Convert.ToInt32(ratio * (102.0 * UIScale));
                });

                panelAddresses1000BTC.Invoke((MethodInvoker)delegate
                {
                    double value1 = Convert.ToDouble(lblAddresses1000BTC.Text);
                    double ratio = Math.Log(value1 > 0 ? value1 : 1) / Math.Log(value2 > 0 ? value2 : 1);
                    panelAddresses1000BTC.Width = Convert.ToInt32(ratio * (102.0 * UIScale));
                });

                panelAddresses10000BTC.Invoke((MethodInvoker)delegate
                {
                    double value1 = Convert.ToDouble(lblAddresses10000BTC.Text);
                    double ratio = Math.Log(value1 > 0 ? value1 : 1) / Math.Log(value2 > 0 ? value2 : 1);
                    panelAddresses10000BTC.Width = Convert.ToInt32(ratio * (102.0 * UIScale));
                });

                panelAddresses100kBTC.Invoke((MethodInvoker)delegate
                {
                    double value1 = Convert.ToDouble(lblAddresses100kBTC.Text);
                    double ratio = Math.Log(value1 > 0 ? value1 : 1) / Math.Log(value2 > 0 ? value2 : 1);
                    panelAddresses100kBTC.Width = Convert.ToInt32(ratio * (102.0 * UIScale));
                });

                panelAddresses1mBTC.Invoke((MethodInvoker)delegate
                {
                    double value1 = Convert.ToDouble(lblAddresses1mBTC.Text);
                    double ratio = Math.Log(value1 > 0 ? value1 : 1) / Math.Log(value2 > 0 ? value2 : 1);
                    panelAddresses1mBTC.Width = Convert.ToInt32(ratio * (102.0 * UIScale));
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "DistributionBarsLog");
            }
        }
        #endregion
        #region select lin/log distribution bars
        private void BtnDistributionLin_Click(object sender, EventArgs e)
        {
            try
            {
                btnDistributionLog.Enabled = true;
                btnDistributionLin.Enabled = false;
                DistributionBarsLinear();
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnDistributionLin_Click");
            }
        }

        private void BtnDistributionLog_Click(object sender, EventArgs e)
        {
            try
            {
                btnDistributionLin.Enabled = true;
                btnDistributionLog.Enabled = false;
                DistributionBarsLog();
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnDistributionLog_Click");
            }
        }
        #endregion
        #region chart icon clicks
        private void PictureBoxHashrateChart_Click(object sender, EventArgs e)
        {
            ChartHashrateAsync();
            BtnMenuCharts_ClickAsync(sender, e);
        }

        private void PictureBoxDifficultyChart_Click(object sender, EventArgs e)
        {
            ChartDifficultyAsync();
            BtnMenuCharts_ClickAsync(sender, e);
        }

        private void PictureBoxPriceChart_Click(object sender, EventArgs e)
        {
            ChartPriceAsync();
            BtnMenuCharts_ClickAsync(sender, e);
        }

        private void PictureBoxPoolRankingChart_Click(object sender, EventArgs e)
        {
            ChartPoolsRankingAsync();
            BtnMenuCharts_ClickAsync(sender, e);
        }

        private void PictureBoxMarketCapChart_Click(object sender, EventArgs e)
        {
            ChartMarketCapAsync();
            BtnMenuCharts_ClickAsync(sender, e);
        }

        private void PictureBoxUniqueAddressesChart_Click(object sender, EventArgs e)
        {
            ChartUniqueAddressesAsync();
            BtnMenuCharts_ClickAsync(sender, e);
        }

        private void PictureBoxFeeRangeChart_Click(object sender, EventArgs e)
        {
            ChartFeeRatesAsync();
            BtnMenuCharts_ClickAsync(sender, e);
        }

        private void PictureBoxBlockFeesChart_Click(object sender, EventArgs e)
        {
            ChartBlockFeesAsync();
            BtnMenuCharts_ClickAsync(sender, e);
        }

        private void PictureBoxLightningCapacityChart_Click(object sender, EventArgs e)
        {
            ChartLightningCapacityAsync();
            BtnMenuCharts_ClickAsync(sender, e);
        }

        private void PictureBoxLightningNodesChart_Click(object sender, EventArgs e)
        {
            ChartNodesByNetworkAsync();
            BtnMenuCharts_ClickAsync(sender, e);
        }

        private void PictureBoxLightningChannelsChart_Click(object sender, EventArgs e)
        {
            ChartLightningChannelsAsync();
            BtnMenuCharts_ClickAsync(sender, e);
        }

        private void PictureBoxConverterChart_Click(object sender, EventArgs e)
        {
            BtnMenuPriceConverter_ClickAsync(sender, e);
        }
        #endregion
        #region api calls for dashboards

        #region mempool.space api's
        private string MemSpGetRewardStats() // determines the current block subsidy
        {
            try
            {
                using WebClient client = new WebClient();
                LightUpNodeLight();
                var response = client.DownloadString($"{NodeURL}v1/mining/reward-stats/1");
                var data = JObject.Parse(response);

                if (data["totalReward"] != null && data["totalFee"] != null)
                {
                    decimal rewardDec = Convert.ToDecimal(data["totalReward"]);
                    decimal feesDec = Convert.ToDecimal(data["totalFee"]);
                    decimal subsidy = rewardDec - feesDec;
                    string blockSubsidyStr = Convert.ToString(subsidy);
                    decimal blockSubsidyBTC = ConvertSatsToBitcoin(blockSubsidyStr);
                    string blockSubsidy = blockSubsidyBTC.ToString();
                    return blockSubsidy;
                }
                else
                {
                    return "error";
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "GetReward");
            }
            return "error";
        }

        private string MemSpGetHashrate()
        {
            try
            {
                using WebClient client = new WebClient();
                LightUpNodeLight();
                var response = client.DownloadString($"{NodeURL}v1/mining/hashrate/3d");
                var data = JObject.Parse(response);
                string currentHashrate = "";
                if (data["currentHashrate"] != null && data["currentDifficulty"] != null)
                {
                    currentHashrate = Convert.ToString(data["currentHashrate"]);
                    return (currentHashrate);
                }
                else
                {
                    return ("error");
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "GetHashrate");
            }
            return ("error");
        }

        private (string fastestFee, string halfHourFee, string hourFee, string economyFee) MemSpGetFees()
        {
            try
            {
                using WebClient client = new WebClient();
                LightUpNodeLight();
                var response = client.DownloadString($"{NodeURL}v1/fees/recommended");
                var data = JObject.Parse(response);
                if (data["fastestFee"] != null && data["halfHourFee"] != null && data["hourFee"] != null && data["economyFee"] != null)
                {
                    string fastestFee = Convert.ToString(data["fastestFee"]);
                    string halfHourFee = Convert.ToString(data["halfHourFee"]);
                    string hourFee = Convert.ToString(data["hourFee"]);
                    string economyFee = Convert.ToString(data["economyFee"]);
                    return (fastestFee, halfHourFee, hourFee, economyFee);
                }
                else
                {
                    return ("error", "error", "error", "error");
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "GetFees");
            }
            return ("error", "error", "error", "error");
        }

        private (string progressPercent, string difficultyChange, string estimatedRetargetDate, string remainingBlocks, string remainingTime, string previousRetarget, string nextRetargetHeight, string timeAvg, string timeOffset) MemSpGetDifficultyAdjustment()
        {
            try
            {
                using WebClient client = new WebClient();
                LightUpNodeLight();
                var response = client.DownloadString($"{NodeURL}v1/difficulty-adjustment");
                var data = JObject.Parse(response);
                if (data["progressPercent"] != null && data["difficultyChange"] != null && data["estimatedRetargetDate"] != null && data["remainingBlocks"] != null && data["remainingTime"] != null && data["previousRetarget"] != null && data["nextRetargetHeight"] != null && data["timeAvg"] != null && data["timeOffset"] != null)
                {
                    string progressPercent = Convert.ToString(data["progressPercent"]);
                    decimal difficultyChangeFull = (decimal)data["difficultyChange"]!;
                    string difficultyChange = Math.Round(difficultyChangeFull, 2).ToString();
                    string estimatedRetargetDate = Convert.ToString(data["estimatedRetargetDate"]);
                    string remainingBlocks = Convert.ToString(data["remainingBlocks"]);
                    string remainingTime = Convert.ToString(data["remainingTime"]);
                    string previousRetarget = Convert.ToString(data["previousRetarget"]);
                    string nextRetargetHeight = Convert.ToString(data["nextRetargetHeight"]);
                    string timeAvg = Convert.ToString(data["timeAvg"]);
                    string timeOffset = Convert.ToString(data["timeOffset"]);
                    return (progressPercent, difficultyChange, estimatedRetargetDate, remainingBlocks, remainingTime, previousRetarget, nextRetargetHeight, timeAvg, timeOffset);
                }
                else
                {
                    return ("error", "error", "error", "error", "error", "error", "error", "error", "error");
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "GetDifficultyAdjustment");
            }
            return ("error", "error", "error", "error", "error", "error", "error", "error", "error");
        }

        private (string mpPriceUSD, string mpPriceGBP, string mpPriceEUR, string mpPriceXAU) MempoolSpaceGetPrice()
        {
            try
            {
                using WebClient client = new WebClient();
                var response = client.DownloadString("https://mempool.space/api/v1/prices");
                var data = JObject.Parse(response);

                // Check if each key exists and assign its value, otherwise set it to "0"
                string mpPriceUSD = data.ContainsKey("USD") ? Convert.ToString(data["USD"]) : "0";
                string mpPriceGBP = data.ContainsKey("GBP") ? Convert.ToString(data["GBP"]) : "0";
                string mpPriceEUR = data.ContainsKey("EUR") ? Convert.ToString(data["EUR"]) : "0";
                string mpPriceXAU = data.ContainsKey("XAU") ? Convert.ToString(data["EUR"]) : "0";
                return (mpPriceUSD, mpPriceGBP, mpPriceEUR, mpPriceXAU);
            }
            catch (Exception ex)
            {
                HandleException(ex, "MempoolSpaceGetPrice");
            }
            return ("0", "0", "0", "0");
        }

        private (string txCount, string vSize, string totalFees) MemSpGetMempool()
        {
            try
            {
                using WebClient client = new WebClient();
                LightUpNodeLight();
                var response = client.DownloadString($"{NodeURL}mempool");
                if (testNet)
                {
                    response = client.DownloadString("https://mempool.space/testnet/api/mempool");
                }
                var data = JObject.Parse(response);
                if (data["count"] != null && data["vsize"] != null && data["total_fee"] != null)
                {
                    string txCount = Convert.ToString(data["count"]);
                    string vSize = Convert.ToString(data["vsize"]);
                    string totalFees = Convert.ToString(data["total_fee"]);
                    return (txCount, vSize, totalFees);
                }
                else
                {
                    return ("error", "error", "error");
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "GetMempool");
            }
            return ("error", "error", "error");
        }

        private (List<string> aliases, List<string> capacities) MemSpLiquidityRanking()
        {
            try
            {
                using WebClient client = new WebClient();
                LightUpNodeLight();
                var response = client.DownloadString($"{NodeURL}v1/lightning/nodes/rankings/liquidity");
                var data = JArray.Parse(response);

                List<string> aliases = new List<string>();
                List<string> capacities = new List<string>();

                for (int i = 0; i < data.Count && i < 10; i++) // Limit to the number of available elements or a specific count (e.g., 10)
                {
                    try
                    {
                        string? alias = data[i]["alias"]?.ToString();
                        string? capacity = data[i]["capacity"]?.ToString();

                        // Check if alias and capacity exist before adding to the lists
                        if (!string.IsNullOrEmpty(alias) && !string.IsNullOrEmpty(capacity))
                        {
                            capacity = ConvertSatsToBitcoin(capacity!).ToString();
                            double dblCapacity = Convert.ToDouble(capacity);
                            dblCapacity = Math.Round(dblCapacity, 2); // round to 2 decimal places
                            capacity = Convert.ToString(dblCapacity);

                            aliases.Add(alias!);
                            capacities.Add(capacity);
                        }
                        else
                        {
                            aliases.Add("error");
                            capacities.Add("0");
                        }
                    }
                    catch (Exception ex)
                    {
                        // Handle parsing errors for a specific element
                        HandleException(ex, $"Parsing error for element {i}");
                    }
                }
                return (aliases, capacities);
            }
            catch (Exception ex)
            {
                HandleException(ex, "MempoolSpaceLiquidityRankingJSONRefresh");
            }
            return (new List<string>(), new List<string>());
        }

        private (List<string> aliases, List<string> channels) MemSpConnectivityRanking()
        {
            try
            {
                using WebClient client = new WebClient();
                LightUpNodeLight();
                var response = client.DownloadString($"{NodeURL}v1/lightning/nodes/rankings/connectivity");
                var data = JArray.Parse(response);

                List<string> aliases = new List<string>();
                List<string> channels = new List<string>();

                for (int i = 0; i < data.Count && i < 10; i++) // Limit to the number of available elements or a specific count (e.g., 10)
                {
                    try
                    {
                        string? alias = data[i]["alias"]?.ToString();
                        string? channelCount = data[i]["channels"]?.ToString();

                        // Check if alias and channelCount exist before adding to the lists
                        if (!string.IsNullOrEmpty(alias) && !string.IsNullOrEmpty(channelCount))
                        {
                            aliases.Add(alias!);
                            channels.Add(channelCount!);
                        }
                        else
                        {
                            aliases.Add("error");
                            channels.Add("0");
                        }
                    }
                    catch (Exception ex)
                    {
                        // Handle parsing errors for a specific element
                        HandleException(ex, $"Parsing error for element {i}");
                    }
                }
                return (aliases, channels);
            }
            catch (Exception ex)
            {
                HandleException(ex, "MempoolSpaceConnectivityRankingJSONRefresh");
            }
            return (new List<string>(), new List<string>());
        }

        private (string clearnetCapacity, string torCapacity, string unknownCapacity) MemSpCapacityBreakdown()
        {
            try
            {
                using WebClient client = new WebClient();
                LightUpNodeLight();
                var response = client.DownloadString($"{NodeURL}v1/lightning/nodes/isp-ranking");
                var data = JObject.Parse(response);

                string clearnetCapacity = "0";
                string torCapacity = "0";
                string unknownCapacity = "0";

                try
                {
                    string? clearnetCapacityString = data["clearnetCapacity"]?.ToString();
                    if (!string.IsNullOrEmpty(clearnetCapacityString))
                    {
                        clearnetCapacity = ConvertSatsToBitcoin(clearnetCapacityString!).ToString();
                        double dblClearnetCapacity = Convert.ToDouble(clearnetCapacity);
                        dblClearnetCapacity = Math.Round(dblClearnetCapacity, 2); // round to 2 decimal places
                        clearnetCapacity = Convert.ToString(dblClearnetCapacity);
                    }

                    string? torCapacityString = data["torCapacity"]?.ToString();
                    if (!string.IsNullOrEmpty(torCapacityString))
                    {
                        torCapacity = ConvertSatsToBitcoin(torCapacityString!).ToString();
                        double dblTorCapacity = Convert.ToDouble(torCapacity);
                        dblTorCapacity = Math.Round(dblTorCapacity, 2);
                        torCapacity = Convert.ToString(dblTorCapacity);
                    }

                    string? unknownCapacityString = data["unknownCapacity"]?.ToString();
                    if (!string.IsNullOrEmpty(unknownCapacityString))
                    {
                        unknownCapacity = ConvertSatsToBitcoin(unknownCapacityString!).ToString();
                        double dblUnknownCapacity = Convert.ToDouble(unknownCapacity);
                        dblUnknownCapacity = Math.Round(dblUnknownCapacity, 2);
                        unknownCapacity = Convert.ToString(dblUnknownCapacity);
                    }
                }
                catch (Exception ex)
                {
                    HandleException(ex, "Parsing error for capacity types");
                }

                return (clearnetCapacity, torCapacity, unknownCapacity);
            }
            catch (Exception ex)
            {
                HandleException(ex, "MempoolSpaceCapacityBreakdownJSONRefresh");
            }

            return ("0", "0", "0");
        }

        private (string channelCount, string nodeCount, string totalCapacity, string torNodes, string clearnetNodes, string unannouncedNodes, string avgCapacity, string avgFeeRate, string avgBaseeFeeMtokens, string medCapacity, string medFeeRate, string medBaseeFeeMtokens, string clearnetTorNodes) MempoolSpaceLightning()
        {
            try
            {
                using WebClient client = new WebClient();
                LightUpNodeLight();
                var response = client.DownloadString($"{NodeURL}v1/lightning/statistics/latest");
                var data = JObject.Parse(response);
                if (data["latest"]?["channel_count"] != null && data["latest"]?["node_count"] != null && data["latest"]?["total_capacity"] != null && data["latest"]?["tor_nodes"] != null && data["latest"]?["clearnet_nodes"] != null && data["latest"]?["unannounced_nodes"] != null && data["latest"]?["avg_capacity"] != null && data["latest"]?["avg_fee_rate"] != null && data["latest"]?["avg_base_fee_mtokens"] != null && data["latest"]?["med_capacity"] != null && data["latest"]?["med_fee_rate"] != null && data["latest"]?["med_base_fee_mtokens"] != null && data["latest"]?["clearnet_tor_nodes"] != null)
                {
                    var channelCount = data["latest"]?["channel_count"]?.ToString() ??"0";
                    var nodeCount = data["latest"]?["node_count"]?.ToString() ?? "0";
                    string totalCapacityString = Convert.ToString(data["latest"]?["total_capacity"]) ?? "0";
                    string totalCapacity = ConvertSatsToBitcoin(totalCapacityString).ToString();
                    if (double.TryParse(totalCapacity, out double dblTotalCapacity))
                    {
                        dblTotalCapacity = Convert.ToDouble(totalCapacity);
                        dblTotalCapacity = Math.Round(dblTotalCapacity, 2);
                        totalCapacity = Convert.ToString(dblTotalCapacity);
                    }
                    else
                    {
                        totalCapacity = "0";
                    }
                    var torNodes = data["latest"]?["tor_nodes"]?.ToString() ?? "0";
                    var clearnetNodes = data["latest"]?["clearnet_nodes"]?.ToString() ?? "0";
                    var unannouncedNodes = data["latest"]?["unannounced_nodes"]?.ToString() ?? "0";
                    var avgCapacity = data["latest"]?["avg_capacity"]?.ToString() ?? "0";
                    var avgFeeRate = data["latest"]?["avg_fee_rate"]?.ToString() ?? "0";
                    var avgBaseeFeeMtokens = data["latest"]?["avg_base_fee_mtokens"]?.ToString() ?? "0";
                    var medCapacity = data["latest"]?["med_capacity"]?.ToString() ?? "0";
                    var medFeeRate = data["latest"]?["med_fee_rate"]?.ToString() ?? "0";
                    var medBaseeFeeMtokens = data["latest"]?["med_base_fee_mtokens"]?.ToString() ?? "0";
                    medBaseeFeeMtokens ??= "0";
                    var clearnetTorNodes = data["latest"]?["clearnet_tor_nodes"]?.ToString() ?? "0";
                    return (channelCount, nodeCount, totalCapacity, torNodes, clearnetNodes, unannouncedNodes, avgCapacity, avgFeeRate, avgBaseeFeeMtokens, medCapacity, medFeeRate, medBaseeFeeMtokens, clearnetTorNodes);
                }
                else
                {
                    return ("0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0");
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "MempoolSpaceLightningJSONRefresh");
            }
            return ("0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0");
        }

        private (string txInNextBlock, string nextBlockMinFee, string nextBlockMaxFee, string nextBlockTotalFees) MemSpNextBlock()
        {

            try
            {
                using var client = new HttpClient();
                var response = client.GetAsync($"{NodeURL}v1/fees/mempool-blocks").Result;
                var json = response.Content.ReadAsStringAsync().Result;
                var data = JArray.Parse(json).FirstOrDefault();

                if (data != null)
                {
                    var txInNextBlock = data["nTx"]?.ToString() ?? "0";
                    string nextBlockMinFeeSats = data["feeRange"].FirstOrDefault().ToString();
                    decimal MinFee = Convert.ToDecimal(nextBlockMinFeeSats);
                    string nextBlockMinFee = MinFee.ToString("0");
                    var nextBlockMaxFeeSats = data["feeRange"].LastOrDefault().ToString();
                    decimal MaxFee = Convert.ToDecimal(nextBlockMaxFeeSats);
                    string nextBlockMaxFee = MaxFee.ToString("0");
                    string nextBlockTotalFeesInSats = data["totalFees"]?.ToString() ?? "0";
                    decimal nextBlockTotalFeesDecimal = ConvertSatsToBitcoin(nextBlockTotalFeesInSats);
                    string nextBlockTotalFees = Convert.ToString(nextBlockTotalFeesDecimal);
                    return (txInNextBlock, nextBlockMinFee, nextBlockMaxFee, nextBlockTotalFees);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "MemSpNextBlock");
            }
            return ("0", "0", "0", "0");
        }

        #endregion

        #region coinbase.com api
        private (string priceUSD, string priceGBP, string priceEUR, string priceXAU) CoinbaseGetPrice()
        {
            try
            {
                using WebClient client = new WebClient();
                var responseUSD = client.DownloadString("https://api.coinbase.com/v2/prices/BTC-USD/spot");
                var dataUSD = JObject.Parse(responseUSD);
                string priceUSD = dataUSD["data"] != null && dataUSD["data"]!["amount"] != null ? dataUSD["data"]!["amount"]!.ToString() : "0";

                var responseEUR = client.DownloadString("https://api.coinbase.com/v2/prices/BTC-EUR/spot");
                var dataEUR = JObject.Parse(responseEUR);
                string priceEUR = dataEUR["data"] != null && dataEUR["data"]!["amount"] != null ? dataEUR["data"]!["amount"]!.ToString() : "0";

                var responseGBP = client.DownloadString("https://api.coinbase.com/v2/prices/BTC-GBP/spot");
                var dataGBP = JObject.Parse(responseGBP);
                string priceGBP = dataGBP["data"] != null && dataGBP["data"]!["amount"] != null ? dataGBP["data"]!["amount"]!.ToString() : "0";

                var responseXAU = client.DownloadString("https://api.coinbase.com/v2/prices/BTC-XAU/spot");
                var dataXAU = JObject.Parse(responseXAU);
                string priceXAU = dataXAU["data"] != null && dataXAU["data"]!["amount"] != null ? dataXAU["data"]!["amount"]!.ToString() : "0";

                return (priceUSD, priceGBP, priceEUR, priceXAU);
            }
            catch (Exception ex)
            {
                HandleException(ex, "CoinbaseGetPrice");
            }
            return ("0", "0", "0", "0");
        }
        #endregion
        #region coingecko.com api
        private (string cgPriceUSD, string cgPriceGBP, string cgPriceEUR, string cgPriceXAU) CoingeckoGetPrice()
        {
            try
            {
                using WebClient client = new WebClient();
                var response = client.DownloadString("https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd%2Ceur%2Cgbp%2Cxau&include_market_cap=true&include_24hr_vol=true&include_24hr_change=true&include_last_updated_at=true&precision=2");
                var data = JObject.Parse(response);

                // Check if each key exists and assign its value, otherwise set it to "0"
                string cgPriceUSD = data["bitcoin"]!["usd"] != null ? data["bitcoin"]!["usd"]!.ToString() : "0";
                string cgPriceGBP = data["bitcoin"]!["gbp"] != null ? data["bitcoin"]!["gbp"]!.ToString() : "0";
                string cgPriceEUR = data["bitcoin"]!["eur"] != null ? data["bitcoin"]!["eur"]!.ToString() : "0";
                string cgPriceXAU = data["bitcoin"]!["xau"] != null ? data["bitcoin"]!["xau"]!.ToString() : "0";
                return (cgPriceUSD, cgPriceGBP, cgPriceEUR, cgPriceXAU);
            }
            catch (Exception ex)
            {
                HandleException(ex, "CoingeckoGetPrice");
            }
            return ("0", "0", "0", "0");
        }
        #endregion

        #endregion
        #region update seconds to halving
        private void UpdateSecondsToHalving()
        {
            try
            {
                if (!testNet)
                {
                    if (ObtainedHalvingSecondsRemainingYet) // only want to do this if we've already retrieved seconds remaining until halvening
                    {
                        string secondsString = lblHalvingSecondsRemaining.Text;
                        try
                        {
                            int SecondsToHalving = int.Parse(secondsString);
                            if (SecondsToHalving > 0)
                            {
                                SecondsToHalving--; // one second closer to the halvening!
                                lblHalvingSecondsRemaining.Invoke((MethodInvoker)delegate
                                {
                                    lblHalvingSecondsRemaining.Text = SecondsToHalving.ToString();
                                });
                            }
                        }
                        catch
                        {
                            lblHalvingSecondsRemaining.Invoke((MethodInvoker)delegate
                            {
                                lblHalvingSecondsRemaining.Text = "disabled";
                            });
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "UpdateSecondsToHalving");
            }
        }
        #endregion
        #region draw lines between fields on lightning dashboard
        private void PanelLightningDashboard_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                using Pen pen = new Pen(linesColor, 1);
                // Capacity connecting lines
                e.Graphics.DrawLine(pen, lblTotalCapacity.Right, lblTotalCapacity.Top + (lblTotalCapacity.Height / 2), lblClearnetCapacity.Left, lblClearnetCapacity.Top + (lblClearnetCapacity.Height / 2));
                e.Graphics.DrawLine(pen, (lblTotalCapacity.Right + lblClearnetCapacity.Left) / 2, lblTotalCapacity.Top + (lblTotalCapacity.Height / 2), (lblTotalCapacity.Right + lblClearnetCapacity.Left) / 2, lblUnknownCapacity.Top + (lblUnknownCapacity.Height / 2));
                e.Graphics.DrawLine(pen, (lblTotalCapacity.Right + lblClearnetCapacity.Left) / 2, lblTorCapacity.Top + (lblTorCapacity.Height / 2), lblTorCapacity.Left, lblTorCapacity.Top + (lblTorCapacity.Height / 2));
                e.Graphics.DrawLine(pen, (lblTotalCapacity.Right + lblClearnetCapacity.Left) / 2, lblUnknownCapacity.Top + (lblUnknownCapacity.Height / 2), lblUnknownCapacity.Left, lblUnknownCapacity.Top + (lblUnknownCapacity.Height / 2));
                // Node connecting lines
                e.Graphics.DrawLine(pen, lblNodeCount.Right, lblNodeCount.Top + (lblNodeCount.Height / 2), lblTorNodes.Left, lblTorNodes.Top + (lblTorNodes.Height / 2));
                e.Graphics.DrawLine(pen, (lblTotalCapacity.Right + lblClearnetCapacity.Left) / 2, lblTorNodes.Top + (lblTorNodes.Height / 2), (lblTotalCapacity.Right + lblClearnetCapacity.Left) / 2, lblUnannouncedNodes.Top + (lblUnannouncedNodes.Height / 2));
                e.Graphics.DrawLine(pen, (lblTotalCapacity.Right + lblClearnetCapacity.Left) / 2, lblClearnetNodes.Top + (lblClearnetNodes.Height / 2), lblClearnetNodes.Left, lblClearnetNodes.Top + (lblClearnetNodes.Height / 2));
                e.Graphics.DrawLine(pen, (lblTotalCapacity.Right + lblClearnetCapacity.Left) / 2, lblClearnetTorNodes.Top + (lblClearnetTorNodes.Height / 2), lblClearnetTorNodes.Left, lblClearnetTorNodes.Top + (lblClearnetTorNodes.Height / 2));
                e.Graphics.DrawLine(pen, (lblTotalCapacity.Right + lblClearnetCapacity.Left) / 2, lblUnannouncedNodes.Top + (lblUnannouncedNodes.Height / 2), lblUnannouncedNodes.Left, lblUnannouncedNodes.Top + (lblUnannouncedNodes.Height / 2));
                // Channel connecting lines
                e.Graphics.DrawLine(pen, lblChannelCount.Right, lblChannelCount.Top + (lblChannelCount.Height / 2), lblAverageCapacity.Left, lblAverageCapacity.Top + (lblAverageCapacity.Height / 2));
                e.Graphics.DrawLine(pen, (lblChannelCount.Right + lblAverageCapacity.Left) / 2, lblChannelCount.Top + (lblChannelCount.Height / 2), (lblChannelCount.Right + lblAverageCapacity.Left) / 2, lblMedBaseFeeTokens.Top + (lblMedBaseFeeTokens.Height / 2));
                e.Graphics.DrawLine(pen, (lblChannelCount.Right + lblAverageCapacity.Left) / 2, lblAverageFeeRate.Top + (lblAverageFeeRate.Height / 2), lblAverageFeeRate.Left, lblAverageFeeRate.Top + (lblAverageFeeRate.Height / 2));
                e.Graphics.DrawLine(pen, (lblChannelCount.Right + lblAverageCapacity.Left) / 2, lblAverageBaseFeeMtokens.Top + (lblAverageBaseFeeMtokens.Height / 2), lblAverageBaseFeeMtokens.Left, lblAverageBaseFeeMtokens.Top + (lblAverageBaseFeeMtokens.Height / 2));
                e.Graphics.DrawLine(pen, (lblChannelCount.Right + lblAverageCapacity.Left) / 2, lblMedCapacity.Top + (lblMedCapacity.Height / 2), lblMedCapacity.Left, lblMedCapacity.Top + (lblMedCapacity.Height / 2));
                e.Graphics.DrawLine(pen, (lblChannelCount.Right + lblAverageCapacity.Left) / 2, lblMedFeeRate.Top + (lblMedFeeRate.Height / 2), lblMedFeeRate.Left, lblMedFeeRate.Top + (lblMedFeeRate.Height / 2));
                e.Graphics.DrawLine(pen, (lblChannelCount.Right + lblAverageCapacity.Left) / 2, lblMedBaseFeeTokens.Top + (lblMedBaseFeeTokens.Height / 2), lblMedBaseFeeTokens.Left, lblMedBaseFeeTokens.Top + (lblMedBaseFeeTokens.Height / 2));
            }
            catch (WebException ex)
            {
                HandleException(ex, "Drawing connectors on lightning dashboard");
            }
        }
        #endregion
        #region event driven relocations
        private void RelocateBlockFeesChartIcon(object sender, EventArgs e)
        {
            if (lblNextBlockTotalFeesFiat.Visible)
            {
                lblBlockFeesChart.Invoke((MethodInvoker)delegate
                {
                    lblBlockFeesChart.Location = new Point(lblNextBlockTotalFeesFiat.Location.X + lblNextBlockTotalFeesFiat.Width, lblBlockFeesChart.Location.Y);
                });
            }
            else
            {
                lblBlockFeesChart.Invoke((MethodInvoker)delegate
                {
                    lblBlockFeesChart.Location = new Point(lblNextBlockTotalFees.Location.X + lblNextBlockTotalFees.Width, lblBlockFeesChart.Location.Y);
                });
            }
        }

        private void RelocatelblHeaderPriceChangeIcon(object sender, EventArgs e)
        {
            if (lblHeaderPriceChange.Visible)
            {
                lblHeaderPriceChart.Invoke((MethodInvoker)delegate
                {
                    lblHeaderPriceChart.Location = new Point(lblHeaderPriceChange.Location.X + lblHeaderPriceChange.Width, lblHeaderPriceChart.Location.Y);
                });
            }
            else
            {
                lblHeaderPriceChart.Invoke((MethodInvoker)delegate
                {
                    lblHeaderPriceChart.Location = new Point((lblHeaderPrice.Location.X + lblHeaderPrice.Width) - (int)(7 * UIScale), lblHeaderPriceChart.Location.Y);
                });
            }
        }
        #endregion

        #endregion
        //![](resources\tinylogo1.png;;;0.04706,0.04877)
        #region ⚡⚡⚡ ADDRESS (TX's) SCREEN

        #region setup address screen
        private async void TboxSubmittedAddress_TextChangedAsync(object sender, EventArgs e)
        {
            try
            {
                panelAddressResults.Invoke((MethodInvoker)delegate
                {
                    panelAddressResults.Visible = false;
                });
                SuspendLayout();
                BtnViewBlockFromAddress.Visible = false;
                BtnViewTransactionFromAddress.Visible = false;
                listViewAddressTransactions.Items.Clear(); // wipe any data in the transaction listview
                TotalAddressTransactionRowsAdded = 0;
                ResumeLayout(false);

                string addressString = textboxSubmittedAddress.Text; // supplied address

                string addressType = DetermineAddressType(addressString); // check address is valid and what type of address
                if (String.Compare(addressType, "P2PKH (legacy)") == 0 ||
                String.Compare(addressType, "P2SH") == 0 ||
                String.Compare(addressType, "P2WPKH (segwit)") == 0 ||
                String.Compare(addressType, "P2WSH") == 0 ||
                String.Compare(addressType, "P2TT (taproot)") == 0 ||
                String.Compare(addressType, "unknown") == 0) // if any of these, address is valid
                {
                    ToggleLoadingAnimation("enable"); // start the loading animation
                    DisableEnableAddressButtons("disable"); // disable buttons during operation
                    lblInvalidAddressIndicator.Invoke((MethodInvoker)delegate
                    {
                        lblInvalidAddressIndicator.ForeColor = Color.OliveDrab;
                        lblInvalidAddressIndicator.Text = "✔️ valid address";
                    });

                    lblAddressType.Invoke((MethodInvoker)delegate
                    {
                        lblAddressType.Text = $"{addressType} address";
                    });
                    // generate QR code for address
                    QRCodeGenerator qrGenerator = new QRCodeGenerator();
                    QRCodeData qrCodeData = qrGenerator.CreateQrCode(addressString, QRCodeGenerator.ECCLevel.Q);
                    QRCode qrCode = new QRCode(qrCodeData);
                    var qrCodeImage = qrCode.GetGraphic(20, label77.ForeColor, Color.Black, false);
                    qrCodeImage.MakeTransparent(Color.Black);
                    AddressQRCodePicturebox.Invoke((MethodInvoker)delegate
                    {
                        AddressQRCodePicturebox.Image = qrCodeImage;
                    });
                    try
                    {
                        await GetAddressBalanceAsync(addressString).ConfigureAwait(true); // make sure we get these results before processing transactions
                    }
                    catch (Exception ex)
                    {
                        HandleException(ex, "TboxSubmittedAddress_TextChanged (Error getting address balance)");
                        return;
                    }
                    string lastSeenTxId = "0"; // start from the top of the JSON (most recent tx)
                    try
                    {
                        await GetTransactionsForAddressAsync(addressString, lastSeenTxId).ConfigureAwait(true); // get first batch of transactions
                    }
                    catch (Exception ex)
                    {
                        HandleException(ex, "TboxSubmittedAddress_TextChanged (Error getting first batch of transactions for address)");
                        return;
                    }
                    DisableEnableAddressButtons("enable"); // enable the buttons that were previously enabled again
                    AddressValidShowControls();
                    panelAddressResults.Invoke((MethodInvoker)delegate
                    {
                        panelAddressResults.Refresh();
                        panelAddressResults.Visible = true;
                    });

                    Control[] controlsToRefresh = { panelAddress, panelAddressTxContainer, panel132, panelSubmittedAddressContainer, panelAddressResults };
                    foreach (Control control in controlsToRefresh)
                    {
                        if (control.InvokeRequired)
                        {
                            control.Invoke((MethodInvoker)delegate
                            {
                                control.Refresh();
                            });
                        }
                        else
                        {
                            control.Refresh();
                        }
                    }
                    ToggleLoadingAnimation("disable"); // stop the loading animation
                }
                else
                {
                    SuspendLayout();
                    if (addressString == "")
                    {
                        lblInvalidAddressIndicator.Invoke((MethodInvoker)delegate
                        {
                            lblInvalidAddressIndicator.Text = "";
                        });
                    }
                    else
                    {
                        lblInvalidAddressIndicator.Invoke((MethodInvoker)delegate
                        {
                            lblInvalidAddressIndicator.ForeColor = Color.IndianRed;
                            lblInvalidAddressIndicator.Text = "✖️ invalid address";
                        });
                    }
                    lblAddressType.Invoke((MethodInvoker)delegate
                    {
                        lblAddressType.Text = "Invalid address format";
                    });
                    AddressQRCodePicturebox.Invoke((MethodInvoker)delegate
                    {
                        AddressQRCodePicturebox.Image = null;
                    });

                    Control[] controlsToSetEmpty = { lblAddressConfirmedReceived, lblAddressConfirmedReceivedOutputs, lblAddressConfirmedSpent, lblAddressConfirmedSpentOutputs, lblAddressConfirmedTransactionCount, lblAddressConfirmedUnspent, lblAddressConfirmedUnspentOutputs };
                    foreach (Control control in controlsToSetEmpty)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.Text = string.Empty;
                        });
                    }
                    await AddressInvalidHideControlsAsync().ConfigureAwait(true);
                    ResumeLayout(false);

                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TboxSubmittedAddress_TextChanged");
            }
        }

        //---------------------- DETERMINE BITCOIN ADDRESS TYPE--------------------------------------------------------
        private string DetermineAddressType(string address)
        {
            try
            {
                if (string.Compare(address, "") != 0 && string.Compare(address, null) != 0 && string.Compare(address, "block height, address, transaction ID or xpub...") !=0)
                {
                    NBitcoin.BitcoinAddress bitcoinAddress;
                    if (String.Compare(NodeURL, "https://mempool.space/api/") == 0) //mempool.space mainnet
                    {
                        bitcoinAddress = NBitcoin.BitcoinAddress.Create(address, Network.Main);
                    }
                    else
                    {
                        if (String.Compare(NodeURL, "https://mempool.space/testnet/api/") == 0) //mempool.space testnet
                        {
                            bitcoinAddress = NBitcoin.BitcoinAddress.Create(address, Network.TestNet);
                        }
                        else
                        {
                            bool containsTestnet = NodeURL.Contains("testnet");
                            if (containsTestnet) // own node, testnet
                            {
                                bitcoinAddress = NBitcoin.BitcoinAddress.Create(address, Network.TestNet);
                            }
                            else //own node, mainnet
                            {
                                bitcoinAddress = NBitcoin.BitcoinAddress.Create(address, Network.Main);
                            }
                        }
                    }

                    if (bitcoinAddress is BitcoinPubKeyAddress)
                    {
                        return "P2PKH (legacy)"; // Legacy P2PKH
                    }
                    else if (bitcoinAddress is BitcoinScriptAddress)
                    {
                        return "P2SH"; // (pay-to-script-hash) Multisig P2SH
                    }
                    else if (bitcoinAddress is BitcoinWitPubKeyAddress)
                    {
                        return "P2WPKH (segwit)"; // P2WPKH
                    }
                    else if (bitcoinAddress is BitcoinWitScriptAddress)
                    {
                        return "P2WSH"; // (pay-to- witness-script-hash) P2WSH 
                    }
                    else if (address.StartsWith("bc1p") && (address.Length > 41 || address.Length < 73))
                    {
                        for (int i = 4; i < address.Length - 4; i++)
                        {
                            char c = address[i];
                            if (((c >= '0' && c <= '9') || (c >= 'q' && c <= 'z')))
                            {
                                return "P2TT (taproot)";
                            }
                        }
                    }
                    return "unknown";
                }
                return "Invalid address format";
            }
            catch (FormatException)
            {
                return "Invalid address format";
            }
        }

        //------------------------------------------ GET ADDRESS BALANCE-----------------------------------------------
        private async Task GetAddressBalance2Async(string addressString)
        {
            try
            {
                var request = $"address/{addressString}";
                var RequestURL = $"{NodeURL}{request}";
                var client = new HttpClient();
                LightUpNodeLight();
                var response = await client.GetAsync($"{RequestURL}").ConfigureAwait(true); // get the JSON to get address balance and no of transactions etc
                if (!response.IsSuccessStatusCode)
                {
                    lblSettingsSelectedNodeStatus.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsSelectedNodeStatus.Text = "Disconnected/error";
                        lblSettingsSelectedNodeStatus.Location = new Point((int)(750 * UIScale) - lblSettingsSelectedNodeStatus.Width, lblSettingsSelectedNodeStatus.Location.Y);
                    });
                    lblSettingsSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsSelectedNodeStatusLight.ForeColor = Color.Red;
                        lblSettingsSelectedNodeStatusLight.Location = new Point(lblSettingsSelectedNodeStatus.Location.X - lblSettingsSelectedNodeStatusLight.Width, lblSettingsSelectedNodeStatusLight.Location.Y);
                    });
                    lblErrorMessage.Invoke((MethodInvoker)delegate
                    {
                        lblErrorMessage.Text = "Node offline/disconnected: ";
                    });
                    return;
                }
                var jsonData = await response.Content.ReadAsStringAsync().ConfigureAwait(true);
                var addressData = JObject.Parse(jsonData);

                if (String.Compare(addressScreenConfUnconfOrAllTx, "chain") == 0 && !PartOfAnAllAddressTransactionsRequest)  //confirmed stats only. 'All' reverts to 'chain' after the first query, so we need to exclude those
                {
                    if (addressData["chain_stats"]?["tx_count"] != null && addressData["chain_stats"]?["funded_txo_sum"] != null && addressData["chain_stats"]?["funded_txo_count"] != null && addressData["chain_stats"]?["spent_txo_sum"] != null && addressData["chain_stats"]?["spent_txo_count"] != null)
                    {
                        label61.Invoke((MethodInvoker)delegate
                        {
                            label61.Text = "CONFIRMED UNSPENT (BALANCE)";
                        });
                        label59.Invoke((MethodInvoker)delegate
                        {
                            label59.Text = "CONFIRMED TRANSACTION COUNT";
                        });
                        label67.Invoke((MethodInvoker)delegate
                        {
                            label67.Text = "CONFIRMED RECEIVED";
                        });
                        label63.Invoke((MethodInvoker)delegate
                        {
                            label63.Text = "CONFIRMED SPENT";
                        });
                        lblAddressConfirmedTransactionCount.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedTransactionCount.Text = Convert.ToString(addressData["chain_stats"]?["tx_count"]);
                        });
                        lblAddressConfirmedReceived.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedReceived.Text = ConvertSatsToBitcoin(Convert.ToString(addressData["chain_stats"]?["funded_txo_sum"])).ToString();
                        });
                        lblAddressConfirmedReceivedOutputs.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedReceivedOutputs.Text = $"({addressData["chain_stats"]?["funded_txo_count"]} outputs)";
                        });
                        lblAddressConfirmedReceivedFiat.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedReceivedFiat.Text = $"{fiatSymbol}{(Convert.ToDecimal(addressData["chain_stats"]?["funded_txo_sum"]) / 100000000 * OneBTCinSelectedCurrency):N2}";
                        });
                        lblAddressConfirmedSpent.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedSpent.Text = $"{ConvertSatsToBitcoin(Convert.ToString(addressData["chain_stats"]?["spent_txo_sum"]))}";
                        });
                        lblAddressConfirmedSpentFiat.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedSpentFiat.Text = $"{fiatSymbol}{(Convert.ToDecimal(addressData["chain_stats"]?["spent_txo_sum"]) / 100000000 * OneBTCinSelectedCurrency):N2}";
                        });
                        lblAddressConfirmedSpentOutputs.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedSpentOutputs.Text = $"({addressData["chain_stats"]?["spent_txo_count"]} outputs)";
                        });
                        var fundedTx = Convert.ToDouble(addressData["chain_stats"]?["funded_txo_count"]);
                        var spentTx = Convert.ToDouble(addressData["chain_stats"]?["spent_txo_count"]);
                        var confirmedReceived = Convert.ToDouble(addressData["chain_stats"]?["funded_txo_sum"]);
                        var confirmedSpent = Convert.ToDouble(addressData["chain_stats"]?["spent_txo_sum"]);
                        var confirmedUnspent = confirmedReceived - confirmedSpent;
                        var unSpentTxOutputs = fundedTx - spentTx;
                        lblAddressConfirmedUnspent.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedUnspent.Text = ConvertSatsToBitcoin(Convert.ToString(confirmedUnspent)).ToString();
                        });
                        lblAddressConfirmedUnspentOutputs.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedUnspentOutputs.Text = $"({unSpentTxOutputs} outputs)";
                        });
                        lblAddressConfirmedUnspentFiat.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedUnspentFiat.Text = $"{fiatSymbol}{(Convert.ToDecimal(confirmedUnspent) / 100000000 * OneBTCinSelectedCurrency):N2}";
                        });
                    }
                }
                if (String.Compare(addressScreenConfUnconfOrAllTx, "mempool") == 0) //mempool stats only
                {
                    if (addressData["mempool_stats"]?["tx_count"] != null && addressData["mempool_stats"]?["funded_txo_sum"] != null && addressData["mempool_stats"]?["funded_txo_count"] != null && addressData["mempool_stats"]?["funded_txo_sum"] != null && addressData["mempool_stats"]?["spent_txo_sum"] != null && addressData["chain_stats"]?["spent_txo_count"] != null)
                    {
                        label61.Invoke((MethodInvoker)delegate
                        {
                            label61.Text = "UNCONFIRMED UNSPENT (BALANCE)";
                        });
                        label59.Invoke((MethodInvoker)delegate
                        {
                            label59.Text = "UNCONFIRMED TRANSACTION COUNT";
                        });
                        label67.Invoke((MethodInvoker)delegate
                        {
                            label67.Text = "UNCONFIRMED RECEIVED";
                        });
                        label63.Invoke((MethodInvoker)delegate
                        {
                            label63.Text = "UNCONFIRMED SPENT";
                        });
                        lblAddressConfirmedTransactionCount.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedTransactionCount.Text = Convert.ToString(addressData["mempool_stats"]?["tx_count"]);
                        });
                        lblAddressConfirmedReceived.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedReceived.Text = ConvertSatsToBitcoin(Convert.ToString(addressData["mempool_stats"]?["funded_txo_sum"])).ToString();
                        });
                        lblAddressConfirmedReceivedOutputs.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedReceivedOutputs.Text = $"({addressData["mempool_stats"]?["funded_txo_count"]} outputs)";
                        });
                        lblAddressConfirmedReceivedFiat.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedReceivedFiat.Text = $"{fiatSymbol}{(Convert.ToDecimal(addressData["mempool_stats"]?["funded_txo_sum"]) / 100000000 * OneBTCinSelectedCurrency):N2}";
                        });
                        lblAddressConfirmedSpent.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedSpent.Text = ConvertSatsToBitcoin(Convert.ToString(addressData["mempool_stats"]?["spent_txo_sum"])).ToString();
                        });
                        lblAddressConfirmedSpentFiat.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedSpentFiat.Text = $"{fiatSymbol}{(Convert.ToDecimal(addressData["mempool_stats"]?["spent_txo_sum"]) / 100000000 * OneBTCinSelectedCurrency):N2}";
                        });
                        lblAddressConfirmedSpentOutputs.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedSpentOutputs.Text = $"({addressData["mempool_stats"]?["spent_txo_count"]} outputs)";
                        });
                        var fundedTx = Convert.ToDouble(addressData["mempool_stats"]?["funded_txo_count"]);
                        var spentTx = Convert.ToDouble(addressData["mempool_stats"]?["spent_txo_count"]);
                        var confirmedReceived = Convert.ToDouble(addressData["mempool_stats"]?["funded_txo_sum"]);
                        var confirmedSpent = Convert.ToDouble(addressData["mempool_stats"]?["spent_txo_sum"]);
                        var confirmedUnspent = confirmedReceived - confirmedSpent;
                        var unSpentTxOutputs = fundedTx - spentTx;
                        lblAddressConfirmedUnspent.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedUnspent.Text = ConvertSatsToBitcoin(Convert.ToString(confirmedUnspent)).ToString();
                        });
                        lblAddressConfirmedUnspentOutputs.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedUnspentOutputs.Text = $"({unSpentTxOutputs} outputs)";
                        });
                        lblAddressConfirmedUnspentFiat.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedUnspentFiat.Text = $"{fiatSymbol}{(Convert.ToDecimal(confirmedUnspent) / 100000000 * OneBTCinSelectedCurrency):N2}";
                        });
                    }
                }
                if (String.Compare(addressScreenConfUnconfOrAllTx, "all") == 0 || (String.Compare(addressScreenConfUnconfOrAllTx, "chain") == 0 && PartOfAnAllAddressTransactionsRequest)) // all TXs so will need to add chain and mempool amounts together before displaying. 
                {
                    if (addressData["mempool_stats"]?["tx_count"] != null && addressData["mempool_stats"]?["funded_txo_sum"] != null && addressData["mempool_stats"]?["funded_txo_count"] != null && addressData["mempool_stats"]?["funded_txo_sum"] != null && addressData["mempool_stats"]?["spent_txo_sum"] != null && addressData["chain_stats"]?["spent_txo_count"] != null && addressData["chain_stats"]?["tx_count"] != null && addressData["chain_stats"]?["funded_txo_sum"] != null && addressData["chain_stats"]?["funded_txo_count"] != null && addressData["chain_stats"]?["spent_txo_sum"] != null && addressData["chain_stats"]?["spent_txo_count"] != null)
                    {
                        label61.Invoke((MethodInvoker)delegate
                        {
                            label61.Text = "TOTAL UNSPENT (BALANCE)";
                        });
                        label59.Invoke((MethodInvoker)delegate
                        {
                            label59.Text = "TOTAL TRANSACTION COUNT";
                        });
                        label67.Invoke((MethodInvoker)delegate
                        {
                            label67.Text = "TOTAL RECEIVED";
                        });
                        label63.Invoke((MethodInvoker)delegate
                        {
                            label63.Text = "TOTAL SPENT";
                        });
                        int chainTransactionCount = Convert.ToInt32(addressData["chain_stats"]?["tx_count"]);
                        int mempoolTransactionCount = Convert.ToInt32(addressData["mempool_stats"]?["tx_count"]);
                        int totalTransactionCount = chainTransactionCount + mempoolTransactionCount;
                        lblAddressConfirmedTransactionCount.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedTransactionCount.Text = Convert.ToString(totalTransactionCount);
                        });

                        long chainReceived = Convert.ToInt64(addressData["chain_stats"]?["funded_txo_sum"]);
                        long mempoolReceived = Convert.ToInt64(addressData["mempool_stats"]?["funded_txo_sum"]);
                        long totalReceived = chainReceived + mempoolReceived;
                        decimal BTCtotalReceived = ConvertSatsToBitcoin(totalReceived.ToString());
                        lblAddressConfirmedReceived.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedReceived.Text = Convert.ToString(BTCtotalReceived);
                        });
                        lblAddressConfirmedReceivedFiat.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedReceivedFiat.Text = $"{fiatSymbol}{(Convert.ToDecimal(totalReceived) / 100000000 * OneBTCinSelectedCurrency):N2}";
                        });
                        int chainReceivedOutputs = Convert.ToInt32(addressData["chain_stats"]?["funded_txo_count"]);
                        int mempoolReceivedOutputs = Convert.ToInt32(addressData["mempool_stats"]?["funded_txo_count"]);
                        int totalReceivedOutputs = chainReceivedOutputs + mempoolReceivedOutputs;
                        lblAddressConfirmedReceivedOutputs.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedReceivedOutputs.Text = $"({totalReceivedOutputs} outputs)";
                        });

                        long chainSpent = Convert.ToInt64(addressData["chain_stats"]?["spent_txo_sum"]);
                        long mempoolSpent = Convert.ToInt64(addressData["mempool_stats"]?["spent_txo_sum"]);
                        long totalSpent = chainSpent + mempoolSpent;
                        decimal BTCtotalSpent = ConvertSatsToBitcoin(totalSpent.ToString());
                        lblAddressConfirmedSpent.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedSpent.Text = Convert.ToString(BTCtotalSpent);
                        });
                        lblAddressConfirmedSpentFiat.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedSpentFiat.Text = $"{fiatSymbol}{(Convert.ToDecimal(totalSpent) / 100000000 * OneBTCinSelectedCurrency):N2}";
                        });
                        int chainSpentOutputs = Convert.ToInt32(addressData["chain_stats"]?["spent_txo_count"]);
                        int mempoolSpentOutputs = Convert.ToInt32(addressData["mempool_stats"]?["spent_txo_count"]);
                        int totalSpentOutputs = chainSpentOutputs + mempoolSpentOutputs;
                        lblAddressConfirmedSpentOutputs.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedSpentOutputs.Text = $"({totalSpentOutputs} outputs)";
                        });

                        var chainFundedTx = Convert.ToDouble(addressData["chain_stats"]?["funded_txo_count"]);
                        var chainSpentTx = Convert.ToDouble(addressData["chain_stats"]?["spent_txo_count"]);
                        var chainReceived2 = Convert.ToDouble(addressData["chain_stats"]?["funded_txo_sum"]);
                        var chainSpent2 = Convert.ToDouble(addressData["chain_stats"]?["spent_txo_sum"]);
                        var mempoolFundedTx = Convert.ToDouble(addressData["mempool_stats"]?["funded_txo_count"]);
                        var mempoolSpentTx = Convert.ToDouble(addressData["mempool_stats"]?["spent_txo_count"]);
                        var mempoolReceived2 = Convert.ToDouble(addressData["mempool_stats"]?["funded_txo_sum"]);
                        var mempoolSpent2 = Convert.ToDouble(addressData["mempool_stats"]?["spent_txo_sum"]);

                        var chainUnspent = chainReceived2 - chainSpent2;
                        var chainUnspentTxOutputs = chainFundedTx - chainSpentTx;
                        var mempoolUnspent = mempoolReceived2 - mempoolSpent2;
                        var mempoolUnspentTxOutputs = mempoolFundedTx - mempoolSpentTx;

                        var totalUnspent = chainUnspent + mempoolUnspent;
                        var totalUnspentTXOutputs = chainUnspentTxOutputs + mempoolUnspentTxOutputs;

                        lblAddressConfirmedUnspent.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedUnspent.Text = ConvertSatsToBitcoin(Convert.ToString(totalUnspent)).ToString();
                        });
                        lblAddressConfirmedUnspentOutputs.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedUnspentOutputs.Text = $"({totalUnspentTXOutputs} outputs)";
                        });
                        lblAddressConfirmedUnspentFiat.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedUnspentFiat.Text = $"{fiatSymbol}{(Convert.ToDecimal(totalUnspent) / 100000000 * OneBTCinSelectedCurrency):N2}";
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "GetAddressBalance");
            }
        }

        private async Task GetAddressBalanceAsync(string addressString)
        {
            await GetAddressBalance2Async(addressString).ConfigureAwait(true);
        }

        //-------------------------------- GET TRANSACTIONS FOR ADDRESS -----------------------------------------------
        private async Task GetTransactionsForAddressAsync(string addressString, string lastSeenTxId)
        {
            try
            {
                if (String.Compare(NodeURL, "https://mempool.space/api/") == 0 || String.Compare(NodeURL, "https://mempool.space/testnet/api/") == 0)
                {
                    rowsReturnedByAddressTransactionsAPI = 25;
                    panelOwnNodeAddressTXInfo.Visible = false;
                }
                else
                {
                    rowsReturnedByAddressTransactionsAPI = 10;
                    panelOwnNodeAddressTXInfo.Visible = true;
                }
                LightUpNodeLight();
                var transactionsJson = await _transactionsForAddressService.GetTransactionsForAddressAsync(addressString, addressScreenConfUnconfOrAllTx, lastSeenTxId).ConfigureAwait(true);
                var transactions = JsonConvert.DeserializeObject<List<AddressTransactions>>(transactionsJson);

                // Update lastSeenTxId if this isn't our first fetch of tranasctions to restart from the right place
                if (transactions!.Count > 0)
                {
                    if (String.Compare(transactions.Last().Status!.Confirmed, "true") == 0) // make sure the last shown tx wasn't a mempool tx before using its txid as a key to a subsequent call. 
                    {
                        lastSeenTxId = transactions.Last().Txid!; // it was a confirmed tx so we can carry on the next api call from that point
                    }
                    else
                    {
                        lastSeenTxId = ""; // If it was a mempool record then the next call (to confirmed tx's) will need a null txid to start from the beginning
                    }
                    lastSeenTxId = transactions.Last().Txid!;
                }

                //LIST VIEW
                listViewAddressTransactions.Invoke((MethodInvoker)delegate
                {
                    listViewAddressTransactions.Items.Clear(); // remove any data that may be there already
                });
                listViewAddressTransactions.GetType().InvokeMember("DoubleBuffered", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.SetProperty, null, listViewAddressTransactions, new object[] { true });

                // Check if the column header already exists
                if (listViewAddressTransactions.Columns.Count == 0)
                {
                    // If not, add the column header
                    if (String.Compare(addressScreenConfUnconfOrAllTx, "chain") == 0)
                    {
                        if (PartOfAnAllAddressTransactionsRequest)
                        {
                            listViewAddressTransactions.Invoke((MethodInvoker)delegate
                            {
                                listViewAddressTransactions.Columns.Add(" Transaction ID (all transactions)", (int)(225 * UIScale));
                            });
                        }
                        else
                        {
                            listViewAddressTransactions.Invoke((MethodInvoker)delegate
                            {
                                listViewAddressTransactions.Columns.Add(" Transaction ID (confirmed)", (int)(225 * UIScale));
                            });
                        }
                    }
                    if (String.Compare(addressScreenConfUnconfOrAllTx, "mempool") == 0)
                    {
                        listViewAddressTransactions.Invoke((MethodInvoker)delegate
                        {
                            listViewAddressTransactions.Columns.Add(" Transaction ID (unconfirmed)", (int)(225 * UIScale));
                        });
                    }
                    if (String.Compare(addressScreenConfUnconfOrAllTx, "all") == 0)
                    {
                        listViewAddressTransactions.Invoke((MethodInvoker)delegate
                        {
                            listViewAddressTransactions.Columns.Add(" Transaction ID (all transactions)", (int)(225 * UIScale));
                        });
                    }
                }

                // Add the balance change column header
                if (listViewAddressTransactions.Columns.Count == 1)
                {
                    listViewAddressTransactions.Invoke((MethodInvoker)delegate
                    {
                        listViewAddressTransactions.Columns.Add("Amount", (int)(110 * UIScale));
                    });
                }

                // Add the status column header
                if (listViewAddressTransactions.Columns.Count == 2)
                {
                    listViewAddressTransactions.Invoke((MethodInvoker)delegate
                    {
                        listViewAddressTransactions.Columns.Add("Confs", (int)(70 * UIScale));
                    });
                }

                // Add the block height column header
                if (listViewAddressTransactions.Columns.Count == 3)
                {
                    listViewAddressTransactions.Invoke((MethodInvoker)delegate
                    {
                        listViewAddressTransactions.Columns.Add("Block", (int)(65 * UIScale));
                    });
                }

                // Add the items to the ListView
                int counter = 0; // used to count rows in list as they're added
                WebClient client2 = new WebClient();
                string CurrentBlockHeightStringForCalc = client2.DownloadString($"{NodeURL}blocks/tip/height");

                foreach (AddressTransactions transaction in transactions)
                {
                    decimal balanceChange = 0; // will hold net result of transaction to this address
                    decimal balanceChangeVin = 0; // will hold net result of inputs to this address
                    decimal balanceChangeVout = 0; // will hold net result of outputs to this address
                    balanceChangeVout = (decimal)transaction.Vout // value of all outputs where address is the provided address
                        .Where(v => String.Compare(v.Scriptpubkey_address, addressString) == 0)
                        .Sum(v => v.Value);
                    balanceChangeVin = (decimal)transaction.Vin
                        .Where(v => v.Prevout != null && String.Compare(v.Prevout.Scriptpubkey_address, addressString) == 0)
                        .Sum(v => v.Prevout!.Value);

                    balanceChange = balanceChangeVout - balanceChangeVin; // calculate net change to balance for this transaction
                    string balanceChangeString = balanceChange.ToString();
                    balanceChange = ConvertSatsToBitcoin(balanceChangeString); // convert it to bitcoin
                    if (balanceChange >= 0)
                    {
                        balanceChangeString = $"+{balanceChange:0.00000000}"; // add a + for positive numbers
                    }
                    else
                    {
                        balanceChangeString = $"{balanceChange:0.00000000}"; // - already there for negatives
                    }

                    ListViewItem item = new ListViewItem(transaction.Txid); // create new row

                    item.SubItems.Add(balanceChangeString.ToString()); // add net change to balance

                    if (String.Compare(transaction.Status!.Confirmed, "true") == 0)
                    {
                        decimal CurrentBlockForCalc = Convert.ToDecimal(CurrentBlockHeightStringForCalc);
                        decimal TransactionBlockForCalc = transaction.Status.Block_height;
                        decimal Confirmations = (CurrentBlockForCalc - TransactionBlockForCalc) + 1;
                        item.SubItems.Add(Confirmations.ToString()); // and confirmed status
                    }
                    else
                    {
                        item.SubItems.Add("---".ToString()); // unconfirmed, so no confirmations
                    }

                    if (String.Compare(transaction.Status.Confirmed, "true") == 0)
                    {
                        item.SubItems.Add(transaction.Status.Block_height.ToString()); // add block height
                    }
                    else
                    {
                        item.SubItems.Add("------".ToString()); // unconfirmed, so no block height
                    }


                    listViewAddressTransactions.Invoke((MethodInvoker)delegate
                    {
                        listViewAddressTransactions.Items.Add(item); // add row
                    });

                    counter++; // increment rows for this batch
                    TotalAddressTransactionRowsAdded++; // increment all rows

                    if (counter == rowsReturnedByAddressTransactionsAPI) // ListView is full. stop adding rows at this point and pick up from here next time.
                    {
                        break;
                    }
                }

                if (TotalAddressTransactionRowsAdded <= rowsReturnedByAddressTransactionsAPI) // less than 25 transactions in all
                {
                    btnFirstAddressTransaction.Enabled = false; // so this won't be needed
                }
                else
                {
                    if (String.Compare(addressScreenConfUnconfOrAllTx, "mempool") == 0) //regardless how many unconfirmed TXs there are, the api only returns the first batch, but otherwise we can go back to first TX
                    {
                        btnFirstAddressTransaction.Enabled = false;
                    }
                    else
                    {
                        btnFirstAddressTransaction.Enabled = true;
                    }
                }

                if (String.Compare(Convert.ToString(TotalAddressTransactionRowsAdded), lblAddressConfirmedTransactionCount.Text) == 0) // we've shown all the TXs
                {
                    btnNextAddressTransactions.Enabled = false; // so we won't need this
                }
                else
                {
                    if (String.Compare(addressScreenConfUnconfOrAllTx, "mempool") == 0) //regardless how many unconfirmed TXs there are, the api only returns the first batch, but otherwise we can go to the next batch
                    {
                        btnNextAddressTransactions.Enabled = false;
                    }
                }

                if (listViewAddressTransactions.Items.Count > 0)
                {
                    listViewAddressTransactions.Items[0].Selected = true;
                }
                if (counter > 0)
                {
                    lblAddressTXPositionInList.Invoke((MethodInvoker)delegate
                    {
                        lblAddressTXPositionInList.Text = $"Transactions {TotalAddressTransactionRowsAdded - counter + 1} - {TotalAddressTransactionRowsAdded} of {lblAddressConfirmedTransactionCount.Text}";
                    });
                }
                else
                {
                    lblAddressTXPositionInList.Invoke((MethodInvoker)delegate
                    {
                        lblAddressTXPositionInList.Text = "No transactions to display";
                    });
                }
                panelAddressTXTab.Invoke((MethodInvoker)delegate
                {
                    panelAddressTXTab.Width = lblAddressTXPositionInList.Width + ((int)(22 * UIScale));
                });
                if (String.Compare(addressScreenConfUnconfOrAllTx, "all") == 0) // we only do one call to the 'all' api, then have to switch to the confirmed api for subsequent calls
                {
                    addressScreenConfUnconfOrAllTx = "chain";
                }

                // set focus
                if (btnNextAddressTransactions.Enabled)
                {
                    btnNextAddressTransactions.Focus();
                }
                if (listViewAddressTransactions.Items.Count > 0)
                {
                    listViewAddressTransactions.Items[0].Selected = true;

                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "GetTransactionsForAddress");
            }
        }
        #endregion
        #region show prev/next tx's
        //------------------------ GET NEXT TRANSACTIONS FOR ADDRESS --------------------------------------------------
        private async void BtnGetNextTransactionsForAddressAsync(object sender, EventArgs e)
        {
            try
            {
                ToggleLoadingAnimation("enable"); // start the loading animation
                DisableEnableAddressButtons("disable"); // disable buttons during operation
                var address = textboxSubmittedAddress.Text; // Get the address from the address text box
                                                            // Get the last seen transaction ID from the list view
                string lastSeenTxId;
                if (String.Compare(listViewAddressTransactions.Items[listViewAddressTransactions.Items.Count - 1].SubItems[1].Text, "------") == 0)
                {
                    lastSeenTxId = ""; // last seen transaction was unconfirmed, so next call will be for confirmed TXs, starting from the first
                }
                else
                {
                    lastSeenTxId = listViewAddressTransactions.Items[listViewAddressTransactions.Items.Count - 1].Text; // last seen transaction was confirmed, so next call will carry on where we left off
                }
                // Call the GetConfirmedTransactionsForAddress method with the updated lastSeenTxId
                await GetTransactionsForAddressAsync(address, lastSeenTxId).ConfigureAwait(true);
                DisableEnableAddressButtons("enable"); // enable the buttons that were previously enabled again
                ToggleLoadingAnimation("disable"); // stop the loading animation
                BtnViewBlockFromAddress.Visible = false;
                BtnViewTransactionFromAddress.Visible = false;
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnGetNextTransactionsForAddress");
            }
        }

        //------------------------ JUMP BACK TO FIRST TRANSACTION ------------------------------------------------------
        private async void BtnFirstTransactionForAddress_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                ToggleLoadingAnimation("enable"); // start the loading animation
                DisableEnableAddressButtons("disable"); // disable buttons during operation
                if (PartOfAnAllAddressTransactionsRequest) // if this was originally a list of 'all' TXs which switched to 'chain', switch back to 'all' to get the unconfirmed again first
                {
                    addressScreenConfUnconfOrAllTx = "all";
                }
                btnFirstAddressTransaction.Enabled = false;
                var address = textboxSubmittedAddress.Text; // Get the address from the address text box
                var lastSeenTxId = "0"; // Reset the last seen transaction ID to go back to start
                TotalAddressTransactionRowsAdded = 0;
                btnNextAddressTransactions.Enabled = true; // this time we know there's a next page (couldn't press first otherwise)
                BtnViewBlockFromAddress.Visible = false;
                BtnViewTransactionFromAddress.Visible = false;

                // Call the GetConfirmedTransactionsForAddress method with the updated lastSeenTxId
                await GetTransactionsForAddressAsync(address, lastSeenTxId).ConfigureAwait(true);
                DisableEnableAddressButtons("enable"); // enable the buttons that were previously enabled again
                ToggleLoadingAnimation("disable"); // stop the loading animation
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnFirstTransactionForAddress_Click");
            }
        }
        #endregion
        #region confirmed/mempool/both
        //------------------------ SHOW TRANSACTIONS IN MEMPOOL ------------------------------------------------------
        private void BtnShowUnconfirmedTXForAddress_Click(object sender, EventArgs e)
        {
            try
            {
                btnShowConfirmedTX.Enabled = true;
                btnShowAllTX.Enabled = true;
                btnShowUnconfirmedTX.Enabled = false;
                addressScreenConfUnconfOrAllTx = "mempool";
                btnNextAddressTransactions.Enabled = false;
                btnFirstAddressTransaction.Enabled = false;
                PartOfAnAllAddressTransactionsRequest = false;
                BtnViewBlockFromAddress.Visible = false;
                BtnViewTransactionFromAddress.Visible = false;
                // force a text box (address) change event to fetch unconfirmed transactions
                string temp = textboxSubmittedAddress.Text;
                textboxSubmittedAddress.Invoke((MethodInvoker)delegate
                {
                    textboxSubmittedAddress.Text = "";
                });
                listViewAddressTransactions.Invoke((MethodInvoker)delegate
                {
                    listViewAddressTransactions.Columns.Clear(); // force headings to be redrawn
                });
                textboxSubmittedAddress.Invoke((MethodInvoker)delegate
                {
                    textboxSubmittedAddress.Text = temp;
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnShowUnconfirmedTXForAddress_Click");
            }
        }

        //------------------------ SHOW CONFIRMED TRANSACTIONS ------------------------------------------------------
        private void BtnShowConfirmedTXForAddress_Click(object sender, EventArgs e)
        {
            try
            {
                btnShowConfirmedTX.Enabled = false;
                btnShowAllTX.Enabled = true;
                btnShowUnconfirmedTX.Enabled = true;
                addressScreenConfUnconfOrAllTx = "chain";
                PartOfAnAllAddressTransactionsRequest = false;
                BtnViewBlockFromAddress.Visible = false;
                BtnViewTransactionFromAddress.Visible = false;
                // force a text box (address) change event to fetch confirmed transactions
                string temp = textboxSubmittedAddress.Text;
                textboxSubmittedAddress.Invoke((MethodInvoker)delegate
                {
                    textboxSubmittedAddress.Text = "";
                });
                listViewAddressTransactions.Invoke((MethodInvoker)delegate
                {
                    listViewAddressTransactions.Columns.Clear(); // force headings to be redrawn
                });
                textboxSubmittedAddress.Invoke((MethodInvoker)delegate
                {
                    textboxSubmittedAddress.Text = temp;
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnShowConfirmedTXForAddress_Click");
            }
        }

        //------------------------ SHOW CONFIRMED & UNCONFIRMED TRANSACTIONS -------------------------------------------
        private void BtnShowAllTXForAddress_Click(object sender, EventArgs e)
        {
            try
            {
                btnShowConfirmedTX.Enabled = true;
                btnShowAllTX.Enabled = false;
                btnShowUnconfirmedTX.Enabled = true;
                addressScreenConfUnconfOrAllTx = "all";
                PartOfAnAllAddressTransactionsRequest = true;
                BtnViewBlockFromAddress.Visible = false;
                BtnViewTransactionFromAddress.Visible = false;
                // force a text box (address) change event to fetch all (confirmed and unconfirmed) transactions
                string temp = textboxSubmittedAddress.Text;
                textboxSubmittedAddress.Invoke((MethodInvoker)delegate
                {
                    textboxSubmittedAddress.Text = "";
                });
                listViewAddressTransactions.Invoke((MethodInvoker)delegate
                {
                    listViewAddressTransactions.Columns.Clear(); // force headings to be redrawn
                });
                textboxSubmittedAddress.Invoke((MethodInvoker)delegate
                {
                    textboxSubmittedAddress.Text = temp;
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnShowAllTXForAddress_Click");
            }
        }
        #endregion
        #region navigate from tx row to other screen
        //------------------------ VIEW THE BLOCK CONTAINING THIS TRANSACTION ------------------------------------------
        private async void BtnViewBlockFromAddress_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                await CheckNetworkStatusAsync().ConfigureAwait(true);
                // Get the selected item
                ListViewItem selectedItem = listViewAddressTransactions.SelectedItems[0];
                // Get the second subitem in the selected item 
                string submittedBlockNumber = selectedItem.SubItems[3].Text;
                // copy block number to the block screen
                numericUpDownSubmittedBlockNumber.Invoke((MethodInvoker)delegate
                {
                    numericUpDownSubmittedBlockNumber.Text = submittedBlockNumber;
                });
                try
                {
                    LookupBlockAsync();
                }
                catch (Exception ex)
                {
                    HandleException(ex, "BtnViewBlockFromAddress_Click");
                }
                panelAddress.Invoke((MethodInvoker)delegate
                {
                    panelAddress.Visible = false;
                });
                //show the block screen
                BtnMenuBlock_ClickAsync(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnViewBlockFromAddress_Click");
            }
        }

        //------------------------ VIEW THIS TRANSACTION ------------------------------------------------------
        private async void BtnViewTransactionFromAddress_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                await CheckNetworkStatusAsync().ConfigureAwait(true);
                // Get the selected item
                ListViewItem selectedItem = listViewAddressTransactions.SelectedItems[0];
                // Get the first subitem in the selected item 
                string TransactionIDFromRow = selectedItem.SubItems[0].Text;
                // copy transaction ID to transaction screen
                textBoxTransactionID.Invoke((MethodInvoker)delegate
                {
                    textBoxTransactionID.Text = TransactionIDFromRow;
                });
                panelAddress.Invoke((MethodInvoker)delegate
                {
                    panelAddress.Visible = false;
                });
                //show the transaction screen
                BtnMenuTransaction_ClickAsync(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnViewTransactionFromAddress_Click");
            }
        }

        private void BtnViewUTXOsFromAddressTX_Click(object sender, EventArgs e)
        {
            textboxSubmittedAddressUTXO.Text = textboxSubmittedAddress.Text;
            panelAddress.Invoke((MethodInvoker)delegate
            {
                panelAddress.Visible = false;
            });
            BtnMenuAddressUTXO_ClickAsync(sender, e);
        }
        #endregion
        #region listview appearance
        //------------------------ CHANGE COLOUR OF SELECTED ROW ------------------------------------------------------
        private void ListViewAddressTransactions_ItemSelectionChanged(object sender, ListViewItemSelectionChangedEventArgs e)
        {
            try
            {
                foreach (ListViewItem item in listViewAddressTransactions.Items)
                {
                    if (item != null)
                    {
                        if (item.Selected)
                        {
                            foreach (ListViewItem.ListViewSubItem subItem in item.SubItems)
                            {
                                subItem.ForeColor = MakeColorLighter(tableTextColor, 40);
                                if (String.Compare(subItem.Text, "------") == 0)
                                {
                                    BtnViewBlockFromAddress.Invoke((MethodInvoker)delegate
                                    {
                                        BtnViewBlockFromAddress.Enabled = false;

                                    });
                                }
                                else
                                {
                                    BtnViewBlockFromAddress.Invoke((MethodInvoker)delegate
                                    {
                                        BtnViewBlockFromAddress.Enabled = true;
                                    });
                                }
                            }
                            BtnViewTransactionFromAddress.Invoke((MethodInvoker)delegate
                            {
                                BtnViewTransactionFromAddress.Location = new Point(listViewAddressTransactions.Location.X - BtnViewTransactionFromAddress.Width + (int)(12 * UIScale), item.Position.Y + listViewAddressTransactions.Location.Y);
                                BtnViewTransactionFromAddress.Height = item.Bounds.Height;
                            });

                            BtnViewBlockFromAddress.Invoke((MethodInvoker)delegate
                            {
                                BtnViewBlockFromAddress.Location = new Point(listViewAddressTransactions.Location.X + listViewAddressTransactions.Width - (int)(12 * UIScale), item.Position.Y + listViewAddressTransactions.Location.Y);
                                BtnViewBlockFromAddress.Height = item.Bounds.Height;
                            });
                        }
                        else
                        {
                            foreach (ListViewItem.ListViewSubItem subItem in item.SubItems)
                            {
                                subItem.ForeColor = tableTextColor;
                            }
                        }
                    }
                }
                BtnViewTransactionFromAddress.Visible = listViewAddressTransactions.SelectedItems.Count > 0;
                BtnViewBlockFromAddress.Visible = listViewAddressTransactions.SelectedItems.Count > 0;
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewAddressTransactions_ItemSelectionChanged");
            }
        }

        //-----DRAW AN ELLIPSIS WHEN STRINGS DONT FIT IN LISTVIEW COLUMN (ALSO COLOUR BALANCE DIFFERENCE RED/GREEN)----
        private void ListViewAddressTransactions_DrawSubItem(object sender, DrawListViewSubItemEventArgs e)
        {
            try
            {
                var text = e.SubItem.Text;

                if (text[0] == '+') // if the string is a change to an amount and positive
                {
                    e.SubItem.ForeColor = Color.OliveDrab; // make it green
                }
                else
                if (text[0] == '-') // if the string is a change to an amount and negative
                {
                    e.SubItem.ForeColor = Color.IndianRed; // make it red
                }

                var font = listViewAddressTransactions.Font;
                var columnWidth = e.Header.Width;
                var textWidth = TextRenderer.MeasureText(text, font).Width;
                if (textWidth > columnWidth)
                {
                    // Truncate the text
                    var maxText = $"{text.Substring(0, text.Length * columnWidth / textWidth - 3)}...";
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);
                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewAddressTransactions.BackColor), bounds);
                    }
                    TextRenderer.DrawText(e.Graphics, maxText, font, bounds, e.Item.ForeColor, TextFormatFlags.EndEllipsis | TextFormatFlags.Left);
                }
                else if (textWidth < columnWidth)
                {
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);

                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewAddressTransactions.BackColor), bounds);
                    }

                    TextRenderer.DrawText(e.Graphics, text, font, bounds, e.SubItem.ForeColor, TextFormatFlags.Left);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewAddressTransactions_DrawSubItem");
            }
        }

        //------------------ LIMIT MINIMUM WIDTH OF ADDRESS LISTVIEW COLUMNS ------------------------------------------
        private void ListViewAddressTransactions_ColumnWidthChanging(object sender, ColumnWidthChangingEventArgs e)
        {
            try
            {
                if (e.ColumnIndex == 0)
                {
                    if (listViewAddressTransactions.Columns[e.ColumnIndex].Width != (int)(225 * UIScale)) // don't allow this one to change
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(225 * UIScale);
                    }
                }

                if (e.ColumnIndex == 1)
                {
                    if (listViewAddressTransactions.Columns[e.ColumnIndex].Width != (int)(110 * UIScale)) // don't allow this one to change
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(110 * UIScale);
                    }
                }
                if (e.ColumnIndex == 2)
                {
                    if (listViewAddressTransactions.Columns[e.ColumnIndex].Width != (int)(70 * UIScale)) // don't allow this one to change
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(70 * UIScale);
                    }
                }
                if (e.ColumnIndex == 3)
                {
                    if (listViewAddressTransactions.Columns[e.ColumnIndex].Width != (int)(65 * UIScale)) // don't allow this one to change
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(65 * UIScale);
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewAddressTransactions_ColumnWidthChanging");
            }
        }
        #endregion
        #region configure controls
        //------------------------ SHOW ALL THE ADDRESS CONTROLS ------------------------------------------------------
        private void AddressValidShowControls() // show all address related controls
        {
            try
            {
                SuspendLayout();
                if (String.Compare(addressScreenConfUnconfOrAllTx, "mempool") == 0) //only one page of unconfirmed tx regardless how many tx there are
                {
                    btnNextAddressTransactions.Enabled = false;
                    btnFirstAddressTransaction.Enabled = false;
                }
                else
                {
                    btnNextAddressTransactions.Enabled = true;
                    btnFirstAddressTransaction.Enabled = true;
                }

                Control[] controlsToShow = { lblAddressTXPositionInList, label59, label61, label67, label63, listViewAddressTransactions, lblAddressConfirmedUnspent, lblAddressConfirmedUnspentOutputs, lblAddressConfirmedTransactionCount, lblAddressConfirmedReceived, lblAddressConfirmedReceivedOutputs, lblAddressConfirmedSpent, lblAddressConfirmedSpentOutputs,
                    btnShowAllTX, btnShowConfirmedTX, btnShowUnconfirmedTX, lblAddressType, panel41, panel42, panel43, panel44, panel132, listViewAddressTransactions, btnViewUTXOsFromAddressTX, btnFirstAddressTransaction, btnNextAddressTransactions, panelAddressTxContainer };
                foreach (Control control in controlsToShow)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.Visible = true;
                    });
                }


                if (String.Compare(lblHeaderPrice.Text, "disabled") != 0)
                {
                    lblAddressConfirmedReceivedFiat.Visible = true;
                    lblAddressConfirmedSpentFiat.Visible = true;
                    lblAddressConfirmedUnspentFiat.Visible = true;
                }

                if (String.Compare(NodeURL, "https://mempool.space/api/") == 0 || String.Compare(NodeURL, "https://mempool.space/testnet/api/") == 0)
                {
                    rowsReturnedByAddressTransactionsAPI = 25;
                    panelOwnNodeAddressTXInfo.Visible = false;
                }
                else
                {
                    rowsReturnedByAddressTransactionsAPI = 10;
                    panelOwnNodeAddressTXInfo.Visible = true;
                }
                listViewAddressTransactions.BringToFront();

                panelOwnNodeAddressTXInfo.BringToFront();
                panelAddressResults.Invoke((MethodInvoker)delegate
                {
                    panelAddressResults.Refresh();
                    panelAddressResults.Visible = true;
                });
                ResumeLayout(false);
            }
            catch (Exception ex)
            {
                HandleException(ex, "AddressValidShowControls");
            }
        }

        //------------------------ HIDE ALL THE ADDRESS CONTROLS ------------------------------------------------------

        private async Task AddressInvalidHideControlsAsync()
        {
            // TaskCompletionSource to wait for Invoke completion
            var tcs = new TaskCompletionSource<bool>();

            panelAddressResults.Invoke((MethodInvoker)delegate
            {
                panelAddressResults.Visible = false;
                tcs.SetResult(true); 
            });

            await tcs.Task;

            if (lblAddressType.Visible)
            {
                Control[] controlsToHide = {
                btnNextAddressTransactions, btnFirstAddressTransaction, lblAddressTXPositionInList, label59, label61, label67, label63, listViewAddressTransactions,
                lblAddressConfirmedUnspent, lblAddressConfirmedUnspentOutputs, lblAddressConfirmedTransactionCount, lblAddressConfirmedReceived, lblAddressConfirmedReceivedOutputs,
                panelAddressTxContainer, lblAddressConfirmedSpent, lblAddressConfirmedSpentOutputs, lblAddressConfirmedReceivedFiat, lblAddressConfirmedSpentFiat, lblAddressConfirmedUnspentFiat,
                btnShowAllTX, btnShowConfirmedTX, btnShowUnconfirmedTX, lblAddressType, panel41, panel42, panel43, panel44, panel132, listViewAddressTransactions,
                panelOwnNodeAddressTXInfo, btnViewUTXOsFromAddressTX, btnFirstAddressTransaction, btnNextAddressTransactions };

                foreach (Control control in controlsToHide)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.Visible = false;
                    });
                }
            }
        }


        private void DisableEnableAddressButtons(string enableOrDisableAddressButtons)
        {
            try
            {
                if (String.Compare(enableOrDisableAddressButtons, "disable") == 0)
                {
                    // get current state of buttons before disabling them
                    btnShowAllAddressTXWasEnabled = btnShowAllTX.Enabled;
                    btnShowConfirmedAddressTXWasEnabled = btnShowConfirmedTX.Enabled;
                    btnShowUnconfirmedAddressTXWasEnabled = btnShowUnconfirmedTX.Enabled;
                    BtnViewTransactionFromAddressWasEnabled = BtnViewTransactionFromAddress.Enabled;
                    //BtnViewBlockFromAddressWasEnabled = BtnViewBlockFromAddress.Enabled;
                    textBoxSubmittedAddressWasEnabled = textboxSubmittedAddress.Enabled;

                    //disable them all
                    //Control[] controlsToDisable = { btnShowAllTX, btnShowConfirmedTX, btnShowUnconfirmedTX, BtnViewTransactionFromAddress, BtnViewBlockFromAddress, textboxSubmittedAddress };
                    Control[] controlsToDisable = { btnShowAllTX, btnShowConfirmedTX, btnShowUnconfirmedTX, BtnViewTransactionFromAddress, textboxSubmittedAddress };
                    foreach (Control control in controlsToDisable)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.Enabled = false;
                        });
                    }
                }
                else
                {
                    // use previously saved states to reinstate buttons
                    btnShowAllTX.Enabled = btnShowAllAddressTXWasEnabled;
                    btnShowConfirmedTX.Enabled = btnShowConfirmedAddressTXWasEnabled;
                    btnShowUnconfirmedTX.Enabled = btnShowUnconfirmedAddressTXWasEnabled;
                    BtnViewTransactionFromAddress.Enabled = BtnViewTransactionFromAddressWasEnabled;
                    //BtnViewBlockFromAddress.Enabled = BtnViewBlockFromAddressWasEnabled;
                    textboxSubmittedAddress.Enabled = textBoxSubmittedAddressWasEnabled;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "DisableEnableAddressButtons");
            }
        }

        #endregion

        #endregion
        //![](resources\tinylogo1.png;;;0.04706,0.04877)
        #region ⚡⚡⚡ ADDRESS (UTXO's) SCREEN
        #region setup address utxo screen
        private async void TextboxSubmittedAddressUTXO_TextChangedAsync(object sender, EventArgs e)
        {
            try
            {
                panelAddressUTXOResults.Invoke((MethodInvoker)delegate
                {
                    panelAddressUTXOResults.Visible = false;
                });
                Control[] controlsToSetEmpty2 = { lblAddressConfirmedSpentUTXO, lblAddressConfirmedSpentOutputsUTXO, lblAddressConfirmedUnspentUTXO, lblAddressConfirmedUnspentOutputsUTXO, lblAddressConfirmedSpentUTXOFiat, lblLargestUTXO, lblSmallestUTXO, lblAddressTypeUTXO };
                foreach (Control control in controlsToSetEmpty2)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.Text = string.Empty;
                    });
                }
                btnViewBlockFromAddressUTXO.Visible = false;
                btnViewTransactionFromAddressUTXO.Visible = false;
                listViewAddressUTXOs.Items.Clear(); // wipe any data in the transaction listview
                TotalAddressUTXORowsAdded = 0;

                string addressString = textboxSubmittedAddressUTXO.Text; // supplied address

                string addressType = DetermineAddressType(addressString); // check address is valid and what type of address
                if (String.Compare(addressType, "P2PKH (legacy)") == 0 ||
                String.Compare(addressType, "P2SH") == 0 ||
                String.Compare(addressType, "P2WPKH (segwit)") == 0 ||
                String.Compare(addressType, "P2WSH") == 0 ||
                String.Compare(addressType, "P2TT (taproot)") == 0 ||
                String.Compare(addressType, "unknown") == 0) // if any of these, address is valid
                {
                    ToggleLoadingAnimation("enable"); // start the loading animation

                    DisableEnableAddressUTXOButtons("disable"); // disable buttons during operation
                    lblInvalidAddressIndicatorUTXO.Invoke((MethodInvoker)delegate
                    {
                        lblInvalidAddressIndicatorUTXO.ForeColor = Color.OliveDrab;
                        lblInvalidAddressIndicatorUTXO.Text = "✔️ valid address";
                    });
                    //AddressValidShowControlsUTXO();

                    lblAddressTypeUTXO.Invoke((MethodInvoker)delegate
                    {
                        lblAddressTypeUTXO.Text = $"{addressType} address";
                    });
                    // generate QR code for address
                    QRCodeGenerator qrGenerator = new QRCodeGenerator();
                    QRCodeData qrCodeData = qrGenerator.CreateQrCode(addressString, QRCodeGenerator.ECCLevel.Q);
                    QRCode qrCode = new QRCode(qrCodeData);
                    var qrCodeImage = qrCode.GetGraphic(20, label77.ForeColor, Color.Black, false);
                    qrCodeImage.MakeTransparent(Color.Black);
                    AddressQRCodePictureboxUTXO.Invoke((MethodInvoker)delegate
                    {
                        AddressQRCodePictureboxUTXO.Image = qrCodeImage;
                    });
                    try
                    {
                        await GetAddressBalanceUTXOAsync(addressString).ConfigureAwait(true); // make sure we get these results before processing transactions
                    }
                    catch (Exception ex)
                    {
                        HandleException(ex, "TboxSubmittedAddressUTXO_TextChanged (Error getting address balance)");
                        return;
                    }
                    try
                    {
                        await GetUTXOsForAddressUTXOAsync(addressString).ConfigureAwait(true);
                    }
                    catch (Exception ex)
                    {
                        HandleException(ex, "TboxSubmittedAddressUTXO_TextChanged (Error getting first batch of transactions for address)");
                        return;
                    }
                    DisableEnableAddressUTXOButtons("enable"); // enable the buttons that were previously enabled again

                    ToggleLoadingAnimation("disable"); // stop the loading animation
                }
                else
                {
                    if (addressString == "")
                    {
                        lblInvalidAddressIndicatorUTXO.Invoke((MethodInvoker)delegate
                        {
                            lblInvalidAddressIndicatorUTXO.Text = "";
                        });
                    }
                    else
                    {
                        lblInvalidAddressIndicatorUTXO.Invoke((MethodInvoker)delegate
                        {
                            lblInvalidAddressIndicatorUTXO.ForeColor = Color.IndianRed;
                            lblInvalidAddressIndicatorUTXO.Text = "✖️ invalid address";
                        });
                    }
                    lblAddressTypeUTXO.Invoke((MethodInvoker)delegate
                    {
                        lblAddressTypeUTXO.Text = "Invalid address format";
                    });
                    AddressQRCodePictureboxUTXO.Invoke((MethodInvoker)delegate
                    {
                        AddressQRCodePictureboxUTXO.Image = null;
                    });

                    Control[] controlsToSetEmpty = { lblAddressConfirmedSpentUTXO, lblAddressConfirmedSpentOutputsUTXO, lblAddressConfirmedUnspentUTXO, lblAddressConfirmedUnspentOutputsUTXO };
                    foreach (Control control in controlsToSetEmpty)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.Text = string.Empty;
                        });
                    }

                    AddressInvalidHideControlsUTXO();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TboxSubmittedAddressUTXO_TextChanged");
            }
        }

        //------------------------------------------ GET ADDRESS BALANCE-----------------------------------------------
        private async Task GetAddressBalance2UTXOAsync(string addressString)
        {
            try
            {
                var request = $"address/{addressString}";
                var RequestURL = $"{NodeURL}{request}";
                var client = new HttpClient();
                LightUpNodeLight();
                var response = await client.GetAsync($"{RequestURL}").ConfigureAwait(true); // get the JSON to get address balance and no of transactions etc
                if (!response.IsSuccessStatusCode)
                {
                    lblSettingsSelectedNodeStatus.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsSelectedNodeStatus.Text = "Disconnected/error";
                        lblSettingsSelectedNodeStatus.Location = new Point((int)(750 * UIScale) - lblSettingsSelectedNodeStatus.Width, lblSettingsSelectedNodeStatus.Location.Y);
                    });
                    lblSettingsSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsSelectedNodeStatusLight.ForeColor = Color.Red;
                        lblSettingsSelectedNodeStatusLight.Location = new Point(lblSettingsSelectedNodeStatus.Location.X - lblSettingsSelectedNodeStatusLight.Width, lblSettingsSelectedNodeStatusLight.Location.Y);
                    });
                    lblErrorMessage.Invoke((MethodInvoker)delegate
                    {
                        lblErrorMessage.Text = "Node offline/disconnected: ";
                    });
                    return;
                }
                var jsonData = await response.Content.ReadAsStringAsync().ConfigureAwait(true);
                var addressData = JObject.Parse(jsonData);

                if (addressData["chain_stats"]!["tx_count"] != null && addressData["chain_stats"]!["funded_txo_sum"] != null && addressData["chain_stats"]!["funded_txo_count"] != null && addressData["chain_stats"]!["spent_txo_sum"] != null && addressData["chain_stats"]!["spent_txo_count"] != null)
                {
                    label314.Invoke((MethodInvoker)delegate
                    {
                        label314.Text = "UNSPENT TRANSACTION OUTPUTS";
                    });
                    lblAddressConfirmedSpentUTXO.Invoke((MethodInvoker)delegate
                    {
                        lblAddressConfirmedSpentUTXO.Text = $"{ConvertSatsToBitcoin(Convert.ToString(addressData["chain_stats"]!["spent_txo_sum"]))}";
                    });
                    lblAddressConfirmedSpentUTXOFiat.Invoke((MethodInvoker)delegate
                    {
                        lblAddressConfirmedSpentUTXOFiat.Text = $"{fiatSymbol}{(Convert.ToDecimal(addressData["chain_stats"]!["spent_txo_sum"]) / 100000000 * OneBTCinSelectedCurrency):N2}";
                    });
                    lblAddressConfirmedSpentOutputsUTXO.Invoke((MethodInvoker)delegate
                    {
                        lblAddressConfirmedSpentOutputsUTXO.Text = $"{addressData["chain_stats"]!["spent_txo_count"]}";
                    });
                    var confirmedReceived = Convert.ToDouble(addressData["chain_stats"]!["funded_txo_sum"]);
                    var confirmedSpent = Convert.ToDouble(addressData["chain_stats"]!["spent_txo_sum"]);
                    var confirmedUnspent = confirmedReceived - confirmedSpent;
                    lblAddressConfirmedUnspentUTXO.Invoke((MethodInvoker)delegate
                    {
                        lblAddressConfirmedUnspentUTXO.Text = ConvertSatsToBitcoin(Convert.ToString(confirmedUnspent)).ToString();
                    });

                    lblAddressConfirmedUnspentUTXOFiat.Invoke((MethodInvoker)delegate
                    {
                        lblAddressConfirmedUnspentUTXOFiat.Text = $"{fiatSymbol}{(Convert.ToDecimal(confirmedUnspent) / 100000000 * OneBTCinSelectedCurrency):N2}";
                    });
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "GetAddressBalanceUTXO");
            }
        }

        private async Task GetAddressBalanceUTXOAsync(string addressString)
        {
            await GetAddressBalance2UTXOAsync(addressString).ConfigureAwait(true);
        }

        //-------------------------------- GET UTXOS FOR ADDRESS -----------------------------------------------
        private async Task GetUTXOsForAddressUTXOAsync(string addressString)
        {
            try
            {
                LightUpNodeLight();
                var UTXOsJson = await _UTXOsForAddressService.GetUTXOsForAddressAsync(addressString).ConfigureAwait(true);
                var utxos = JsonConvert.DeserializeObject<List<AddressUTXOs>>(UTXOsJson);

                if (utxos != null)
                {
                    utxos = utxos.OrderByDescending(utxo => ConvertSatsToBitcoin(utxo.Value!)).ToList();

                    if (utxos.Count == 0)
                    {
                        label317.Invoke((MethodInvoker)delegate
                        {
                            label317.Text = "There are no UTXO's currently held by this address.";
                        });
                        panelAddressUTXOScrollContainer.Visible = false;
                        panel143.Visible = false;
                        panelAddressUTXOScrollbarOuter.Visible = false;
                        panelUTXOsContainer.Visible = false;
                        panelUTXOError.Visible = true;
                    }
                    else
                    {
                        panelUTXOError.Visible = false;
                        //LIST VIEW
                        listViewAddressUTXOs.Invoke((MethodInvoker)delegate
                        {
                            listViewAddressUTXOs.Items.Clear(); // remove any data that may be there already
                        });
                        listViewAddressUTXOs.GetType().InvokeMember("DoubleBuffered", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.SetProperty, null, listViewAddressUTXOs, new object[] { true });

                        // Check if the column header already exists
                        if (listViewAddressUTXOs.Columns.Count == 0)
                        {
                            listViewAddressUTXOs.Invoke((MethodInvoker)delegate
                            {
                                listViewAddressUTXOs.Columns.Add("Originating transaction ID", (int)(215 * UIScale));
                            });
                        }


                        if (listViewAddressUTXOs.Columns.Count == 1)
                        {
                            listViewAddressUTXOs.Invoke((MethodInvoker)delegate
                            {
                                listViewAddressUTXOs.Columns.Add("Value", (int)(100 * UIScale));
                            });
                        }

                        if (listViewAddressUTXOs.Columns.Count == 2)
                        {
                            listViewAddressUTXOs.Invoke((MethodInvoker)delegate
                            {
                                listViewAddressUTXOs.Columns.Add("Confs.", (int)(65 * UIScale));
                            });
                        }

                        if (listViewAddressUTXOs.Columns.Count == 3)
                        {
                            listViewAddressUTXOs.Invoke((MethodInvoker)delegate
                            {
                                listViewAddressUTXOs.Columns.Add("Block", (int)(65 * UIScale));
                            });
                        }


                        // Add the items to the ListView
                        int counter = 0; // used to count rows in list as they're added
                        WebClient client2 = new WebClient();
                        string CurrentBlockHeightStringForCalc = client2.DownloadString($"{NodeURL}blocks/tip/height");

                        decimal smallestUTXO = 21000000;
                        decimal largestUTXO = 0;

                        foreach (AddressUTXOs utxo in utxos)
                        {

                            ListViewItem item = new ListViewItem(Convert.ToString(utxo.Txid)); // create new row
                            decimal amountInBTC = ConvertSatsToBitcoin(utxo.Value!); // convert it to bitcoin
                            if (amountInBTC > largestUTXO)
                            {
                                largestUTXO = amountInBTC;
                            }
                            if (amountInBTC < smallestUTXO)
                            {
                                smallestUTXO = amountInBTC;
                            }
                            item.SubItems.Add(Convert.ToString(amountInBTC));
                            if (utxo.Status!.Block_height != 0)
                            {
                                int confirmations = Convert.ToInt32(CurrentBlockHeightStringForCalc) - Convert.ToInt32(utxo.Status.Block_height);
                                item.SubItems.Add(Convert.ToString(confirmations));
                            }
                            else
                            {
                                item.SubItems.Add("0");
                            }
                            if (utxo.Status.Block_height != 0)
                            {
                                item.SubItems.Add(Convert.ToString(utxo.Status.Block_height));
                            }
                            else
                            {
                                item.SubItems.Add("-");
                            }
                            listViewAddressUTXOs.Invoke((MethodInvoker)delegate
                            {
                                listViewAddressUTXOs.Items.Add(item); // add row
                            });

                            counter++; // increment rows for this batch
                            TotalAddressUTXORowsAdded++; // increment all rows

                            // Get the height of each item to set height of whole listview
                            int rowHeight = listViewAddressUTXOs.Margin.Vertical + listViewAddressUTXOs.Padding.Vertical + listViewAddressUTXOs.GetItemRect(0).Height;
                            int itemCount = listViewAddressUTXOs.Items.Count; // Get the number of items in the ListBox
                            int listBoxHeight = (itemCount + 2) * rowHeight; // Calculate the height of the ListBox (the extra 2 gives room for the header)

                            listViewAddressUTXOs.Height = listBoxHeight; // Set the height of the ListBox
                            panel137.Height = listBoxHeight;

                        }
                        lblUTXOCount.Invoke((MethodInvoker)delegate
                        {
                            lblUTXOCount.Text = $"{counter} UTXO's";
                        });
                        panelAddressUTXOTab.Invoke((MethodInvoker)delegate
                        {
                            panelAddressUTXOTab.Width = lblUTXOCount.Width + ((int)(22 * UIScale));
                        });
                        AddressValidShowControlsUTXO();
                        panelAddressUTXOResults.Refresh();
                        panelUTXOsContainer.Refresh();
                        if (listViewAddressUTXOs.Items.Count > 29)
                        {
                            btnAddressUTXOScrollUp.Enabled = true;
                            btnAddressUTXOScrollDown.Enabled = true;
                        }
                        else
                        {
                            btnAddressUTXOScrollUp.Enabled = false;
                            btnAddressUTXOScrollDown.Enabled = false;
                        }

                        lblLargestUTXO.Invoke((MethodInvoker)delegate
                        {
                            lblLargestUTXO.Text = Convert.ToString(largestUTXO);
                        });
                        lblSmallestUTXO.Invoke((MethodInvoker)delegate
                        {
                            lblSmallestUTXO.Text = Convert.ToString(smallestUTXO);
                        });
                        if (listViewAddressUTXOs.Items.Count > 0)
                        {
                            listViewAddressUTXOs.Items[0].Selected = true;
                        }
                        if (counter > 0)
                        {
                            lblAddressConfirmedUnspentOutputsUTXO.Invoke((MethodInvoker)delegate
                            {
                                lblAddressConfirmedUnspentOutputsUTXO.Text = $"{TotalAddressUTXORowsAdded}";
                            });

                        }
                        else
                        {
                            lblAddressConfirmedUnspentOutputsUTXO.Invoke((MethodInvoker)delegate
                            {
                                lblAddressConfirmedUnspentOutputsUTXO.Text = "0";
                            });
                        }
                        #region scrollbar
                        decimal displayRatio = Convert.ToDecimal(panelAddressUTXOScrollbarOuter.Height) / Convert.ToDecimal(listViewAddressUTXOs.Height);
                        panelAddressUTXOScrollbarInner.Invoke((MethodInvoker)delegate
                        {
                            panelAddressUTXOScrollbarInner.Height = (int)(panelAddressUTXOScrollbarOuter.Height * displayRatio);
                            panelAddressUTXOScrollbarInner.Refresh();
                        });
                        int distanceToBeScrolled = panelAddressUTXOScrollbarOuter.Height - panelAddressUTXOScrollbarInner.Height;
                        int numberOfRowsLeftToShow = listViewAddressUTXOs.Items.Count - 28;
                        if (numberOfRowsLeftToShow > 0)
                        {
                            addressUTXOScrollbarIncrement = Convert.ToInt32(distanceToBeScrolled / numberOfRowsLeftToShow);
                        }
                        else
                        {
                            panelAddressUTXOScrollbarInner.Invoke((MethodInvoker)delegate
                            {
                                panelAddressUTXOScrollbarInner.Height = panelAddressUTXOScrollbarOuter.Height;
                            });
                            addressUTXOScrollbarIncrement = 0;
                            btnAddressUTXOScrollUp.Enabled = false;
                            btnAddressUTXOScrollDown.Enabled = false;
                        }
                        panelAddressUTXOScrollbarInner.Refresh();
                        #endregion
                    }
                }
                else
                {
                    label317.Invoke((MethodInvoker)delegate
                    {
                        label317.Text = "There are too many UTXO's to display!";
                    });
                    panelUTXOError.Visible = true;
                    panelAddressUTXOScrollContainer.Visible = false;
                    panel143.Visible = false;
                    panelAddressUTXOScrollbarOuter.Visible = false;
                    panelUTXOsContainer.Visible = false;
                    lblAddressConfirmedUnspentOutputsUTXO.Invoke((MethodInvoker)delegate
                    {
                        lblAddressConfirmedUnspentOutputsUTXO.Text = "";
                    });
                    lblLargestUTXO.Invoke((MethodInvoker)delegate
                    {
                        lblLargestUTXO.Text = "-";
                    });
                    lblSmallestUTXO.Invoke((MethodInvoker)delegate
                    {
                        lblSmallestUTXO.Text = "-";
                    });
                    panelUTXOError.Invoke((MethodInvoker)delegate
                    {
                        panelUTXOError.Visible = true;
                    });
                }


                Control[] controlsToRefresh = { panelAddressUTXO, panelSubmittedAddressContainerUTXO, panelAddressUTXOScrollContainer, panelUTXOsContainer, panel135, panelAddressUTXOScrollbarInner, panelAddressUTXOResults };
                foreach (Control control in controlsToRefresh)
                {
                    if (control.InvokeRequired)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.Refresh();
                        });
                    }
                    else
                    {
                        control.Refresh();
                    }
                }

            }
            catch (Exception ex)
            {
                HandleException(ex, "GetTransactionsForAddressUTXO");
            }
        }
        #endregion
        #region navigate from utxo row to other screen
        private async void BtnViewTransactionFromAddressUTXO_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                await CheckNetworkStatusAsync().ConfigureAwait(true);
                // Get the selected item
                ListViewItem selectedItem = listViewAddressUTXOs.SelectedItems[0];
                // Get the first subitem in the selected item 
                string TransactionIDFromRow = selectedItem.SubItems[0].Text;
                // copy transaction ID to transaction screen
                textBoxTransactionID.Invoke((MethodInvoker)delegate
                {
                    textBoxTransactionID.Text = TransactionIDFromRow;
                });
                panelAddressUTXO.Invoke((MethodInvoker)delegate
                {
                    panelAddressUTXO.Visible = false;
                });
                //show the transaction screen
                BtnMenuTransaction_ClickAsync(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnViewTransactionFromAddressUTXO_Click");
            }
        }

        private async void BtnViewBlockFromAddressUTXO_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                await CheckNetworkStatusAsync().ConfigureAwait(true);
                // Get the selected item
                ListViewItem selectedItem = listViewAddressUTXOs.SelectedItems[0];
                // Get the second subitem in the selected item 
                string submittedBlockNumber = selectedItem.SubItems[3].Text;
                // copy block number to the block screen
                numericUpDownSubmittedBlockNumber.Invoke((MethodInvoker)delegate
                {
                    numericUpDownSubmittedBlockNumber.Text = submittedBlockNumber;
                });
                try
                {
                    LookupBlockAsync();
                }
                catch (Exception ex)
                {
                    HandleException(ex, "BtnViewBlockFromAddressUTXO_Click");
                }
                panelAddressUTXO.Invoke((MethodInvoker)delegate
                {
                    panelAddressUTXO.Visible = false;
                });
                //show the block screen
                BtnMenuBlock_ClickAsync(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnViewBlockFromAddressUTXO_Click");
            }
        }

        private void BtnViewAddressTXFromUTXO_Click(object sender, EventArgs e)
        {
            textboxSubmittedAddress.Text = textboxSubmittedAddressUTXO.Text;
            panelAddressUTXO.Invoke((MethodInvoker)delegate
            {
                panelAddressUTXO.Visible = false;
            });
            BtnMenuAddress_ClickAsync(sender, e);
        }
        #endregion
        #region listview appearance
        //------------------------ CHANGE COLOUR OF SELECTED ROW ------------------------------------------------------
        private void ListViewAddressUTXOs_ItemSelectionChanged(object sender, ListViewItemSelectionChangedEventArgs e)
        {
            try
            {

                foreach (ListViewItem item in listViewAddressUTXOs.Items)
                {
                    if (item != null)
                    {
                        if (item.Selected)
                        {
                            foreach (ListViewItem.ListViewSubItem subItem in item.SubItems)
                            {
                                subItem.ForeColor = MakeColorLighter(tableTextColor, 40);
                            }
                            btnViewTransactionFromAddressUTXO.Invoke((MethodInvoker)delegate
                            {
                                btnViewTransactionFromAddressUTXO.Location = new Point(3, item.Position.Y);
                                btnViewTransactionFromAddressUTXO.Height = item.Bounds.Height;
                            });
                            btnViewBlockFromAddressUTXO.Invoke((MethodInvoker)delegate
                            {
                                btnViewBlockFromAddressUTXO.Location = new Point(listViewAddressUTXOs.Location.X + listViewAddressUTXOs.Width - (int)(13 * UIScale), item.Position.Y);
                                btnViewBlockFromAddressUTXO.Height = item.Bounds.Height;
                            });
                            if (String.Compare(item.SubItems[3].Text, "-") == 0)
                            {
                                btnViewBlockFromAddressUTXO.Enabled = false;
                            }
                            else
                            {
                                btnViewBlockFromAddressUTXO.Enabled = true;
                            }
                        }
                        else
                        {
                            foreach (ListViewItem.ListViewSubItem subItem in item.SubItems)
                            {
                                subItem.ForeColor = tableTextColor;
                            }
                        }
                    }
                }
                btnViewTransactionFromAddressUTXO.Visible = listViewAddressUTXOs.SelectedItems.Count > 0;
                btnViewBlockFromAddressUTXO.Visible = listViewAddressUTXOs.SelectedItems.Count > 0;
                //btnViewBlockFromAddressUTXO.BringToFront();
                lblHeaderBlockAge.Focus();
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewAddressTransactionsUTXOs_ItemSelectionChanged");
            }
        }
        //-----DRAW AN ELLIPSIS WHEN STRINGS DONT FIT IN LISTVIEW COLUMN (ALSO COLOUR BALANCE DIFFERENCE RED/GREEN)----
        private void ListViewAddressUTXOs_DrawSubItem(object sender, DrawListViewSubItemEventArgs e)
        {
            try
            {
                var text = e.SubItem.Text;

                if (text[0] == '+') // if the string is a change to an amount and positive
                {
                    e.SubItem.ForeColor = Color.OliveDrab; // make it green
                }
                else
                if (text[0] == '-') // if the string is a change to an amount and negative
                {
                    e.SubItem.ForeColor = Color.IndianRed; // make it red
                }

                var font = listViewAddressUTXOs.Font;
                var columnWidth = e.Header.Width;
                var textWidth = TextRenderer.MeasureText(text, font).Width;
                if (textWidth > columnWidth)
                {
                    // Truncate the text
                    var maxText = $"{text.Substring(0, text.Length * columnWidth / textWidth - 3)}...";
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);
                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewAddressUTXOs.BackColor), bounds);
                    }
                    TextRenderer.DrawText(e.Graphics, maxText, font, bounds, e.Item.ForeColor, TextFormatFlags.EndEllipsis | TextFormatFlags.Left);
                }
                else if (textWidth < columnWidth)
                {
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);

                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewAddressUTXOs.BackColor), bounds);
                    }

                    TextRenderer.DrawText(e.Graphics, text, font, bounds, e.SubItem.ForeColor, TextFormatFlags.Left);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewAddressUTXOs_DrawSubItem");
            }
        }
        //------------------ LIMIT MINIMUM WIDTH OF ADDRESS LISTVIEW COLUMNS ------------------------------------------
        private void ListViewAddressUTXOs_ColumnWidthChanging(object sender, ColumnWidthChangingEventArgs e)
        {
            try
            {
                if (e.ColumnIndex == 0)
                {
                    if (listViewAddressUTXOs.Columns[e.ColumnIndex].Width < (int)(200 * UIScale)) // min width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(200 * UIScale);
                    }
                    if (listViewAddressUTXOs.Columns[e.ColumnIndex].Width > (int)(400 * UIScale)) // max width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(400 * UIScale);
                    }


                }

                if (e.ColumnIndex == 1)
                {
                    if (listViewAddressUTXOs.Columns[e.ColumnIndex].Width != (int)(100 * UIScale)) // don't allow this one to change
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(100 * UIScale);
                    }
                }
                if (e.ColumnIndex == 2)
                {
                    if (listViewAddressUTXOs.Columns[e.ColumnIndex].Width != (int)(65 * UIScale)) // don't allow this one to change
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(65 * UIScale);
                    }
                }
                if (e.ColumnIndex == 3)
                {
                    if (listViewAddressUTXOs.Columns[e.ColumnIndex].Width != (int)(65 * UIScale)) // don't allow this one to change
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(65 * UIScale);
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewAddressTransactionsUTXO_ColumnWidthChanging");
            }
        }
        #endregion
        #region configure controls
        private void AddressInvalidHideControlsUTXO() // hide all address related controls
        {
            try
            {
                if (lblAddressTypeUTXO.Visible)
                {
                    this.SuspendLayout();
                    panelAddressResults.Invoke((MethodInvoker)delegate
                    {
                        panelAddressUTXOResults.Visible = false;
                    });
                    this.ResumeLayout(false);
                    Control[] controlsToHide = { lblLargestUTXO, lblSmallestUTXO, label230, label308, panel143, panelAddressUTXOScrollContainer, lblAddressUTXOPositionInList, label314, panelUTXOsContainer, panel137, listViewAddressUTXOs, lblAddressConfirmedUnspentUTXO, lblAddressConfirmedUnspentOutputsUTXO,
                        lblAddressConfirmedSpentUTXO, lblAddressConfirmedSpentOutputsUTXO, lblAddressTypeUTXO, panel135, panel141, btnViewAddressTXFromUTXO, label303, label313, label315, panel136, label309, lblAddressConfirmedSpentUTXOFiat, lblAddressConfirmedUnspentUTXOFiat, panelUTXOError };
                    foreach (Control control in controlsToHide)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.Visible = false;
                        });
                    }

                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "AddressInvalidHideControlsUTXO");
            }
        }

        private void AddressValidShowControlsUTXO() // show all address related controls
        {
            try
            {
                Control[] controlsToShow = { lblLargestUTXO, lblSmallestUTXO, label230, label308, panel143, panelAddressUTXOScrollContainer, lblAddressUTXOPositionInList, label314, panel137, panelUTXOsContainer, listViewAddressUTXOs, lblAddressConfirmedUnspentUTXO, lblAddressConfirmedUnspentOutputsUTXO, lblAddressConfirmedSpentUTXO, lblAddressConfirmedSpentOutputsUTXO,
                     lblAddressTypeUTXO, panel135, panel141, btnViewAddressTXFromUTXO, label303, label313, label315, panel136, label309 };
                foreach (Control control in controlsToShow)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.Visible = true;
                    });
                }

                if (String.Compare(lblHeaderPrice.Text, "disabled") != 0)
                {
                    lblAddressConfirmedSpentUTXOFiat.Visible = true;
                    lblAddressConfirmedUnspentUTXOFiat.Visible = true;
                }
                panelAddressUTXOResults.Invoke((MethodInvoker)delegate
                {
                    panelAddressUTXOResults.Refresh();
                    panelAddressUTXOResults.Visible = true;
                });
                panelAddressUTXOTab.Invoke((MethodInvoker)delegate
                {
                    panelAddressUTXOTab.Refresh();
                    panelAddressUTXOTab.Visible = true;
                });


            }
            catch (Exception ex)
            {
                HandleException(ex, "AddressValidShowControlsUTXO");
            }
        }

        private void DisableEnableAddressUTXOButtons(string enableOrDisableAddressButtons)
        {
            try
            {
                if (String.Compare(enableOrDisableAddressButtons, "disable") == 0)
                {
                    // get current state of buttons before disabling them
                    BtnViewTransactionFromAddressUTXOWasEnabled = btnViewTransactionFromAddressUTXO.Enabled;
                    BtnViewBlockFromAddressUTXOWasEnabled = btnViewBlockFromAddressUTXO.Enabled;
                    textBoxSubmittedAddressUTXOWasEnabled = textboxSubmittedAddressUTXO.Enabled;

                    //disable them all
                    Control[] controlsToDisable = { btnViewTransactionFromAddressUTXO, btnViewBlockFromAddressUTXO, textboxSubmittedAddressUTXO };
                    foreach (Control control in controlsToDisable)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.Enabled = false;
                        });
                    }
                }
                else
                {
                    // use previously saved states to reinstate buttons
                    btnViewTransactionFromAddressUTXO.Enabled = BtnViewTransactionFromAddressUTXOWasEnabled;
                    btnViewBlockFromAddressUTXO.Enabled = BtnViewBlockFromAddressUTXOWasEnabled;
                    textboxSubmittedAddressUTXO.Enabled = textBoxSubmittedAddressUTXOWasEnabled;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "DisableEnableAddressUTXOButtons");
            }
        }
        #endregion
        #region listview scrolling
        private void BtnAddressUTXOScrollDown_Click(object sender, EventArgs e)
        {
            try
            {
                int rowHeight = listViewAddressUTXOs.Margin.Vertical + listViewAddressUTXOs.Padding.Vertical + listViewAddressUTXOs.GetItemRect(0).Height;
                if (addressUTXOsScrollPosition < (panelUTXOsContainer.VerticalScroll.Maximum - panelUTXOsContainer.Height) - rowHeight)
                {

                    addressUTXOsScrollPosition += rowHeight;
                    panelUTXOsContainer.VerticalScroll.Value = addressUTXOsScrollPosition;
                    panelAddressUTXOScrollbarInner.Location = new Point(panelAddressUTXOScrollbarInner.Location.X, panelAddressUTXOScrollbarInner.Location.Y + addressUTXOScrollbarIncrement);
                    lblHeaderBlockAge.Focus();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnAddressUTXOScrollDown_Click");
            }
        }

        private void BtnAddressUTXOScrollDown_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isUTXOSButtonPressed = true;
                UTXOsDownButtonPressed = true;
                UTXOsScrollTimer.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnAddressUTXOScrollDown_MouseDown");
            }
        }

        private void BtnAddressUTXOScrollDown_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isUTXOSButtonPressed = false;
                UTXOsDownButtonPressed = false;
                UTXOsScrollTimer.Stop();
                UTXOsScrollTimer.Interval = 50; // reset the interval to its original value
                lblHeaderBlockAge.Focus();
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnAddressUTXOScrollDown_MouseUp");
            }
        }

        private void BtnAddressUTXOScrollUp_Click(object sender, EventArgs e)
        {
            try
            {
                if (panelUTXOsContainer.VerticalScroll.Value > panelUTXOsContainer.VerticalScroll.Minimum)
                {
                    int rowHeight = listViewAddressUTXOs.Margin.Vertical + listViewAddressUTXOs.Padding.Vertical + listViewAddressUTXOs.GetItemRect(0).Height;
                    addressUTXOsScrollPosition -= rowHeight;
                    panelUTXOsContainer.VerticalScroll.Value = addressUTXOsScrollPosition;
                    panelAddressUTXOScrollbarInner.Location = new Point(panelAddressUTXOScrollbarInner.Location.X, panelAddressUTXOScrollbarInner.Location.Y - addressUTXOScrollbarIncrement);
                    lblHeaderBlockAge.Focus();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnAddressUTXOScrollUp_Click");
            }
        }

        private void BtnAddressUTXOScrollUp_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isUTXOSButtonPressed = true;
                UTXOsUpButtonPressed = true;
                UTXOsScrollTimer.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnAddressUTXOScrollUp_MouseDown");
            }
        }

        private void BtnAddressUTXOScrollUp_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isUTXOSButtonPressed = false;
                UTXOsUpButtonPressed = false;
                UTXOsScrollTimer.Stop();
                UTXOsScrollTimer.Interval = 50; // reset the interval to its original value
                lblHeaderBlockAge.Focus();
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnAddressUTXOScrollUp_MouseUp");
            }
        }

        private void PanelUTXOsContainer_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                if (listViewAddressUTXOs.Items.Count > 0)
                {
                    int rowHeight = listViewAddressUTXOs.Margin.Vertical + listViewAddressUTXOs.Padding.Vertical + listViewAddressUTXOs.GetItemRect(0).Height;
                    if (addressUTXOsScrollPosition - rowHeight > 0)
                    {
                        panelUTXOsContainer.VerticalScroll.Value = addressUTXOsScrollPosition;
                    }
                }
                else
                {
                    panelUTXOsContainer.VerticalScroll.Value = 0;
                    addressUTXOsScrollPosition = 0;
                }
                lblHeaderBlockAge.Focus();
            }
            catch (Exception ex)
            {
                HandleException(ex, "panelUTXOsContainer_Paint");
            }
        }

        private void UTXOsScrollTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                if (isUTXOSButtonPressed)
                {
                    if (UTXOsDownButtonPressed)
                    {
                        int rowHeight = listViewAddressUTXOs.Margin.Vertical + listViewAddressUTXOs.Padding.Vertical + listViewAddressUTXOs.GetItemRect(0).Height;
                        if (addressUTXOsScrollPosition < (panelUTXOsContainer.VerticalScroll.Maximum - panelUTXOsContainer.Height) - rowHeight)
                        {
                            if (addressUTXOsScrollPosition < panelUTXOsContainer.VerticalScroll.Maximum + rowHeight)
                            {
                                addressUTXOsScrollPosition += rowHeight;
                                panelUTXOsContainer.VerticalScroll.Value = addressUTXOsScrollPosition;
                                panelAddressUTXOScrollbarInner.Location = new Point(panelAddressUTXOScrollbarInner.Location.X, panelAddressUTXOScrollbarInner.Location.Y + addressUTXOScrollbarIncrement);
                            }
                        }
                        else
                        {
                            panelAddressUTXOScrollbarInner.Location = new Point(panelAddressUTXOScrollbarInner.Location.X, panelAddressUTXOScrollbarOuter.Height - panelAddressUTXOScrollbarInner.Height);
                        }
                    }
                    else if (UTXOsUpButtonPressed)
                    {
                        int rowHeight = listViewAddressUTXOs.Margin.Vertical + listViewAddressUTXOs.Padding.Vertical + listViewAddressUTXOs.GetItemRect(0).Height;
                        if (addressUTXOsScrollPosition > panelUTXOsContainer.VerticalScroll.Minimum)
                        {
                            addressUTXOsScrollPosition -= rowHeight;
                            panelUTXOsContainer.VerticalScroll.Value = addressUTXOsScrollPosition;
                            panelAddressUTXOScrollbarInner.Location = new Point(panelAddressUTXOScrollbarInner.Location.X, panelAddressUTXOScrollbarInner.Location.Y - addressUTXOScrollbarIncrement);
                        }
                        else
                        {
                            panelAddressUTXOScrollbarInner.Location = new Point(panelAddressUTXOScrollbarInner.Location.X, 0);
                        }
                    }

                }
                else
                {
                    UTXOsScrollTimer.Stop();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "UTXOsScrollTimer_Tick");
            }
        }
        #endregion
        #region disable keys
        private void ListViewAddressUTXOs_KeyDown(object sender, KeyEventArgs e)
        {
            e.Handled = true;
        }

        private void ListViewAddressUTXOs_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = true;
        }

        private void ListViewAddressUTXOs_KeyUp(object sender, KeyEventArgs e)
        {
            e.Handled = true;
        }
        #endregion

        #endregion
        //![](resources\tinylogo1.png;;;0.04706,0.04877)
        #region ⚡⚡⚡ BLOCK SCREEN
        #region user input
        private void NumericUpDownSubmittedBlockNumberUp_Click(object sender, EventArgs e)
        {
            try
            {
                if (long.TryParse(lblHeaderBlockNumber.Text, out long blockNumber))
                {
                    // Check if numericUpDownSubmittedBlockNumber.Value is less than blockNumber
                    if (numericUpDownSubmittedBlockNumber.Value < blockNumber)
                    {
                        numericUpDownSubmittedBlockNumber.Value++;
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "NumericUpDownSubmittedBlockNumberUp_Click");
            }
        }

        private void NumericUpDownSubmittedBlockNumberDown_Click(object sender, EventArgs e)
        {
            try
            {
                if (numericUpDownSubmittedBlockNumber.Value > 0)
                {
                    numericUpDownSubmittedBlockNumber.Value--;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "NumericUpDownSubmittedBlockNumberDown_Click");
            }
        }

        private void BtnLookUpBlock_Click(object sender, EventArgs e)
        {
            try
            {
                LookupBlockAsync();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnLookUpBlock_Click");
            }
        }

        private void NumericUpDownSubmittedBlockNumber_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                // Handle enter
                if (e.KeyChar == '\r')
                {
                    // Submit button was pressed
                    LookupBlockAsync();
                    e.Handled = true;
                    return;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "numericUpDownSubmittedBlockNumber_KeyPress");
            }
        }

        #region continuous increment/decrement of numericUpDown controls when mouse button held down
        private void BtnNumericUpDownSubmittedBlockNumberUp_MouseDown(object sender, MouseEventArgs e)
        {
            isSubmittedBlockNumberUpHeldDown = true;
            timerNumUpDownContinuous.Enabled = true;
            timerNumUpDownContinuous.Start();
        }

        private void BtnNumericUpDownSubmittedBlockNumberUp_MouseUp(object sender, MouseEventArgs e)
        {
            isSubmittedBlockNumberUpHeldDown = false;
            timerNumUpDownContinuous.Stop();
            timerNumUpDownContinuous.Enabled = false;
        }

        private void BtnNumericUpDownSubmittedBlockNumberDown_MouseDown(object sender, MouseEventArgs e)
        {
            isSubmittedBlockNumberDownHeldDown = true;
            timerNumUpDownContinuous.Enabled = true;
            timerNumUpDownContinuous.Start();
        }

        private void BtnNumericUpDownSubmittedBlockNumberDown_MouseUp(object sender, MouseEventArgs e)
        {
            isSubmittedBlockNumberDownHeldDown = false;
            timerNumUpDownContinuous.Stop();
            timerNumUpDownContinuous.Enabled = false;
        }
        #endregion
        #endregion
        #region get the data
        //------------------------ LOOK UP THE BLOCK ------------------------------------------------------------------
        private async void LookupBlockAsync()
        {
            try
            {
                if (numericUpDownSubmittedBlockNumber.Value == 0)
                {
                    btnPreviousBlock.Enabled = false;
                }
                else
                {
                    btnPreviousBlock.Enabled = true;
                }
                if (decimal.TryParse(lblHeaderBlockNumber.Text, out decimal labelblockNumber))
                {
                    if (numericUpDownSubmittedBlockNumber.Value == labelblockNumber)
                    {
                        btnNextBlock.Enabled = false;
                    }
                    else
                    {
                        btnNextBlock.Enabled = true;
                    }
                }
                TotalBlockTransactionRowsAdded = 0;
                btnViewTransactionFromBlock.Visible = false;
                if (int.TryParse(numericUpDownSubmittedBlockNumber.Text, out var submittedBlockHeight))
                {
                    // display block hash
                    using (WebClient client = new WebClient())
                    {
                        string BlockHashURL = $"{NodeURL}block-height/{submittedBlockHeight}";
                        LightUpNodeLight();
                        string BlockHash = client.DownloadString(BlockHashURL); // get hash of provided block
                        lblBlockHash.Invoke((MethodInvoker)delegate
                        {
                            lblBlockHash.Text = BlockHash;
                        });
                    }
                    lblBlockBlockHeight.Invoke((MethodInvoker)delegate
                    {
                        lblBlockBlockHeight.Text = $"BLOCK {numericUpDownSubmittedBlockNumber.Text}";
                    });
                    label330.Invoke((MethodInvoker)delegate
                    {
                        label330.Text = $"TRANSACTIONS IN {lblBlockBlockHeight.Text}";
                    });
                    var blockNumber = Convert.ToString(numericUpDownSubmittedBlockNumber.Text);
                    await GetFifteenBlocksAsync(blockNumber).ConfigureAwait(true);
                    string BlockHashToGetTransactionsFor = lblBlockHash.Text;
                    await GetTransactionsForBlockAsync(BlockHashToGetTransactionsFor, "0").ConfigureAwait(true);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "LookupBlock");
            }
        }

        //------------------------ GET FIFTEEN BLOCKS STARTNG FROM THE ONE WE'RE INTERESTED IN ------------------------
        private async Task GetFifteenBlocksAsync(string blockNumber) // overkill at this point, because we're only interested in one block, but this gets us the data
        {
            try
            {
                ToggleLoadingAnimation("enable"); // start the loading animation
                DisableEnableBlockButtons("disable"); // disable buttons during operation
                LightUpNodeLight();
                var blocksJson = await _blockService.GetBlockDataAsync(blockNumber).ConfigureAwait(true);
                if (!string.IsNullOrEmpty(blocksJson))
                {
                    var blocks = JsonConvert.DeserializeObject<List<Block>>(blocksJson);
                    ToggleLoadingAnimation("disable"); // stop the loading animation
                    DisableEnableBlockButtons("enable"); // enable buttons after operation is complete
                    lblNumberOfTXInBlock.Invoke((MethodInvoker)delegate
                    {
                        lblNumberOfTXInBlock.Text = Convert.ToString(blocks![0].Tx_count);
                    });
                    long sizeInBytes = blocks![0].Size;
                    string sizeString; // convert display to bytes/kb/mb accordingly
                    if (sizeInBytes < 1000)
                    {
                        sizeString = $"{sizeInBytes} bytes";
                    }
                    else if (sizeInBytes < 1000 * 1000)
                    {
                        double sizeInKB = (double)sizeInBytes / 1000;
                        sizeString = $"{sizeInKB:N2} KB";
                    }
                    else
                    {
                        double sizeInMB = (double)sizeInBytes / (1000 * 1000);
                        sizeString = $"{sizeInMB:N2} MB";
                    }
                    lblSizeOfBlock.Invoke((MethodInvoker)delegate
                    {
                        lblSizeOfBlock.Text = sizeString;
                    });
                    lblBlockScreenChartBlockSize.Invoke((MethodInvoker)delegate
                    {
                        lblBlockScreenChartBlockSize.Location = new Point(lblSizeOfBlock.Location.X + lblSizeOfBlock.Width, lblBlockScreenChartBlockSize.Location.Y);
                    });
                    string strWeight = Convert.ToString(blocks[0].Weight);

                    if (decimal.TryParse(strWeight, out decimal decWeight))
                    {
                        decWeight /= 1000000m; // convert to MWU
                        string strFormattedWeight = decWeight.ToString("N2"); // Display to 2 decimal places
                        lblBlockWeight.Invoke((MethodInvoker)delegate
                        {
                            lblBlockWeight.Text = strFormattedWeight;
                        });
                    }
                    string TotalBlockFees = Convert.ToString(blocks[0].Extras!.TotalFees);
                    TotalBlockFees = Convert.ToString(ConvertSatsToBitcoin(TotalBlockFees));
                    lblTotalFees.Invoke((MethodInvoker)delegate
                    {
                        lblTotalFees.Text = TotalBlockFees;
                    });
                    if (decimal.TryParse(TotalBlockFees, out decimal totalBlockFeesDec))
                    {
                        lblTotalFeesFiat.Invoke((MethodInvoker)delegate
                        {
                            lblTotalFeesFiat.Text = $"{fiatSymbol}{(totalBlockFeesDec * OneBTCinSelectedCurrency):N2}";
                        });
                    }
                    lblBlockFeeChart.Invoke((MethodInvoker)delegate
                    {
                        lblBlockFeeChart.Location = new Point(lblTotalFees.Location.X + lblTotalFees.Width, lblBlockFeeChart.Location.Y);
                    });

                    string? nonceString = blocks[0].Nonce;
                    if (long.TryParse(nonceString, out long nonceLong))
                    {
                        lblNonce.Invoke((MethodInvoker)delegate
                        {
                            lblNonce.Text = $"0x{nonceLong:X}";
                        });
                    }

                    string Reward = Convert.ToString(blocks[0].Extras!.Reward);
                    lblReward.Invoke((MethodInvoker)delegate
                    {
                        lblReward.Text = Convert.ToString(ConvertSatsToBitcoin(Reward));
                    });

                    if (decimal.TryParse(Reward, out decimal RewardDec))
                    {
                        lblRewardFiat.Invoke((MethodInvoker)delegate
                        {
                            lblRewardFiat.Text = $"{fiatSymbol}{((RewardDec / 100000000) * OneBTCinSelectedCurrency):N2}";
                        });
                    }

                    lblBlockScreenChartReward.Invoke((MethodInvoker)delegate
                    {
                        lblBlockScreenChartReward.Location = new Point(lblReward.Location.X + lblReward.Width, lblBlockScreenChartReward.Location.Y);
                    });

                    lblBlockFeeRangeAndMedianFee.Invoke((MethodInvoker)delegate
                    {
                        lblBlockFeeRangeAndMedianFee.Text = $"{Convert.ToInt32(blocks[0].Extras!.FeeRange![0])}-{Convert.ToInt32(blocks[0].Extras!.FeeRange![6])} / {Convert.ToInt32(blocks[0].Extras!.MedianFee)}";
                    });
                    lblBlockScreenChartFeeRange.Invoke((MethodInvoker)delegate
                    {
                        lblBlockScreenChartFeeRange.Location = new Point(lblBlockFeeRangeAndMedianFee.Location.X + lblBlockFeeRangeAndMedianFee.Width, lblBlockScreenChartFeeRange.Location.Y);
                    });
                    lblBlockAverageFee.Invoke((MethodInvoker)delegate
                    {
                        lblBlockAverageFee.Text = Convert.ToString(blocks[0].Extras!.AvgFee);
                    });
                    lblMiner.Invoke((MethodInvoker)delegate
                    {
                        lblMiner.Text = Convert.ToString(blocks[0].Extras!.Pool!.Name);
                    });
                    btnViewPoolFromBlockScreen.Invoke((MethodInvoker)delegate
                    {
                        btnViewPoolFromBlockScreen.Location = new Point(lblMiner.Location.X + lblMiner.Width, btnViewPoolFromBlockScreen.Location.Y);
                    });
                    lblBlockTime.Invoke((MethodInvoker)delegate
                    {
                        lblBlockTime.Text = DateTimeOffset.FromUnixTimeSeconds(long.Parse(blocks[0].Timestamp)).ToString("yyyy-MM-dd HH:mm");
                    });
                    lblHeaderTimestamp.Invoke((MethodInvoker)delegate
                    {
                        lblHeaderTimestamp.Text = DateTimeOffset.FromUnixTimeSeconds(long.Parse(blocks[0].Timestamp)).ToString("yyyy-MM-dd HH:mm");
                    });
                }
                else
                {
                    ToggleLoadingAnimation("disable"); // stop the loading animation
                    DisableEnableBlockButtons("enable"); // enable buttons after operation is complete
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "GetFifteenBlocks");
            }
        }

        //------------------------ GET TRANSACTIONS FOR BLOCK ---------------------------------------------------------
        private async Task GetTransactionsForBlockAsync(string blockHash, string lastSeenBlockTransaction)
        {
            try
            {

                ToggleLoadingAnimation("enable"); // start the loading animation
                DisableEnableBlockButtons("disable"); // disable buttons during operation
                LightUpNodeLight();
                var BlockTransactionsJson = await _transactionsForBlockService.GetTransactionsForBlockAsync(blockHash, lastSeenBlockTransaction).ConfigureAwait(true);
                if (!string.IsNullOrEmpty(BlockTransactionsJson))
                {
                    var transactions = JsonConvert.DeserializeObject<List<Block_Transactions>>(BlockTransactionsJson);
                    ToggleLoadingAnimation("disable"); // stop the loading animation
                    DisableEnableBlockButtons("enable"); // enable buttons after operation is complete
                    List<string> txIds = transactions.Select(t => t.Txid).ToList()!;

                    // Update lastSeenTxId if this isn't our first fetch of tranasctions to restart from the right place
                    if (txIds.Count > 0)
                    {
                        lastSeenBlockTransaction = txIds.Last();
                    }

                    //LIST VIEW
                    listViewBlockTransactions.Invoke((MethodInvoker)delegate
                    {
                        listViewBlockTransactions.Items.Clear(); // remove any data that may be there already
                    });
                    listViewBlockTransactions.GetType().InvokeMember("DoubleBuffered", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.SetProperty, null, listViewBlockTransactions, new object[] { true });

                    // Check if the column header already exists
                    if (listViewBlockTransactions.Columns.Count == 0)
                    {
                        // If not, add the column header
                        listViewBlockTransactions.Invoke((MethodInvoker)delegate
                        {
                            listViewBlockTransactions.Columns.Add("Transaction ID", (int)(250 * UIScale));
                        });
                    }

                    if (listViewBlockTransactions.Columns.Count == 1)
                    {
                        // If not, add the column header
                        listViewBlockTransactions.Invoke((MethodInvoker)delegate
                        {
                            listViewBlockTransactions.Columns.Add("Fee", (int)(70 * UIScale));
                        });
                    }

                    if (listViewBlockTransactions.Columns.Count == 2)
                    {
                        // If not, add the column header
                        listViewBlockTransactions.Invoke((MethodInvoker)delegate
                        {
                            listViewBlockTransactions.Columns.Add("I/P", (int)(40 * UIScale));
                        });
                    }
                    if (listViewBlockTransactions.Columns.Count == 3)
                    {
                        // If not, add the column header
                        listViewBlockTransactions.Invoke((MethodInvoker)delegate
                        {
                            listViewBlockTransactions.Columns.Add("O/P", (int)(40 * UIScale));
                        });
                    }
                    if (listViewBlockTransactions.Columns.Count == 4)
                    {
                        // If not, add the column header
                        listViewBlockTransactions.Invoke((MethodInvoker)delegate
                        {
                            listViewBlockTransactions.Columns.Add("Amount", (int)(101 * UIScale));
                        });
                    }
                    // Add the items to the ListView
                    int counter = 0; // used to count rows in list as they're added

                    foreach (var blockTransaction in transactions!)
                    {
                        ListViewItem item = new ListViewItem(blockTransaction.Txid); // create new row
                        item.SubItems.Add(blockTransaction.Fee!.ToString());
                        item.SubItems.Add(blockTransaction.Vin!.Count.ToString()); // number of inputs
                        item.SubItems.Add(blockTransaction.Vout!.Count.ToString()); // number of outputs
                        decimal totalValue = blockTransaction.Vout.Sum(v => decimal.Parse(v.Value)); // sum of outputs
                        totalValue = ConvertSatsToBitcoin(totalValue.ToString());
                        item.SubItems.Add(totalValue.ToString());
                        listViewBlockTransactions.Invoke((MethodInvoker)delegate
                        {
                            listViewBlockTransactions.Items.Add(item); // add row
                        });

                        counter++; // increment rows for this batch
                        TotalBlockTransactionRowsAdded++; // increment all rows

                        if (counter == rowsReturnedByBlockTransactionsAPI) // ListView is full. stop adding rows at this point and pick up from here...
                        {
                            break;
                        }
                    }

                    if (TotalBlockTransactionRowsAdded <= rowsReturnedByBlockTransactionsAPI) // we must still be on first results so there are no previous
                    {
                        btnPreviousBlockTransactions.Enabled = false;
                    }
                    else
                    {
                        btnPreviousBlockTransactions.Enabled = true;
                    }

                    if (String.Compare(Convert.ToString(TotalBlockTransactionRowsAdded), lblNumberOfTXInBlock.Text) == 0) // we've shown all the TXs
                    {
                        btnNextBlockTransactions.Enabled = false; // so we won't need this
                    }
                    else
                    {
                        btnNextBlockTransactions.Enabled = true;
                    }

                    listViewBlockTransactions.Items[0].Selected = true;
                    if (counter > 0)
                    {
                        lblBlockTXPositionInList.Invoke((MethodInvoker)delegate
                        {
                            lblBlockTXPositionInList.Text = $"Transactions {TotalBlockTransactionRowsAdded - counter + 1} - {TotalBlockTransactionRowsAdded} of {lblNumberOfTXInBlock.Text}";
                        });
                    }
                    else
                    {
                        lblBlockTXPositionInList.Invoke((MethodInvoker)delegate
                        {
                            lblBlockTXPositionInList.Text = "No transactions to display"; // this can't really happen as there will always be a coinbase transaction
                        });
                    }
                    panelBlockTransactionsTab.Invoke((MethodInvoker)delegate
                    {
                        panelBlockTransactionsTab.Width = lblBlockTXPositionInList.Width + ((int)(22 * UIScale));
                    });
                }
                else
                {
                    ToggleLoadingAnimation("disable"); // stop the loading animation
                    DisableEnableBlockButtons("enable"); // enable buttons after operation is complete
                }

                Control[] controlsToRefresh = { panelBlock, panel53, panel56, panel121, panel122 };
                foreach (Control control in controlsToRefresh)
                {
                    if (control.InvokeRequired)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.Refresh();
                        });
                    }
                    else
                    {
                        control.Refresh();
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "GetTransactionsForBlocks");
            }
        }
        #endregion
        #region prev/next transactions
        //------------------------ GET NEXT BATCH OF TRANSACTIONS FOR BLOCK -------------------------------------------
        private async void BtnNextBlockTransactions_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                var blockHash = lblBlockHash.Text; // Get the blockHash from the label again
                var lastSeenBlockTransaction = Convert.ToString(TotalBlockTransactionRowsAdded); // the JSON uses the count to restart fetching, rather than txid.
                await GetTransactionsForBlockAsync(blockHash, lastSeenBlockTransaction).ConfigureAwait(true); // Call the GetConfirmedTransactionsForBlock method with the updated lastSeenTxId
                btnViewTransactionFromBlock.Visible = false;
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnNextBlockTransactions_Click");
            }
        }

        //------------------------ GET PREVIOUS BATCH OF TRANSACTIONS FOR BLOCK -----------------------------------------
        private async void BtnPreviousBlockTransactions_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                var blockHash = lblBlockHash.Text; // Get the blockHash from the label again
                if (TotalBlockTransactionRowsAdded % rowsReturnedByBlockTransactionsAPI == 0) // API expects last seen transaction to be a multiple of 25. If it is we can just subtract 50 for the prev page
                {
                    TotalBlockTransactionRowsAdded -= (rowsReturnedByBlockTransactionsAPI * 2);
                }
                else // otherwise we subtract the odd amount (only happens at end of list) and another 25 to be able to go back to the previous page.
                {
                    int closestMultipleOf25 = TotalBlockTransactionRowsAdded - (TotalBlockTransactionRowsAdded % rowsReturnedByBlockTransactionsAPI);
                    int firstNumberBeforeIt = closestMultipleOf25 - rowsReturnedByBlockTransactionsAPI;
                    TotalBlockTransactionRowsAdded = firstNumberBeforeIt;
                }
                var lastSeenBlockTransaction = Convert.ToString(TotalBlockTransactionRowsAdded); // the JSON uses the count to restart fetching, rather than txid.
                await GetTransactionsForBlockAsync(blockHash, lastSeenBlockTransaction).ConfigureAwait(true); // Call the GetConfirmedTransactionsForBlock method with the updated lastSeenTxId
                btnViewTransactionFromBlock.Visible = false;
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnPreviousBlockTransactions_Click");
            }
        }
        #endregion
        #region prev/next block
        //------------------------ VIEW PREVIOUS BLOCK ------------------------------------------------------------------
        private void BtnPreviousBlock_Click(object sender, EventArgs e) // decrease block number by 1 and populate block data
        {
            try
            {
                long CurrentSubmittedBlockNumber = Convert.ToInt32(numericUpDownSubmittedBlockNumber.Text);
                numericUpDownSubmittedBlockNumber.Invoke((MethodInvoker)delegate
                {
                    numericUpDownSubmittedBlockNumber.Text = Convert.ToString(CurrentSubmittedBlockNumber - 1);
                });
                LookupBlockAsync();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnPreviousBlock_Click");
            }
        }

        //------------------------ VIEW NEXT BLOCK --------------------------------------------------------------------
        private void BtnNextBlock_Click(object sender, EventArgs e) // increase block number by 1 and populate block data
        {
            try
            {
                long CurrentSubmittedBlockNumber = Convert.ToInt32(numericUpDownSubmittedBlockNumber.Text);
                numericUpDownSubmittedBlockNumber.Invoke((MethodInvoker)delegate
                {
                    numericUpDownSubmittedBlockNumber.Text = Convert.ToString(CurrentSubmittedBlockNumber + 1);
                });
                LookupBlockAsync();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnNextBlock_Click");
            }
        }
        #endregion
        #region listview appearance
        //------------------------ USER SELECTED A TRANSACTION ROW -----------------------------------------------------
        private void ListViewBlockTransactions_ItemSelectionChanged(object sender, ListViewItemSelectionChangedEventArgs e)
        {
            try
            {
                bool anySelected = false;
                if (listViewBlockTransactions.Items.Count > 0)
                {
                    foreach (ListViewItem item in listViewBlockTransactions.Items)
                    {
                        if (item != null)
                        {
                            if (item.Selected)
                            {
                                foreach (ListViewItem.ListViewSubItem subItem in item.SubItems)
                                {
                                    subItem.ForeColor = MakeColorLighter(tableTextColor, 40);
                                }
                                btnViewTransactionFromBlock.Invoke((MethodInvoker)delegate
                                {
                                    btnViewTransactionFromBlock.Location = new Point(listViewBlockTransactions.Location.X - btnViewTransactionFromBlock.Width + (int)(12 * UIScale), item.Position.Y + listViewBlockTransactions.Location.Y);
                                    btnViewTransactionFromBlock.Height = item.Bounds.Height;
                                });
                                anySelected = true;
                            }
                            else
                            {
                                foreach (ListViewItem.ListViewSubItem subItem in item.SubItems)
                                {
                                    subItem.ForeColor = tableTextColor;
                                }
                            }
                        }
                    }
                    btnViewTransactionFromBlock.Visible = anySelected;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewBlockTransactions_ItemSelectionChanged");
            }
        }

        //------------------------ USER TRYING TO RESIZE COLUMNS ------------------------------------------------------
        private void ListViewBlockTransactions_ColumnWidthChanging(object sender, ColumnWidthChangingEventArgs e)
        {
            try
            {
                if (e.ColumnIndex == 0)
                {
                    if (listViewBlockTransactions.Columns[e.ColumnIndex].Width < (int)(250 * UIScale)) // min width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(250 * UIScale);
                    }
                    if (listViewBlockTransactions.Columns[e.ColumnIndex].Width > (int)(460 * UIScale)) // max width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(460 * UIScale);
                    }
                }

                if (e.ColumnIndex == 1)
                {
                    if (listViewBlockTransactions.Columns[e.ColumnIndex].Width != (int)(70 * UIScale)) // fixed width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(70 * UIScale);
                    }
                }
                if (e.ColumnIndex == 2)
                {
                    if (listViewBlockTransactions.Columns[e.ColumnIndex].Width != (int)(40 * UIScale)) // fixed width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(40 * UIScale);
                    }
                }
                if (e.ColumnIndex == 3)
                {
                    if (listViewBlockTransactions.Columns[e.ColumnIndex].Width != (int)(40 * UIScale)) // fixed width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(40 * UIScale);
                    }
                }
                if (e.ColumnIndex == 4)
                {
                    if (listViewBlockTransactions.Columns[e.ColumnIndex].Width != (int)(100 * UIScale)) // fixed width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(100 * UIScale);

                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewBlockTransactions_ColumnWidthChanging");
            }
        }

        //------------------------ FORMAT DATA WHILE DRAWING LISTVIEW ------------------------------------------------------
        private void ListViewBlockTransactions_DrawSubItem(object sender, DrawListViewSubItemEventArgs e)
        {
            try
            {
                var text = e.SubItem.Text;

                if (text[0] == '+') // if the string is a change to an amount and positive
                {
                    e.SubItem.ForeColor = Color.OliveDrab; // make it green

                }
                else
                if (text[0] == '-') // if the string is a change to an amount and negative
                {
                    e.SubItem.ForeColor = Color.IndianRed; // make it red
                }

                var font = listViewBlockTransactions.Font;
                var columnWidth = e.Header.Width;
                var textWidth = TextRenderer.MeasureText(text, font).Width;
                if (textWidth > columnWidth)
                {
                    // Truncate the text
                    var maxText = $"{text.Substring(0, text.Length * columnWidth / textWidth - 3)}...";
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);
                    // Clear the background
                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewBlockTransactions.BackColor), bounds);
                    }
                    TextRenderer.DrawText(e.Graphics, maxText, font, bounds, e.Item.ForeColor, TextFormatFlags.EndEllipsis | TextFormatFlags.Left);
                }
                else if (textWidth < columnWidth)
                {
                    // Clear the background
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);

                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewBlockTransactions.BackColor), bounds);
                    }

                    TextRenderer.DrawText(e.Graphics, text, font, bounds, e.SubItem.ForeColor, TextFormatFlags.Left);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewBlockTransactions_DrawSubItem");
            }
        }
        #endregion
        #region navigate from listview to tx screen
        private async void BtnViewTransactionFromBlock_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                await CheckNetworkStatusAsync().ConfigureAwait(true);
                // Get the selected item
                ListViewItem selectedItem = listViewBlockTransactions.SelectedItems[0];
                // Get the first subitem in the selected item 
                string TransactionIDFromRow = selectedItem.SubItems[0].Text;
                // copy transaction ID to transaction screen
                textBoxTransactionID.Invoke((MethodInvoker)delegate
                {
                    textBoxTransactionID.Text = TransactionIDFromRow;
                });
                panelBlock.Invoke((MethodInvoker)delegate
                {
                    panelBlock.Visible = false;
                });
                //show the transaction screen
                BtnMenuTransaction_ClickAsync(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnViewTransactionFromBlock_Click");
            }
        }
        #endregion
        #region enable/disable buttons
        private void DisableEnableBlockButtons(string enableOrDisableBlockButtons)
        {
            try
            {
                if (String.Compare(enableOrDisableBlockButtons, "disable") == 0)
                {
                    // get current state of buttons before disabling them
                    btnPreviousBlockTransactionsWasEnabled = btnPreviousBlockTransactions.Enabled;
                    btnNextBlockTransactionsWasEnabled = btnNextBlockTransactions.Enabled;
                    numericUpDownSubmittedBlockNumberWasEnabled = numericUpDownSubmittedBlockNumber.Enabled;
                    btnNumericUpDownSubmittedBlockNumberDownWasEnabled = btnNumericUpDownSubmittedBlockNumberDown.Enabled;
                    btnNumericUpDownSubmittedBlockNumberUpWasEnabled = btnNumericUpDownSubmittedBlockNumberUp.Enabled;
                    btnNextBlockWasEnabled = btnNextBlock.Enabled;
                    btnPreviousBlockWasEnabled = btnPreviousBlock.Enabled;
                    btnLookUpBlockWasEnabled = btnLookUpBlock.Enabled;

                    //disable them all
                    Control[] controlsToDisable = { btnPreviousBlockTransactions, btnNextBlockTransactions, numericUpDownSubmittedBlockNumber, btnNumericUpDownSubmittedBlockNumberUp, btnNumericUpDownSubmittedBlockNumberDown, btnNextBlock, btnPreviousBlock, btnLookUpBlock };
                    foreach (Control control in controlsToDisable)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.Enabled = false;
                        });
                    }
                }
                else
                {
                    // use previously saved states to reinstate buttons
                    btnPreviousBlockTransactions.Enabled = btnPreviousBlockTransactionsWasEnabled;
                    btnNextBlockTransactions.Enabled = btnNextBlockTransactionsWasEnabled;
                    btnNextBlock.Enabled = btnNextBlockWasEnabled;
                    btnPreviousBlock.Enabled = btnPreviousBlockWasEnabled;
                    numericUpDownSubmittedBlockNumber.Enabled = numericUpDownSubmittedBlockNumberWasEnabled;
                    btnNumericUpDownSubmittedBlockNumberDown.Enabled = btnNumericUpDownSubmittedBlockNumberDownWasEnabled;
                    btnNumericUpDownSubmittedBlockNumberUp.Enabled = btnNumericUpDownSubmittedBlockNumberUpWasEnabled;
                    btnLookUpBlock.Enabled = btnLookUpBlockWasEnabled;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "DisableEnableBlockButtons");
            }
        }
        #endregion
        #region chart icon clicks
        private void PictureBoxBlockScreenChartBlockSize_Click(object sender, EventArgs e)
        {
            try
            {
                ChartBlockSizeAsync();
                BtnMenuCharts_ClickAsync(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxBlockScreenChartBlockSize_Click");
            }
        }

        private void PictureBoxBlockScreenChartReward_Click(object sender, EventArgs e)
        {
            try
            {
                ChartRewardAsync();
                BtnMenuCharts_ClickAsync(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxBlockScreenChartReward_Click");
            }
        }

        private void PictureBoxBlockScreenChartFeeRange_Click(object sender, EventArgs e)
        {
            try
            {
                ChartFeeRatesAsync();
                BtnMenuCharts_ClickAsync(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxBlockScreenChartFeeRange_Click");
            }
        }

        private void PictureBoxBlockFeeChart_Click(object sender, EventArgs e)
        {
            try
            {
                ChartBlockFeesAsync();
                BtnMenuCharts_ClickAsync(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxBlockFeeChart_Click");
            }
        }

        #endregion
        #region jump to pool screen
        private void BtnViewPoolFromBlockScreen_Click(object sender, EventArgs e)
        {
            poolNameToPass = lblMiner.Text;

            // scan through the existing pools list to find the row we want so it can be selected and scrolled to
            int counter = 0;
            int rowHeight = listViewPoolsList.Margin.Vertical + listViewPoolsList.Padding.Vertical + listViewPoolsList.GetItemRect(0).Height;
            foreach (ListViewItem item in listViewPoolsList.Items)
            {
                if (item != null)
                {
                    counter++;
                    if (String.Compare(item.SubItems[0].Text, poolNameToPass) == 0)
                    {
                        poolsListScrollPosition = counter * rowHeight;
                        break;
                    }
                }
            }

            BtnMenuMiningPools_ClickAsync(sender, e);
        }
        #endregion
        #endregion
        //![](resources\tinylogo1.png;;;0.04706,0.04877)
        #region ⚡⚡⚡ TRANSACTION SCREEN
        #region user input
        private void TextBoxTransactionID_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                // Handle enter
                if (e.KeyChar == '\r')
                {
                    // Submit button was pressed
                    LookupTransactionAsync();
                    e.Handled = true;
                    return;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxTransactionID_KeyPress");
            }
        }

        //-------------------- TRANSACTION ID FIELD HAS CHANGED ------------------------------------------------
        private async void TextBoxTransactionID_TextChangedAsync(object sender, EventArgs e)
        {
            try
            {
                panelTransactionResults.Invoke((MethodInvoker)delegate
                {
                    panelTransactionResults.Visible = false;
                });
                string transactionIdToValidate = textBoxTransactionID.Text;

                if (ValidateTransactionId(transactionIdToValidate)) // check if the entered string is valid
                {
                    bool exists = await TransactionExistsAsync(transactionIdToValidate).ConfigureAwait(true); // then check if it actually exists
                    if (exists)
                    {
                        lblInvalidTransaction.Invoke((MethodInvoker)delegate
                        {
                            lblInvalidTransaction.ForeColor = Color.OliveDrab;
                            lblInvalidTransaction.Text = "✔️ valid transaction ID";
                        });
                        LookupTransactionAsync();
                    }
                    else
                    {
                        panelTransactionResults.Invoke((MethodInvoker)delegate
                        {
                            panelTransactionResults.Visible = false;
                        });
                        Control[] controlsToHide = { panelTransactionHeadline, panelTransactionDiagram, panelTXInScrollContainer, panelTXOutScrollContainer, panelTransactionOutputs, panelTransactionInputs, btnTransactionInputsUp, btnTransactionInputDown, btnTransactionOutputsUp, btnTransactionOutputsDown, listViewTransactionInputs, listViewTransactionOutputs, btnViewAddressFromTXInput, btnViewAddressFromTXOutput, lblTransasctionOutCount, lblTransasctionInCount, panelTXInScrollContainer, panelTXOutScrollContainer, panelTXInScrollbarInner, panelTXOutScrollbarInner };
                        foreach (Control control in controlsToHide)
                        {
                            control.Invoke((MethodInvoker)delegate
                            {
                                control.Visible = false;
                            });
                        }
                        lblInvalidTransaction.Invoke((MethodInvoker)delegate
                        {
                            lblInvalidTransaction.ForeColor = Color.IndianRed;
                            lblInvalidTransaction.Text = "✖️ invalid transaction ID";
                        });
                    }
                }
                else
                {
                    panelTransactionResults.Invoke((MethodInvoker)delegate
                    {
                        panelTransactionResults.Visible = false;
                    });
                    Control[] controlsToHide = { panelTransactionHeadline, panelTransactionDiagram, panelTXInScrollContainer, panelTXOutScrollContainer, panelTransactionOutputs, panelTransactionInputs, btnTransactionInputsUp, btnTransactionInputDown, btnTransactionOutputsUp, btnTransactionOutputsDown, listViewTransactionInputs, listViewTransactionOutputs, btnViewAddressFromTXInput, btnViewAddressFromTXOutput, lblTransasctionOutCount, lblTransasctionInCount, panelTXInScrollContainer, panelTXOutScrollContainer, panelTXInScrollbarInner, panelTXOutScrollbarInner };
                    foreach (Control control in controlsToHide)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.Visible = false;
                        });
                    }
                    if (transactionIdToValidate == "")
                    {
                        lblInvalidTransaction.Invoke((MethodInvoker)delegate
                        {
                            lblInvalidTransaction.Text = "";
                        });
                    }
                    else
                    {
                        lblInvalidTransaction.Invoke((MethodInvoker)delegate
                        {
                            lblInvalidTransaction.ForeColor = Color.IndianRed;
                            lblInvalidTransaction.Text = "✖️ invalid transaction ID";
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxTransactionID_TextChanged");
            }
        }
        #endregion
        #region validation
        //-------------------- CHECK ITS A VALID TRANSACTION ID FORMAT -----------------------------------------
        private bool ValidateTransactionId(string transactionId) // checks if transaction ID is in a valid format
        {
            try
            {
                if (string.Compare(transactionId, null) == 0 || string.Compare(transactionId, "") == 0 || string.Compare(transactionId, "block height, address, transaction ID or xpub...") == 0)
                {
                    return false;
                }
                if (uint256.TryParse(transactionId, out uint256 _))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (FormatException)
            {
                return false;
            }
        }

        //-------------------- CHECK IF THE TRANSACTION ID EXISTS ----------------------------------------------
        private async Task<bool> TransactionExistsAsync(string transactionId) // checks if the valid transaction ID actually exists
        {
            ToggleLoadingAnimation("enable"); // start the loading animation
            DisableEnableTransactionButtons("disable"); // disable buttons during operation
            string url = $"{NodeURL}tx/{transactionId}";
            using HttpClient client = new HttpClient();
            LightUpNodeLight();
            HttpResponseMessage response = await client.GetAsync(url).ConfigureAwait(true);
            ToggleLoadingAnimation("disable"); // start the loading animation
            DisableEnableTransactionButtons("enable"); // disable buttons during operation
            return response.IsSuccessStatusCode;
        }
        #endregion
        #region set up transaction screen
        //-------------------- LOOKUP THE TRANSACTION ----------------------------------------------------------
        private async void LookupTransactionAsync()
        {
            try
            {
                panelLeftPanel.SuspendLayout();
                string submittedTransactionID = textBoxTransactionID.Text;
                await GetTransactionAsync(submittedTransactionID).ConfigureAwait(true);

                this.BringToFront();
                this.Focus();
                panelLeftPanel.ResumeLayout(false);
            }
            catch (Exception ex)
            {
                HandleException(ex, "LookupTransaction");
            }
        }

        //-------------------- GET TRANSACTION DATA AND DISPLAY IT AND DIAGRAM ---------------------------------
        private async Task GetTransactionAsync(string submittedTransactionID)
        {
            try
            {
                linePoints.Clear();
                btnViewAddressFromTXInput.Visible = false;
                btnViewAddressFromTXOutput.Visible = false;
                ToggleLoadingAnimation("enable"); // start the loading animation
                DisableEnableTransactionButtons("disable"); // disable buttons during operation
                LightUpNodeLight();
                var TransactionJson = await _transactionService.GetTransactionAsync(submittedTransactionID).ConfigureAwait(true);
                if (!string.IsNullOrEmpty(TransactionJson))
                {
                    var transaction = JsonConvert.DeserializeObject<Transaction>(TransactionJson);
                    ToggleLoadingAnimation("disable"); // stop the loading animation
                    DisableEnableTransactionButtons("enable"); // enable buttons after operation is complete
                    panelTransactionDiagram.SuspendLayout();
                    lblTransactionBlockHeight.Invoke((MethodInvoker)delegate
                    {
                        lblTransactionBlockHeight.Text = Convert.ToString(transaction!.Status!.Block_height);
                        lblTransactionBlockHeight.Location = new Point(label113.Location.X + label113.Width, lblTransactionBlockHeight.Location.Y);
                    });
                    label126.Invoke((MethodInvoker)delegate
                    {
                        label126.Location = new Point(lblTransactionBlockHeight.Location.X + lblTransactionBlockHeight.Width + (int)(6 * UIScale), label126.Location.Y);
                    });

                    long unixTimestamp = Convert.ToInt64(transaction!.Status!.Block_time);
                    DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc).AddSeconds(unixTimestamp).ToLocalTime();
                    lblTransactionBlockTime.Invoke((MethodInvoker)delegate
                    {
                        lblTransactionBlockTime.Text = dateTime.ToString("yyyyMMdd-HH:mm");
                        lblTransactionBlockTime.Location = new Point(label126.Location.X + label126.Width, lblTransactionBlockTime.Location.Y);
                    });
                    label125.Invoke((MethodInvoker)delegate
                    {
                        label125.Location = new Point(lblTransactionBlockTime.Location.X + lblTransactionBlockTime.Width + (int)(6 * UIScale), label125.Location.Y);
                    });
                    lblTransactionConfirmations.Invoke((MethodInvoker)delegate
                    {
                        lblTransactionConfirmations.Text = Convert.ToString(Convert.ToInt32(lblHeaderBlockNumber.Text) - Convert.ToInt32(lblTransactionBlockHeight.Text));
                        lblTransactionConfirmations.Location = new Point(label125.Location.X + label125.Width, lblTransactionConfirmations.Location.Y);
                    });

                    label128.Invoke((MethodInvoker)delegate
                    {
                        label128.Location = new Point(lblTransactionConfirmations.Location.X + lblTransactionConfirmations.Width + (int)(6 * UIScale), label128.Location.Y);
                    });
                    lblTransactionLockTime.Invoke((MethodInvoker)delegate
                    {
                        lblTransactionLockTime.Text = Convert.ToString(transaction.Locktime);
                        lblTransactionLockTime.Location = new Point(label128.Location.X + label128.Width, lblTransactionLockTime.Location.Y);
                    });
                    label98.Invoke((MethodInvoker)delegate
                    {
                        label98.Location = new Point(lblTransactionLockTime.Location.X + lblTransactionLockTime.Width + (int)(6 * UIScale), label98.Location.Y);
                    });
                    lblTransactionVersion.Invoke((MethodInvoker)delegate
                    {
                        lblTransactionVersion.Text = Convert.ToString(transaction.Version);
                        lblTransactionVersion.Location = new Point(label98.Location.X + label98.Width, lblTransactionVersion.Location.Y);
                    });

                    lblTransactionSize.Invoke((MethodInvoker)delegate
                    {
                        lblTransactionSize.Text = $"{transaction.Size} bytes";
                    });
                    lblTransactionWeight.Invoke((MethodInvoker)delegate
                    {
                        lblTransactionWeight.Text = $"{transaction.Weight} MWU";
                    });
                    lblTransactionFee.Invoke((MethodInvoker)delegate
                    {
                        lblTransactionFee.Text = Convert.ToString(ConvertSatsToBitcoin(Convert.ToString(transaction.Fee)));
                    });

                    if (decimal.TryParse(lblTransactionFee.Text, out decimal transactionFeeDec))
                    {
                        lblTransactionFeeFiat.Invoke((MethodInvoker)delegate
                        {
                            lblTransactionFeeFiat.Text = $"{fiatSymbol}{(transactionFeeDec * OneBTCinSelectedCurrency):N2}";
                        });
                    }
                    if (transaction.Vin.Count() == 1)
                    {
                        lblTransactionInputCount.Invoke((MethodInvoker)delegate
                        {
                            lblTransactionInputCount.Text = $"{transaction.Vin.Count()} input";
                        });
                    }
                    else
                    {
                        lblTransactionInputCount.Invoke((MethodInvoker)delegate
                        {
                            lblTransactionInputCount.Text = $"{transaction.Vin.Count()} inputs";
                        });
                    }
                    if (transaction.Vout.Count() == 1)
                    {
                        lblTransactionOutputCount.Invoke((MethodInvoker)delegate
                        {
                            lblTransactionOutputCount.Text = $"{transaction.Vout.Count()} output";
                        });
                    }
                    else
                    {
                        lblTransactionOutputCount.Invoke((MethodInvoker)delegate
                        {
                            lblTransactionOutputCount.Text = $"{transaction.Vout.Count()} outputs";
                        });
                    }
                    #region central bit of diagram
                    long totalValueIn = 0;
                    foreach (TransactionVin vin in transaction.Vin!)
                    {
                        if (!vin.Is_coinbase)
                        {
                            totalValueIn += vin.Prevout!.Value;
                        }
                    }
                    string strTotalValueIn = totalValueIn.ToString();
                    decimal decTotalBitcoinIn = ConvertSatsToBitcoin(strTotalValueIn);
                    lblTotalInputValue.Invoke((MethodInvoker)delegate
                    {
                        lblTotalInputValue.Text = decTotalBitcoinIn.ToString();
                        lblTotalInputValue.Location = new Point((panelTransactionDiagram.Size.Width / 2) - (lblTotalInputValue.Width / 2) - (int)(95 * UIScale), (panelTransactionDiagram.Size.Height / 2) + (int)(3 * UIScale));
                    });

                    lblTotalInputValueFiat.Invoke((MethodInvoker)delegate
                    {
                        lblTotalInputValueFiat.Text = $"{fiatSymbol}{(decTotalBitcoinIn * OneBTCinSelectedCurrency):N2}";
                        lblTotalInputValueFiat.Location = new Point((panelTransactionDiagram.Size.Width / 2) - (lblTotalInputValueFiat.Width / 2) - (int)(95 * UIScale), lblTotalInputValue.Location.Y + (int)(14 * UIScale));
                    });

                    long totalValueOut = 0;
                    foreach (TransactionVout vout in transaction.Vout!)
                    {
                        totalValueOut += vout.Value;
                    }
                    string strTotalValueOut = totalValueOut.ToString();
                    decimal decTotalBitcoinOut = ConvertSatsToBitcoin(strTotalValueOut);
                    lblTotalOutputValue.Invoke((MethodInvoker)delegate
                    {
                        lblTotalOutputValue.Text = decTotalBitcoinOut.ToString();
                        lblTotalOutputValue.Location = new Point((panelTransactionDiagram.Size.Width / 2) + (int)(95 * UIScale) - (lblTotalOutputValue.Width / 2), (panelTransactionDiagram.Size.Height / 2) + (int)(3 * UIScale));
                    });

                    lblTotalOutputValueFiat.Invoke((MethodInvoker)delegate
                    {
                        lblTotalOutputValueFiat.Text = $"{fiatSymbol}{(decTotalBitcoinOut * OneBTCinSelectedCurrency):N2}";
                        lblTotalOutputValueFiat.Location = new Point((panelTransactionDiagram.Size.Width / 2) + (int)(95 * UIScale) - (lblTotalOutputValueFiat.Width / 2), lblTotalOutputValue.Location.Y + (int)(14 * UIScale));
                    });

                    lblTransactionFee.Invoke((MethodInvoker)delegate
                    {
                        lblTransactionFee.Location = new Point((panelTransactionDiagram.Size.Width / 2) - (lblTransactionFee.Width / 2), panelTransactionDiagram.Size.Height / 2 - (int)(134 * UIScale));
                    });
                    lblTransactionFeeFiat.Invoke((MethodInvoker)delegate
                    {
                        lblTransactionFeeFiat.Location = new Point((panelTransactionDiagram.Size.Width / 2) - (lblTransactionFeeFiat.Width / 2), lblTransactionFee.Location.Y + (int)(14 * UIScale));
                    });
                    label104.Invoke((MethodInvoker)delegate
                    {
                        label104.Location = new Point((panelTransactionDiagram.Size.Width / 2) - (label104.Width / 2), panelTransactionDiagram.Size.Height / 2 - (int)(149 * UIScale));
                    });
                    panelTransactionMiddle.Invoke((MethodInvoker)delegate
                    {
                        panelTransactionMiddle.Location = new Point((panelTransactionDiagram.Width / 2) - (panelTransactionMiddle.Width / 2), (panelTransactionDiagram.Height / 2) - (panelTransactionMiddle.Height / 2)); //move middle panel to centre
                    });
                    lblTransactionInputCount.Invoke((MethodInvoker)delegate
                    {
                        lblTransactionInputCount.Location = new Point((panelTransactionDiagram.Size.Width / 2) - (lblTransactionInputCount.Width / 2) - (int)(95 * UIScale), (panelTransactionDiagram.Size.Height / 2) - (int)(15 * UIScale));
                    });
                    lblTransactionOutputCount.Invoke((MethodInvoker)delegate
                    {
                        lblTransactionOutputCount.Location = new Point((panelTransactionDiagram.Size.Width / 2) + (int)(95 * UIScale) - (lblTransactionOutputCount.Width / 2), (panelTransactionDiagram.Size.Height / 2) - (int)(15 * UIScale));
                    });

                    if (transaction.Vin[0].Is_coinbase == true)
                    {
                        lblCoinbase.Invoke((MethodInvoker)delegate
                        {
                            lblCoinbase.Text = "Coinbase transaction";
                            lblCoinbase.Location = new Point((int)(10 * UIScale), (panelTransactionDiagram.Size.Height / 2) - (int)(15 * UIScale));
                        });
                    }
                    else
                    {
                        lblCoinbase.Invoke((MethodInvoker)delegate
                        {
                            lblCoinbase.Text = "";
                        });
                    }
                    // central horizontal
                    Point startPoint1 = new Point((panelTransactionDiagram.Size.Width / 2) - (int)(150 * UIScale), panelTransactionDiagram.Size.Height / 2);
                    Point endPoint1 = new Point((panelTransactionDiagram.Size.Width / 2) + (int)(150 * UIScale), panelTransactionDiagram.Size.Height / 2);
                    linePoints.Add(startPoint1);
                    linePoints.Add(endPoint1);
                    // vertical line up to fees
                    Point startPoint2 = new Point(panelTransactionDiagram.Size.Width / 2, panelTransactionDiagram.Size.Height / 2 - panelTransactionMiddle.Height / 2);
                    Point endPoint2 = new Point(panelTransactionDiagram.Size.Width / 2, panelTransactionDiagram.Size.Height / 2 - (int)(100 * UIScale));
                    linePoints.Add(startPoint2);
                    linePoints.Add(endPoint2);
                    #endregion
                    #region inputs on diagram
                    int NumberOfInputLines = Convert.ToInt32(transaction.Vin.Count());
                    decimal YInputsStep = 0;
                    decimal YInputsPos = 0;
                    if (NumberOfInputLines > 1)
                    {
                        YInputsStep = (decimal)(panelTransactionDiagram.Size.Height - 20) / (NumberOfInputLines - 1);
                        YInputsPos = 10;
                    }
                    else
                    {
                        YInputsStep = (panelTransactionDiagram.Size.Height / 2) - 20;
                        YInputsPos = (panelTransactionDiagram.Size.Height / 2);
                    }

                    if (NumberOfInputLines > 4)
                    {
                        btnTransactionInputDown.Visible = true;
                        btnTransactionInputsUp.Visible = true;
                    }
                    else
                    {
                        btnTransactionInputDown.Visible = false;
                        btnTransactionInputsUp.Visible = false;
                    }

                    for (int i = 0; i < NumberOfInputLines; i++)
                    {
                        if (YInputsPos >= panelTransactionDiagram.Height)
                        {
                            break;
                        }
                        Point startPoint3 = new Point((int)(10 * UIScale), Convert.ToInt32(YInputsPos));
                        Point endPoint3 = new Point((int)(100 * UIScale), Convert.ToInt32(YInputsPos));
                        linePoints.Add(startPoint3);
                        linePoints.Add(endPoint3);
                        Point startPoint4 = new Point((int)(100 * UIScale), Convert.ToInt32(YInputsPos));
                        Point endPoint4 = new Point((panelTransactionDiagram.Size.Width / 2) - (int)(150 * UIScale), panelTransactionDiagram.Size.Height / 2);
                        linePoints.Add(startPoint4);
                        linePoints.Add(endPoint4);
                        YInputsPos += YInputsStep;
                    }
                    #endregion
                    #region outputs on diagram
                    int NumberOfOutputLines = Convert.ToInt32(transaction.Vout.Count());
                    decimal YOutputsStep = 0;
                    decimal YOutputsPos = 0;
                    if (NumberOfOutputLines > 1)
                    {
                        YOutputsStep = (decimal)(panelTransactionDiagram.Size.Height - 20) / (NumberOfOutputLines - 1);
                        YOutputsPos = 10;
                    }
                    else
                    {
                        YOutputsStep = (panelTransactionDiagram.Size.Height / 2) - 20;
                        YOutputsPos = (panelTransactionDiagram.Size.Height / 2);
                    }

                    if (NumberOfOutputLines > 4)
                    {
                        btnTransactionOutputsDown.Visible = true;
                        btnTransactionOutputsUp.Visible = true;
                    }
                    else
                    {
                        btnTransactionOutputsDown.Visible = false;
                        btnTransactionOutputsUp.Visible = false;
                    }

                    for (int i = 0; i < NumberOfOutputLines; i++)
                    {
                        if (YOutputsPos >= panelTransactionDiagram.Height)
                        {
                            break;
                        }
                        Point startPoint5 = new Point(panelTransactionDiagram.Size.Width - (int)(10 * UIScale), Convert.ToInt32(YOutputsPos));
                        Point endPoint5 = new Point(panelTransactionDiagram.Size.Width - (int)(100 * UIScale), Convert.ToInt32(YOutputsPos));
                        linePoints.Add(startPoint5);
                        linePoints.Add(endPoint5);
                        Point startPoint6 = new Point(panelTransactionDiagram.Size.Width - (int)(100 * UIScale), Convert.ToInt32(YOutputsPos));
                        Point endPoint6 = new Point((panelTransactionDiagram.Size.Width / 2) + (int)(150 * UIScale), panelTransactionDiagram.Size.Height / 2);
                        linePoints.Add(startPoint6);
                        linePoints.Add(endPoint6);
                        YOutputsPos += YOutputsStep;
                    }

                    panelTransactionDiagram.ResumeLayout(false);
                    #endregion
                    #region Inputs listview
                    listViewTransactionInputs.Invoke((MethodInvoker)delegate
                    {
                        listViewTransactionInputs.Items.Clear(); // remove any data that may be there already
                    });
                    listViewTransactionInputs.GetType().InvokeMember("DoubleBuffered", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.SetProperty, null, listViewTransactionInputs, new object[] { true });

                    // Check if the column header already exists
                    if (listViewTransactionInputs.Columns.Count == 0)
                    {
                        // If not, add the column header
                        listViewTransactionInputs.Invoke((MethodInvoker)delegate
                        {
                            listViewTransactionInputs.Columns.Add(" Address", (int)(198 * UIScale));
                        });
                    }

                    if (listViewTransactionInputs.Columns.Count == 1)
                    {
                        listViewTransactionInputs.Invoke((MethodInvoker)delegate
                        {
                            // If not, add the column header
                            listViewTransactionInputs.Columns.Add("Amount", (int)(95 * UIScale));
                        });
                    }

                    List<TransactionVinPrevout> prevouts = new List<TransactionVinPrevout>();

                    foreach (TransactionVin vin in transaction.Vin)
                    {
                        prevouts.Add(vin.Prevout!);
                    }

                    foreach (TransactionVinPrevout prevout in prevouts)
                    {
                        string InputAddress = "";
                        if (prevout != null)
                        {
                            InputAddress = Convert.ToString(prevout.Scriptpubkey_address);
                            ListViewItem item = new ListViewItem(InputAddress); // create new row
                            string InputValue = Convert.ToString(prevout.Value);
                            decimal DecInputValue = ConvertSatsToBitcoin(InputValue);
                            item.SubItems.Add(DecInputValue.ToString());
                            listViewTransactionInputs.Invoke((MethodInvoker)delegate
                            {
                                listViewTransactionInputs.Items.Add(item); // add row
                            });
                        }
                        else
                        {
                            ListViewItem item = new ListViewItem("N/A"); // create new row
                            item.SubItems.Add("N/A");
                            listViewTransactionInputs.Invoke((MethodInvoker)delegate
                            {
                                listViewTransactionInputs.Items.Add(item); // add row
                            });
                        }
                    }

                    if (listViewTransactionInputs.Items.Count == 1)
                    {
                        lblTransasctionInCount.Invoke((MethodInvoker)delegate
                        {
                            lblTransasctionInCount.Text = $"{listViewTransactionInputs.Items.Count} TRANSACTION INPUT";
                        });
                    }
                    else
                    {
                        lblTransasctionInCount.Invoke((MethodInvoker)delegate
                        {
                            lblTransasctionInCount.Text = $"{listViewTransactionInputs.Items.Count} TRANSACTION INPUTS";
                        });
                    }


                    if (listViewTransactionInputs.Items.Count > 6)
                    {
                        btnTransactionInputsUp.Enabled = true;
                        btnTransactionInputDown.Enabled = true;
                    }
                    else
                    {
                        btnTransactionInputsUp.Enabled = false;
                        btnTransactionInputDown.Enabled = false;
                    }

                    panelTransactionInTab.Invoke((MethodInvoker)delegate
                    {
                        panelTransactionInTab.Width = lblTransasctionInCount.Width + ((int)(22 * UIScale));
                    });

                    // Get the height of each item to set height of whole listview
                    int rowHeight = listViewTransactionInputs.Margin.Vertical + listViewTransactionInputs.Padding.Vertical + listViewTransactionInputs.GetItemRect(0).Height;
                    int itemCount = listViewTransactionInputs.Items.Count; // Get the number of items in the ListBox
                    int listBoxHeight = (itemCount + 2) * rowHeight; // Calculate the height of the ListBox (the extra 2 gives room for the header)

                    listViewTransactionInputs.Height = listBoxHeight; // Set the height of the ListBox
                    panelTransactionInputs.VerticalScroll.Value = 0;
                    panelTransactionInputs.VerticalScroll.Minimum = 0;
                    if (listViewTransactionInputs.Items.Count > 0)
                    {
                        listViewTransactionInputs.Items[0].Selected = true;
                    }

                    #region scrollbar
                    decimal displayRatioInputs = Convert.ToDecimal(panelTXInScrollbarOuter.Height) / Convert.ToDecimal(listViewTransactionInputs.Height);
                    panelTXInScrollbarInner.Invoke((MethodInvoker)delegate
                    {
                        panelTXInScrollbarInner.Height = (int)(panelTXInScrollbarOuter.Height * displayRatioInputs);
                        panelTXInScrollbarInner.Refresh();
                    });
                    int distanceToBeScrolledInputs = panelTXInScrollbarOuter.Height - panelTXInScrollbarInner.Height;
                    int numberOfRowsLeftToShowInputs = listViewTransactionInputs.Items.Count - 7;
                    if (numberOfRowsLeftToShowInputs > 0)
                    {
                        txInScrollbarIncrement = Convert.ToInt32(distanceToBeScrolledInputs / numberOfRowsLeftToShowInputs);
                    }
                    else
                    {
                        panelTXInScrollbarInner.Invoke((MethodInvoker)delegate
                        {
                            panelTXInScrollbarInner.Height = panelTXInScrollbarOuter.Height;
                        });
                        txInScrollbarIncrement = 0;
                        btnTransactionInputDown.Enabled = false;
                        btnTransactionInputsUp.Enabled = false;
                    }
                    #endregion

                    #endregion

                    #region Outputs listview
                    listViewTransactionOutputs.Invoke((MethodInvoker)delegate
                    {
                        listViewTransactionOutputs.Items.Clear(); // remove any data that may be there already
                    });
                    listViewTransactionOutputs.GetType().InvokeMember("DoubleBuffered", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.SetProperty, null, listViewTransactionOutputs, new object[] { true });

                    // Check if the column header already exists
                    if (listViewTransactionOutputs.Columns.Count == 0)
                    {
                        // If not, add the column header
                        listViewTransactionOutputs.Invoke((MethodInvoker)delegate
                        {
                            listViewTransactionOutputs.Columns.Add(" Address", (int)(198 * UIScale));
                        });
                    }

                    if (listViewTransactionOutputs.Columns.Count == 1)
                    {
                        listViewTransactionOutputs.Invoke((MethodInvoker)delegate
                        {
                            // If not, add the column header
                            listViewTransactionOutputs.Columns.Add("Amount", (int)(95 * UIScale));
                        });
                    }

                    List<TransactionVout> vouts = new List<TransactionVout>();

                    foreach (TransactionVout vout in transaction.Vout)
                    {
                        vouts.Add(vout);
                    }

                    foreach (TransactionVout vout in vouts)
                    {
                        string OutputAddress;
                        if (vout.Scriptpubkey_address != "" && vout.Scriptpubkey_address != null)  // display address
                        {
                            OutputAddress = Convert.ToString(vout.Scriptpubkey_address);
                        }
                        else // display OP RETURN after converting hex to ascii
                        {
                            string input = vout.Scriptpubkey_asm!;
                            string hex = Regex.Match(input, @"\b([0-9A-Fa-f]{2})+\b").Value;
                            byte[] bytes = Enumerable.Range(0, hex.Length / 2)
                                .Select(x => Convert.ToByte(hex.Substring(x * 2, 2), 16))
                                .ToArray();
                            string ascii = Encoding.ASCII.GetString(bytes);
                            OutputAddress = $"OP_RETURN: {ascii}";
                        }

                        ListViewItem item = new ListViewItem(OutputAddress); // create new row
                        string OutputValue = Convert.ToString(vout.Value);
                        decimal DecOutputValue = ConvertSatsToBitcoin(OutputValue);
                        item.SubItems.Add(DecOutputValue.ToString());
                        listViewTransactionOutputs.Invoke((MethodInvoker)delegate
                        {
                            listViewTransactionOutputs.Items.Add(item); // add row
                        });
                    }

                    if (listViewTransactionOutputs.Items.Count == 1)
                    {
                        lblTransasctionOutCount.Invoke((MethodInvoker)delegate
                        {
                            lblTransasctionOutCount.Text = $"{listViewTransactionOutputs.Items.Count} TRANSACTION OUTPUT";
                        });
                    }
                    else
                    {
                        lblTransasctionOutCount.Invoke((MethodInvoker)delegate
                        {
                            lblTransasctionOutCount.Text = $"{listViewTransactionOutputs.Items.Count} TRANSACTION OUTPUTS";
                        });
                    }


                    if (listViewTransactionOutputs.Items.Count > 6)
                    {
                        btnTransactionOutputsDown.Enabled = true;
                        btnTransactionOutputsUp.Enabled = true;
                    }
                    else
                    {
                        btnTransactionOutputsDown.Enabled = false;
                        btnTransactionOutputsUp.Enabled = false;
                    }

                    panelTransactionOutTab.Invoke((MethodInvoker)delegate
                    {
                        panelTransactionOutTab.Width = lblTransasctionOutCount.Width + ((int)(22 * UIScale));
                    });

                    int rowHeightout = listViewTransactionOutputs.Margin.Vertical + listViewTransactionOutputs.Padding.Vertical + listViewTransactionOutputs.GetItemRect(0).Height; // Get the height of each item to set height of whole listview
                    int itemCountout = listViewTransactionOutputs.Items.Count; // Get the number of items in the ListBox
                    int listBoxHeightout = (itemCountout + 2) * rowHeightout; // Calculate the height of the ListBox (the extra 2 gives room for the header)

                    listViewTransactionOutputs.Height = listBoxHeightout; // Set the height of the ListBox
                    panelTransactionOutputs.VerticalScroll.Value = 0;
                    panelTransactionOutputs.VerticalScroll.Minimum = 0;

                    if (listViewTransactionOutputs.Items.Count > 0)
                    {
                        listViewTransactionOutputs.Items[0].Selected = true;
                    }
                    #endregion

                    #region scrollbar
                    decimal displayRatioOutputs = Convert.ToDecimal(panelTXOutScrollbarOuter.Height) / Convert.ToDecimal(listViewTransactionOutputs.Height);
                    panelTXOutScrollbarInner.Invoke((MethodInvoker)delegate
                    {
                        panelTXOutScrollbarInner.Height = (int)(panelTXOutScrollbarOuter.Height * displayRatioOutputs);
                        panelTXOutScrollbarInner.Refresh();
                    });
                    int distanceToBeScrolledOutputs = panelTXOutScrollbarOuter.Height - panelTXOutScrollbarInner.Height;
                    int numberOfRowsLeftToShowOutputs = listViewTransactionOutputs.Items.Count - 7;
                    if (numberOfRowsLeftToShowOutputs > 0)
                    {
                        txOutScrollbarIncrement = Convert.ToInt32(distanceToBeScrolledOutputs / numberOfRowsLeftToShowOutputs);
                    }
                    else
                    {
                        panelTXOutScrollbarInner.Invoke((MethodInvoker)delegate
                        {
                            panelTXOutScrollbarInner.Height = panelTXOutScrollbarOuter.Height;
                        });
                        txOutScrollbarIncrement = 0;
                        btnTransactionOutputsDown.Enabled = false;
                        btnTransactionOutputsUp.Enabled = false;
                    }
                    #endregion

                    #region show controls
                    Control[] controlsToShow = { panelTransactionHeadline, panelTransactionDiagram, panelTXInScrollContainer, panelTXOutScrollContainer, panelTransactionOutputs, panelTransactionInputs, btnTransactionInputsUp, btnTransactionInputDown, btnTransactionOutputsUp, btnTransactionOutputsDown, listViewTransactionInputs, listViewTransactionOutputs, btnViewAddressFromTXOutput, lblTransasctionOutCount, lblTransasctionInCount, panelTXInScrollContainer, panelTXOutScrollContainer, panelTXInScrollbarInner, panelTXOutScrollbarInner };
                    foreach (Control control in controlsToShow)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.Visible = true;
                        });
                    }
                    panelTransactionResults.Invoke((MethodInvoker)delegate
                    {
                        panelTransactionResults.Visible = true;
                    });

                    Control[] controlsToRefresh = { panelTransaction, panelTransactionIDContainer, panelTXInScrollContainer, panelTXOutScrollContainer, panelTransactionMiddle, panelTransactionInputs, panelTransactionOutputs, panelTransactionResults, panelTransactionInTab, panelTransactionOutTab };
                    foreach (Control control in controlsToRefresh)
                    {
                        if (control.InvokeRequired)
                        {
                            control.Invoke((MethodInvoker)delegate
                            {
                                control.Refresh();
                            });
                        }
                        else
                        {
                            control.Refresh();
                        }
                    }

                    this.Invalidate();
                    #endregion
                }
                else
                {
                    ToggleLoadingAnimation("disable"); // stop the loading animation
                    DisableEnableTransactionButtons("enable"); // enable buttons after operation is complete
                }

            }
            catch (Exception ex)
            {
                HandleException(ex, "GetTransaction");
            }


        }
        #endregion
        #region listview appearance
        //-------------------- AN INPUT ROW HAS BEEN SELECTED --------------------------------------------------
        private void ListViewTransactionInputs_ItemSelectionChanged(object sender, ListViewItemSelectionChangedEventArgs e)
        {
            try
            {
                bool anySelected = false;
                foreach (ListViewItem item in listViewTransactionInputs.Items)
                {
                    if (item != null)
                    {
                        if (item.Selected)
                        {
                            foreach (ListViewItem.ListViewSubItem subItem in item.SubItems)
                            {
                                subItem.ForeColor = MakeColorLighter(tableTextColor, 40);
                            }
                            if (String.Compare(item.SubItems[0].Text, "N/A") != 0 && String.Compare(item.SubItems[0].Text, "") != 0)
                            {
                                string addresstype = DetermineAddressType(item.SubItems[0].Text);
                                if (String.Compare(addresstype, "unknown") != 0 && String.Compare(addresstype, "Invalid address format") != 0)
                                {
                                    btnViewAddressFromTXInput.Invoke((MethodInvoker)delegate
                                    {
                                        btnViewAddressFromTXInput.Location = new Point(listViewTransactionInputs.Location.X - btnViewAddressFromTXInput.Width + (int)(13 * UIScale), item.Position.Y + listViewTransactionInputs.Location.Y);
                                        btnViewAddressFromTXInput.Height = item.Bounds.Height;
                                    });
                                    anySelected = true;
                                }
                                else
                                {
                                    anySelected = false;
                                }
                            }
                            else
                            {
                                anySelected = false;
                            }
                        }
                        else
                        {
                            foreach (ListViewItem.ListViewSubItem subItem in item.SubItems)
                            {
                                subItem.ForeColor = tableTextColor;
                            }
                        }
                    }
                }
                btnViewAddressFromTXInput.Invoke((MethodInvoker)delegate
                {
                    btnViewAddressFromTXInput.Visible = anySelected;
                });
                lblHeaderBlockAge.Focus();
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewTransactionInputs_ItemSelectionChanged");
            }
        }

        //-------------------- AN OUTPUT ROW HAS BEEN SELECTED --------------------------------------------------
        private void ListViewTransactionOutputs_ItemSelectionChanged(object sender, ListViewItemSelectionChangedEventArgs e)
        {
            try
            {
                bool anySelected = false;
                foreach (ListViewItem item in listViewTransactionOutputs.Items)
                {
                    if (item != null)
                    {
                        if (item.Selected)
                        {
                            foreach (ListViewItem.ListViewSubItem subItem in item.SubItems)
                            {
                                subItem.ForeColor = MakeColorLighter(tableTextColor, 40);
                            }

                            if (String.Compare(item.SubItems[0].Text, "N/A") != 0 && String.Compare(item.SubItems[0].Text, "") != 0)
                            {
                                string addresstype = DetermineAddressType(item.SubItems[0].Text);
                                if (String.Compare(addresstype, "unknown") != 0 && String.Compare(addresstype, "Invalid address format") != 0)
                                {
                                    btnViewAddressFromTXOutput.Invoke((MethodInvoker)delegate
                                    {
                                        btnViewAddressFromTXOutput.Location = new Point(listViewTransactionOutputs.Location.X - btnViewAddressFromTXOutput.Width + (int)(13 * UIScale), item.Position.Y + listViewTransactionOutputs.Location.Y);
                                        btnViewAddressFromTXOutput.Height = item.Bounds.Height;
                                    });
                                    anySelected = true;
                                }
                                else
                                {
                                    anySelected = false;
                                }
                            }
                            else
                            {
                                anySelected = false;
                            }
                        }
                        else
                        {
                            foreach (ListViewItem.ListViewSubItem subItem in item.SubItems)
                            {
                                subItem.ForeColor = tableTextColor;
                            }
                        }
                    }
                }
                btnViewAddressFromTXOutput.Invoke((MethodInvoker)delegate
                {
                    btnViewAddressFromTXOutput.Visible = anySelected;
                });
                lblHeaderBlockAge.Focus();
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewTransactionOutputs_ItemSelectionChanged");
            }
        }

        //-------------------- USER TRYING TO CHANGE COLUMN WIDTHS ----------------------------------------------
        private void ListViewTransactionInputs_ColumnWidthChanging(object sender, ColumnWidthChangingEventArgs e)
        {
            try
            {
                if (e.ColumnIndex == 0)
                {
                    if (listViewTransactionInputs.Columns[e.ColumnIndex].Width < (int)(225 * UIScale)) // min width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(225 * UIScale);
                    }
                    if (listViewTransactionInputs.Columns[e.ColumnIndex].Width > (int)(345 * UIScale)) // max width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(345 * UIScale);
                    }
                }
                if (e.ColumnIndex == 1)
                {
                    if (listViewTransactionInputs.Columns[e.ColumnIndex].Width < (int)(120 * UIScale)) // don't allow this one to change
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(120 * UIScale);
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewTransactionInputs_ColumnWidthChanging");
            }
        }

        //-------------------- USER TRYING TO CHANGE COLUMN WIDTHS ----------------------------------------------
        private void ListViewTransactionOutputs_ColumnWidthChanging(object sender, ColumnWidthChangingEventArgs e)
        {
            try
            {
                if (e.ColumnIndex == 0)
                {
                    if (listViewTransactionOutputs.Columns[e.ColumnIndex].Width < (int)(225 * UIScale)) // min width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(225 * UIScale);
                    }
                    if (listViewTransactionOutputs.Columns[e.ColumnIndex].Width > (int)(345 * UIScale)) // max width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(345 * UIScale);
                    }
                }
                if (e.ColumnIndex == 1)
                {
                    if (listViewTransactionOutputs.Columns[e.ColumnIndex].Width < (int)(120 * UIScale)) // don't allow this one to change
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(120 * UIScale);
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewTransactionOutputs_ColumnWidthChanging");
            }
        }

        //-------------------- FORMAT DATA WHILE DRAWING LISTVIEW ----------------------------------------------
        private void ListViewTransactionInputs_DrawSubItem(object sender, DrawListViewSubItemEventArgs e)
        {
            try
            {
                var text = e.SubItem.Text;
                var font = listViewTransactionInputs.Font;
                var columnWidth = e.Header.Width;
                var textWidth = TextRenderer.MeasureText(text, font).Width;
                if (textWidth > columnWidth)
                {
                    // Truncate the text
                    var maxText = $"{text.Substring(0, text.Length * columnWidth / textWidth - 3)}...";
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);
                    // Clear the background
                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewTransactionInputs.BackColor), bounds);
                    }
                    TextRenderer.DrawText(e.Graphics, maxText, font, bounds, e.Item.ForeColor, TextFormatFlags.EndEllipsis | TextFormatFlags.Left);
                }
                else if (textWidth < columnWidth)
                {
                    // Clear the background
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);

                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewTransactionInputs.BackColor), bounds);
                    }
                    TextRenderer.DrawText(e.Graphics, text, font, bounds, e.SubItem.ForeColor, TextFormatFlags.Left);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewTransactionInputs_DrawSubItem");
            }
        }

        //-------------------- FORMAT DATA WHILE DRAWING LISTVIEW ----------------------------------------------
        private void ListViewTransactionOutputs_DrawSubItem(object sender, DrawListViewSubItemEventArgs e)
        {
            try
            {
                var text = e.SubItem.Text;
                var font = listViewTransactionOutputs.Font;
                var columnWidth = e.Header.Width;
                var textWidth = TextRenderer.MeasureText(text, font).Width;
                if (textWidth > columnWidth)
                {
                    // Truncate the text
                    var maxText = $"{text.Substring(0, text.Length * columnWidth / textWidth - 3)}...";
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);
                    // Clear the background
                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewTransactionOutputs.BackColor), bounds);
                    }
                    TextRenderer.DrawText(e.Graphics, maxText, font, bounds, e.Item.ForeColor, TextFormatFlags.EndEllipsis | TextFormatFlags.Left);
                }
                else if (textWidth < columnWidth)
                {
                    // Clear the background
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);

                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewTransactionOutputs.BackColor), bounds);
                    }

                    TextRenderer.DrawText(e.Graphics, text, font, bounds, e.SubItem.ForeColor, TextFormatFlags.Left);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewTransactionOutputs_DrawSubItem");
            }
        }
        #endregion
        #region listview scrolling
        //-------------------- SCROLL-DOWN INPUTS CLICKED -------------------------------------------------------
        private void BtnTransactionInputsDown_Click(object sender, EventArgs e)
        {
            try
            {
                if (panelTransactionInputs.VerticalScroll.Value < panelTransactionInputs.VerticalScroll.Maximum)
                {
                    int rowHeight = listViewTransactionInputs.Margin.Vertical + listViewTransactionInputs.Padding.Vertical + listViewTransactionInputs.GetItemRect(0).Height;
                    TransactionInputsScrollPosition += rowHeight;
                    panelTransactionInputs.VerticalScroll.Value = TransactionInputsScrollPosition;
                    panelTXInScrollbarInner.Location = new Point(panelTXInScrollbarInner.Location.X, panelTXInScrollbarInner.Location.Y + txInScrollbarIncrement);
                    lblHeaderBlockAge.Focus();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnTransactionInputsDown_Click");
            }
        }

        //-------------------- SCROLL-DOWN OUTPUTS CLICKED -----------------------------------------------------
        private void BtnTransactionOutputsDown_Click(object sender, EventArgs e)
        {
            try
            {
                if (panelTransactionOutputs.VerticalScroll.Value < panelTransactionOutputs.VerticalScroll.Maximum)
                {
                    int rowHeight = listViewTransactionInputs.Margin.Vertical + listViewTransactionInputs.Padding.Vertical + listViewTransactionInputs.GetItemRect(0).Height;
                    TransactionOutputsScrollPosition += rowHeight;
                    panelTransactionOutputs.VerticalScroll.Value = TransactionOutputsScrollPosition;
                    panelTXOutScrollbarInner.Location = new Point(panelTXOutScrollbarInner.Location.X, panelTXOutScrollbarInner.Location.Y + txOutScrollbarIncrement);
                    lblHeaderBlockAge.Focus();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnTransactionOutputsDown_Click");
            }
        }

        //-------------------- SCROLL-DOWN MOUSE-DOWN --------------------------------------------------------
        private void BtnTransactionInputsDown_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isInputButtonPressed = true;
                InputDownButtonPressed = true;
                TXInScrollTimer.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnTransactionInputsDown_MouseDown");
            }
        }

        private void BtnTransactionOutputsDown_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isOutputButtonPressed = true;
                OutputDownButtonPressed = true;
                TXOutScrollTimer.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnTransactionOutputsDown_MouseDown");
            }
        }

        //-------------------- SCROLL-DOWN MOUSE-UP-- --------------------------------------------------------
        private void BtnTransactionInputsDown_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isInputButtonPressed = false;
                InputDownButtonPressed = false;
                TXInScrollTimer.Stop();
                TXInScrollTimer.Interval = 50; // reset the interval to its original value
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnTransactionInputsDown_MouseUp");
            }
        }

        private void BtnTransactionOutputsDown_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isOutputButtonPressed = false;
                OutputDownButtonPressed = false;
                TXOutScrollTimer.Stop();
                TXOutScrollTimer.Interval = 50; // reset the interval to its original value
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnTransactionOutputsDown_MouseUp");
            }
        }

        //-------------------- HANDLE THE ACTUAL SCROLLING --------------------------------------------------
        private void TXInTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                if (isInputButtonPressed)
                {
                    if (InputDownButtonPressed)
                    {
                        int rowHeight = listViewTransactionInputs.Margin.Vertical + listViewTransactionInputs.Padding.Vertical + listViewTransactionInputs.GetItemRect(0).Height;
                        if (TransactionInputsScrollPosition < (panelTransactionInputs.VerticalScroll.Maximum - panelTransactionInputs.Height) - rowHeight)
                        {
                            if (TransactionInputsScrollPosition < panelTransactionInputs.VerticalScroll.Maximum + rowHeight)
                            {
                                TransactionInputsScrollPosition += rowHeight;
                                panelTXInScrollbarInner.Location = new Point(panelTXInScrollbarInner.Location.X, panelTXInScrollbarInner.Location.Y + txInScrollbarIncrement);
                                panelTransactionInputs.VerticalScroll.Value = TransactionInputsScrollPosition;
                            }
                        }
                        else
                        {
                            panelTXInScrollbarInner.Location = new Point(panelTXInScrollbarInner.Location.X, panelTXInScrollbarOuter.Height - panelTXInScrollbarInner.Height);
                        }
                    }
                    else if (InputUpButtonPressed)
                    {
                        int rowHeight = listViewTransactionInputs.Margin.Vertical + listViewTransactionInputs.Padding.Vertical + listViewTransactionInputs.GetItemRect(0).Height;
                        if (TransactionInputsScrollPosition > panelTransactionInputs.VerticalScroll.Minimum + rowHeight)
                        {
                            TransactionInputsScrollPosition -= rowHeight;
                            panelTXInScrollbarInner.Location = new Point(panelTXInScrollbarInner.Location.X, panelTXInScrollbarInner.Location.Y - txInScrollbarIncrement);
                            panelTransactionInputs.VerticalScroll.Value = TransactionInputsScrollPosition;
                        }
                        else
                        {
                            panelTXInScrollbarInner.Location = new Point(panelTXInScrollbarInner.Location.X, 0);
                        }
                    }
                }
                else
                {
                    TXInScrollTimer.Stop();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TXInTimer_Tick");
            }
        }

        private void TXOutTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                if (isOutputButtonPressed)
                {
                    if (OutputDownButtonPressed)
                    {
                        int rowHeight = listViewTransactionOutputs.Margin.Vertical + listViewTransactionOutputs.Padding.Vertical + listViewTransactionOutputs.GetItemRect(0).Height;
                        if (TransactionOutputsScrollPosition < (panelTransactionOutputs.VerticalScroll.Maximum - panelTransactionOutputs.Height) - rowHeight)
                        {
                            if (TransactionOutputsScrollPosition < panelTransactionOutputs.VerticalScroll.Maximum + rowHeight)
                            {
                                TransactionOutputsScrollPosition += rowHeight;
                                panelTXOutScrollbarInner.Location = new Point(panelTXOutScrollbarInner.Location.X, panelTXOutScrollbarInner.Location.Y + txOutScrollbarIncrement);
                                panelTransactionOutputs.VerticalScroll.Value = TransactionOutputsScrollPosition;
                            }
                        }
                        else
                        {
                            panelTXOutScrollbarInner.Location = new Point(panelTXOutScrollbarInner.Location.X, panelTXOutScrollbarOuter.Height - panelTXOutScrollbarInner.Height);
                        }
                    }
                    else if (OutputUpButtonPressed)
                    {
                        int rowHeight = listViewTransactionOutputs.Margin.Vertical + listViewTransactionOutputs.Padding.Vertical + listViewTransactionOutputs.GetItemRect(0).Height;
                        if (TransactionOutputsScrollPosition > panelTransactionOutputs.VerticalScroll.Minimum + rowHeight)
                        {
                            TransactionOutputsScrollPosition -= rowHeight;
                            panelTXOutScrollbarInner.Location = new Point(panelTXOutScrollbarInner.Location.X, panelTXOutScrollbarInner.Location.Y - txOutScrollbarIncrement);
                            panelTransactionOutputs.VerticalScroll.Value = TransactionOutputsScrollPosition;
                        }
                        else
                        {
                            panelTXOutScrollbarInner.Location = new Point(panelTXOutScrollbarInner.Location.X, 0);
                        }
                    }
                }
                else
                {
                    TXOutScrollTimer.Stop();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TXOutTimer_Tick");
            }
        }

        //-------------------- SCROLL-UP INPUTS CLICKED -------------------------------------------------------
        private void BtnTransactionInputsUp_Click(object sender, EventArgs e)
        {
            try
            {
                if (panelTransactionInputs.VerticalScroll.Value > panelTransactionInputs.VerticalScroll.Minimum)
                {
                    int rowHeight = listViewTransactionInputs.Margin.Vertical + listViewTransactionInputs.Padding.Vertical + listViewTransactionInputs.GetItemRect(0).Height;
                    TransactionInputsScrollPosition -= rowHeight;
                    panelTransactionInputs.VerticalScroll.Value = TransactionInputsScrollPosition;
                    panelTXInScrollbarInner.Location = new Point(panelTXInScrollbarInner.Location.X, panelTXInScrollbarInner.Location.Y - txInScrollbarIncrement);
                    lblHeaderBlockAge.Focus();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnTransactionInputsUp_Click");
            }
        }

        //-------------------- SCROLL-UP OUTPUTS CLICKED -------------------------------------------------------
        private void BtnTransactionOutputsUp_Click(object sender, EventArgs e)
        {
            try
            {
                if (panelTransactionOutputs.VerticalScroll.Value > panelTransactionOutputs.VerticalScroll.Minimum)
                {
                    int rowHeight = listViewTransactionOutputs.Margin.Vertical + listViewTransactionOutputs.Padding.Vertical + listViewTransactionOutputs.GetItemRect(0).Height;
                    TransactionOutputsScrollPosition -= rowHeight;
                    panelTransactionOutputs.VerticalScroll.Value = TransactionOutputsScrollPosition;
                    panelTXOutScrollbarInner.Location = new Point(panelTXOutScrollbarInner.Location.X, panelTXOutScrollbarInner.Location.Y - txOutScrollbarIncrement);
                    lblHeaderBlockAge.Focus();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnTransactionOutputsUp_Click");
            }
        }

        //-------------------- SCROLL-UP MOUSE-DOWN -------------------------------------------------------
        private void BtnTransactionInputsUp_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isInputButtonPressed = true;
                InputUpButtonPressed = true;
                TXInScrollTimer.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnTransactionInputsUp_MouseDown");
            }
        }

        private void BtnTransactionOutputsUp_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isOutputButtonPressed = true;
                OutputUpButtonPressed = true;
                TXOutScrollTimer.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnTransactionOutputsUp_MouseDown");
            }
        }

        //-------------------- SCROLL-UP MOUSE-UP -------------------------------------------------------
        private void BtnTransactionInputsUp_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isInputButtonPressed = false;
                InputUpButtonPressed = false;
                TXInScrollTimer.Stop();
                TXInScrollTimer.Interval = 50; // reset the interval to its original value
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnTransactionInputsUp_MouseUp");
            }
        }

        private void BtnTransactionOutputsUp_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isOutputButtonPressed = false;
                OutputUpButtonPressed = false;
                TXOutScrollTimer.Stop();
                TXOutScrollTimer.Interval = 50; // reset the interval to its original value
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnTransactionOutputsUp_MouseUp");
            }
        }

        //-------------------- PREVENT LIST-VIEW FROM JUMPING TO TOP WHEN PAINTED ------------------------
        private void PanelTransactionInputs_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                int rowHeight = listViewTransactionInputs.Margin.Vertical + listViewTransactionInputs.Padding.Vertical + listViewTransactionInputs.GetItemRect(0).Height;
                if (TransactionInputsScrollPosition - rowHeight > 0)
                {
                    panelTransactionInputs.VerticalScroll.Value = TransactionInputsScrollPosition;
                }
                else
                {
                    panelTransactionInputs.VerticalScroll.Value = 0;
                    TransactionInputsScrollPosition = 0;
                }
                lblHeaderBlockAge.Focus();


                //                if (btnViewAddressFromTXInput.Visible) // user must have clicked a row given that the button is visible
                //               {
                //                  panelTransactionInputs.VerticalScroll.Value = TransactionInputsScrollPosition; //return the scroll position to where it was when clicked (it jumps to top otherwise)
                //             }
            }
            catch (Exception ex)
            {
                HandleException(ex, "PanelTransactionInputs_Paint");
            }
        }

        private void PanelTransactionOutputs_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                int rowHeight = listViewTransactionOutputs.Margin.Vertical + listViewTransactionOutputs.Padding.Vertical + listViewTransactionOutputs.GetItemRect(0).Height;
                if (TransactionOutputsScrollPosition - rowHeight > 0)
                {
                    panelTransactionOutputs.VerticalScroll.Value = TransactionOutputsScrollPosition;
                }
                else
                {
                    panelTransactionOutputs.VerticalScroll.Value = 0;
                    TransactionOutputsScrollPosition = 0;
                }
                lblHeaderBlockAge.Focus();

                //if (btnViewAddressFromTXOutput.Visible) // user must have clicked a row given that the button is visible
                // {
                //    panelTransactionOutputs.VerticalScroll.Value = TransactionOutputsScrollPosition; //return the scroll position to where it was when clicked (it jumps to top otherwise)
                // }
            }
            catch (Exception ex)
            {
                HandleException(ex, "PanelTransactionOutputs_Paint");
            }
        }

        #endregion
        #region draw transaction diagram
        //-------DRAW LINES ON TRANSACTION DIAGRAM FROM PREVIOUSLY STORED LIST-----------------------------------
        private void PanelTransactionDiagram_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                Pen pen = new Pen(linesColor);

                // Iterate over the stored list of points and draw lines between them
                for (int i = 0; i < linePoints.Count - 1; i += 2)
                {
                    e.Graphics.DrawLine(pen, linePoints[i], linePoints[i + 1]);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "PanelTransactionDiagram_Paint");
            }
        }
        #endregion
        #region navigate from listview to address screen
        //-------------------- VIEW ADDRESS ------------------------------------------------------------
        private async void BtnViewAddressFromTXInput_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                await CheckNetworkStatusAsync().ConfigureAwait(true);
                // Get the selected item
                ListViewItem selectedItem = listViewTransactionInputs.SelectedItems[0];
                // Get the first subitem in the selected item 
                string SelectedAddress = selectedItem.SubItems[0].Text;
                textboxSubmittedAddress.Invoke((MethodInvoker)delegate
                {
                    textboxSubmittedAddress.Text = SelectedAddress; // copy address to address screen
                });
                panelTransaction.Invoke((MethodInvoker)delegate
                {
                    panelTransaction.Visible = false;
                });
                //show the address screen
                BtnMenuAddress_ClickAsync(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnViewAddressFromTXInput_Click");
            }
        }

        private async void BtnViewAddressFromTXOutput_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                await CheckNetworkStatusAsync().ConfigureAwait(true);
                // Get the selected item
                ListViewItem selectedItem = listViewTransactionOutputs.SelectedItems[0];
                // Get the first subitem in the selected item 
                string SelectedAddress = selectedItem.SubItems[0].Text;
                textboxSubmittedAddress.Invoke((MethodInvoker)delegate
                {
                    textboxSubmittedAddress.Text = SelectedAddress; // copy address to address screen
                });
                panelTransaction.Invoke((MethodInvoker)delegate
                {
                    panelTransaction.Visible = false;
                });
                //show the address screen
                BtnMenuAddress_ClickAsync(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnViewAddressFromTXOutput_Click");
            }
        }
        #endregion
        #region enable/disable buttons
        private void DisableEnableTransactionButtons(string enableOrDisableTransactionButtons)
        {
            try
            {
                if (String.Compare(enableOrDisableTransactionButtons, "disable") == 0)
                {
                    // get current state of buttons before disabling them
                    btnTransactionInputsUpWasEnabled = btnTransactionInputsUp.Enabled;
                    btnTransactionInputDownWasEnabled = btnTransactionInputDown.Enabled;
                    btnTransactionOutputsUpWasEnabled = btnTransactionOutputsUp.Enabled;
                    btnTransactionOutputsDownWasEnabled = btnTransactionOutputsDown.Enabled;
                    btnViewAddressFromTXInputWasEnabled = btnViewAddressFromTXInput.Enabled;
                    btnViewAddressFromTXOutputWasEnabled = btnViewAddressFromTXOutput.Enabled;

                    //disable them all
                    Control[] controlsToDisable = { btnTransactionInputsUp, btnTransactionInputDown, btnTransactionOutputsUp, btnTransactionOutputsDown, btnViewAddressFromTXInput, btnViewAddressFromTXOutput };
                    foreach (Control control in controlsToDisable)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.Enabled = false;
                        });
                    }
                }
                else
                {
                    // use previously saved states to reinstate buttons
                    btnTransactionInputsUp.Enabled = btnTransactionInputsUpWasEnabled;
                    btnTransactionInputDown.Enabled = btnTransactionInputDownWasEnabled;
                    btnTransactionOutputsUp.Enabled = btnTransactionOutputsUpWasEnabled;
                    btnTransactionOutputsDown.Enabled = btnTransactionOutputsDownWasEnabled;
                    btnViewAddressFromTXInput.Enabled = btnViewAddressFromTXInputWasEnabled;
                    btnViewAddressFromTXOutput.Enabled = btnViewAddressFromTXOutputWasEnabled;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "DisableEnableTransactionButtons");
            }
        }
        #endregion
        #region disable keys
        private void ListViewTransactionInputs_KeyDown(object sender, KeyEventArgs e)
        {
            e.Handled = true;
        }

        private void ListViewTransactionInputs_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = true;
        }

        private void ListViewTransactionInputs_KeyUp(object sender, KeyEventArgs e)
        {
            e.Handled = true;
        }

        private void ListViewTransactionOutputs_KeyDown(object sender, KeyEventArgs e)
        {
            e.Handled = true;
        }

        private void ListViewTransactionOutputs_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = true;
        }

        private void ListViewTransactionOutputs_KeyUp(object sender, KeyEventArgs e)
        {
            e.Handled = true;
        }
        #endregion
        #endregion
        //![](resources\tinylogo1.png;;;0.04706,0.04877)
        #region ⚡⚡⚡ BLOCK LIST SCREEN
        #region user input
        private void BtnNumericUpDownBlockHeightToStartListFromUp_Click(object sender, EventArgs e)
        {
            try
            {
                if (numericUpDownBlockHeightToStartListFrom.Value < Convert.ToDecimal(lblHeaderBlockNumber.Text))
                {
                    numericUpDownBlockHeightToStartListFrom.Value++;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnNumericUpDownBlockHeightToStartListFromUp_Click");
            }
        }

        private void BtnNumericUpDownBlockHeightToStartListFromDown_Click(object sender, EventArgs e)
        {
            try
            {
                if (numericUpDownBlockHeightToStartListFrom.Value > 0)
                {
                    numericUpDownBlockHeightToStartListFrom.Value--;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnNumericUpDownBlockHeightToStartListFromDown_Click");
            }
        }

        private void BtnLookUpBlockList_Click(object sender, EventArgs e)
        {
            try
            {
                LookupBlockListAsync();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnLookUpBlockList_Click");
            }
        }

        private void NumericUpDownBlockHeightToStartListFrom_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                // Handle enter
                if (e.KeyChar == '\r')
                {
                    // Submit button was pressed
                    LookupBlockListAsync();
                    e.Handled = true;
                    return;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "numericUpDownBlockHeightToStartListFrom_KeyPress");
            }
        }

        #region continuous increment/decrement of numericUpDown controls when mouse button held down
        private void BtnNumericUpDownBlockHeightToStartListFromUp_MouseDown(object sender, MouseEventArgs e)
        {
            isBlockHeightToStartFromUpHeldDown = true;
            timerNumUpDownContinuous.Enabled = true;
            timerNumUpDownContinuous.Start();
        }

        private void BtnNumericUpDownBlockHeightToStartListFromUp_MouseUp(object sender, MouseEventArgs e)
        {
            isBlockHeightToStartFromUpHeldDown = false;
            timerNumUpDownContinuous.Stop();
            timerNumUpDownContinuous.Enabled = false;
        }

        private void BtnNumericUpDownBlockHeightToStartListFromDown_MouseDown(object sender, MouseEventArgs e)
        {
            isBlockHeightToStartFromDownHeldDown = true;
            timerNumUpDownContinuous.Enabled = true;
            timerNumUpDownContinuous.Start();
        }

        private void BtnNumericUpDownBlockHeightToStartListFromDown_MouseUp(object sender, MouseEventArgs e)
        {
            isBlockHeightToStartFromDownHeldDown = false;
            timerNumUpDownContinuous.Stop();
            timerNumUpDownContinuous.Enabled = false;
        }
        #endregion
        #endregion
        #region set up block list screen
        private async void LookupBlockListAsync()
        {
            try
            {
                //btnViewBlockFromBlockList.Visible = false;
                if (int.TryParse(numericUpDownBlockHeightToStartListFrom.Text, out int _)) // check it's numeric
                {
                    var blockNumber = Convert.ToString(numericUpDownBlockHeightToStartListFrom.Text);
                    await GetFifteenBlocksForBlockListAsync(blockNumber).ConfigureAwait(true);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "LookupBlockList");
            }
        }

        //-------------------- GET A LIST OF FIFTEEN BLOCKS AND DISPLAY THEM ------------------------------------------------
        private async Task GetFifteenBlocksForBlockListAsync(string lastSeenBlockNumber)
        {
            try
            {
                ToggleLoadingAnimation("enable"); // start the loading animation
                DisableEnableBlockListButtons("disable"); // disable buttons during operation

                LightUpNodeLight();
                var blocksJson = await _blockService.GetBlockDataAsync(lastSeenBlockNumber).ConfigureAwait(true);
                if (!string.IsNullOrEmpty(blocksJson))
                {

                    ToggleLoadingAnimation("disable"); // stop the loading animation
                    DisableEnableBlockListButtons("enable"); // enable buttons after operation is complete

                    var blocks = JsonConvert.DeserializeObject<List<Block>>(blocksJson);
                    List<string> blocklist = blocks.Select(t => t.Height).ToList()!;

                    // Update lastSeenBlockNumber if this isn't our first fetch of blocks to restart from the right place
                    if (blocklist.Count > 0)
                    {
                        lastSeenBlockNumber = blocklist.Last();
                        storedLastSeenBlockNumber = blocklist.Last();
                    }

                    //LIST VIEW
                    listViewBlockList.Invoke((MethodInvoker)delegate
                    {
                        listViewBlockList.Items.Clear(); // remove any data that may be there already
                    });
                    listViewBlockList.GetType().InvokeMember("DoubleBuffered", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.SetProperty, null, listViewBlockList, new object[] { true });

                    // Check if the column header already exists

                    if (listViewBlockList.Columns.Count == 0)
                    {
                        listViewBlockList.Invoke((MethodInvoker)delegate
                        {
                            // If not, add the column header
                            listViewBlockList.Columns.Add("Height", (int)(65 * UIScale));
                        });
                    }

                    if (listViewBlockList.Columns.Count == 1)
                    {
                        // If not, add the column header
                        listViewBlockList.Invoke((MethodInvoker)delegate
                        {
                            listViewBlockList.Columns.Add("Date / time", (int)(105 * UIScale));
                        });
                    }

                    if (listViewBlockList.Columns.Count == 2)
                    {
                        listViewBlockList.Invoke((MethodInvoker)delegate
                        {
                            // If not, add the column header
                            listViewBlockList.Columns.Add("TX count", (int)(60 * UIScale));
                        });
                    }
                    if (listViewBlockList.Columns.Count == 3)
                    {
                        listViewBlockList.Invoke((MethodInvoker)delegate
                        {
                            // If not, add the column header
                            listViewBlockList.Columns.Add("Size", (int)(50 * UIScale));
                        });
                    }
                    if (listViewBlockList.Columns.Count == 4)
                    {
                        listViewBlockList.Invoke((MethodInvoker)delegate
                        {
                            // If not, add the column header
                            listViewBlockList.Columns.Add("Fee range", (int)(70 * UIScale));
                        });
                    }
                    if (listViewBlockList.Columns.Count == 5)
                    {
                        listViewBlockList.Invoke((MethodInvoker)delegate
                        {
                            // If not, add the column header
                            listViewBlockList.Columns.Add("Med.", (int)(50 * UIScale));
                        });
                    }
                    if (listViewBlockList.Columns.Count == 6)
                    {
                        listViewBlockList.Invoke((MethodInvoker)delegate
                        {
                            // If not, add the column header
                            listViewBlockList.Columns.Add("Reward", (int)(91 * UIScale));
                        });
                    }
                    // Add the items to the ListView
                    int counter = 0; // used to count rows in list as they're added
                    string formattedDateTime;
                    foreach (var block in blocks!)
                    {
                        formattedDateTime = "00010101-01:01";
                        if (long.TryParse(block.Timestamp, out long unixTimestamp))
                        {
                            DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc).AddSeconds(unixTimestamp).ToLocalTime();
                            formattedDateTime = dateTime.ToString("yyyyMMdd-HH:mm");
                        }
                        ListViewItem item = new ListViewItem(block.Height); // create new row
                        item.SubItems.Add(formattedDateTime.ToString());
                        item.SubItems.Add(block.Tx_count.ToString());
                        decimal sizeInMB = block.Size;
                        sizeInMB /= 1000000;
                        item.SubItems.Add(sizeInMB.ToString("0.00")); // number of outputs
                        string feerange = $"{Convert.ToInt32(block.Extras!.FeeRange![0])}-{Convert.ToInt32(block.Extras.FeeRange[6])}";
                        item.SubItems.Add(feerange.ToString());
                        string medFee = $"~{Convert.ToInt32(block.Extras.MedianFee)}";
                        item.SubItems.Add(medFee.ToString());
                        string RewardInSats = Convert.ToString(block.Extras.Reward);
                        decimal RewardInBTC = ConvertSatsToBitcoin(RewardInSats);
                        item.SubItems.Add(RewardInBTC.ToString());
                        listViewBlockList.Invoke((MethodInvoker)delegate
                        {
                            listViewBlockList.Items.Add(item); // add row
                        });

                        counter++; // increment rows for this batch

                        if (counter == 15) // ListView is full. stop adding rows at this point and pick up from here...
                        {
                            break;
                        }
                    }

                    if (String.Compare(blocklist.First(), lblHeaderBlockNumber.Text) == 0) // We're looking at the most recent blocks 
                    {
                        btnNewer15Blocks.Enabled = false;
                    }
                    else
                    {
                        btnNewer15Blocks.Enabled = true;

                    }

                    if (counter > 1 && String.Compare(blocklist.Last(), "0") == 0) // we've reached the Genesis Block (bottom of the list)
                    {
                        btnOlder15Blocks.Enabled = false; // so we won't need this
                    }
                    else
                    {
                        btnOlder15Blocks.Enabled = true;
                    }

                    if (counter > 0)
                    {
                        listViewBlockList.Items[0].Selected = true;
                        if (btnOlder15Blocks.Enabled == true)
                        {
                            btnOlder15Blocks.Focus();
                        }
                        else
                        {
                            btnNewer15Blocks.Focus();
                        }
                        lblBlockListPositionInList.Invoke((MethodInvoker)delegate
                        {
                            lblBlockListPositionInList.Text = $"Blocks {blocklist.Last()} - {blocklist.First()} of {lblHeaderBlockNumber.Text}";
                        });
                        panelBlockListTab.Invoke((MethodInvoker)delegate
                        {
                            panelBlockListTab.Width = lblBlockListPositionInList.Width + ((int)(22 * UIScale));
                        });
                        label6.Invoke((MethodInvoker)delegate
                        {
                            label6.Text = $"BLOCKS {blocklist.Last()} - {blocklist.First()}";
                        });
                    }
                    else
                    {
                        lblBlockListPositionInList.Invoke((MethodInvoker)delegate
                        {
                            lblBlockListPositionInList.Text = "No blocks to display";
                        });
                    }
                }
                else
                {
                    ToggleLoadingAnimation("disable"); // stop the loading animation
                    DisableEnableBlockListButtons("enable"); // enable buttons after operation is complete
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "GetFifteenBlocksForBlockList");
            }
        }
        #endregion
        #region prev/next batch of blocks
        //-------------------- GET THE PREVIOUS FIFTEEN BLOCKS --------------------------------------------------------------
        private async void BtnOlder15Blocks_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                int blockheight = (Convert.ToInt32(storedLastSeenBlockNumber) - 1);
                string blockNumber = Convert.ToString(blockheight);
                // Get 15 more blocks starting from the current block height minus the number we've already seen
                await GetFifteenBlocksForBlockListAsync(blockNumber).ConfigureAwait(true);
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnOlder15Blocks_Click");
            }
        }

        //-------------------- GET THE NEXT FIFTEEN BLOCKS ------------------------------------------------------------------
        private async void BtnNewer15Blocks_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                // instead of paging back 29 records from the last seen number, calculate 14 + number of items currently displayed. This ensures that if we're looking at the final page, the previous page looks the same on the way back as it did on the way there.
                int blockheight = (Convert.ToInt32(storedLastSeenBlockNumber) + 14 + listViewBlockList.Items.Count);
                string blockNumber = Convert.ToString(blockheight);
                // Get 15 more blocks starting from the current block height minus the number we've already seen
                await GetFifteenBlocksForBlockListAsync(blockNumber).ConfigureAwait(true);
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnNewer15Blocks_Click");
            }
        }
        #endregion
        #region listview appearance
        private void ListViewBlockList_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (listViewBlockList.SelectedItems.Count > 0)
                {
                    Rectangle itemRect = listViewBlockList.GetItemRect(listViewBlockList.SelectedIndices[0]);
                    panel14.Invoke((MethodInvoker)delegate
                    {
                        panel14.Top = itemRect.Top + (int)(98 * UIScale);
                    });
                    label331.Invoke((MethodInvoker)delegate
                    {
                        label331.Top = itemRect.Top + (int)(90 * UIScale);
                    });
                    panel19.Invoke((MethodInvoker)delegate
                    {
                        panel19.Height = panel17.Top - panel14.Top;
                        panel19.Top = panel14.Top;
                    });
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewBlockList_SelectedIndexChanged");
            }
        }

        //-------------------- USER TRYING TO CHANGE COLUMN WIDTH -----------------------------------------------------------
        private void ListViewBlockList_ColumnWidthChanging(object sender, ColumnWidthChangingEventArgs e)
        {
            try
            {
                if (e.ColumnIndex == 0)
                {
                    if (listViewBlockList.Columns[e.ColumnIndex].Width != (int)(65 * UIScale)) // don't allow this one to change
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(65 * UIScale);
                    }
                }
                if (e.ColumnIndex == 1)
                {
                    if (listViewBlockList.Columns[e.ColumnIndex].Width != (int)(105 * UIScale)) // min width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(105 * UIScale);
                    }
                }
                if (e.ColumnIndex == 2)
                {
                    if (listViewBlockList.Columns[e.ColumnIndex].Width != (int)(60 * UIScale)) // don't allow this one to change
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(60 * UIScale);
                    }
                }
                if (e.ColumnIndex == 3)
                {
                    if (listViewBlockList.Columns[e.ColumnIndex].Width != (int)(50 * UIScale)) // don't allow this one to change
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(50 * UIScale);
                    }
                }
                if (e.ColumnIndex == 4)
                {
                    if (listViewBlockList.Columns[e.ColumnIndex].Width != (int)(70 * UIScale)) // don't allow this one to change
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(70 * UIScale);
                    }
                }
                if (e.ColumnIndex == 5)
                {
                    if (listViewBlockList.Columns[e.ColumnIndex].Width != (int)(50 * UIScale)) // don't allow this one to change
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(50 * UIScale);
                    }
                }
                if (e.ColumnIndex == 6)
                {
                    if (listViewBlockList.Columns[e.ColumnIndex].Width != (int)(91 * UIScale)) // don't allow this one to change
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(91 * UIScale);
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewBlockList_ColumnWidthChanging");
            }
        }

        //---------------------- FORMAT THE DATA IN THE LISTVIEW ------------------------------------------------------------
        private void ListViewBlockList_DrawSubItem(object sender, DrawListViewSubItemEventArgs e)
        {
            try
            {
                var text = e.SubItem.Text;

                if (text[0] == '+') // if the string is a change to an amount and positive
                {
                    e.SubItem.ForeColor = Color.OliveDrab; // make it green
                }
                else
                if (text[0] == '-') // if the string is a change to an amount and negative
                {
                    e.SubItem.ForeColor = Color.IndianRed; // make it red
                }

                var font = listViewBlockList.Font;
                var columnWidth = e.Header.Width;
                var textWidth = TextRenderer.MeasureText(text, font).Width;
                if (textWidth > columnWidth)
                {
                    // Truncate the text
                    var maxText = $"{text.Substring(0, text.Length * columnWidth / textWidth - 3)}...";
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);
                    // Clear the background
                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                        TextRenderer.DrawText(e.Graphics, text, font, bounds, MakeColorLighter(e.SubItem.ForeColor, 40), TextFormatFlags.Left);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewBlockList.BackColor), bounds);
                        TextRenderer.DrawText(e.Graphics, text, font, bounds, e.SubItem.ForeColor, TextFormatFlags.Left);
                    }
                    TextRenderer.DrawText(e.Graphics, maxText, font, bounds, e.Item.ForeColor, TextFormatFlags.EndEllipsis | TextFormatFlags.Left);
                }
                else if (textWidth < columnWidth)
                {
                    // Clear the background
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);

                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                        TextRenderer.DrawText(e.Graphics, text, font, bounds, MakeColorLighter(e.SubItem.ForeColor, 40), TextFormatFlags.Left);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewBlockList.BackColor), bounds);
                        TextRenderer.DrawText(e.Graphics, text, font, bounds, e.SubItem.ForeColor, TextFormatFlags.Left);
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewBlockList_DrawSubItem");
            }
        }
        #endregion
        #region navigate from listview to block screen
        //-------------------- VIEW INDIVIDUAL BLOCK ------------------------------------------------------------------------
        private async void BtnViewBlockFromBlockList_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                await CheckNetworkStatusAsync().ConfigureAwait(true);
                // Get the selected item
                ListViewItem selectedItem = listViewBlockList.SelectedItems[0];
                if (selectedItem != null)
                {
                    string submittedBlockNumber = selectedItem.SubItems[0].Text;
                    numericUpDownSubmittedBlockNumber.Invoke((MethodInvoker)delegate
                    {
                        numericUpDownSubmittedBlockNumber.Text = submittedBlockNumber; // copy block number to block screen
                    });
                    LookupBlockAsync();
                    panelBlockList.Invoke((MethodInvoker)delegate
                    {
                        panelBlockList.Visible = false;
                    });
                    //show the block screen
                    BtnMenuBlock_ClickAsync(sender, e);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnViewBlockFromBlockList_Click");
            }
        }
        #endregion
        #region detail selected block row
        //-------------------- A ROW HAS BEEN CLICKED ON BLOCKLIST ----------------------------------------------------------
        private async void ListViewBlockList_ItemSelectionChangedAsync(object sender, ListViewItemSelectionChangedEventArgs e)
        {
            try
            {
                foreach (ListViewItem item in listViewBlockList.Items)
                {
                    if (item != null)
                    {
                        if (item.Selected)
                        {
                            btnViewBlockFromBlockList.Enabled = true;
                            btnViewPoolFromBlockList.Enabled = true;
                            foreach (ListViewItem.ListViewSubItem subItem in item.SubItems)
                            {
                                subItem.ForeColor = MakeColorLighter(tableTextColor, 20);
                            }
                            // display block hash
                            using (WebClient client = new WebClient())
                            {
                                LightUpNodeLight();
                                string BlockHashURL = $"{NodeURL}block-height/{item.SubItems[0].Text}";
                                string BlockHash = client.DownloadString(BlockHashURL); // get hash of provided block
                                if (!string.IsNullOrEmpty(BlockHash))
                                {
                                    lblBlockListBlockHash.Invoke((MethodInvoker)delegate
                                    {
                                        lblBlockListBlockHash.Text = BlockHash;
                                        lblBlockListBlockHash.Location = new Point(label90.Location.X + label90.Width, lblBlockListBlockHash.Location.Y);
                                    });
                                }
                            }
                            string blockNumber = item.SubItems[0].Text;
                            ToggleLoadingAnimation("enable"); // start the loading animation
                            LightUpNodeLight();
                            var blocksJson = await _blockService.GetBlockDataAsync(blockNumber).ConfigureAwait(true);
                            if (!string.IsNullOrEmpty(blocksJson))
                            {
                                ToggleLoadingAnimation("disable"); // stop the loading animation

                                var blocks = JsonConvert.DeserializeObject<List<Block>>(blocksJson);
                                lblBlockListBlockTime.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListBlockTime.Text = DateTimeOffset.FromUnixTimeSeconds(long.Parse(blocks![0].Timestamp)).ToString("yyyy-MM-dd HH:mm");
                                    lblBlockListBlockTime.Location = new Point(label91.Location.X + label91.Width, lblBlockListBlockTime.Location.Y);
                                });
                                long sizeInBytes = blocks![0].Size;
                                string sizeString = ""; // convert display to bytes/kb/mb accordingly
                                if (sizeInBytes < 1000)
                                {
                                    sizeString = $"{sizeInBytes} bytes";
                                }
                                else if (sizeInBytes < 1000 * 1000)
                                {
                                    double sizeInKB = (double)sizeInBytes / 1000;
                                    sizeString = $"{sizeInKB:N2} KB";
                                }
                                else
                                {
                                    double sizeInMB = (double)sizeInBytes / (1000 * 1000);
                                    sizeString = $"{sizeInMB:N2} MB";
                                }
                                lblBlockListBlockSize.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListBlockSize.Text = sizeString;
                                    lblBlockListBlockSize.Location = new Point(label105.Location.X + label105.Width, lblBlockListBlockSize.Location.Y);
                                });
                                string strWeight = Convert.ToString(blocks[0].Weight);

                                if (decimal.TryParse(strWeight, out decimal decWeight))
                                {
                                    decWeight /= 1000000m; // convert to MWU
                                    string strFormattedWeight = decWeight.ToString("N2"); // Display to 2 decimal places
                                    lblBlockListBlockWeight.Invoke((MethodInvoker)delegate
                                    {
                                        lblBlockListBlockWeight.Text = strFormattedWeight;
                                        lblBlockListBlockWeight.Location = new Point(label103.Location.X + label103.Width, lblBlockListBlockWeight.Location.Y);
                                    });
                                }

                                if (long.TryParse(blocks[0].Nonce, out long nonceLong))
                                {
                                    lblBlockListNonce.Invoke((MethodInvoker)delegate
                                    {
                                        lblBlockListNonce.Text = $"0x{nonceLong:X}";
                                        lblBlockListNonce.Location = new Point(label24.Location.X + label24.Width, lblBlockListNonce.Location.Y);
                                    });
                                }
                                lblBlockListMiner.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListMiner.Text = Convert.ToString(blocks[0].Extras!.Pool!.Name);
                                    lblBlockListMiner.Location = new Point(label95.Location.X + label95.Width, lblBlockListMiner.Location.Y);
                                });

                                lblBlockListTransactionCount.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListTransactionCount.Text = Convert.ToString(blocks[0].Tx_count);
                                    lblBlockListTransactionCount.Location = new Point(label99.Location.X + label99.Width, lblBlockListTransactionCount.Location.Y);
                                });
                                btnViewBlockFromBlockList.Invoke((MethodInvoker)delegate
                                {
                                    btnViewBlockFromBlockList.Location = new Point(lblBlockListTransactionCount.Location.X + lblBlockListTransactionCount.Width, btnViewBlockFromBlockList.Location.Y);
                                });
                                string TotalBlockFees = Convert.ToString(blocks[0].Extras!.TotalFees);
                                TotalBlockFees = Convert.ToString(ConvertSatsToBitcoin(TotalBlockFees));
                                lblBlockListTotalFees.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListTotalFees.Text = TotalBlockFees;
                                    lblBlockListTotalFees.Location = new Point(label88.Location.X + label88.Width, lblBlockListTotalFees.Location.Y);
                                });
                                string Reward = Convert.ToString(blocks[0].Extras!.Reward);
                                lblBlockListReward.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListReward.Text = Convert.ToString(ConvertSatsToBitcoin(Reward));
                                    lblBlockListReward.Location = new Point(label101.Location.X + label101.Width, lblBlockListReward.Location.Y);
                                });
                                lblBlockListBlockFeeRangeAndMedianFee.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListBlockFeeRangeAndMedianFee.Text = $"{Convert.ToInt32(blocks[0].Extras!.FeeRange![0])}-{Convert.ToInt32(blocks[0].Extras!.FeeRange![6])} / {Convert.ToInt32(blocks[0].Extras!.MedianFee)}";
                                    lblBlockListBlockFeeRangeAndMedianFee.Location = new Point(label93.Location.X + label93.Width, lblBlockListBlockFeeRangeAndMedianFee.Location.Y);
                                });
                                lblBlockListAverageFee.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListAverageFee.Text = Convert.ToString(blocks[0].Extras!.AvgFee);
                                    lblBlockListAverageFee.Location = new Point(label97.Location.X + label97.Width, lblBlockListAverageFee.Location.Y);
                                });
                                lblBlockListTotalInputs.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListTotalInputs.Text = Convert.ToString(blocks[0].Extras!.TotalInputs);
                                    lblBlockListTotalInputs.Location = new Point(label89.Location.X + label89.Width, lblBlockListTotalInputs.Location.Y);
                                });
                                lblBlockListTotalOutputs.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListTotalOutputs.Text = Convert.ToString(blocks[0].Extras!.TotalOutputs);
                                    lblBlockListTotalOutputs.Location = new Point(label94.Location.X + label94.Width, lblBlockListTotalOutputs.Location.Y);
                                });
                                if (double.TryParse(blocks[0].Extras!.AvgTxSize, out double avgTxSize))
                                {
                                    lblBlockListAverageTransactionSize.Invoke((MethodInvoker)delegate
                                    {
                                        lblBlockListAverageTransactionSize.Text = avgTxSize.ToString("F2");
                                        lblBlockListAverageTransactionSize.Location = new Point(label92.Location.X + label92.Width, lblBlockListAverageTransactionSize.Location.Y);
                                    });
                                }
                                lblBlockListVersion.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListVersion.Text = Convert.ToString(blocks[0].Version);
                                    lblBlockListVersion.Location = new Point(label96.Location.X + label96.Width, lblBlockListVersion.Location.Y);
                                });
                                lblBlockListBlockHeight.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListBlockHeight.Text = $"BLOCK HEIGHT: {blocks[0].Height}";
                                });
                                btnViewPoolFromBlockList.Invoke((MethodInvoker)delegate
                                {
                                    btnViewPoolFromBlockList.Location = new Point(lblBlockListMiner.Location.X + lblBlockListMiner.Width, btnViewPoolFromBlockList.Location.Y);
                                });
                                lblBlockListFeeChart.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListFeeChart.Location = new Point(lblBlockListTotalFees.Location.X + lblBlockListTotalFees.Width, lblBlockListFeeChart.Location.Y);
                                });
                                lblBlockListRewardChart.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListRewardChart.Location = new Point(lblBlockListReward.Location.X + lblBlockListReward.Width, lblBlockListRewardChart.Location.Y);
                                });
                                lblBlockListFeeRangeChart.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListFeeRangeChart.Location = new Point(lblBlockListBlockFeeRangeAndMedianFee.Location.X + lblBlockListBlockFeeRangeAndMedianFee.Width, lblBlockListFeeRangeChart.Location.Y);
                                });
                                lblBlockListBlockSizeChart.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListBlockSizeChart.Location = new Point(lblBlockListBlockSize.Location.X + lblBlockListBlockSize.Width, lblBlockListBlockSizeChart.Location.Y);
                                });
                            }
                            else
                            {
                                ToggleLoadingAnimation("disable"); // stop the loading animation
                            }
                        }
                        else
                        {
                            foreach (ListViewItem.ListViewSubItem subItem in item.SubItems)
                            {
                                subItem.ForeColor = tableTextColor;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewBlockList_ItemSelectionChanged");
            }
        }
        #endregion
        #region chart icon clicks
        //---------------------- VIEW CHARTS --------------------------------------------------------------------------------
        private void PictureBoxBlockListDifficultyChart_Click(object sender, EventArgs e)
        {
            try
            {
                ChartDifficultyAsync();
                BtnMenuCharts_ClickAsync(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxBlockListDifficultyChart_Click");
            }
        }

        private void PictureBoxBlockListHashrateChart_Click(object sender, EventArgs e)
        {
            try
            {
                ChartHashrateAsync();
                BtnMenuCharts_ClickAsync(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxBlockListHashrateChart_Click");
            }
        }

        private void PictureBoxBlockListBlockSizeChart_Click(object sender, EventArgs e)
        {
            try
            {
                ChartBlockSizeAsync();
                BtnMenuCharts_ClickAsync(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxBlockListBlockSizeChart_Click");
            }
        }

        private void PictureBoxBlockListFeeChart_Click(object sender, EventArgs e)
        {
            try
            {
                ChartBlockFeesAsync();
                BtnMenuCharts_ClickAsync(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxBlockListFeeChart_Click");
            }
        }

        private void PictureBoxBlockListRewardChart_Click(object sender, EventArgs e)
        {
            try
            {
                ChartRewardAsync();
                BtnMenuCharts_ClickAsync(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxBlockListRewardChart_Click");
            }
        }

        private void PictureBoxBlockListFeeRangeChart_Click(object sender, EventArgs e)
        {
            try
            {
                ChartFeeRatesAsync();
                BtnMenuCharts_ClickAsync(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxBlockListFeeRangeChart_Click");
            }
        }

        private void PictureBoxBlockListFeeChart2_Click(object sender, EventArgs e)
        {
            try
            {
                ChartBlockFeesAsync();
                BtnMenuCharts_ClickAsync(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxBlockListFeeChart2_Click");
            }
        }

        private void PictureBoxBlockListFeeRangeChart2_Click(object sender, EventArgs e)
        {
            try
            {
                ChartFeeRatesAsync();
                BtnMenuCharts_ClickAsync(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxBlockListFeeRangeChart2_Click");
            }
        }
        #endregion
        #region disable/enable buttons
        private void DisableEnableBlockListButtons(string enableOrDisableBlockListButtons)
        {
            try
            {
                if (!dontDisableButtons)
                {
                    if (String.Compare(enableOrDisableBlockListButtons, "disable") == 0)
                    {
                        // get current state of buttons before disabling them
                        btnViewBlockFromBlockListWasEnabled = btnViewBlockFromBlockList.Enabled;
                        btnViewPoolFromBlockListWasEnabled = btnViewPoolFromBlockList.Enabled;
                        btnNewer15BlocksWasEnabled = btnNewer15Blocks.Enabled;
                        btnOlder15BlocksWasEnabled = btnOlder15Blocks.Enabled;
                        numericUpDownBlockHeightToStartListFromWasEnabled = numericUpDownBlockHeightToStartListFrom.Enabled;
                        btnNumericUpDownBlockHeightToStartListFromUpWasEnabled = btnNumericUpDownBlockHeightToStartListFromUp.Enabled;
                        btnNumericUpDownBlockHeightToStartListFromDownWasEnabled = btnNumericUpDownBlockHeightToStartListFromDown.Enabled;
                        btnLookUpBlockListWasEnabled = btnLookUpBlockList.Enabled;

                        //disable them all
                        Control[] controlsToDisable = { btnViewBlockFromBlockList, btnNewer15Blocks, btnOlder15Blocks, numericUpDownBlockHeightToStartListFrom, btnNumericUpDownBlockHeightToStartListFromUp, btnNumericUpDownBlockHeightToStartListFromDown, btnLookUpBlockList, btnViewPoolFromBlockList };
                        foreach (Control control in controlsToDisable)
                        {
                            control.Invoke((MethodInvoker)delegate
                            {
                                control.Enabled = false;
                            });
                        }
                    }
                    else
                    {
                        // use previously saved states to reinstate buttons
                        btnViewBlockFromBlockList.Enabled = btnViewBlockFromBlockListWasEnabled;
                        btnNewer15Blocks.Enabled = btnNewer15BlocksWasEnabled;
                        btnOlder15Blocks.Enabled = btnOlder15BlocksWasEnabled;
                        numericUpDownBlockHeightToStartListFrom.Enabled = numericUpDownBlockHeightToStartListFromWasEnabled;
                        btnNumericUpDownBlockHeightToStartListFromUp.Enabled = btnNumericUpDownBlockHeightToStartListFromUpWasEnabled;
                        btnNumericUpDownBlockHeightToStartListFromDown.Enabled = btnNumericUpDownBlockHeightToStartListFromDownWasEnabled;
                        btnLookUpBlockList.Enabled = btnLookUpBlockListWasEnabled;
                        btnViewPoolFromBlockList.Enabled = btnViewPoolFromBlockListWasEnabled;
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "DisableEnableBlockListButtons");
            }
        }
        #endregion
        #region event driven relocations
        private void RelocatelblBlockListFeeChart2Icon(object sender, EventArgs e)
        {
            if (lblBlockListTotalFeesInNextBlockFiat.Visible)
            {
                lblBlockListFeeChart2.Invoke((MethodInvoker)delegate
                {
                    lblBlockListFeeChart2.Location = new Point(lblBlockListTotalFeesInNextBlockFiat.Location.X + lblBlockListTotalFeesInNextBlockFiat.Width, lblBlockListFeeChart2.Location.Y);
                });
            }
            else
            {
                lblBlockListFeeChart2.Invoke((MethodInvoker)delegate
                {
                    lblBlockListFeeChart2.Location = new Point(lblBlockListTotalFeesInNextBlock.Location.X + lblBlockListTotalFeesInNextBlock.Width, lblBlockListFeeChart2.Location.Y);
                });
            }
        }
        #endregion
        #region jump to pool screen
        private void BtnViewPoolFromBlockList_Click(object sender, EventArgs e)
        {
            poolNameToPass = lblBlockListMiner.Text;

            // scan through the existing pools list to find the row we want so it can be selected and scrolled to
            int counter = 0;
            int rowHeight = listViewPoolsList.Margin.Vertical + listViewPoolsList.Padding.Vertical + listViewPoolsList.GetItemRect(0).Height;
            foreach (ListViewItem item in listViewPoolsList.Items)
            {
                if (item != null)
                {
                    counter++;
                    if (String.Compare(item.SubItems[0].Text, poolNameToPass) == 0)
                    {
                        poolsListScrollPosition = counter * rowHeight;
                        break;
                    }
                }
            }

            BtnMenuMiningPools_ClickAsync(sender, e);
        }
        #endregion
        #endregion
        //![](resources\tinylogo1.png;;;0.04706,0.04877)
        #region ⚡⚡⚡ XPUB SCREEN
        #region user input & validation

        //-------------------- VALIDATE AND LOOK UP XPUB --------------------------------------------------------------------
        private void TextBoxSubmittedXpub_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (e.KeyChar == '\r')
                {
                    // Submit button was pressed
                    if (xpubValid)
                    {
                        LookupXpubAsync();
                        e.Handled = true;
                        return;
                    }
                    else
                    {
                        return;
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxSubmittedXpub_KeyPress");
            }
        }

        private void TextBoxSubmittedXpub_TextChanged(object sender, EventArgs e)
        {
            try
            {
                panelXpubAllResults.Invoke((MethodInvoker)delegate
                {
                    panelXpubAllResults.Visible = false;
                });
                xpubScanComplete = false;
                xpubValid = false;
                SuspendLayout();
                panelXpubAllResults.Invoke((MethodInvoker)delegate
                {
                    panelXpubAllResults.Visible = false;
                });
                panelXpubResults.Invoke((MethodInvoker)delegate
                {
                    panelXpubResults.Visible = false;
                });
                panel101.Invoke((MethodInvoker)delegate
                {
                    panel101.Visible = false;
                });
                panelXpubContainer.Invoke((MethodInvoker)delegate
                {
                    panelXpubContainer.Visible = false;
                });
                panelXpubScrollContainer.Invoke((MethodInvoker)delegate
                {
                    panelXpubScrollContainer.Visible = false;
                });
                btnViewAddressFromXpub.Invoke((MethodInvoker)delegate
                {
                    btnViewAddressFromXpub.Visible = false;
                });
                panelXpubScrollbarInner.Invoke((MethodInvoker)delegate
                {
                    panelXpubScrollbarInner.Visible = false;
                });
                progressBarCheckAllAddressTypes.Value = 0;
                progressBarCheckEachAddressType.Value = 0;
                lblCheckEachAddressTypeCount.Text = "";
                lblCheckAllAddressTypesCount.Text = "";
                lblSegwitUsedAddresses.Text = "0 used";
                lblSegwitSummary.Text = "";
                lblLegacyUsedAddresses.Text = "0 used";
                lblLegacySummary.Text = "";
                lblSegwitP2SHUsedAddresses.Text = "0 used";
                lblSegwitP2SHSummary.Text = "";
                lblXpubConfirmedReceived.Text = "0";
                lblXpubConfirmedSpent.Text = "0";
                lblXpubConfirmedUnspent.Text = "0";
                listViewXpubAddresses.Clear();
                lblP2SHSummary.Text = "";
                lblP2SHUsedAddresses.Text = "0 used";
                lblXpubConfirmedReceivedFiat.Text = $"{fiatSymbol}0.00";
                lblXpubConfirmedSpentFiat.Text = $"{fiatSymbol}0.00";
                lblXpubConfirmedUnspentFiat.Text = $"{fiatSymbol}0.00";
                ResumeLayout(false);
                if (textBoxSubmittedXpub.Text == "")
                {
                    lblValidXpubIndicator.Invoke((MethodInvoker)delegate
                    {
                        lblValidXpubIndicator.Text = "";
                    });
                    return;
                }

                // validate the inputted xpub before proceeding
                try
                {
                    string xpubString = textBoxSubmittedXpub.Text;
                    if (textBoxSubmittedXpub.Text == "")
                    {
                        return;
                    }
                    BitcoinExtPubKey xpub = new BitcoinExtPubKey(xpubString, Network.Main);
                    _ = xpub.GetPublicKey();
                }
                catch
                {
                    xpubValid = false;
                    lblValidXpubIndicator.Invoke((MethodInvoker)delegate
                    {
                        lblValidXpubIndicator.ForeColor = Color.IndianRed;
                        lblValidXpubIndicator.Text = "✖️ invalid Xpub";
                    });

                    return;
                }
                xpubValid = true;
                lblValidXpubIndicator.Invoke((MethodInvoker)delegate
                {
                    lblValidXpubIndicator.ForeColor = Color.OliveDrab;
                    lblValidXpubIndicator.Text = "✔️ valid Xpub";
                });
                LookupXpubAsync();
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxSubmittedXpub_TextChanged");
            }
        }


        //-------------------- DERIVATION PATHS ---------------------------------------------------------------------------
        private void NumberUpDownDerivationPathsToCheck_Validating(object sender, CancelEventArgs e)
        {
            try
            {
                if (numberUpDownDerivationPathsToCheck.Value > 100)
                {
                    numberUpDownDerivationPathsToCheck.Value = 100;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "NumberUpDownDerivationPathsToCheck_Validating");
            }
        }

        private void NumberUpDownDerivationPathsToCheck_ValueChanged(object sender, EventArgs e)
        {
            try
            {
                SaveSettings();
            }
            catch (Exception ex)
            {
                HandleException(ex, "numberUpDownDerivationPathsToCheck_ValueChanged");
            }
        }

        private void BtnDerivationPathsUp_Click(object sender, EventArgs e)
        {
            try
            {
                if (numberUpDownDerivationPathsToCheck.Value < 99)
                {
                    numberUpDownDerivationPathsToCheck.Value++;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDerivationPathsUp_Click");
            }
        }

        private void BtnDerivationPathsDown_Click(object sender, EventArgs e)
        {
            try
            {
                if (numberUpDownDerivationPathsToCheck.Value > 1)
                {
                    numberUpDownDerivationPathsToCheck.Value--;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDerivationPathsDown_Click");
            }
        }

        //------------- non-zero balances to be checked

        private void NumericUpDownMaxNumberOfConsecutiveUnusedAddresses_ValueChanged(object sender, EventArgs e)
        {
            try
            {
                SaveSettings();
            }
            catch (Exception ex)
            {
                HandleException(ex, "numericUpDownMaxNumberOfConsecutiveUnusedAddresses_ValueChanged");
            }
        }

        private void BtnNonZeroBalancesUp_Click(object sender, EventArgs e)
        {
            try
            {
                if (numericUpDownMaxNumberOfConsecutiveUnusedAddresses.Value < 99)
                {
                    numericUpDownMaxNumberOfConsecutiveUnusedAddresses.Value++;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnNonZeroBalancesUp_Click");
            }
        }

        private void BtnNonZeroBalancesDown_Click(object sender, EventArgs e)
        {
            try
            {
                if (numericUpDownMaxNumberOfConsecutiveUnusedAddresses.Value > 1)
                {
                    numericUpDownMaxNumberOfConsecutiveUnusedAddresses.Value--;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnNonZeroBalancesUp_Click");
            }
        }

        #region continuous increment/decrement of numericUpDown controls when mouse button held down
        private void BtnNonZeroBalancesUp_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isZeroBalanceAdddressUpHeldDown = true;
                timerNumUpDownContinuous.Enabled = true;
                timerNumUpDownContinuous.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnNonZeroBalancesUp_MouseDown");
            }
        }

        private void BtnNonZeroBalancesUp_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isZeroBalanceAdddressUpHeldDown = false;
                timerNumUpDownContinuous.Stop();
                timerNumUpDownContinuous.Enabled = false;
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnNonZeroBalancesUp_MouseUp");
            }
        }

        private void BtnNonZeroBalancesDown_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isZeroBalanceAdddressDownHeldDown = true;
                timerNumUpDownContinuous.Enabled = true;
                timerNumUpDownContinuous.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnNonZeroBalancesDown_MouseDown");
            }
        }

        private void BtnNonZeroBalancesDown_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isZeroBalanceAdddressDownHeldDown = false;
                timerNumUpDownContinuous.Stop();
                timerNumUpDownContinuous.Enabled = false;
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnNonZeroBalancesDown_MouseUp");
            }
        }

        private void BtnDerivationPathsUp_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isDerivationPathsUpHeldDown = true;
                timerNumUpDownContinuous.Enabled = true;
                timerNumUpDownContinuous.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDerivationPathsUp_MouseDown");
            }
        }

        private void BtnDerivationPathsUp_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isDerivationPathsUpHeldDown = false;
                timerNumUpDownContinuous.Stop();
                timerNumUpDownContinuous.Enabled = false;
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDerivationPathsUp_MouseUp");
            }
        }

        private void BtnDerivationPathsDown_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isDerivationPathsDownHeldDown = true;
                timerNumUpDownContinuous.Enabled = true;
                timerNumUpDownContinuous.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDerivationPathsDown_MouseDown");
            }
        }

        private void BtnDerivationPathsDown_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isDerivationPathsDownHeldDown = false;
                timerNumUpDownContinuous.Stop();
                timerNumUpDownContinuous.Enabled = false;
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDerivationPathsDown_MouseUp");
            }
        }
        #endregion
        #endregion
        #region check node online
        //-------------------- CHECK NODE ONLINE -------------------------------------------------------
        private async void CheckOwnNodeIsOnlineAsync()
        {
            try
            {
                Ping pingSender = new Ping();
                string pingAddress = "";

                if (textBoxXpubScreenOwnNodeURL.Text != "")
                {
                    // get the contents of the textbox
                    string url = textBoxXpubScreenOwnNodeURL.Text;

                    // create a regex pattern to match URLs
                    string pattern = @"^(http|https):\/\/.*\/api\/$";

                    // create a regex object
                    Regex regex = new Regex(pattern);

                    // use the regex object to match the contents of the textbox
                    if (regex.IsMatch(url)) // (at least partially) valid url
                    {
                        try
                        {
                            xpubNodeURL = textBoxXpubScreenOwnNodeURL.Text;
                            // get the hostname from the URL
                            // parse the URL to extract the hostname
                            Uri uri = new Uri(xpubNodeURL);
                            string hostname = uri.Host;

                            // resolve the hostname to an IP address
                            IPHostEntry hostEntry = Dns.GetHostEntry(hostname);
                            IPAddress ipAddress = hostEntry.AddressList[0];
                            pingAddress = ipAddress.ToString();
                        }
                        catch
                        {
                            lblXpubScreenOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                            {
                                lblXpubScreenOwnNodeStatusLight.ForeColor = Color.IndianRed;
                            });
                            lblSettingsOwnNodeSelected.Enabled = false;
                            Uri uri = new Uri(xpubNodeURL);
                            string hostname = uri.Host;
                            label174.Invoke((MethodInvoker)delegate
                            {
                                label174.Text = "your node (not connected)";
                            });
                            MoveNodeSelections();
                            lblXpubScreenOwnNodeStatus.Invoke((MethodInvoker)delegate
                            {
                                lblXpubScreenOwnNodeStatus.Text = hostname;
                            });
                            lblSettingsOwnNodeStatus.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsOwnNodeStatus.Text = hostname;
                                lblSettingsOwnNodeStatus.Location = new Point((int)(750 * UIScale) - lblSettingsOwnNodeStatus.Width, lblSettingsOwnNodeStatus.Location.Y);
                            });
                            lblSettingsOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsOwnNodeStatusLight.ForeColor = Color.IndianRed;
                                lblSettingsOwnNodeStatusLight.Location = new Point(lblSettingsOwnNodeStatus.Location.X - lblSettingsOwnNodeStatusLight.Width, lblSettingsOwnNodeStatusLight.Location.Y);
                            });
                            if (String.Compare(lblSettingsOwnNodeSelected.Text, "✔️") == 0)
                            {
                                lblSettingsSelectedNodeStatus.Invoke((MethodInvoker)delegate
                                {
                                    lblSettingsSelectedNodeStatus.Text = "node offline";
                                    lblSettingsSelectedNodeStatus.Location = new Point((int)(750 * UIScale) - lblSettingsSelectedNodeStatus.Width, lblSettingsSelectedNodeStatus.Location.Y);
                                });
                                lblSettingsSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                                {
                                    lblSettingsSelectedNodeStatusLight.ForeColor = Color.IndianRed;
                                    lblSettingsSelectedNodeStatusLight.Location = new Point(lblSettingsSelectedNodeStatus.Location.X - lblSettingsSelectedNodeStatusLight.Width, lblSettingsSelectedNodeStatusLight.Location.Y);
                                });
                            }
                            return;
                        }
                    }
                    else
                    {
                        lblXpubScreenOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                        {
                            lblXpubScreenOwnNodeStatusLight.ForeColor = Color.IndianRed;
                        });
                        lblSettingsOwnNodeSelected.Enabled = false;
                        label174.Invoke((MethodInvoker)delegate
                        {
                            label174.Text = "your node (not connected)";
                        });
                        MoveNodeSelections();
                        lblXpubScreenOwnNodeStatus.Invoke((MethodInvoker)delegate
                        {
                            lblXpubScreenOwnNodeStatus.Text = "invalid / node offline";
                        });
                        lblSettingsOwnNodeStatus.Invoke((MethodInvoker)delegate
                        {
                            lblSettingsOwnNodeStatus.Text = "invalid / node offline";
                            lblSettingsOwnNodeStatus.Location = new Point((int)(750 * UIScale) - lblSettingsOwnNodeStatus.Width, lblSettingsOwnNodeStatus.Location.Y);
                        });
                        lblSettingsOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                        {
                            lblSettingsOwnNodeStatusLight.ForeColor = Color.IndianRed;
                            lblSettingsOwnNodeStatusLight.Location = new Point(lblSettingsOwnNodeStatus.Location.X - lblSettingsOwnNodeStatusLight.Width, lblSettingsOwnNodeStatusLight.Location.Y);
                        });
                        if (String.Compare(lblSettingsOwnNodeSelected.Text, "✔️") == 0)
                        {
                            lblSettingsSelectedNodeStatus.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsSelectedNodeStatus.Text = "invalid / node offline";
                                lblSettingsSelectedNodeStatus.Location = new Point((int)(750 * UIScale) - lblSettingsSelectedNodeStatus.Width, lblSettingsSelectedNodeStatus.Location.Y);
                            });
                            lblSettingsSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsSelectedNodeStatusLight.ForeColor = Color.IndianRed;
                                lblSettingsSelectedNodeStatusLight.Location = new Point(lblSettingsSelectedNodeStatus.Location.X - lblSettingsSelectedNodeStatusLight.Width, lblSettingsSelectedNodeStatusLight.Location.Y);
                            });
                        }
                        return;
                    }
                }

                if (textBoxXpubScreenOwnNodeURL.Text != "")
                {
                    PingReply reply = await pingSender.SendPingAsync(pingAddress).ConfigureAwait(true);
                    if (reply.Status == IPStatus.Success)
                    {
                        Uri uri = new Uri(xpubNodeURL);
                        string hostname = uri.Host;
                        lblXpubScreenOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                        {
                            lblXpubScreenOwnNodeStatusLight.ForeColor = Color.OliveDrab;
                        });
                        lblSettingsOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                        {
                            lblSettingsOwnNodeStatusLight.ForeColor = Color.OliveDrab;
                        });
                        lblSettingsOwnNodeSelected.Enabled = true;
                        headerSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                        {
                            headerSelectedNodeStatusLight.ForeColor = Color.OliveDrab;
                        });
                        if (String.Compare(lblSettingsOwnNodeSelected.Text, "✔️") == 0)
                        {
                            lblSettingsSelectedNodeStatus.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsSelectedNodeStatus.Text = hostname;
                                lblSettingsSelectedNodeStatus.Location = new Point((int)(750 * UIScale) - lblSettingsSelectedNodeStatus.Width, lblSettingsSelectedNodeStatus.Location.Y);
                            });
                            lblSettingsSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsSelectedNodeStatusLight.ForeColor = Color.OliveDrab;
                                lblSettingsSelectedNodeStatusLight.Location = new Point(lblSettingsSelectedNodeStatus.Location.X - lblSettingsSelectedNodeStatusLight.Width, lblSettingsSelectedNodeStatusLight.Location.Y);
                            });
                        }
                        label174.Invoke((MethodInvoker)delegate
                        {
                            label174.Text = $"your node ({hostname})";
                        });
                        MoveNodeSelections();
                        lblXpubScreenOwnNodeStatus.Invoke((MethodInvoker)delegate
                        {
                            lblXpubScreenOwnNodeStatus.Text = hostname;
                        });
                        lblSettingsOwnNodeStatus.Invoke((MethodInvoker)delegate
                        {
                            lblSettingsOwnNodeStatus.Text = hostname;
                            lblSettingsOwnNodeStatus.Location = new Point((int)(750 * UIScale) - lblSettingsOwnNodeStatus.Width, lblSettingsOwnNodeStatus.Location.Y);
                        });
                        lblSettingsOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                        {
                            lblSettingsOwnNodeStatusLight.Location = new Point(lblSettingsOwnNodeStatus.Location.X - lblSettingsOwnNodeStatusLight.Width, lblSettingsOwnNodeStatusLight.Location.Y);
                        });

                        // write the node url to the settings file
                        ownNode = textBoxXpubScreenOwnNodeURL.Text;
                        textBoxSettingsOwnNodeURL.Text = ownNode; // write it back to the settings screen too
                        SaveSettings();
                        textBoxSubmittedXpub.Enabled = true;
                    }
                    else
                    {
                        // not online
                        lblXpubScreenOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                        {
                            lblXpubScreenOwnNodeStatusLight.ForeColor = Color.IndianRed;
                        });
                        lblSettingsOwnNodeSelected.Enabled = false;
                        label174.Invoke((MethodInvoker)delegate
                        {
                            label174.Text = "your node (not connected)";
                        });
                        MoveNodeSelections();
                        lblXpubScreenOwnNodeStatus.Invoke((MethodInvoker)delegate
                        {
                            lblXpubScreenOwnNodeStatus.Text = "invalid / node offline";
                        });
                        if (String.Compare(lblSettingsOwnNodeSelected.Text, "✔️") == 0)
                        {
                            lblSettingsOwnNodeStatus.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsOwnNodeStatus.Text = "invalid / node offline";
                                lblSettingsOwnNodeStatus.Location = new Point((int)(750 * UIScale) - lblSettingsOwnNodeStatus.Width, lblSettingsOwnNodeStatus.Location.Y);
                            });
                            lblSettingsOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsOwnNodeStatusLight.ForeColor = Color.IndianRed;
                                lblSettingsOwnNodeStatusLight.Location = new Point(lblSettingsOwnNodeStatus.Location.X - lblSettingsOwnNodeStatusLight.Width, lblSettingsOwnNodeStatusLight.Location.Y);
                            });
                        }
                    }
                }
            }
            catch (HttpRequestException)
            {
                lblXpubScreenOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                {
                    lblXpubScreenOwnNodeStatusLight.ForeColor = Color.IndianRed;
                });
                lblSettingsOwnNodeSelected.Enabled = false;
                label174.Invoke((MethodInvoker)delegate
                {
                    label174.Text = "your node (not connected)";
                });
                MoveNodeSelections();
                lblXpubScreenOwnNodeStatus.Invoke((MethodInvoker)delegate
                {
                    lblXpubScreenOwnNodeStatus.Text = "invalid / node offline";
                });
                lblSettingsOwnNodeStatus.Invoke((MethodInvoker)delegate
                {
                    lblSettingsOwnNodeStatus.Text = "invalid / node offline";
                    lblSettingsOwnNodeStatus.Location = new Point((int)(750 * UIScale) - lblSettingsOwnNodeStatus.Width, lblSettingsOwnNodeStatus.Location.Y);
                });
                lblSettingsOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                {
                    lblSettingsOwnNodeStatusLight.ForeColor = Color.IndianRed;
                    lblSettingsOwnNodeStatusLight.Location = new Point(lblSettingsOwnNodeStatus.Location.X - lblSettingsOwnNodeStatusLight.Width, lblSettingsOwnNodeStatusLight.Location.Y);
                });
            }
        }
        #endregion
        #region set up xpub screen
        //-----DERIVE ADDRESSES FOR DIFFERENT ADDRESS TYPES, SCAN FOR TX'S AND OUTPUT TO LIST -------------------------------------
        private async void LookupXpubAsync()
        {
            try
            {
                textBoxSubmittedXpub.Enabled = false;
                textBoxXpubScreenOwnNodeURL.Enabled = false;
                // NOT SUPPORTED var newAddress = pubkey.Derive(0).Derive(0).PubKey.GetAddress(ScriptPubKeyType.TaprootBIP86, Network.Main); //Taproot P2SH

                int MaxNumberOfConsecutiveUnusedAddresses = Convert.ToInt32(numericUpDownMaxNumberOfConsecutiveUnusedAddresses.Value - 1);
                int segwitAddressesWithNonZeroBalance = 0;
                int legacyAddressesWithNonZeroBalance = 0;
                int segwitP2SHAddressesWithNonZeroBalance = 0;
                int P2SHAddressesWithNonZeroBalance = 0;
                int consecutiveUnusedAddressesForType = 0;
                int totalUnusedAddresses = 0;
                int usedSegwitAddresses = 0;
                int usedLegacyAddresses = 0;
                int usedSegwitP2SHAddresses = 0;
                int usedP2SHAddresses = 0;
                int numberOfAddressesChecked = 0;
                double segwitAddressesConfirmedUnspentBalance = 0;
                double legacyAddressesConfirmedUnspentBalance = 0;
                double segwitP2SHAddressesConfirmedUnspentBalance = 0;
                double P2SHAddressesConfirmedUnspentBalance = 0;
                double segwitTotalConfirmedReceived = 0;
                double legacyTotalConfirmedReceived = 0;
                double segwitP2SHTotalConfirmedReceived = 0;
                double P2SHTotalConfirmedReceived = 0;
                double segwitTotalConfirmedSpent = 0;
                double legacyTotalConfirmedSpent = 0;
                double segwitP2SHTotalConfirmedSpent = 0;
                double P2SHTotalConfirmedSpent = 0;
                double xpubTotalConfirmedReceived = 0;
                double xpubTotalConfirmedSpent = 0;
                double xpubTotalConfirmedUnspent = 0;

                numberOfAddressesChecked = 0;
                int checkingAddressCount = 1;
                List<NBitcoin.BitcoinAddress> segwitAddresses = new List<NBitcoin.BitcoinAddress>();
                List<NBitcoin.BitcoinAddress> legacyAddresses = new List<NBitcoin.BitcoinAddress>();
                List<NBitcoin.BitcoinAddress> segwitP2SHAddresses = new List<NBitcoin.BitcoinAddress>();
                List<NBitcoin.BitcoinAddress> P2SHAddresses = new List<NBitcoin.BitcoinAddress>();

                int DerivationPath = 0;
                int NumberOfDerivationPathsToCheck = Convert.ToInt32(numberUpDownDerivationPathsToCheck.Value);

                progressBarCheckEachAddressType.Maximum = MaxNumberOfConsecutiveUnusedAddresses + 1;
                progressBarCheckAllAddressTypes.Maximum = (MaxNumberOfConsecutiveUnusedAddresses + 1) * 4 * NumberOfDerivationPathsToCheck;

                SuspendLayout();
                btnViewAddressFromXpub.Invoke((MethodInvoker)delegate
                {
                    btnViewAddressFromXpub.Visible = false;
                });

                Control[] controlsToShow = { panelXpubResults, panel101, panelXpubContainer, listViewXpubAddresses, progressBarCheckAllAddressTypes, progressBarCheckEachAddressType, lblCheckAllAddressTypesCount, lblCheckEachAddressTypeCount, label140, label141, panelXpubScrollContainer };
                foreach (Control control in controlsToShow)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.Visible = true;
                    });
                }

                panelXpubScrollContainer.Invoke((MethodInvoker)delegate
                {
                    panelXpubScrollContainer.BringToFront();
                });
                panelXpubAllResults.Invoke((MethodInvoker)delegate
                {
                    panelXpubAllResults.Visible = true;
                });

                Control[] controlsToRefresh = { panelXpub, panel99, panel101, panelXpubContainer, panelXpubScrollbarInner, panelXpubResults, panelXpubScrollContainer, panelXpubAllResults };
                foreach (Control control in controlsToRefresh)
                {
                    if (control.InvokeRequired)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.Refresh();
                        });
                    }
                    else
                    {
                        control.Refresh();
                    }
                }
                ResumeLayout(false);

                string submittedXpub = Convert.ToString(textBoxSubmittedXpub.Text);
                #region set up the listview
                //LIST VIEW
                listViewXpubAddresses.Invoke((MethodInvoker)delegate
                {
                    listViewXpubAddresses.Items.Clear(); // remove any data that may be there already
                });
                listViewXpubAddresses.GetType().InvokeMember("DoubleBuffered", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.SetProperty, null, listViewXpubAddresses, new object[] { true });

                // Check if the column headers already
                if (listViewXpubAddresses.Columns.Count == 0)
                {
                    listViewXpubAddresses.Invoke((MethodInvoker)delegate
                    {
                        listViewXpubAddresses.Columns.Add("Address", (int)(116 * UIScale));
                    });
                }
                if (listViewXpubAddresses.Columns.Count == 1)
                {
                    listViewXpubAddresses.Invoke((MethodInvoker)delegate
                    {
                        listViewXpubAddresses.Columns.Add("TX's", (int)(35 * UIScale));
                    });
                }
                if (listViewXpubAddresses.Columns.Count == 2)
                {
                    listViewXpubAddresses.Invoke((MethodInvoker)delegate
                    {
                        listViewXpubAddresses.Columns.Add("Received", (int)(100 * UIScale));
                    });
                }
                if (listViewXpubAddresses.Columns.Count == 3)
                {
                    listViewXpubAddresses.Invoke((MethodInvoker)delegate
                    {
                        listViewXpubAddresses.Columns.Add("Spent", (int)(100 * UIScale));
                    });
                }
                if (listViewXpubAddresses.Columns.Count == 4)
                {
                    listViewXpubAddresses.Invoke((MethodInvoker)delegate
                    {
                        listViewXpubAddresses.Columns.Add("Unspent", (int)(100 * UIScale));
                    });
                }
                #endregion
                #region Taproot - not yet implemented :(
                #endregion
                #region P2WPKH (Bech32 SegWit)
                while (DerivationPath != NumberOfDerivationPathsToCheck)
                {
                    lblXpubStatus.Invoke((MethodInvoker)delegate
                    {
                        lblXpubStatus.Text = "Deriving P2WPKH Bech32 addresses";
                    });
                    for (uint i = 0; i < 500; i++)
                    {
                        var pubkey = ExtPubKey.Parse(submittedXpub, Network.Main);
                        uint index = i; // increment the index for each iteration
                        var BitcoinAddress = pubkey.Derive(Convert.ToUInt32(DerivationPath)).Derive(index).PubKey.GetAddress(ScriptPubKeyType.Segwit, Network.Main); //Segwit 
                        segwitAddresses.Add(BitcoinAddress);
                    }

                    label140.Invoke((MethodInvoker)delegate
                    {
                        label140.Text = $"P2WPKH path {DerivationPath}";
                    });

                    // query the balance for each address
                    foreach (NBitcoin.BitcoinAddress address in segwitAddresses) // (we break when we run out of used addresses)
                    {
                        string truncatedAddressForDisplay = $"{address.ToString().Substring(0, 10)}...";
                        lblXpubStatus.Invoke((MethodInvoker)delegate
                        {
                            lblXpubStatus.Text = $"Deriving P2WPKH Bech32 addresses\r\nChecking address {checkingAddressCount} ({truncatedAddressForDisplay})\r\nConsecutive unused addresses: {consecutiveUnusedAddressesForType}";
                        });
                        var request = $"address/{address}";
                        var RequestURL = $"{textBoxXpubScreenOwnNodeURL.Text}{request}";
                        var client = new HttpClient();
                        LightUpNodeLight();
                        var response = await client.GetAsync($"{RequestURL}").ConfigureAwait(true); // get the JSON to get address balance and no of transactions etc
                        if (!response.IsSuccessStatusCode)
                        {
                            lblSettingsSelectedNodeStatus.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsSelectedNodeStatus.Text = "Disconnected/error";
                                lblSettingsSelectedNodeStatus.Location = new Point((int)(750 * UIScale) - lblSettingsSelectedNodeStatus.Width, lblSettingsSelectedNodeStatus.Location.Y);
                            });
                            lblSettingsSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsSelectedNodeStatusLight.ForeColor = Color.Red;
                                lblSettingsSelectedNodeStatusLight.Location = new Point(lblSettingsSelectedNodeStatus.Location.X - lblSettingsSelectedNodeStatusLight.Width, lblSettingsSelectedNodeStatusLight.Location.Y);
                            });
                            lblErrorMessage.Invoke((MethodInvoker)delegate
                            {
                                lblErrorMessage.Text = "Node offline/disconnected: ";
                            });
                            return;
                        }
                        var jsonData = await response.Content.ReadAsStringAsync().ConfigureAwait(true);
                        var addressData = JObject.Parse(jsonData);

                        // transactions for the address
                        string lastSeenTxId = "";
                        decimal TotalInForAllTXOnThisAddress = 0;
                        decimal TotalOutForAllTXOnThisAddress = 0;
                        int totalTXForAddress = Convert.ToInt32(addressData["chain_stats"]!["tx_count"]);
                        int txProcessedForThisAddress = 0;

                        while (txProcessedForThisAddress != totalTXForAddress)
                        {
                            _transactionsForXpubAddressService = new TransactionsForXpubAddressService(textBoxXpubScreenOwnNodeURL.Text);
                            LightUpNodeLight();
                            var transactionsJson = await _transactionsForXpubAddressService.GetTransactionsForXpubAddressAsync(Convert.ToString(address), "chain", lastSeenTxId).ConfigureAwait(true);
                            if (!string.IsNullOrEmpty(transactionsJson))
                            {
                                var transactions = JsonConvert.DeserializeObject<List<AddressTransactions>>(transactionsJson);
                                foreach (AddressTransactions transaction in transactions!)
                                {
                                    decimal balanceChangeVin = 0; // will hold net result of inputs to this address
                                    decimal balanceChangeVout = 0; // will hold net result of outputs to this address    
                                    balanceChangeVin = (decimal)transaction.Vout
                                        .Where(v => String.Compare(v.Scriptpubkey_address, Convert.ToString(address)) == 0)
                                        .Sum(v => v.Value);
                                    balanceChangeVout = (decimal)transaction.Vin
                                        .Where(v => v.Prevout != null && String.Compare(v.Prevout.Scriptpubkey_address, Convert.ToString(address)) == 0)
                                        .Sum(v => v.Prevout!.Value);

                                    TotalInForAllTXOnThisAddress += balanceChangeVin;
                                    TotalOutForAllTXOnThisAddress += balanceChangeVout;
                                    txProcessedForThisAddress++;
                                }
                                if (String.Compare(transactions.Last().Status!.Confirmed, "true") == 0) // there might be more transactions to get. 
                                {
                                    lastSeenTxId = transactions.Last().Txid!; // so we can carry on the next api call where we left off
                                }
                                else
                                {
                                    lastSeenTxId = "";
                                }
                            }
                        }

                        string ConfirmedTransactionCount = Convert.ToString(addressData["chain_stats"]!["tx_count"]);
                        string ConfirmedReceived = Convert.ToString(ConvertSatsToBitcoin(Convert.ToString(TotalInForAllTXOnThisAddress)).ToString("0.00000000"));
                        string ConfirmedSpent = Convert.ToString(ConvertSatsToBitcoin(Convert.ToString(TotalOutForAllTXOnThisAddress)).ToString("0.00000000"));
                        var confirmedReceivedForCalc = Convert.ToDouble(TotalInForAllTXOnThisAddress);
                        var confirmedSpentForCalc = Convert.ToDouble(TotalOutForAllTXOnThisAddress);
                        var confirmedUnspentResult = confirmedReceivedForCalc - confirmedSpentForCalc;
                        string ConfirmedUnspent = ConvertSatsToBitcoin(Convert.ToString(confirmedUnspentResult)).ToString("0.00000000");

                        ListViewItem item = new ListViewItem(Convert.ToString(address)); // create new row
                        item.SubItems.Add(ConfirmedTransactionCount.ToString());
                        item.SubItems.Add(ConfirmedReceived.ToString());
                        item.SubItems.Add(ConfirmedSpent.ToString());
                        item.SubItems.Add(ConfirmedUnspent.ToString());
                        listViewXpubAddresses.Invoke((MethodInvoker)delegate
                        {
                            listViewXpubAddresses.Items.Add(item); // add row
                            numberOfAddressesChecked++;
                        });

                        if (listViewXpubAddresses.Items.Count > 27)
                        {
                            btnXpubAddressesUp.Enabled = true;
                            btnXpubAddressesDown.Enabled = true;
                        }
                        else
                        {
                            btnXpubAddressesUp.Enabled = false;
                            btnXpubAddressesDown.Enabled = false;
                        }

                        // Get the height of each item to set height of whole listview
                        int rowHeight = listViewXpubAddresses.Margin.Vertical + listViewXpubAddresses.Padding.Vertical + listViewXpubAddresses.GetItemRect(0).Height;
                        int itemCount = listViewXpubAddresses.Items.Count; // Get the number of items in the ListBox
                        int listBoxHeight = (itemCount + 2) * rowHeight; // Calculate the height of the ListBox (the extra 2 gives room for the header)

                        listViewXpubAddresses.Invoke((MethodInvoker)delegate
                        {
                            listViewXpubAddresses.Height = listBoxHeight; // Set the height of the ListBox
                        });
                        panelXpubContainer.VerticalScroll.Minimum = 0;

                        string segwitTotalConfirmedReceivedDisplay = "";
                        string segwitTotalConfirmedSpentDisplay = "";
                        string segwitAddressesConfirmedUnspentBalanceDisplay = "";

                        if (confirmedReceivedForCalc == 0)
                        {
                            consecutiveUnusedAddressesForType++; // unused addresses for this type of address
                            totalUnusedAddresses++; // overall count of unused addresses

                            // progress bar for this address type
                            if (consecutiveUnusedAddressesForType < progressBarCheckEachAddressType.Maximum)
                            {
                                progressBarCheckEachAddressType.Value = consecutiveUnusedAddressesForType;
                            }
                            else
                            {
                                progressBarCheckEachAddressType.Value = progressBarCheckEachAddressType.Maximum;
                            }
                            lblCheckEachAddressTypeCount.Invoke((MethodInvoker)delegate
                            {
                                lblCheckEachAddressTypeCount.Text = $"{consecutiveUnusedAddressesForType}/{MaxNumberOfConsecutiveUnusedAddresses + 1}";
                            });
                            // progress bar for all address types
                            if (totalUnusedAddresses < progressBarCheckAllAddressTypes.Maximum)
                            {
                                progressBarCheckAllAddressTypes.Value = totalUnusedAddresses;
                            }
                            else
                            {
                                progressBarCheckAllAddressTypes.Value = progressBarCheckAllAddressTypes.Maximum;
                            }
                            lblCheckAllAddressTypesCount.Invoke((MethodInvoker)delegate
                            {
                                lblCheckAllAddressTypesCount.Text = $"{totalUnusedAddresses}/{progressBarCheckAllAddressTypes.Maximum}";
                            });
                            // assume there are no more used addresses at this point
                            if (consecutiveUnusedAddressesForType > MaxNumberOfConsecutiveUnusedAddresses)
                            {
                                break;
                            }
                        }
                        else
                        {
                            usedSegwitAddresses++;
                            consecutiveUnusedAddressesForType = 0;
                            totalUnusedAddresses = DerivationPath * (MaxNumberOfConsecutiveUnusedAddresses + 1);
                        }

                        if (confirmedReceivedForCalc > 0)
                        {
                            consecutiveUnusedAddressesForType = 0;
                            segwitTotalConfirmedReceived += confirmedReceivedForCalc;
                            xpubTotalConfirmedReceived += confirmedReceivedForCalc;
                        }

                        if (confirmedSpentForCalc > 0)
                        {
                            consecutiveUnusedAddressesForType = 0;
                            segwitTotalConfirmedSpent += confirmedSpentForCalc;
                            xpubTotalConfirmedSpent += confirmedSpentForCalc;
                        }

                        if (confirmedUnspentResult > 0)
                        {
                            consecutiveUnusedAddressesForType = 0;
                            xpubTotalConfirmedUnspent += confirmedUnspentResult;
                            segwitAddressesWithNonZeroBalance++;
                            segwitAddressesConfirmedUnspentBalance += confirmedUnspentResult;

                        }
                        checkingAddressCount++;
                        lblSegwitUsedAddresses.Invoke((MethodInvoker)delegate
                        {
                            lblSegwitUsedAddresses.Text = $"{usedSegwitAddresses} used";
                        });
                        // format values before displaying them in the summary
                        if (segwitTotalConfirmedReceived > 0)
                        {
                            segwitTotalConfirmedReceivedDisplay = ConvertSatsToBitcoin(Convert.ToString(segwitTotalConfirmedReceived)).ToString("0.00000000");
                        }
                        else
                        {
                            segwitTotalConfirmedReceivedDisplay = "0";
                        }

                        if (segwitTotalConfirmedSpent > 0)
                        {
                            segwitTotalConfirmedSpentDisplay = ConvertSatsToBitcoin(Convert.ToString(segwitTotalConfirmedSpent)).ToString("0.00000000");
                        }
                        else
                        {
                            segwitTotalConfirmedSpentDisplay = "0";
                        }

                        if (segwitAddressesConfirmedUnspentBalance > 0)
                        {
                            segwitAddressesConfirmedUnspentBalanceDisplay = ConvertSatsToBitcoin(Convert.ToString(segwitAddressesConfirmedUnspentBalance)).ToString("0.00000000");
                        }
                        else
                        {
                            segwitAddressesConfirmedUnspentBalanceDisplay = "0";
                        }
                        lblSegwitSummary.Invoke((MethodInvoker)delegate
                        {
                            lblSegwitSummary.Text = $"{segwitTotalConfirmedReceivedDisplay}, {segwitTotalConfirmedSpentDisplay}, {segwitAddressesConfirmedUnspentBalanceDisplay}";
                        });
                    }
                    consecutiveUnusedAddressesForType = 0;
                    checkingAddressCount = 1;
                    DerivationPath++;
                    segwitAddresses.Clear();

                }
                DerivationPath = 0;
                #endregion
                #region P2PKH legacy
                while (DerivationPath != NumberOfDerivationPathsToCheck)
                {
                    lblXpubStatus.Invoke((MethodInvoker)delegate
                    {
                        lblXpubStatus.Text = "Deriving P2PKH legacy addresses";
                    });
                    for (uint i = 0; i < 500; i++)
                    {
                        var pubkey = ExtPubKey.Parse(submittedXpub, Network.Main);
                        uint index = i; // increment the index for each iteration
                        var BitcoinAddress = pubkey.Derive(Convert.ToUInt32(DerivationPath)).Derive(index).PubKey.GetAddress(ScriptPubKeyType.Legacy, Network.Main); //Legacy 
                        legacyAddresses.Add(BitcoinAddress);
                    }


                    // query the balance for each address
                    foreach (NBitcoin.BitcoinAddress address in legacyAddresses) // (we break when we run out of addresses with a balance)
                    {
                        string truncatedAddressForDisplay = $"{address.ToString().Substring(0, 10)}...";
                        lblXpubStatus.Invoke((MethodInvoker)delegate
                        {
                            lblXpubStatus.Text = $"Deriving P2PKH legacy addresses\r\nChecking address {checkingAddressCount} ({truncatedAddressForDisplay})\r\nConsecutive unused addresses: {consecutiveUnusedAddressesForType}";
                        });
                        var request = $"address/{address}";
                        var RequestURL = $"{textBoxXpubScreenOwnNodeURL.Text}{request}";
                        var client = new HttpClient();
                        LightUpNodeLight();
                        var response = await client.GetAsync($"{RequestURL}").ConfigureAwait(true); // get the JSON to get address balance and no of transactions etc
                        if (!response.IsSuccessStatusCode)
                        {
                            lblSettingsSelectedNodeStatus.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsSelectedNodeStatus.Text = "Disconnected/error";
                                lblSettingsSelectedNodeStatus.Location = new Point((int)(750 * UIScale) - lblSettingsSelectedNodeStatus.Width, lblSettingsSelectedNodeStatus.Location.Y);
                            });
                            lblSettingsSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsSelectedNodeStatusLight.ForeColor = Color.Red;
                                lblSettingsSelectedNodeStatusLight.Location = new Point(lblSettingsSelectedNodeStatus.Location.X - lblSettingsSelectedNodeStatusLight.Width, lblSettingsSelectedNodeStatusLight.Location.Y);
                            });
                            lblErrorMessage.Invoke((MethodInvoker)delegate
                            {
                                lblErrorMessage.Text = "Node offline/disconnected: ";
                            });
                            return;
                        }
                        var jsonData = await response.Content.ReadAsStringAsync().ConfigureAwait(true);
                        var addressData = JObject.Parse(jsonData);

                        // transactions for the address
                        string lastSeenTxId = "";
                        decimal TotalInForAllTXOnThisAddress = 0;
                        decimal TotalOutForAllTXOnThisAddress = 0;
                        int totalTXForAddress = Convert.ToInt32(addressData["chain_stats"]!["tx_count"]);
                        int txProcessedForThisAddress = 0;

                        while (txProcessedForThisAddress != totalTXForAddress)
                        {
                            _transactionsForXpubAddressService = new TransactionsForXpubAddressService(textBoxXpubScreenOwnNodeURL.Text);
                            LightUpNodeLight();
                            var transactionsJson = await _transactionsForXpubAddressService.GetTransactionsForXpubAddressAsync(Convert.ToString(address), "chain", lastSeenTxId).ConfigureAwait(true);
                            if (!string.IsNullOrEmpty(transactionsJson))
                            {
                                var transactions = JsonConvert.DeserializeObject<List<AddressTransactions>>(transactionsJson);
                                foreach (AddressTransactions transaction in transactions!)
                                {
                                    decimal balanceChangeVin = 0; // will hold net result of inputs to this address
                                    decimal balanceChangeVout = 0; // will hold net result of outputs to this address    
                                    balanceChangeVin = (decimal)transaction.Vout // value of all outputs where address is the provided address
                                        .Where(v => String.Compare(v.Scriptpubkey_address, Convert.ToString(address)) == 0)
                                        .Sum(v => v.Value);
                                    balanceChangeVout = (decimal)transaction.Vin
                                        .Where(v => v.Prevout != null && String.Compare(v.Prevout.Scriptpubkey_address, Convert.ToString(address)) == 0)
                                        .Sum(v => v.Prevout!.Value);
                                    TotalInForAllTXOnThisAddress += balanceChangeVin;
                                    TotalOutForAllTXOnThisAddress += balanceChangeVout;
                                    txProcessedForThisAddress++;
                                }
                                if (String.Compare(transactions.Last().Status!.Confirmed, "true") == 0)// there might be more transactions to get. 
                                {
                                    lastSeenTxId = transactions.Last().Txid!; // so we can carry on the next api call where we left off
                                }
                                else
                                {
                                    lastSeenTxId = "";
                                }
                            }
                        }

                        string ConfirmedTransactionCount = Convert.ToString(addressData["chain_stats"]!["tx_count"]);
                        string ConfirmedReceived = Convert.ToString(ConvertSatsToBitcoin(Convert.ToString(TotalInForAllTXOnThisAddress)).ToString("0.00000000"));
                        string ConfirmedSpent = Convert.ToString(ConvertSatsToBitcoin(Convert.ToString(TotalOutForAllTXOnThisAddress)).ToString("0.00000000"));
                        var confirmedReceivedForCalc = Convert.ToDouble(TotalInForAllTXOnThisAddress);
                        var confirmedSpentForCalc = Convert.ToDouble(TotalOutForAllTXOnThisAddress);
                        var confirmedUnspentResult = confirmedReceivedForCalc - confirmedSpentForCalc;
                        string ConfirmedUnspent = ConvertSatsToBitcoin(Convert.ToString(confirmedUnspentResult)).ToString("0.00000000");

                        ListViewItem item = new ListViewItem(Convert.ToString(address)); // create new row
                        item.SubItems.Add(ConfirmedTransactionCount.ToString());
                        item.SubItems.Add(ConfirmedReceived.ToString());
                        item.SubItems.Add(ConfirmedSpent.ToString());
                        item.SubItems.Add(ConfirmedUnspent.ToString());
                        listViewXpubAddresses.Invoke((MethodInvoker)delegate
                        {
                            listViewXpubAddresses.Items.Add(item); // add row
                            numberOfAddressesChecked++;
                        });
                        if (listViewXpubAddresses.Items.Count > 27)
                        {
                            btnXpubAddressesUp.Enabled = true;
                            btnXpubAddressesDown.Enabled = true;
                        }
                        else
                        {
                            btnXpubAddressesUp.Enabled = false;
                            btnXpubAddressesDown.Enabled = false;
                        }

                        // Get the height of each item to set height of whole listview
                        int rowHeight = listViewXpubAddresses.Margin.Vertical + listViewXpubAddresses.Padding.Vertical + listViewXpubAddresses.GetItemRect(0).Height;
                        int itemCount = listViewXpubAddresses.Items.Count; // Get the number of items in the ListBox
                        int listBoxHeight = (itemCount + 2) * rowHeight; // Calculate the height of the ListBox (the extra 2 gives room for the header)
                        listViewXpubAddresses.Invoke((MethodInvoker)delegate
                        {
                            listViewXpubAddresses.Height = listBoxHeight; // Set the height of the ListBox
                        });
                        panelXpubContainer.VerticalScroll.Minimum = 0;

                        string legacyTotalConfirmedReceivedDisplay = "";
                        string legacyTotalConfirmedSpentDisplay = "";
                        string legacyAddressesConfirmedUnspentBalanceDisplay = "";

                        label140.Invoke((MethodInvoker)delegate
                        {
                            label140.Text = $"P2PKH path {DerivationPath}";
                        });

                        if (confirmedReceivedForCalc == 0)
                        {
                            consecutiveUnusedAddressesForType++; // unused addresses for this type of address
                            totalUnusedAddresses++; // overall count of unused addresses

                            // progress bar for this address type
                            if (consecutiveUnusedAddressesForType < progressBarCheckEachAddressType.Maximum)
                            {
                                progressBarCheckEachAddressType.Value = consecutiveUnusedAddressesForType;
                            }
                            else
                            {
                                progressBarCheckEachAddressType.Value = progressBarCheckEachAddressType.Maximum;
                            }
                            lblCheckEachAddressTypeCount.Invoke((MethodInvoker)delegate
                            {
                                lblCheckEachAddressTypeCount.Text = $"{consecutiveUnusedAddressesForType}/{MaxNumberOfConsecutiveUnusedAddresses + 1}";
                            });
                            // progress bar for all address types
                            if (totalUnusedAddresses < progressBarCheckAllAddressTypes.Maximum)
                            {
                                progressBarCheckAllAddressTypes.Value = totalUnusedAddresses;
                            }
                            else
                            {
                                progressBarCheckAllAddressTypes.Value = progressBarCheckAllAddressTypes.Maximum;
                            }
                            lblCheckAllAddressTypesCount.Invoke((MethodInvoker)delegate
                            {
                                lblCheckAllAddressTypesCount.Text = $"{totalUnusedAddresses}/{progressBarCheckAllAddressTypes.Maximum}";

                            });

                            // assume there are no more used addresses at this point
                            if (consecutiveUnusedAddressesForType > MaxNumberOfConsecutiveUnusedAddresses)
                            {
                                break;
                            }
                        }
                        else
                        {
                            usedLegacyAddresses++;
                            consecutiveUnusedAddressesForType = 0;  //
                            totalUnusedAddresses = (NumberOfDerivationPathsToCheck + DerivationPath) * (MaxNumberOfConsecutiveUnusedAddresses + 1);  // this is the second address type, so reset to account for that, rather than 0
                        }

                        if (confirmedReceivedForCalc > 0)
                        {
                            consecutiveUnusedAddressesForType = 0;
                            legacyTotalConfirmedReceived += confirmedReceivedForCalc;
                            xpubTotalConfirmedReceived += confirmedReceivedForCalc;
                        }

                        if (confirmedSpentForCalc > 0)
                        {
                            consecutiveUnusedAddressesForType = 0;
                            legacyTotalConfirmedSpent += confirmedSpentForCalc;
                            xpubTotalConfirmedSpent += confirmedSpentForCalc;
                        }

                        if (confirmedUnspentResult > 0)
                        {
                            consecutiveUnusedAddressesForType = 0;
                            xpubTotalConfirmedUnspent += confirmedUnspentResult;
                            legacyAddressesWithNonZeroBalance++;
                            legacyAddressesConfirmedUnspentBalance += confirmedUnspentResult;

                        }
                        checkingAddressCount++;
                        lblLegacyUsedAddresses.Invoke((MethodInvoker)delegate
                        {
                            lblLegacyUsedAddresses.Text = $"{usedLegacyAddresses} used";
                        });
                        // format values before displaying them in the summary
                        if (legacyTotalConfirmedReceived > 0)
                        {
                            legacyTotalConfirmedReceivedDisplay = ConvertSatsToBitcoin(Convert.ToString(legacyTotalConfirmedReceived)).ToString("0.00000000");
                        }
                        else
                        {
                            legacyTotalConfirmedReceivedDisplay = "0";
                        }

                        if (legacyTotalConfirmedSpent > 0)
                        {
                            legacyTotalConfirmedSpentDisplay = ConvertSatsToBitcoin(Convert.ToString(legacyTotalConfirmedSpent)).ToString("0.00000000");
                        }
                        else
                        {
                            legacyTotalConfirmedSpentDisplay = "0";
                        }

                        if (legacyAddressesConfirmedUnspentBalance > 0)
                        {
                            legacyAddressesConfirmedUnspentBalanceDisplay = ConvertSatsToBitcoin(Convert.ToString(legacyAddressesConfirmedUnspentBalance)).ToString("0.00000000");
                        }
                        else
                        {
                            legacyAddressesConfirmedUnspentBalanceDisplay = "0";
                        }
                        lblLegacySummary.Invoke((MethodInvoker)delegate
                        {
                            lblLegacySummary.Text = $"{legacyTotalConfirmedReceivedDisplay}, {legacyTotalConfirmedSpentDisplay}, {legacyAddressesConfirmedUnspentBalanceDisplay}";
                        });
                    }
                    consecutiveUnusedAddressesForType = 0;
                    checkingAddressCount = 1;
                    DerivationPath++;
                    legacyAddresses.Clear();
                }
                DerivationPath = 0;
                #endregion
                #region P2SH-P2WPKH
                while (DerivationPath != NumberOfDerivationPathsToCheck)
                {
                    lblXpubStatus.Invoke((MethodInvoker)delegate
                    {
                        lblXpubStatus.Text = "Deriving P2SH-P2WPKH addresses";
                    });
                    for (uint i = 0; i < 500; i++)
                    {
                        var pubkey = ExtPubKey.Parse(submittedXpub, Network.Main);
                        uint index = i; // increment the index for each iteration
                        var BitcoinAddress = pubkey.Derive(Convert.ToUInt32(DerivationPath)).Derive(index).PubKey.GetAddress(ScriptPubKeyType.SegwitP2SH, Network.Main); //Segwit P2SH
                        segwitP2SHAddresses.Add(BitcoinAddress);
                    }

                    // query the balance for each address
                    foreach (NBitcoin.BitcoinAddress address in segwitP2SHAddresses) // (we break when we run out of addresses with a balance)
                    {
                        string truncatedAddressForDisplay = $"{address.ToString().Substring(0, 10)}...";
                        lblXpubStatus.Invoke((MethodInvoker)delegate
                        {
                            lblXpubStatus.Text = $"Deriving P2SH-P2WPKH addresses\r\nChecking address {checkingAddressCount} ({truncatedAddressForDisplay})\r\nConsecutive unused addresses: {consecutiveUnusedAddressesForType}";
                        });
                        var request = $"address/{address}";
                        var RequestURL = $"{textBoxXpubScreenOwnNodeURL.Text}{request}";
                        var client = new HttpClient();
                        LightUpNodeLight();
                        var response = await client.GetAsync($"{RequestURL}").ConfigureAwait(true); // get the JSON to get address balance and no of transactions etc
                        if (!response.IsSuccessStatusCode)
                        {
                            lblSettingsSelectedNodeStatus.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsSelectedNodeStatus.Text = "Disconnected/error";
                                lblSettingsSelectedNodeStatus.Location = new Point((int)(750 * UIScale) - lblSettingsSelectedNodeStatus.Width, lblSettingsSelectedNodeStatus.Location.Y);
                            });
                            lblSettingsSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsSelectedNodeStatusLight.ForeColor = Color.Red;
                                lblSettingsSelectedNodeStatusLight.Location = new Point(lblSettingsSelectedNodeStatus.Location.X - lblSettingsSelectedNodeStatusLight.Width, lblSettingsSelectedNodeStatusLight.Location.Y);
                            });
                            lblErrorMessage.Invoke((MethodInvoker)delegate
                            {
                                lblErrorMessage.Text = "Node offline/disconnected: ";
                            });
                            return;
                        }
                        var jsonData = await response.Content.ReadAsStringAsync().ConfigureAwait(true);
                        var addressData = JObject.Parse(jsonData);

                        // transactions for the address
                        string lastSeenTxId = "";
                        decimal TotalInForAllTXOnThisAddress = 0;
                        decimal TotalOutForAllTXOnThisAddress = 0;
                        int totalTXForAddress = Convert.ToInt32(addressData["chain_stats"]!["tx_count"]);
                        int txProcessedForThisAddress = 0;

                        while (txProcessedForThisAddress != totalTXForAddress)
                        {
                            _transactionsForXpubAddressService = new TransactionsForXpubAddressService(textBoxXpubScreenOwnNodeURL.Text);
                            LightUpNodeLight();
                            var transactionsJson = await _transactionsForXpubAddressService.GetTransactionsForXpubAddressAsync(Convert.ToString(address), "chain", lastSeenTxId).ConfigureAwait(true);
                            if (!string.IsNullOrEmpty(transactionsJson))
                            {
                                var transactions = JsonConvert.DeserializeObject<List<AddressTransactions>>(transactionsJson);
                                foreach (AddressTransactions transaction in transactions!)
                                {
                                    decimal balanceChangeVin = 0; // will hold net result of inputs to this address
                                    decimal balanceChangeVout = 0; // will hold net result of outputs to this address    
                                    balanceChangeVout = (decimal)transaction.Vout
                                        .Where(v => String.Compare(v.Scriptpubkey_address, Convert.ToString(address)) == 0)
                                        .Sum(v => v.Value);
                                    balanceChangeVin = (decimal)transaction.Vin
                                        .Where(v => v.Prevout != null && String.Compare(v.Prevout.Scriptpubkey_address, Convert.ToString(address)) == 0)
                                        .Sum(v => v.Prevout!.Value);
                                    TotalInForAllTXOnThisAddress += balanceChangeVin;
                                    TotalOutForAllTXOnThisAddress += balanceChangeVout;
                                    txProcessedForThisAddress++;
                                }
                                if (String.Compare(transactions.Last().Status!.Confirmed, "true") == 0) // there might be more transactions to get. 
                                {
                                    lastSeenTxId = transactions.Last().Txid!; // so we can carry on the next api call where we left off
                                }
                                else
                                {
                                    lastSeenTxId = "";
                                }
                            }
                        }

                        string ConfirmedTransactionCount = Convert.ToString(addressData["chain_stats"]!["tx_count"]);
                        string ConfirmedReceived = Convert.ToString(TotalInForAllTXOnThisAddress.ToString("0.00000000"));
                        string ConfirmedSpent = Convert.ToString(TotalOutForAllTXOnThisAddress.ToString("0.00000000"));

                        var confirmedReceivedForCalc = Convert.ToDouble(TotalInForAllTXOnThisAddress);
                        var confirmedSpentForCalc = Convert.ToDouble(TotalOutForAllTXOnThisAddress);
                        var confirmedUnspentResult = confirmedReceivedForCalc - confirmedSpentForCalc;

                        string ConfirmedUnspent = ConvertSatsToBitcoin(Convert.ToString(confirmedUnspentResult)).ToString("0.00000000");

                        ListViewItem item = new ListViewItem(Convert.ToString(address)); // create new row
                        item.SubItems.Add(ConfirmedTransactionCount.ToString());
                        item.SubItems.Add(ConvertSatsToBitcoin(ConfirmedReceived.ToString()).ToString("0.00000000"));
                        item.SubItems.Add(ConvertSatsToBitcoin(ConfirmedSpent.ToString()).ToString("0.00000000"));
                        item.SubItems.Add(ConfirmedUnspent.ToString());
                        listViewXpubAddresses.Invoke((MethodInvoker)delegate
                        {
                            listViewXpubAddresses.Items.Add(item); // add row
                            numberOfAddressesChecked++;
                        });
                        if (listViewXpubAddresses.Items.Count > 27)
                        {
                            btnXpubAddressesUp.Enabled = true;
                            btnXpubAddressesDown.Enabled = true;
                        }
                        else
                        {
                            btnXpubAddressesUp.Enabled = false;
                            btnXpubAddressesDown.Enabled = false;
                        }

                        // Get the height of each item to set height of whole listview
                        int rowHeight = listViewXpubAddresses.Margin.Vertical + listViewXpubAddresses.Padding.Vertical + listViewXpubAddresses.GetItemRect(0).Height;
                        int itemCount = listViewXpubAddresses.Items.Count; // Get the number of items in the ListBox
                        int listBoxHeight = (itemCount + 2) * rowHeight; // Calculate the height of the ListBox (the extra 2 gives room for the header)

                        listViewXpubAddresses.Invoke((MethodInvoker)delegate
                        {
                            listViewXpubAddresses.Height = listBoxHeight; // Set the height of the ListBox
                        });
                        panelXpubContainer.VerticalScroll.Minimum = 0;

                        label140.Invoke((MethodInvoker)delegate
                        {
                            label140.Text = $"P2SH-P2WPKH path {DerivationPath}";
                        });

                        string segwitP2SHTotalConfirmedReceivedDisplay = "";
                        string segwitP2SHTotalConfirmedSpentDisplay = "";
                        string segwitP2SHAddressesConfirmedUnspentBalanceDisplay = "";

                        if (confirmedReceivedForCalc == 0)
                        {
                            consecutiveUnusedAddressesForType++; // unused addresses for this type of address
                            totalUnusedAddresses++; // overall count of unused addresses

                            // progress bar for this address type
                            if (consecutiveUnusedAddressesForType < progressBarCheckEachAddressType.Maximum)
                            {
                                progressBarCheckEachAddressType.Value = consecutiveUnusedAddressesForType;
                            }
                            else
                            {
                                progressBarCheckEachAddressType.Value = progressBarCheckEachAddressType.Maximum;
                            }
                            lblCheckEachAddressTypeCount.Invoke((MethodInvoker)delegate
                            {
                                lblCheckEachAddressTypeCount.Text = $"{consecutiveUnusedAddressesForType}/{MaxNumberOfConsecutiveUnusedAddresses + 1}";
                            });
                            // progress bar for all address types
                            if (totalUnusedAddresses < progressBarCheckAllAddressTypes.Maximum)
                            {
                                progressBarCheckAllAddressTypes.Value = totalUnusedAddresses;
                            }
                            else
                            {
                                progressBarCheckAllAddressTypes.Value = progressBarCheckAllAddressTypes.Maximum;
                            }
                            lblCheckAllAddressTypesCount.Invoke((MethodInvoker)delegate
                            {
                                lblCheckAllAddressTypesCount.Text = $"{totalUnusedAddresses}/{progressBarCheckAllAddressTypes.Maximum}";
                            });

                            // assume there are no more used addresses at this point
                            if (consecutiveUnusedAddressesForType > MaxNumberOfConsecutiveUnusedAddresses)
                            {
                                break;
                            }
                        }
                        else
                        {
                            usedSegwitP2SHAddresses++;
                            consecutiveUnusedAddressesForType = 0;
                            totalUnusedAddresses = ((NumberOfDerivationPathsToCheck * 2) + DerivationPath) * (MaxNumberOfConsecutiveUnusedAddresses + 1);  // this is the third address type, so reset to account for that, rather than 0
                        }

                        if (confirmedReceivedForCalc > 0)
                        {
                            consecutiveUnusedAddressesForType = 0;
                            segwitP2SHTotalConfirmedReceived += confirmedReceivedForCalc;
                            xpubTotalConfirmedReceived += confirmedReceivedForCalc;
                        }

                        if (confirmedSpentForCalc > 0)
                        {
                            consecutiveUnusedAddressesForType = 0;
                            segwitP2SHTotalConfirmedSpent += confirmedSpentForCalc;
                            xpubTotalConfirmedSpent += confirmedSpentForCalc;
                        }

                        if (confirmedUnspentResult > 0)
                        {
                            consecutiveUnusedAddressesForType = 0;
                            xpubTotalConfirmedUnspent += confirmedUnspentResult;
                            segwitP2SHAddressesWithNonZeroBalance++;
                            segwitP2SHAddressesConfirmedUnspentBalance += confirmedUnspentResult;

                        }
                        checkingAddressCount++;
                        lblSegwitP2SHUsedAddresses.Invoke((MethodInvoker)delegate
                        {
                            lblSegwitP2SHUsedAddresses.Text = $"{usedSegwitP2SHAddresses} used";
                        });
                        // format values before displaying them in the summary
                        if (segwitP2SHTotalConfirmedReceived > 0)
                        {
                            segwitP2SHTotalConfirmedReceivedDisplay = ConvertSatsToBitcoin(Convert.ToString(segwitP2SHTotalConfirmedReceived)).ToString("0.00000000");
                        }
                        else
                        {
                            segwitP2SHTotalConfirmedReceivedDisplay = "0";
                        }

                        if (segwitP2SHTotalConfirmedSpent > 0)
                        {
                            segwitP2SHTotalConfirmedSpentDisplay = ConvertSatsToBitcoin(Convert.ToString(segwitP2SHTotalConfirmedSpent)).ToString("0.00000000");
                        }
                        else
                        {
                            segwitP2SHTotalConfirmedSpentDisplay = "0";
                        }

                        if (segwitP2SHAddressesConfirmedUnspentBalance > 0)
                        {
                            segwitP2SHAddressesConfirmedUnspentBalanceDisplay = ConvertSatsToBitcoin(Convert.ToString(segwitP2SHAddressesConfirmedUnspentBalance)).ToString("0.00000000");
                        }
                        else
                        {
                            segwitP2SHAddressesConfirmedUnspentBalanceDisplay = "0";
                        }
                        lblSegwitP2SHSummary.Invoke((MethodInvoker)delegate
                        {
                            lblSegwitP2SHSummary.Text = $"{segwitP2SHTotalConfirmedReceivedDisplay}, {segwitP2SHTotalConfirmedSpentDisplay}, {segwitP2SHAddressesConfirmedUnspentBalanceDisplay}";
                        });
                    }
                    consecutiveUnusedAddressesForType = 0;
                    checkingAddressCount = 1;
                    DerivationPath++;
                    segwitP2SHAddresses.Clear();
                }
                DerivationPath = 0;
                #endregion
                #region P2SH
                while (DerivationPath != NumberOfDerivationPathsToCheck)
                {
                    lblXpubStatus.Invoke((MethodInvoker)delegate
                    {
                        lblXpubStatus.Text = "Deriving P2SH addresses";
                    });
                    for (uint i = 0; i < 500; i++)
                    {
                        var pubkey = ExtPubKey.Parse(submittedXpub, Network.Main);
                        uint index = i; // increment the index for each iteration
                        var redeemScript = pubkey.Derive(Convert.ToUInt32(DerivationPath)).Derive(index).PubKey.ScriptPubKey;
                        var scriptPubKey = redeemScript.Hash.ScriptPubKey;
                        var BitcoinAddress = scriptPubKey.GetDestinationAddress(Network.Main);
                        P2SHAddresses.Add(BitcoinAddress!);
                    }


                    // query the balance for each address
                    foreach (NBitcoin.BitcoinAddress address in P2SHAddresses) // (we break when we run out of addresses with a balance)
                    {
                        string truncatedAddressForDisplay = $"{address.ToString().Substring(0, 10)}...";
                        lblXpubStatus.Invoke((MethodInvoker)delegate
                        {
                            lblXpubStatus.Text = $"Deriving P2SH addresses\r\nChecking address {checkingAddressCount} ({truncatedAddressForDisplay})\r\nConsecutive unused addresses: {consecutiveUnusedAddressesForType}";
                        });
                        var request = $"address/{address}";
                        var RequestURL = $"{textBoxXpubScreenOwnNodeURL.Text}{request}";
                        var client = new HttpClient();
                        LightUpNodeLight();
                        var response = await client.GetAsync($"{RequestURL}").ConfigureAwait(true); // get the JSON to get address balance and no of transactions etc
                        if (!response.IsSuccessStatusCode)
                        {
                            lblSettingsSelectedNodeStatus.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsSelectedNodeStatus.Text = "Disconnected/error";
                                lblSettingsSelectedNodeStatus.Location = new Point((int)(750 * UIScale) - lblSettingsSelectedNodeStatus.Width, lblSettingsSelectedNodeStatus.Location.Y);
                            });
                            lblSettingsSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsSelectedNodeStatusLight.ForeColor = Color.Red;
                                lblSettingsSelectedNodeStatusLight.Location = new Point(lblSettingsSelectedNodeStatus.Location.X - lblSettingsSelectedNodeStatusLight.Width, lblSettingsSelectedNodeStatusLight.Location.Y);
                            });
                            lblErrorMessage.Invoke((MethodInvoker)delegate
                            {
                                lblErrorMessage.Text = "Node offline/disconnected: ";
                            });
                            return;
                        }
                        var jsonData = await response.Content.ReadAsStringAsync().ConfigureAwait(true);
                        var addressData = JObject.Parse(jsonData);

                        // transactions for the address
                        string lastSeenTxId = "";
                        decimal TotalInForAllTXOnThisAddress = 0;
                        decimal TotalOutForAllTXOnThisAddress = 0;
                        int totalTXForAddress = Convert.ToInt32(addressData["chain_stats"]?["tx_count"]);
                        int txProcessedForThisAddress = 0;

                        while (txProcessedForThisAddress != totalTXForAddress)
                        {
                            _transactionsForXpubAddressService = new TransactionsForXpubAddressService(textBoxXpubScreenOwnNodeURL.Text);
                            LightUpNodeLight();
                            var transactionsJson = await _transactionsForXpubAddressService.GetTransactionsForXpubAddressAsync(Convert.ToString(address), "chain", lastSeenTxId).ConfigureAwait(true);
                            if (!string.IsNullOrEmpty(transactionsJson))
                            {
                                var transactions = JsonConvert.DeserializeObject<List<AddressTransactions>>(transactionsJson);
                                foreach (AddressTransactions transaction in transactions!)
                                {
                                    decimal balanceChangeVin = 0; // will hold net result of inputs to this address
                                    decimal balanceChangeVout = 0; // will hold net result of outputs to this address    
                                    balanceChangeVin = (decimal)transaction.Vout
                                        .Where(v => String.Compare(v.Scriptpubkey_address, Convert.ToString(address), StringComparison.Ordinal) == 0)
                                        .Sum(v => v.Value);
                                    balanceChangeVout = (decimal)transaction.Vin
                                        .Where(v => v.Prevout != null && String.Compare(v.Prevout.Scriptpubkey_address, Convert.ToString(address), StringComparison.Ordinal) == 0)
                                        .Sum(v => v.Prevout!.Value);
                                    TotalInForAllTXOnThisAddress += balanceChangeVin;
                                    TotalOutForAllTXOnThisAddress += balanceChangeVout;
                                    txProcessedForThisAddress++;
                                }
                                if (String.Compare(transactions.Last().Status!.Confirmed, "true") == 0) // there might be more transactions to get. 
                                {
                                    lastSeenTxId = transactions.Last().Txid!; // so we can carry on the next api call where we left off
                                }
                                else
                                {
                                    lastSeenTxId = "";
                                }
                            }
                        }

                        string ConfirmedTransactionCount = Convert.ToString(addressData["chain_stats"]?["tx_count"]);
                        string ConfirmedReceived = Convert.ToString(ConvertSatsToBitcoin(Convert.ToString(TotalInForAllTXOnThisAddress)).ToString("0.00000000"));
                        string ConfirmedSpent = Convert.ToString(ConvertSatsToBitcoin(Convert.ToString(TotalOutForAllTXOnThisAddress)).ToString("0.00000000"));
                        var confirmedReceivedForCalc = Convert.ToDouble(TotalInForAllTXOnThisAddress);
                        var confirmedSpentForCalc = Convert.ToDouble(TotalOutForAllTXOnThisAddress);
                        var confirmedUnspentResult = confirmedReceivedForCalc - confirmedSpentForCalc;
                        string ConfirmedUnspent = ConvertSatsToBitcoin(Convert.ToString(confirmedUnspentResult)).ToString("0.00000000");

                        ListViewItem item = new ListViewItem(Convert.ToString(address)); // create new row
                        item.SubItems.Add(ConfirmedTransactionCount.ToString());
                        item.SubItems.Add(ConfirmedReceived.ToString());
                        item.SubItems.Add(ConfirmedSpent.ToString());
                        item.SubItems.Add(ConfirmedUnspent.ToString());
                        listViewXpubAddresses.Invoke((MethodInvoker)delegate
                        {
                            listViewXpubAddresses.Items.Add(item); // add row
                            numberOfAddressesChecked++;
                        });
                        if (listViewXpubAddresses.Items.Count > 27)
                        {
                            btnXpubAddressesUp.Enabled = true;
                            btnXpubAddressesDown.Enabled = true;
                        }
                        else
                        {
                            btnXpubAddressesUp.Enabled = false;
                            btnXpubAddressesDown.Enabled = false;
                        }

                        // Get the height of each item to set height of whole listview
                        int rowHeight = listViewXpubAddresses.Margin.Vertical + listViewXpubAddresses.Padding.Vertical + listViewXpubAddresses.GetItemRect(0).Height;
                        int itemCount = listViewXpubAddresses.Items.Count; // Get the number of items in the ListBox
                        int listBoxHeight = (itemCount + 2) * rowHeight; // Calculate the height of the ListBox (the extra 2 gives room for the header)
                        listViewXpubAddresses.Invoke((MethodInvoker)delegate
                        {
                            listViewXpubAddresses.Height = listBoxHeight; // Set the height of the ListBox
                        });
                        panelXpubContainer.VerticalScroll.Minimum = 0;

                        label140.Invoke((MethodInvoker)delegate
                        {
                            label140.Text = $"P2SH path {DerivationPath}";
                        });

                        string P2SHTotalConfirmedReceivedDisplay = "";
                        string P2SHTotalConfirmedSpentDisplay = "";
                        string P2SHAddressesConfirmedUnspentBalanceDisplay = "";

                        if (confirmedReceivedForCalc == 0)
                        {
                            consecutiveUnusedAddressesForType++; // unused addresses for this type of address
                            totalUnusedAddresses++; // overall count of unused addresses

                            // progress bar for this address type
                            if (consecutiveUnusedAddressesForType < progressBarCheckEachAddressType.Maximum)
                            {
                                progressBarCheckEachAddressType.Value = consecutiveUnusedAddressesForType;
                            }
                            else
                            {
                                progressBarCheckEachAddressType.Value = progressBarCheckEachAddressType.Maximum;
                            }
                            lblCheckEachAddressTypeCount.Invoke((MethodInvoker)delegate
                            {
                                lblCheckEachAddressTypeCount.Text = $"{consecutiveUnusedAddressesForType}/{MaxNumberOfConsecutiveUnusedAddresses + 1}";
                            });
                            // progress bar for all address types
                            if (totalUnusedAddresses < progressBarCheckAllAddressTypes.Maximum)
                            {
                                progressBarCheckAllAddressTypes.Value = totalUnusedAddresses;
                            }
                            else
                            {
                                progressBarCheckAllAddressTypes.Value = progressBarCheckAllAddressTypes.Maximum;
                            }
                            lblCheckAllAddressTypesCount.Invoke((MethodInvoker)delegate
                            {
                                lblCheckAllAddressTypesCount.Text = $"{totalUnusedAddresses}/{progressBarCheckAllAddressTypes.Maximum}";
                            });

                            // assume there are no more used addresses at this point
                            if (consecutiveUnusedAddressesForType > MaxNumberOfConsecutiveUnusedAddresses)
                            {
                                break;
                            }
                        }
                        else
                        {
                            usedP2SHAddresses++;
                            consecutiveUnusedAddressesForType = 0;  //
                            totalUnusedAddresses = ((NumberOfDerivationPathsToCheck * 3) + DerivationPath) * (MaxNumberOfConsecutiveUnusedAddresses + 1);  // this is the fourth address type, so reset to account for that, rather than 0
                        }

                        if (confirmedReceivedForCalc > 0)
                        {
                            consecutiveUnusedAddressesForType = 0;
                            P2SHTotalConfirmedReceived += confirmedReceivedForCalc;
                            xpubTotalConfirmedReceived += confirmedReceivedForCalc;
                        }

                        if (confirmedSpentForCalc > 0)
                        {
                            consecutiveUnusedAddressesForType = 0;
                            P2SHTotalConfirmedSpent += confirmedSpentForCalc;
                            xpubTotalConfirmedSpent += confirmedSpentForCalc;
                        }

                        if (confirmedUnspentResult > 0)
                        {
                            consecutiveUnusedAddressesForType = 0;
                            xpubTotalConfirmedUnspent += confirmedUnspentResult;
                            P2SHAddressesWithNonZeroBalance++;
                            P2SHAddressesConfirmedUnspentBalance += confirmedUnspentResult;
                        }
                        checkingAddressCount++;
                        lblP2SHUsedAddresses.Invoke((MethodInvoker)delegate
                        {
                            lblP2SHUsedAddresses.Text = $"{usedP2SHAddresses} used";
                        });
                        // format values before displaying them in the summary
                        if (P2SHTotalConfirmedReceived > 0)
                        {
                            P2SHTotalConfirmedReceivedDisplay = ConvertSatsToBitcoin(Convert.ToString(P2SHTotalConfirmedReceived)).ToString("0.00000000");
                        }
                        else
                        {
                            P2SHTotalConfirmedReceivedDisplay = "0";
                        }

                        if (P2SHTotalConfirmedSpent > 0)
                        {
                            P2SHTotalConfirmedSpentDisplay = ConvertSatsToBitcoin(Convert.ToString(P2SHTotalConfirmedSpent)).ToString("0.00000000");
                        }
                        else
                        {
                            P2SHTotalConfirmedSpentDisplay = "0";
                        }

                        if (P2SHAddressesConfirmedUnspentBalance > 0)
                        {
                            P2SHAddressesConfirmedUnspentBalanceDisplay = ConvertSatsToBitcoin(Convert.ToString(P2SHAddressesConfirmedUnspentBalance)).ToString("0.00000000");
                        }
                        else
                        {
                            P2SHAddressesConfirmedUnspentBalanceDisplay = "0";
                        }
                        lblP2SHSummary.Invoke((MethodInvoker)delegate
                        {
                            lblP2SHSummary.Text = $"{P2SHTotalConfirmedReceivedDisplay}, {P2SHTotalConfirmedSpentDisplay}, {P2SHAddressesConfirmedUnspentBalanceDisplay}";
                        });
                    }
                    consecutiveUnusedAddressesForType = 0;
                    checkingAddressCount = 1;
                    DerivationPath++;
                    P2SHAddresses.Clear();
                }
                if (listViewXpubAddresses.Items.Count > 0)
                {
                    listViewXpubAddresses.Items[0].Selected = true;
                }

                DerivationPath = 0;
                #endregion
                #region totals after processing, hide progress bars, re-enable textboxes
                lblXpubStatus.Invoke((MethodInvoker)delegate
                {
                    lblXpubStatus.Text = $"Scan complete\r\n{numberOfAddressesChecked} addresses checked";
                });
                lblXpubConfirmedReceived.Invoke((MethodInvoker)delegate
                {
                    lblXpubConfirmedReceived.Text = ConvertSatsToBitcoin(Convert.ToString(xpubTotalConfirmedReceived)).ToString("0.00000000");
                });
                lblXpubConfirmedReceivedFiat.Invoke((MethodInvoker)delegate
                {
                    lblXpubConfirmedReceivedFiat.Text = $"{fiatSymbol}{(Convert.ToDecimal(xpubTotalConfirmedReceived) / 100000000 * OneBTCinSelectedCurrency):N2}";
                });
                lblXpubConfirmedSpent.Invoke((MethodInvoker)delegate
                {
                    lblXpubConfirmedSpent.Text = $"{ConvertSatsToBitcoin(Convert.ToString(xpubTotalConfirmedSpent)):0.00000000}";
                });
                lblXpubConfirmedSpentFiat.Invoke((MethodInvoker)delegate
                {
                    lblXpubConfirmedSpentFiat.Text = $"{fiatSymbol}{(Convert.ToDecimal(xpubTotalConfirmedSpent) / 100000000 * OneBTCinSelectedCurrency):N2}";
                });
                lblXpubConfirmedUnspent.Invoke((MethodInvoker)delegate
                {
                    lblXpubConfirmedUnspent.Text = $"{ConvertSatsToBitcoin(Convert.ToString(xpubTotalConfirmedUnspent)):0.00000000}";
                });
                lblXpubConfirmedUnspentFiat.Invoke((MethodInvoker)delegate
                {
                    lblXpubConfirmedUnspentFiat.Text = $"{fiatSymbol}{(Convert.ToDecimal(xpubTotalConfirmedUnspent) / 100000000 * OneBTCinSelectedCurrency):N2}";
                });
                textBoxSubmittedXpub.Enabled = true;
                textBoxXpubScreenOwnNodeURL.Enabled = true;
                intTimeUntilXpubProgressBarsHidden = 0;
                #region scrollbar
                decimal displayRatio = Convert.ToDecimal(panelXpubScrollContainer.Height) / Convert.ToDecimal(listViewXpubAddresses.Height);
                panelXpubScrollbarInner.Invoke((MethodInvoker)delegate
                {
                    panelXpubScrollbarInner.Height = (int)(panelXpubScrollbarOuter.Height * displayRatio);
                    panelXpubScrollbarInner.Visible = true;
                    panelXpubScrollbarInner.Refresh();
                });
                int distanceToBeScrolled = panelXpubScrollbarOuter.Height - panelXpubScrollbarInner.Height;
                int numberOfRowsLeftToShow = listViewXpubAddresses.Items.Count - 28;
                if (numberOfRowsLeftToShow > 0)
                {
                    xpubScrollbarIncrement = Convert.ToInt32(distanceToBeScrolled / numberOfRowsLeftToShow);
                }
                else
                {
                    panelXpubScrollbarInner.Invoke((MethodInvoker)delegate
                    {
                        panelXpubScrollbarInner.Height = panelXpubScrollbarOuter.Height;
                    });
                    xpubScrollbarIncrement = 0;
                    btnXpubAddressesUp.Enabled = false;
                    btnXpubAddressesDown.Enabled = false;
                }
                #endregion
                xpubScanComplete = true;
                #endregion
            }
            catch (Exception ex)
            {
                HandleException(ex, "LookupXpub");
            }
        }

        private void LblXpubScreenOwnNodeStatus_SizeChanged(object sender, EventArgs e)
        {
            label227.Invoke((MethodInvoker)delegate
            {
                label227.Location = new Point(lblXpubScreenOwnNodeStatus.Location.X + lblXpubScreenOwnNodeStatus.Width + 10, label227.Location.Y);
            });
        }
        #endregion
        #region listview appearance
        //-------------------- FORMAT DATA IN LISTVIEW ----------------------------------------------------------------------------
        private void ListViewXpubAddresses_DrawSubItem(object sender, DrawListViewSubItemEventArgs e)
        {
            try
            {
                var text = e.SubItem.Text;

                if (e.ColumnIndex == 2)
                {
                    if (String.Compare(text, "0.00000000") != 0) // received
                    {
                        e.SubItem.ForeColor = Color.OliveDrab; // make it green
                    }
                }
                if (e.ColumnIndex == 3)
                {
                    if (String.Compare(text, "0.00000000") != 0) // spent
                    {
                        e.SubItem.ForeColor = Color.IndianRed; // make it red
                    }
                }
                if (e.ColumnIndex == 4)
                {
                    if (String.Compare(text, "0.00000000") != 0) // unspent
                    {
                        e.SubItem.ForeColor = Color.OliveDrab; // make it green if non-zero
                    }
                }

                var font = listViewXpubAddresses.Font;
                var columnWidth = e.Header.Width;
                var textWidth = TextRenderer.MeasureText(text, font).Width;
                if (textWidth > columnWidth)
                {
                    // Truncate the text
                    var maxText = $"{text.Substring(0, text.Length * columnWidth / textWidth - 3)}...";
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);
                    // Clear the background
                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewXpubAddresses.BackColor), bounds);
                    }
                    TextRenderer.DrawText(e.Graphics, maxText, font, bounds, e.Item.ForeColor, TextFormatFlags.EndEllipsis | TextFormatFlags.Left);
                }
                else if (textWidth < columnWidth)
                {
                    // Clear the background
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);

                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewXpubAddresses.BackColor), bounds);
                    }

                    TextRenderer.DrawText(e.Graphics, text, font, bounds, e.SubItem.ForeColor, TextFormatFlags.Left);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewXpubAddresses_DrawSubItem");
            }
        }

        //-------------------- USER TRYING TO CHANGE COLUMN WIDTHS -------------------------------------
        private void ListViewXpubAddresses_ColumnWidthChanging(object sender, ColumnWidthChangingEventArgs e)
        {
            try
            {
                if (e.ColumnIndex == 0)
                {
                    if (listViewXpubAddresses.Columns[e.ColumnIndex].Width < (int)(130 * UIScale)) // min width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(130 * UIScale);
                    }
                    if (listViewXpubAddresses.Columns[e.ColumnIndex].Width > (int)(460 * UIScale)) // max width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(460 * UIScale);
                    }

                }

                if (e.ColumnIndex == 1)
                {
                    if (listViewXpubAddresses.Columns[e.ColumnIndex].Width != (int)(35 * UIScale)) // don't allow this one to change
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(35 * UIScale);
                    }
                }
                if (e.ColumnIndex == 2)
                {
                    if (listViewXpubAddresses.Columns[e.ColumnIndex].Width < (int)(100 * UIScale)) // min width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(100 * UIScale);
                    }
                    if (listViewXpubAddresses.Columns[e.ColumnIndex].Width > (int)(250 * UIScale)) // max width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(250 * UIScale);
                    }
                }
                if (e.ColumnIndex == 3)
                {
                    if (listViewXpubAddresses.Columns[e.ColumnIndex].Width < (int)(100 * UIScale)) // min width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(100 * UIScale);
                    }
                    if (listViewXpubAddresses.Columns[e.ColumnIndex].Width > (int)(250 * UIScale)) // max width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(250 * UIScale);
                    }
                }
                if (e.ColumnIndex == 4)
                {
                    if (listViewXpubAddresses.Columns[e.ColumnIndex].Width < (int)(100 * UIScale)) // min width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(100 * UIScale);
                    }
                    if (listViewXpubAddresses.Columns[e.ColumnIndex].Width > (int)(250 * UIScale)) // max width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(250 * UIScale);
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewXpubAddresses_ColumnWidthChanging");
            }
        }

        //-------------------- ROW SELECTED ON THE LISTVIEW --------------------------------------------
        private void ListViewXpubAddresses_ItemSelectionChanged(object sender, ListViewItemSelectionChangedEventArgs e)
        {
            try
            {
                foreach (ListViewItem item in listViewXpubAddresses.Items)
                {
                    if (item != null)
                    {
                        if (item.Selected)
                        {
                            btnViewAddressFromXpub.Visible = true;
                            foreach (ListViewItem.ListViewSubItem subItem in item.SubItems)
                            {
                                subItem.ForeColor = MakeColorLighter(tableTextColor, 40);
                            }
                            if (String.Compare(item.SubItems[1].Text, "0") == 0)
                            {
                                btnViewAddressFromXpub.Enabled = false;
                            }
                            else
                            {
                                btnViewAddressFromXpub.Enabled = true;
                            }
                            btnViewAddressFromXpub.Invoke((MethodInvoker)delegate
                            {
                                //btnViewAddressFromXpub.Location = new Point(panel101.Location.X - btnViewAddressFromXpub.Width + (int)(12 * UIScale), item.Position.Y + listViewXpubAddresses.Location.Y + panelXpubContainer.Location.Y);
                                btnViewAddressFromXpub.Location = new Point(0, item.Position.Y + listViewXpubAddresses.Location.Y);
                                btnViewAddressFromXpub.Height = item.Bounds.Height;
                            });
                        }
                        else
                        {
                            foreach (ListViewItem.ListViewSubItem subItem in item.SubItems)
                            {
                                subItem.ForeColor = tableTextColor;
                            }
                        }
                    }
                }
                lblHeaderBlockAge.Focus();
            }
            catch (Exception ex)
            {
                HandleException(ex, "listViewXpubAddresses_ItemSelectionChanged");
            }
        }
        #endregion
        #region listview scrolling
        //-------------------- SCROLL-DOWN LISTVIEW ----------------------------------------------------
        private void BtnXpubAddressesDown_Click(object sender, EventArgs e)
        {
            try
            {
                int rowHeight = listViewXpubAddresses.Margin.Vertical + listViewXpubAddresses.Padding.Vertical + listViewXpubAddresses.GetItemRect(0).Height;
                if (XpubAddressesScrollPosition < (panelXpubContainer.VerticalScroll.Maximum - panelXpubContainer.Height) - rowHeight)
                {

                    XpubAddressesScrollPosition += rowHeight;
                    panelXpubContainer.VerticalScroll.Value = XpubAddressesScrollPosition;
                    panelXpubScrollbarInner.Location = new Point(panelXpubScrollbarInner.Location.X, panelXpubScrollbarInner.Location.Y + xpubScrollbarIncrement);
                    lblHeaderBlockAge.Focus();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnXpubAddressesDown_Click");
            }
        }

        private void BtnXpubAddressesDown_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isXpubButtonPressed = true;
                XpubDownButtonPressed = true;
                XpubScrollTimer.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnXpubAddressesDown_MouseDown");
            }
        }

        private void BtnXpubAddressesDown_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isXpubButtonPressed = false;
                XpubDownButtonPressed = false;
                XpubScrollTimer.Stop();
                XpubScrollTimer.Interval = 50; // reset the interval to its original value
                lblHeaderBlockAge.Focus();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnXpubAddressesDown_MouseUp");
            }
        }

        //-------------------- SCROLL-UP LISTVIEW -------------------------------------------------------
        private void BtnXpubAddressUp_Click(object sender, EventArgs e)
        {
            try
            {
                if (panelXpubContainer.VerticalScroll.Value > panelXpubContainer.VerticalScroll.Minimum)
                {
                    int rowHeight = listViewXpubAddresses.Margin.Vertical + listViewXpubAddresses.Padding.Vertical + listViewXpubAddresses.GetItemRect(0).Height;
                    XpubAddressesScrollPosition -= rowHeight;
                    panelXpubContainer.VerticalScroll.Value = XpubAddressesScrollPosition;
                    panelXpubScrollbarInner.Location = new Point(panelXpubScrollbarInner.Location.X, panelXpubScrollbarInner.Location.Y - xpubScrollbarIncrement);
                    lblHeaderBlockAge.Focus();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnXpubAddressUp_Click");
            }
        }

        private void BtnXpubAddressUp_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isXpubButtonPressed = true;
                XpubUpButtonPressed = true;
                XpubScrollTimer.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnXpubAddressUp_MouseDown");
            }
        }

        private void BtnXpubAddressUp_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isXpubButtonPressed = false;
                XpubUpButtonPressed = false;
                XpubScrollTimer.Stop();
                XpubScrollTimer.Interval = 50; // reset the interval to its original value
                lblHeaderBlockAge.Focus();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnXpubAddressUp_MouseUp");
            }
        }

        //-------------------- HANDLE THE SCROLLING -------------------------------------------------------
        private void XpubScrollTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                if (isXpubButtonPressed)
                {
                    if (XpubDownButtonPressed)
                    {
                        int rowHeight = listViewXpubAddresses.Margin.Vertical + listViewXpubAddresses.Padding.Vertical + listViewXpubAddresses.GetItemRect(0).Height;
                        if (XpubAddressesScrollPosition < (panelXpubContainer.VerticalScroll.Maximum - panelXpubContainer.Height) - rowHeight)
                        {
                            if (XpubAddressesScrollPosition < panelXpubContainer.VerticalScroll.Maximum + rowHeight)
                            {
                                XpubAddressesScrollPosition += rowHeight;
                                panelXpubScrollbarInner.Location = new Point(panelXpubScrollbarInner.Location.X, panelXpubScrollbarInner.Location.Y + xpubScrollbarIncrement);
                                panelXpubContainer.VerticalScroll.Value = XpubAddressesScrollPosition;
                            }
                        }
                        else
                        {
                            panelXpubScrollbarInner.Location = new Point(panelXpubScrollbarInner.Location.X, panelXpubScrollbarOuter.Height - panelXpubScrollbarInner.Height);
                        }
                    }
                    else if (XpubUpButtonPressed)
                    {
                        int rowHeight = listViewXpubAddresses.Margin.Vertical + listViewXpubAddresses.Padding.Vertical + listViewXpubAddresses.GetItemRect(0).Height;
                        if (XpubAddressesScrollPosition > panelXpubContainer.VerticalScroll.Minimum + rowHeight)
                        {
                            XpubAddressesScrollPosition -= rowHeight;
                            panelXpubContainer.VerticalScroll.Value = XpubAddressesScrollPosition;
                            panelXpubScrollbarInner.Location = new Point(panelXpubScrollbarInner.Location.X, panelXpubScrollbarInner.Location.Y - xpubScrollbarIncrement);
                        }
                        else
                        {
                            panelXpubScrollbarInner.Location = new Point(panelXpubScrollbarInner.Location.X, 0);
                        }
                    }
                }
                else
                {
                    XpubScrollTimer.Stop();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "XpubScrollTimer_Tick");
            }
        }

        private void PanelXpubContainer_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                int rowHeight = listViewXpubAddresses.Margin.Vertical + listViewXpubAddresses.Padding.Vertical + listViewXpubAddresses.GetItemRect(0).Height;
                if (XpubAddressesScrollPosition - rowHeight > 0)
                {
                    panelXpubContainer.VerticalScroll.Value = XpubAddressesScrollPosition;
                }
                else
                {
                    panelXpubContainer.VerticalScroll.Value = 0;
                    XpubAddressesScrollPosition = 0;
                }
                lblHeaderBlockAge.Focus();
            }
            catch (Exception ex)
            {
                HandleException(ex, "PanelXpubContainer_Paint");
            }
        }
        #endregion
        #region navigate from listview to address screen
        //-------------------- VIEW ADDRESS --------------------------------------------------------------
        private async void BtnViewAddressFromXpub_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                await CheckNetworkStatusAsync().ConfigureAwait(true);
                // Get the selected item
                ListViewItem selectedItem = listViewXpubAddresses.SelectedItems[0];
                // Get the first subitem in the selected item 
                string SelectedAddress = selectedItem.SubItems[0].Text;
                textboxSubmittedAddress.Invoke((MethodInvoker)delegate
                {
                    textboxSubmittedAddress.Text = SelectedAddress; // copy address to address screen
                });
                panelXpub.Invoke((MethodInvoker)delegate
                {
                    panelXpub.Visible = false;
                });
                //show the address screen
                BtnMenuAddress_ClickAsync(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnViewAddressFromXpub_Click");
            }
        }
        #endregion
        #region disable keys
        private void ListViewXpubAddresses_KeyDown(object sender, KeyEventArgs e)
        {
            e.Handled = true;
        }

        private void ListViewXpubAddresses_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = true;
        }

        private void ListViewXpubAddresses_KeyUp(object sender, KeyEventArgs e)
        {
            e.Handled = true;
        }
        #endregion
        #endregion
        //![](resources\tinylogo1.png;;;0.04706,0.04877)
        #region ⚡⚡ POOLS RANKINGS SCREENS AND CHARTS

        #region ⚡⚡MINING POOLS BY BLOCKS SCREEN⚡

        private async void SetupPoolsByBlocksScreenAsync()
        {
            try
            {
                ToggleLoadingAnimation("enable");
                LightUpNodeLight();
                var PoolsByBlockJson = await _PoolsByBlockService.GetPoolsByBlockAsync(poolsBlocksTimePeriod).ConfigureAwait(true);
                var poolsBlocks = JsonConvert.DeserializeObject<PoolsBlocks>(PoolsByBlockJson);

                if (poolsBlocks?.Pools != null && poolsBlocks.Pools.Length > 0)
                {

                    //LIST VIEW
                    listViewPoolsByBlock.Invoke((MethodInvoker)delegate
                    {
                        listViewPoolsByBlock.Items.Clear(); // remove any data that may be there already
                        listViewPoolsByBlock.Columns.Clear();
                    });
                    listViewPoolsByBlock.GetType().InvokeMember("DoubleBuffered", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.SetProperty, null, listViewPoolsByBlock, new object[] { true });

                    listViewPoolsByBlock.Invoke((MethodInvoker)delegate
                    {
                        listViewPoolsByBlock.Columns.Add("Pool name", (int)(92 * UIScale));
                        listViewPoolsByBlock.Columns.Add("Rank", (int)(35 * UIScale));
                        listViewPoolsByBlock.Columns.Add("Blocks", (int)(55 * UIScale));
                        listViewPoolsByBlock.Columns.Add("Blocks %", (int)(65 * UIScale));
                        listViewPoolsByBlock.Columns.Add("Empty", (int)(45 * UIScale));
                        listViewPoolsByBlock.Columns.Add("Empty %", (int)(57 * UIScale));
                    });

                    // Add the items to the ListView
                    int counter = 0;
                    decimal emptyPercent = 0;
                    decimal totalBlocksFound = Convert.ToDecimal(poolsBlocks.BlockCount);
                    foreach (var pool in poolsBlocks.Pools)
                    {
                        ListViewItem item = new ListViewItem(Convert.ToString(pool.Name)); // create new row
                        item.SubItems.Add(Convert.ToString(pool.Rank));
                        item.SubItems.Add(Convert.ToString(pool.BlockCount));
                        decimal percentageFound = (100m / totalBlocksFound * Convert.ToDecimal(pool.BlockCount));
                        item.SubItems.Add($"{percentageFound:F2}%");
                        item.SubItems.Add(Convert.ToString(pool.EmptyBlocks));
                        emptyPercent = (100m / Convert.ToDecimal(pool.BlockCount)) * Convert.ToDecimal(pool.EmptyBlocks);
                        item.SubItems.Add($"{emptyPercent:F2}%");

                        listViewPoolsByBlock.Invoke((MethodInvoker)delegate
                        {
                            listViewPoolsByBlock.Items.Add(item); // add row
                        });

                        counter++; // count rows

                        // Get the height of each item to set height of whole listview
                        int rowHeight = listViewPoolsByBlock.Margin.Vertical + listViewPoolsByBlock.Padding.Vertical + listViewPoolsByBlock.GetItemRect(0).Height;
                        int itemCount = listViewPoolsByBlock.Items.Count; // Get the number of items in the ListBox
                        int listBoxHeight = (itemCount + 2) * rowHeight; // Calculate the height of the ListBox (the extra 2 gives room for the header)

                        listViewPoolsByBlock.Height = listBoxHeight; // Set the height of the ListBox
                        panel140.Height = listBoxHeight;

                    }

                    if (listViewPoolsByBlock.Items.Count > 0)
                    {
                        listViewPoolsByBlock.Items[0].Selected = true;
                    }

                    #region scrollbar
                    decimal displayRatio = Convert.ToDecimal(panelPoolsBlocksScrollContainer.Height) / Convert.ToDecimal(listViewPoolsByBlock.Height);
                    panelPoolsBlocksScrollbarInner.Invoke((MethodInvoker)delegate
                    {
                        panelPoolsBlocksScrollbarInner.Height = (int)(panelPoolsBlocksScrollContainer.Height * displayRatio);
                        panelPoolsBlocksScrollbarInner.Refresh();
                    });
                    int distanceToBeScrolled = panelPoolsBlocksScrollbarOuter.Height - panelPoolsBlocksScrollbarInner.Height;
                    int numberOfRowsLeftToShow = listViewPoolsByBlock.Items.Count - 32;
                    if (numberOfRowsLeftToShow > 0)
                    {
                        poolsBlocksScrollbarIncrement = Convert.ToInt32(distanceToBeScrolled / numberOfRowsLeftToShow);
                    }
                    else
                    {
                        panelPoolsBlocksScrollbarInner.Invoke((MethodInvoker)delegate
                        {
                            panelPoolsBlocksScrollbarInner.Height = panelPoolsBlocksScrollbarOuter.Height;
                        });
                        poolsBlocksScrollbarIncrement = 0;
                        btnPoolsBlocksScrollDown.Enabled = false;
                        btnPoolsBlocksScrollUp.Enabled = false;
                    }
                    #endregion

                    ChartPoolsRankingForPoolsScreenAsync(poolsBlocksTimePeriod);
                    ChartsHashrateForPoolsScreenAsync(poolsBlocksTimePeriod);
                    ToggleLoadingAnimation("disable");
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "SetupPoolsByBlocksScreen");
            }
        }

        #region change time period

        private void ComboBoxPoolsBlocksTimePeriod_OnSelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBoxPoolsBlocksTimePeriod.SelectedIndex == 0)
            {
                poolsBlocksTimePeriod = "24h";
            }
            if (comboBoxPoolsBlocksTimePeriod.SelectedIndex == 1)
            {
                poolsBlocksTimePeriod = "3d";
            }
            if (comboBoxPoolsBlocksTimePeriod.SelectedIndex == 2)
            {
                poolsBlocksTimePeriod = "1w";
            }
            if (comboBoxPoolsBlocksTimePeriod.SelectedIndex == 3)
            {
                poolsBlocksTimePeriod = "1m";
            }
            if (comboBoxPoolsBlocksTimePeriod.SelectedIndex == 4)
            {
                poolsBlocksTimePeriod = "3m";
            }
            if (comboBoxPoolsBlocksTimePeriod.SelectedIndex == 5)
            {
                poolsBlocksTimePeriod = "6m";
            }
            if (comboBoxPoolsBlocksTimePeriod.SelectedIndex == 6)
            {
                poolsBlocksTimePeriod = "1y";
            }
            if (comboBoxPoolsBlocksTimePeriod.SelectedIndex == 7)
            {
                poolsBlocksTimePeriod = "2y";
            }
            if (comboBoxPoolsBlocksTimePeriod.SelectedIndex == 8)
            {
                poolsBlocksTimePeriod = "3y";
            }
            if (comboBoxPoolsBlocksTimePeriod.SelectedIndex == 9)
            {
                poolsBlocksTimePeriod = "all";
            }
            SetupPoolsByBlocksScreenAsync();
        }

        #endregion

        #region listview scrolling

        private void BtnPoolsBlocksScrollUp_Click(object sender, EventArgs e)
        {
            try
            {
                if (poolsBlocksScrollPosition > panelPoolsBlocksContainer.VerticalScroll.Minimum)
                {
                    int rowHeight = listViewPoolsByBlock.Margin.Vertical + listViewPoolsByBlock.Padding.Vertical + listViewPoolsByBlock.GetItemRect(0).Height;
                    poolsBlocksScrollPosition -= rowHeight;
                    panelPoolsBlocksContainer.VerticalScroll.Value = poolsBlocksScrollPosition;
                    panelPoolsBlocksScrollbarInner.Location = new Point(panelPoolsBlocksScrollbarInner.Location.X, panelPoolsBlocksScrollbarInner.Location.Y - poolsBlocksScrollbarIncrement);
                    lblHeaderBlockAge.Focus();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnPoolsBlocksScrollUp_Click");
            }

        }

        private void BtnPoolsBlocksScrollUp_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isPoolsBlocksButtonPressed = true;
                PoolsBlocksUpButtonPressed = true;
                PoolsBlocksScrollTimer.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnPoolsBlocksScrollUp_MouseDown");
            }
        }

        private void BtnPoolsBlocksScrollUp_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isPoolsBlocksButtonPressed = false;
                PoolsBlocksUpButtonPressed = false;
                PoolsBlocksScrollTimer.Stop();
                PoolsBlocksScrollTimer.Interval = 50; // reset the interval to its original value
                lblHeaderBlockAge.Focus();
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnPoolsBlocksScrollUp_MouseUp");
            }
        }

        private void BtnPoolsBlocksScrollDown_Click(object sender, EventArgs e)
        {
            try
            {
                int rowHeight = listViewPoolsByBlock.Margin.Vertical + listViewPoolsByBlock.Padding.Vertical + listViewPoolsByBlock.GetItemRect(0).Height;
                if (poolsBlocksScrollPosition < (panelPoolsBlocksContainer.VerticalScroll.Maximum - panelPoolsBlocksContainer.Height) - rowHeight)
                {

                    poolsBlocksScrollPosition += rowHeight;
                    panelPoolsBlocksContainer.VerticalScroll.Value = poolsBlocksScrollPosition;
                    panelPoolsBlocksScrollbarInner.Location = new Point(panelPoolsBlocksScrollbarInner.Location.X, panelPoolsBlocksScrollbarInner.Location.Y + poolsBlocksScrollbarIncrement);
                    lblHeaderBlockAge.Focus();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnPoolsBlocksScrollDown_Click");
            }
        }

        private void BtnPoolsBlocksScrollDown_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isPoolsBlocksButtonPressed = true;
                PoolsBlocksDownButtonPressed = true;
                PoolsBlocksScrollTimer.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnPoolsBlocksScrollDown_MouseDown");
            }
        }

        private void BtnPoolsBlocksScrollDown_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isPoolsBlocksButtonPressed = false;
                PoolsBlocksDownButtonPressed = false;
                PoolsBlocksScrollTimer.Stop();
                PoolsBlocksScrollTimer.Interval = 50; // reset the interval to its original value
                lblHeaderBlockAge.Focus();
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnPoolsBlocksScrollDown_MouseUp");
            }
        }

        private void PoolsBlocksScrollTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                if (isPoolsBlocksButtonPressed)
                {
                    if (PoolsBlocksDownButtonPressed)
                    {
                        int rowHeight = listViewPoolsByBlock.Margin.Vertical + listViewPoolsByBlock.Padding.Vertical + listViewPoolsByBlock.GetItemRect(0).Height;
                        if (poolsBlocksScrollPosition < (panelPoolsBlocksContainer.VerticalScroll.Maximum - panelPoolsBlocksContainer.Height) - rowHeight)
                        {
                            if (poolsBlocksScrollPosition < panelPoolsBlocksContainer.VerticalScroll.Maximum + rowHeight)
                            {
                                poolsBlocksScrollPosition += rowHeight;
                                panelPoolsBlocksScrollbarInner.Location = new Point(panelPoolsBlocksScrollbarInner.Location.X, panelPoolsBlocksScrollbarInner.Location.Y + poolsBlocksScrollbarIncrement);
                                panelPoolsBlocksContainer.VerticalScroll.Value = poolsBlocksScrollPosition;
                            }
                        }
                        else
                        {
                            panelPoolsBlocksScrollbarInner.Location = new Point(panelPoolsBlocksScrollbarInner.Location.X, panelPoolsBlocksScrollbarOuter.Height - panelPoolsBlocksScrollbarInner.Height);
                        }
                    }
                    else if (PoolsBlocksUpButtonPressed)
                    {
                        int rowHeight = listViewPoolsByBlock.Margin.Vertical + listViewPoolsByBlock.Padding.Vertical + listViewPoolsByBlock.GetItemRect(0).Height;
                        if (poolsBlocksScrollPosition > panelPoolsBlocksContainer.VerticalScroll.Minimum)
                        {
                            poolsBlocksScrollPosition -= rowHeight;
                            panelPoolsBlocksContainer.VerticalScroll.Value = poolsBlocksScrollPosition;
                            panelPoolsBlocksScrollbarInner.Location = new Point(panelPoolsBlocksScrollbarInner.Location.X, panelPoolsBlocksScrollbarInner.Location.Y - poolsBlocksScrollbarIncrement);
                        }
                        else
                        {
                            panelPoolsBlocksScrollbarInner.Location = new Point(panelPoolsBlocksScrollbarInner.Location.X, 0);
                        }
                    }
                }
                else
                {
                    PoolsBlocksScrollTimer.Stop();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "PoolsBlocksScrollTimer_Tick");
            }
        }

        private void ListViewPoolsByBlock_KeyDown(object sender, KeyEventArgs e)
        {
            e.Handled = true;
        }

        private void ListViewPoolsByBlock_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = true;
        }

        private void ListViewPoolsByBlock_KeyUp(object sender, KeyEventArgs e)
        {
            e.Handled = true;
        }

        private void PanelPoolsBlocksContainer_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                if (listViewPoolsByBlock.Items.Count > 0)
                {
                    int rowHeight = listViewPoolsByBlock.Margin.Vertical + listViewPoolsByBlock.Padding.Vertical + listViewPoolsByBlock.GetItemRect(0).Height;
                    if (poolsBlocksScrollPosition - rowHeight > 0)
                    {
                        panelPoolsBlocksContainer.VerticalScroll.Value = poolsBlocksScrollPosition;
                    }
                    else
                    {
                        panelPoolsBlocksContainer.VerticalScroll.Value = 0;
                        poolsBlocksScrollPosition = 0;
                    }
                    lblHeaderBlockAge.Focus();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "panelPoolsBlocksContainer_Paint");
            }
        }
        #endregion

        #region listview appearance and behaviour
        private void ListViewPoolsByBlock_ColumnWidthChanging(object sender, ColumnWidthChangingEventArgs e)
        {
            // Prevent the column from being resized
            e.Cancel = true;
            e.NewWidth = listViewPoolsByBlock.Columns[e.ColumnIndex].Width;
        }

        private void ListViewPoolsByBlock_DrawSubItem(object sender, DrawListViewSubItemEventArgs e)
        {
            try
            {
                var text = e.SubItem.Text;


                var font = listViewPoolsByBlock.Font;
                var columnWidth = e.Header.Width;
                var textWidth = TextRenderer.MeasureText(text, font).Width;
                if (textWidth > columnWidth)
                {
                    // Truncate the text
                    var maxText = $"{text.Substring(0, text.Length * columnWidth / textWidth - 3)}...";
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);
                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewPoolsByBlock.BackColor), bounds);
                    }
                    TextRenderer.DrawText(e.Graphics, maxText, font, bounds, e.Item.ForeColor, TextFormatFlags.EndEllipsis | TextFormatFlags.Left);
                }
                else if (textWidth < columnWidth)
                {
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);

                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewPoolsByBlock.BackColor), bounds);
                    }

                    TextRenderer.DrawText(e.Graphics, text, font, bounds, e.SubItem.ForeColor, TextFormatFlags.Left);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "listViewPoolsByBlock_DrawSubItem");
            }
        }

        private void ListViewPoolsByBlock_ItemSelectionChanged(object sender, ListViewItemSelectionChangedEventArgs e)
        {
            try
            {
                foreach (ListViewItem item in listViewPoolsByBlock.Items)
                {
                    if (item != null)
                    {
                        if (item.Selected)
                        {
                            foreach (ListViewItem.ListViewSubItem subItem in item.SubItems)
                            {
                                subItem.ForeColor = MakeColorLighter(tableTextColor, 40);
                            }
                            btnViewPoolFromMiningBlocks.Invoke((MethodInvoker)delegate
                            {
                                btnViewPoolFromMiningBlocks.Location = new Point(btnViewPoolFromMiningBlocks.Location.X, item.Position.Y - poolsBlocksScrollPosition);
                                btnViewPoolFromMiningBlocks.Height = item.Bounds.Height;
                            });
                        }
                        else
                        {
                            foreach (ListViewItem.ListViewSubItem subItem in item.SubItems)
                            {
                                subItem.ForeColor = tableTextColor;
                            }
                        }
                    }
                }
                btnViewPoolFromMiningBlocks.Visible = listViewPoolsByBlock.SelectedItems.Count > 0;
                lblHeaderBlockAge.Focus();

            }
            catch (Exception ex)
            {
                HandleException(ex, "listViewPoolsByBlock_ItemSelectionChanged");
            }
        }
        #endregion

        #region navigate to the other pools screens
        private void BtnViewPoolFromMiningBlocks_Click(object sender, EventArgs e)
        {
            // get the name of the pool from the selected row so the pools list can use it to preselect that pool
            foreach (ListViewItem item in listViewPoolsByBlock.Items)
            {
                if (item != null)
                {
                    if (item.Selected)
                    {
                        poolNameToPass = item.SubItems[0].Text;
                    }
                }
            }

            // scan through the existing pools list to find the row we want so it can be selected and scrolled to
            int counter = 0;
            int rowHeight = listViewPoolsList.Margin.Vertical + listViewPoolsList.Padding.Vertical + listViewPoolsList.GetItemRect(0).Height;
            foreach (ListViewItem item in listViewPoolsList.Items)
            {
                if (item != null)
                {
                    counter++;
                    if (String.Compare(item.SubItems[0].Text, poolNameToPass) == 0)
                    {
                        poolsListScrollPosition = counter * rowHeight;
                        break;
                    }
                }
            }
            BtnMenuMiningPools_ClickAsync(sender, e);
        }

        private void ComboBoxPoolsBlocksSelectSorting_OnSelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBoxPoolsBlocksSelectSorting.SelectedIndex == 0)
            {
                return;
            }
            if (comboBoxPoolsBlocksSelectSorting.SelectedIndex == 1)
            {
                comboBoxPoolsHashrateSortingSelect.Invoke((MethodInvoker)delegate
                {
                    comboBoxPoolsHashrateSortingSelect.Texts = "by hashrate";
                });
                BtnMenuPoolsByHashrate_ClickAsync();
            }
        }
        #endregion

        #endregion

        #region ⚡⚡MINING POOLS BY HASHRATE SCREEN⚡

        private async void SetupPoolsByHashrateScreenAsync()
        {
            try
            {
                ToggleLoadingAnimation("enable");
                LightUpNodeLight();
                var PoolsByHashrateJson = await _PoolsByHashrateService.GetPoolsByHashrateAsync(poolsHashrateTimePeriod).ConfigureAwait(true);
                var pools = JsonConvert.DeserializeObject<List<PoolHashrate>>(PoolsByHashrateJson);

                if (pools != null && pools.Count > 0)
                {

                    var groupedPools = pools
                        .GroupBy(p => p.PoolName)
                        .Select(g => new
                        {
                            PoolName = g.Key,
                            AvgShare = g.Average(p => p.Share),
                            AvgHashrate = g.Average(p => p.AvgHashrate)
                        })
                        .OrderByDescending(g => g.AvgShare)
                        .ToList();

                    if (groupedPools.Count > 0)
                    {
                        listViewPoolsHashrate.Invoke((MethodInvoker)delegate
                        {
                            listViewPoolsHashrate.Columns.Clear();
                            listViewPoolsHashrate.Items.Clear(); // Remove any data that may be there already
                            listViewPoolsHashrate.Columns.Add("Pool name", (int)(90 * UIScale));
                            listViewPoolsHashrate.Columns.Add("Rank", (int)(35 * UIScale));
                            listViewPoolsHashrate.Columns.Add("Share", (int)(70 * UIScale));
                            listViewPoolsHashrate.Columns.Add("Average hashrate", (int)(150 * UIScale));
                            listViewPoolsHashrate.GetType().InvokeMember("DoubleBuffered", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.SetProperty, null, listViewPoolsHashrate, new object[] { true });

                        });

                        int counter = 0;
                        foreach (var pool in groupedPools)
                        {
                            counter++; // count rows
                            ListViewItem item = new ListViewItem(pool.PoolName); // create new row
                            item.SubItems.Add(Convert.ToString(counter));
                            item.SubItems.Add(pool.AvgShare.ToString("P4")); // 4 decimal places
                            item.SubItems.Add(pool.AvgHashrate.ToString("F0")); // 0 decimals 

                            listViewPoolsHashrate.Invoke((MethodInvoker)delegate
                            {
                                listViewPoolsHashrate.Items.Add(item); // add row
                            });

                            // Get the height of each item to set height of whole listview
                            int rowHeight = listViewPoolsHashrate.Margin.Vertical + listViewPoolsHashrate.Padding.Vertical + listViewPoolsHashrate.GetItemRect(0).Height;
                            int itemCount = listViewPoolsHashrate.Items.Count; // Get the number of items in the ListBox
                            int listBoxHeight = (itemCount + 2) * rowHeight; // Calculate the height of the ListBox (the extra 2 gives room for the header)

                            listViewPoolsHashrate.Height = listBoxHeight; // Set the height of the ListBox
                            panel151.Height = listBoxHeight;
                        }
                    }

                    if (listViewPoolsHashrate.Items.Count > 0)
                    {
                        listViewPoolsHashrate.Items[0].Selected = true;
                    }

                    ChartPoolsRankingForPoolsScreenAsync(poolsHashrateTimePeriod);
                    ChartsHashrateForPoolsScreenAsync(poolsHashrateTimePeriod);
                    ToggleLoadingAnimation("disable");
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "SetupPoolsByHashrateScreen");
            }
        }

        #region change time period

        private void ComboBoxPoolsHashrateTimePeriod_OnSelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBoxPoolsHashrateTimePeriod.SelectedIndex == 0)
            {
                poolsHashrateTimePeriod = "1w";
            }
            if (comboBoxPoolsHashrateTimePeriod.SelectedIndex == 1)
            {
                poolsHashrateTimePeriod = "1m";
            }
            if (comboBoxPoolsHashrateTimePeriod.SelectedIndex == 2)
            {
                poolsHashrateTimePeriod = "3m";
            }
            if (comboBoxPoolsHashrateTimePeriod.SelectedIndex == 3)
            {
                poolsHashrateTimePeriod = "6m";
            }
            if (comboBoxPoolsHashrateTimePeriod.SelectedIndex == 4)
            {
                poolsHashrateTimePeriod = "1y";
            }
            if (comboBoxPoolsHashrateTimePeriod.SelectedIndex == 5)
            {
                poolsHashrateTimePeriod = "2y";
            }
            if (comboBoxPoolsHashrateTimePeriod.SelectedIndex == 6)
            {
                poolsHashrateTimePeriod = "3y";
            }
            if (comboBoxPoolsHashrateTimePeriod.SelectedIndex == 7)
            {
                poolsHashrateTimePeriod = "all";
            }
            SetupPoolsByHashrateScreenAsync();
        }
        #endregion

        #region listview scrolling
        private void BtnPoolsHashrateScrollUp_Click(object sender, EventArgs e)
        {
            try
            {
                if (poolsHashrateScrollPosition > panelPoolsHashrateContainer.VerticalScroll.Minimum)
                {
                    int rowHeight = listViewPoolsHashrate.Margin.Vertical + listViewPoolsHashrate.Padding.Vertical + listViewPoolsHashrate.GetItemRect(0).Height;
                    poolsHashrateScrollPosition -= rowHeight;
                    panelPoolsHashrateContainer.VerticalScroll.Value = poolsHashrateScrollPosition;
                    lblHeaderBlockAge.Focus();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnPoolsHashrateScrollUp_Click");
            }
        }

        private void BtnPoolsHashrateScrollUp_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isPoolsHashrateButtonPressed = true;
                PoolsHashrateUpButtonPressed = true;
                PoolsHashrateScrollTimer.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnPoolsHashrateScrollUp_MouseDown");
            }
        }

        private void BtnPoolsHashrateScrollUp_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isPoolsHashrateButtonPressed = false;
                PoolsHashrateUpButtonPressed = false;
                PoolsHashrateScrollTimer.Stop();
                PoolsHashrateScrollTimer.Interval = 50; // reset the interval to its original value
                lblHeaderBlockAge.Focus();
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnPoolsHashrateScrollUp_MouseUp");
            }
        }

        private void BtnPoolsHashrateScrollDown_Click(object sender, EventArgs e)
        {
            try
            {
                int rowHeight = listViewPoolsHashrate.Margin.Vertical + listViewPoolsHashrate.Padding.Vertical + listViewPoolsHashrate.GetItemRect(0).Height;
                if (poolsHashrateScrollPosition < (panelPoolsHashrateContainer.VerticalScroll.Maximum - panelPoolsHashrateContainer.Height) - rowHeight)
                {

                    poolsHashrateScrollPosition += rowHeight;
                    panelPoolsHashrateContainer.VerticalScroll.Value = poolsHashrateScrollPosition;
                    lblHeaderBlockAge.Focus();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnPoolsHashrateScrollDown_Click");
            }
        }

        private void BtnPoolsHashrateScrollDown_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isPoolsHashrateButtonPressed = true;
                PoolsHashrateDownButtonPressed = true;
                PoolsHashrateScrollTimer.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnPoolsHashrateScrollDown_MouseDown");
            }
        }

        private void BtnPoolsHashrateScrollDown_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isPoolsHashrateButtonPressed = false;
                PoolsHashrateDownButtonPressed = false;
                PoolsHashrateScrollTimer.Stop();
                PoolsHashrateScrollTimer.Interval = 50; // reset the interval to its original value
                lblHeaderBlockAge.Focus();
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnPoolsHashrateScrollDown_MouseUp");
            }
        }

        private void PoolsHashrateScrollTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                if (isPoolsHashrateButtonPressed)
                {
                    if (PoolsHashrateDownButtonPressed)
                    {
                        int rowHeight = listViewPoolsHashrate.Margin.Vertical + listViewPoolsHashrate.Padding.Vertical + listViewPoolsHashrate.GetItemRect(0).Height;
                        if (poolsHashrateScrollPosition < (panelPoolsHashrateContainer.VerticalScroll.Maximum - panelPoolsHashrateContainer.Height) - rowHeight)
                        {
                            if (poolsHashrateScrollPosition < panelPoolsHashrateContainer.VerticalScroll.Maximum + rowHeight)
                            {
                                poolsHashrateScrollPosition += rowHeight;
                            }
                            panelPoolsHashrateContainer.VerticalScroll.Value = poolsHashrateScrollPosition;
                        }
                    }
                    else if (PoolsHashrateUpButtonPressed)
                    {
                        int rowHeight = listViewPoolsHashrate.Margin.Vertical + listViewPoolsHashrate.Padding.Vertical + listViewPoolsHashrate.GetItemRect(0).Height;
                        if (poolsHashrateScrollPosition > panelPoolsHashrateContainer.VerticalScroll.Minimum)
                        {
                            poolsHashrateScrollPosition -= rowHeight;
                            panelPoolsHashrateContainer.VerticalScroll.Value = poolsHashrateScrollPosition;
                        }
                    }
                }
                else
                {
                    PoolsHashrateScrollTimer.Stop();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "PoolsHashrateScrollTimer_Tick");
            }
        }

        private void ListViewPoolsHashrate_KeyDown(object sender, KeyEventArgs e)
        {
            e.Handled = true;
        }

        private void ListViewPoolsHashrate_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = true;
        }

        private void ListViewPoolsHashrate_KeyUp(object sender, KeyEventArgs e)
        {
            e.Handled = true;
        }

        private void PanelPoolsHashrateContainer_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                if (listViewPoolsHashrate.Items.Count > 0)
                {
                    int rowHeight = listViewPoolsHashrate.Margin.Vertical + listViewPoolsHashrate.Padding.Vertical + listViewPoolsHashrate.GetItemRect(0).Height;
                    if (poolsHashrateScrollPosition - rowHeight > 0)
                    {
                        panelPoolsHashrateContainer.VerticalScroll.Value = poolsHashrateScrollPosition;
                    }
                    else
                    {
                        panelPoolsHashrateContainer.VerticalScroll.Value = 0;
                        poolsHashrateScrollPosition = 0;
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "panelPoolsHashrateContainer_Paint");
            }
        }
        #endregion

        #region listview appearance and behaviour

        private void ListViewPoolsHashrate_DrawSubItem(object sender, DrawListViewSubItemEventArgs e)
        {
            try
            {
                var text = e.SubItem.Text;


                var font = listViewPoolsHashrate.Font;
                var columnWidth = e.Header.Width;
                var textWidth = TextRenderer.MeasureText(text, font).Width;
                if (textWidth > columnWidth)
                {
                    // Truncate the text
                    var maxText = $"{text.Substring(0, text.Length * columnWidth / textWidth - 3)}...";
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);
                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewPoolsHashrate.BackColor), bounds);
                    }
                    TextRenderer.DrawText(e.Graphics, maxText, font, bounds, e.Item.ForeColor, TextFormatFlags.EndEllipsis | TextFormatFlags.Left);
                }
                else if (textWidth < columnWidth)
                {
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);

                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewPoolsHashrate.BackColor), bounds);
                    }

                    TextRenderer.DrawText(e.Graphics, text, font, bounds, e.SubItem.ForeColor, TextFormatFlags.Left);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "listViewPoolsHashrate_DrawSubItem");
            }
        }

        private void ListViewPoolsHashrate_ColumnWidthChanging(object sender, ColumnWidthChangingEventArgs e)
        {
            // Prevent the column from being resized
            e.Cancel = true;
            e.NewWidth = listViewPoolsHashrate.Columns[e.ColumnIndex].Width;
        }

        private void ListViewPoolsHashrate_ItemSelectionChanged(object sender, ListViewItemSelectionChangedEventArgs e)
        {
            try
            {

                foreach (ListViewItem item in listViewPoolsHashrate.Items)
                {
                    if (item != null)
                    {
                        if (item.Selected)
                        {
                            foreach (ListViewItem.ListViewSubItem subItem in item.SubItems)
                            {
                                subItem.ForeColor = MakeColorLighter(tableTextColor, 40);
                            }
                            btnViewPoolFromPoolsHashrate.Invoke((MethodInvoker)delegate
                            {
                                btnViewPoolFromPoolsHashrate.Location = new Point(btnViewPoolFromPoolsHashrate.Location.X, item.Position.Y);
                                btnViewPoolFromPoolsHashrate.Height = item.Bounds.Height;
                            });
                        }
                        else
                        {
                            foreach (ListViewItem.ListViewSubItem subItem in item.SubItems)
                            {
                                subItem.ForeColor = tableTextColor;
                            }
                        }
                    }
                }
                btnViewPoolFromPoolsHashrate.Visible = listViewPoolsHashrate.SelectedItems.Count > 0;
                lblHeaderBlockAge.Focus();
            }
            catch (Exception ex)
            {
                HandleException(ex, "listViewPoolsHashrate_ItemSelectionChanged");
            }
        }

        #endregion

        #region go to other pools screens
        private void BtnViewPoolFromPoolsHashrate_Click(object sender, EventArgs e)
        {
            // get the name of the pool from the selected row so the pools list can use it to preselect that pool
            foreach (ListViewItem item in listViewPoolsHashrate.Items)
            {
                if (item != null)
                {
                    if (item.Selected)
                    {
                        poolNameToPass = item.SubItems[0].Text;
                    }
                }
            }

            // scan through the existing pools list to find the row we want so it can be selected and scrolled to
            int counter = 0;
            int rowHeight = listViewPoolsList.Margin.Vertical + listViewPoolsList.Padding.Vertical + listViewPoolsList.GetItemRect(0).Height;
            foreach (ListViewItem item in listViewPoolsList.Items)
            {
                if (item != null)
                {
                    counter++;
                    if (String.Compare(item.SubItems[0].Text, poolNameToPass) == 0)
                    {
                        poolsListScrollPosition = counter * rowHeight;
                        break;
                    }
                }
            }

            BtnMenuMiningPools_ClickAsync(sender, e);
        }

        private void ComboBoxPoolsHashrateSortingSelect_OnSelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBoxPoolsHashrateSortingSelect.SelectedIndex == 0)
            {
                comboBoxPoolsBlocksSelectSorting.Invoke((MethodInvoker)delegate
                {
                    comboBoxPoolsBlocksSelectSorting.Texts = "by blocks mined";
                });
                BtnMenuPoolsByBlocks_ClickAsync(sender, e);
            }
            if (comboBoxPoolsHashrateSortingSelect.SelectedIndex == 1)
            {
                return;
            }
        }
        #endregion

        #endregion

        #region ⚡⚡CHARTS FOR POOLS (BLOCK & HASHRATE) SCREENS⚡
        private async void ChartsHashrateForPoolsScreenAsync(string timeperiod)
        {
            try
            {
                label318.Invoke((MethodInvoker)delegate
                {
                    label318.Text = $"TOTAL HASHRATE IN SELECTED PERIOD ({timeperiod})";
                });
                // if chart period too short for this chart, set it to max instead
                if (String.Compare(poolsHashrateTimePeriod, "24h") == 0
                || String.Compare(poolsHashrateTimePeriod, "3d") == 0
                || String.Compare(poolsHashrateTimePeriod, "1w") == 0
                || String.Compare(poolsHashrateTimePeriod, "1m") == 0)
                {
                    poolsHashrateTimePeriod = "3m";
                }

                // clear any previous graph
                formsPlotHashrateForPoolsScreen.Plot.Clear();

                LightUpNodeLight();
                var HashrateAndDifficultyJson = await _hashrateAndDifficultyService.GetHashrateAndDifficultyAsync(timeperiod).ConfigureAwait(true);
                if (!string.IsNullOrEmpty(HashrateAndDifficultyJson))
                {
                    JObject jsonObj = JObject.Parse(HashrateAndDifficultyJson);

                    //split the data into two lists
                    List<HashrateSnapshot>? hashratesList = JsonConvert.DeserializeObject<List<HashrateSnapshot>>(jsonObj["hashrates"]!.ToString());

                    // create arrays of doubles of the hashrates and the dates
                    double[] yValues = hashratesList.Select(h => (double)(h.AvgHashrate / (decimal)1E18)).ToArray(); // divide by 1E18 to get exahash
                                                                                                                     // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = hashratesList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.Timestamp)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();

                    formsPlotHashrateForPoolsScreen.Plot.SetAxisLimits(xValues.Min(), xValues.Max(), 0, yValues.Max() * 1.05);

                    scatter = formsPlotHashrateForPoolsScreen.Plot.AddScatter(xValues, yValues, lineWidth: 1, markerSize: 1);

                    formsPlotHashrateForPoolsScreen.Plot.XAxis.DateTimeFormat(true);
                    formsPlotHashrateForPoolsScreen.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlotHashrateForPoolsScreen.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlotHashrateForPoolsScreen.Plot.XAxis.Ticks(true);
                    formsPlotHashrateForPoolsScreen.Plot.YAxis.Label("EH/s", size: (int)(12 * UIScale), bold: false);

                    // prevent navigating beyond the data
                    formsPlotHashrateForPoolsScreen.Plot.YAxis.SetBoundary(0, yValues.Max() * 1.05);
                    formsPlotHashrateForPoolsScreen.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    formsPlotHashrateForPoolsScreen.Plot.XAxis.Ticks(true);
                    formsPlotHashrateForPoolsScreen.Plot.YAxis.Ticks(true);
                    formsPlotHashrateForPoolsScreen.Plot.XAxis.MajorGrid(true);
                    formsPlotHashrateForPoolsScreen.Plot.YAxis.MajorGrid(true);
                    formsPlotHashrateForPoolsScreen.Plot.XAxis.AxisLabel.IsVisible = false;

                    // refresh the graph
                    formsPlotHashrateForPoolsScreen.Refresh();
                    formsPlotHashrateForPoolsScreen.Visible = true;

                }
                else
                {
                    return;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating hashrate chart");
            }
        }

        private async void ChartPoolsRankingForPoolsScreenAsync(string timeperiod)
        {
            try
            {
                label213.Invoke((MethodInvoker)delegate
                {
                    label213.Text = $"BLOCKS MINED IN SELECTED PERIOD ({timeperiod})";
                });

                // clear any previous graph
                formsPlotPoolRankForPoolScreen.Plot.Clear();

                LightUpNodeLight();

                var PoolRankingDataJson = await _poolsRankingDataService.GetPoolsRankingDataAsync(timeperiod).ConfigureAwait(true);
                if (!string.IsNullOrEmpty(PoolRankingDataJson))
                {
                    JObject jsonObj = JObject.Parse(PoolRankingDataJson);

                    List<PoolsRanking>? poolsRankingList = JsonConvert.DeserializeObject<List<PoolsRanking>>(jsonObj["pools"]!.ToString());

                    // Calculate the total BlockCount
                    int totalBlockCount = poolsRankingList.Sum(p => int.Parse(p.BlockCount));

                    // Create lists for values and labels
                    List<double> values = new List<double>();
                    List<string> labels = new List<string>();

                    // Populate values and labels for the first 15 segments
                    int blocksMinedByTop15 = 0;
                    for (int i = 0; i < Math.Min(15, poolsRankingList!.Count); i++)
                    {
                        var pool = poolsRankingList[i];
                        values.Add(double.Parse(pool.BlockCount));
                        blocksMinedByTop15 += Convert.ToInt32(pool.BlockCount);
                        labels.Add(pool.Name!);
                    }

                    int numberOfBlocksMinedByOthers = totalBlockCount - blocksMinedByTop15;
                    values.Add(numberOfBlocksMinedByOthers);
                    labels.Add("Others");

                    // Copy values list to an array
                    double[] valuesArray = values.ToArray();
                    // Copy labels list to an array
                    string[] labelsArray = labels.ToArray();

                    string[] labelsAndValuesArray = new string[labelsArray.Length]; // this array is used to label the segments
                    for (int i = 0; i < labelsArray.Count(); i++)
                    {
                        string labelAndValue = $"{labelsArray[i]} ({valuesArray[i]})";
                        labelsAndValuesArray[i] = labelAndValue;
                    }

                    // Define the color spectrum
                    Color[] colorSpectrum = GenerateRainbowColorSpectrum(values.Count);

                    // Method to generate a rainbow-like color spectrum
                    Color[] GenerateRainbowColorSpectrum(int segmentCount)
                    {
                        var colors = new Color[segmentCount];
                        double hueIncrement = 360.0 / segmentCount;

                        for (int i = 0; i < segmentCount; i++)
                        {
                            double hue = i * hueIncrement;
                            Color color = ColorFromHSV(hue, 0.6, 0.7);
                            colors[i] = color;
                        }

                        return colors;
                    }

                    // Method to convert HSV (Hue, Saturation, Value) to RGB
                    Color ColorFromHSV(double hue, double saturation, double value)
                    {
                        int hi = Convert.ToInt32(Math.Floor(hue / 60)) % 6;
                        double f = hue / 60 - Math.Floor(hue / 60);

                        value *= 255;
                        int v = Convert.ToInt32(value);
                        int p = Convert.ToInt32(value * (1 - saturation));
                        int q = Convert.ToInt32(value * (1 - f * saturation));
                        int t = Convert.ToInt32(value * (1 - (1 - f) * saturation));

                        if (hi == 0)
                            return Color.FromArgb(255, v, t, p);
                        else if (hi == 1)
                            return Color.FromArgb(255, q, v, p);
                        else if (hi == 2)
                            return Color.FromArgb(255, p, v, t);
                        else if (hi == 3)
                            return Color.FromArgb(255, p, q, v);
                        else if (hi == 4)
                            return Color.FromArgb(255, t, p, v);
                        else
                            return Color.FromArgb(255, v, p, q);
                    }

                    // Create the pie chart 
                    var pie = formsPlotPoolRankForPoolScreen.Plot.AddPie(valuesArray);
                    pie.DonutSize = .3;
                    if (panelMiningBlocks.Visible)
                    {
                        pie.DonutLabel = $"{totalBlockCount - 1}\r\nblocks mined\r\nperiod: {poolsBlocksTimePeriod}";
                    }
                    else
                    {
                        pie.DonutLabel = $"{totalBlockCount - 1}\r\nblocks mined\r\nperiod: {poolsHashrateTimePeriod}";
                    }
                    pie.CenterFont.Color = Color.Orange;
                    pie.CenterFont.Size = (int)(7 * UIScale);
                    pie.CenterFont.Bold = false;
                    pie.SliceFillColors = colorSpectrum;
                    pie.ShowPercentages = true;
                    pie.ShowValues = false;
                    pie.ShowLabels = true;
                    pie.Size = .7;
                    pie.SliceFont.Size = (int)(7 * UIScale);
                    pie.SliceFont.Bold = false;
                    pie.SliceLabels = labelsAndValuesArray;
                    pie.SliceLabelColors = colorSpectrum;
                    pie.SliceLabelPosition = 0.65;

                    var padding = new ScottPlot.PixelPadding(
                        left: 0,
                        right: 0,
                        bottom: 0,
                        top: 0);
                    formsPlotPoolRankForPoolScreen.Plot.ManualDataArea(padding);
                    formsPlotPoolRankForPoolScreen.Configuration.Pan = false;
                    formsPlotPoolRankForPoolScreen.Configuration.MiddleClickDragZoom = false;
                    formsPlotPoolRankForPoolScreen.Configuration.ScrollWheelZoom = false;
                    formsPlotPoolRankForPoolScreen.Configuration.Zoom = false;
                    formsPlotPoolRankForPoolScreen.Plot.YAxis.Label("");
                    formsPlotPoolRankForPoolScreen.Plot.XAxis.Label("");

                    // refresh the graph
                    formsPlotPoolRankForPoolScreen.Refresh();
                    formsPlotPoolRankForPoolScreen.Visible = true;
                }
                else
                {
                    return;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating pools ranking chart");
            }
        }
        #endregion

        #endregion
        //![](resources\tinylogo1.png;;;0.04706,0.04877)
        #region ⚡⚡ POOL SCREEN
        private async void SetupPoolScreenAsync()
        {
            try
            {
                ToggleLoadingAnimation("enable");
                #region get pools list data and create listview
                // if we haven't already got the pools list, get it now
                if (listViewPoolsList.Items.Count == 0)
                {
                    #region get the pools list data
                    LightUpNodeLight();
                    var PoolsListJson = await _miningPoolsListService.GetMiningPoolsListAsync().ConfigureAwait(true);
                    //var poolsList = JsonConvert.DeserializeObject<List<PoolForList>>(PoolsListJson); // Deserialize into a list
                    var poolsList = JsonConvert.DeserializeObject<PoolsWrapper>(PoolsListJson);
                    #endregion
                    #region ListView
                    if (poolsList != null)
                    {
                        // poolsList = poolsList.OrderBy(pool => pool.Name).ToList();


                        listViewPoolsList.Invoke((MethodInvoker)delegate
                        {
                            listViewPoolsList.Items.Clear(); // remove any data that may be there already
                            listViewPoolsList.Columns.Clear();
                        });
                        listViewPoolsList.GetType().InvokeMember("DoubleBuffered", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.SetProperty, null, listViewPoolsList, new object[] { true });

                        listViewPoolsList.Invoke((MethodInvoker)delegate
                        {
                            listViewPoolsList.Columns.Add("Mining pools", (int)(115 * UIScale));
                        });
                        listViewPoolsList.Invoke((MethodInvoker)delegate
                        {
                            listViewPoolsList.Columns.Add("slug", (int)(0));
                        });
                        // Add the items to the ListView
                        int counter = 0;
                        //foreach (var pool in poolsList)
                        foreach (var pool in poolsList.Pools!)
                        {

                            ListViewItem item = new ListViewItem(Convert.ToString(pool.Name)); // create new row
                            item.SubItems.Add(pool.Slug);

                            listViewPoolsList.Invoke((MethodInvoker)delegate
                            {
                                listViewPoolsList.Items.Add(item); // add row
                            });

                            counter++; // count rows

                            // Get the height of each item to set height of whole listview
                            int rowHeight = listViewPoolsList.Margin.Vertical + listViewPoolsList.Padding.Vertical + listViewPoolsList.GetItemRect(0).Height;
                            int itemCount = listViewPoolsList.Items.Count; // Get the number of items in the ListBox
                            int listBoxHeight = (itemCount + 2) * rowHeight; // Calculate the height of the ListBox (the extra 2 gives room for the header)

                            listViewPoolsList.Height = listBoxHeight; // Set the height of the ListBox
                            panel161.Height = listBoxHeight;

                        }

                        #region scrollbar
                        decimal displayRatio = Convert.ToDecimal(panelPoolsListScrollContainer.Height) / Convert.ToDecimal(listViewPoolsList.Height);
                        panelXpubScrollbarInner.Invoke((MethodInvoker)delegate
                        {
                            panelPoolsListScrollbarInner.Height = (int)(panelPoolsListScrollbarOuter.Height * displayRatio);
                            panelPoolsListScrollbarInner.Refresh();
                        });
                        int distanceToBeScrolled = panelPoolsListScrollbarOuter.Height - panelPoolsListScrollbarInner.Height;
                        int numberOfRowsLeftToShow = listViewPoolsList.Items.Count - 32;
                        if (numberOfRowsLeftToShow > 0)
                        {
                            poolsListScrollbarIncrement = Convert.ToInt32((distanceToBeScrolled / numberOfRowsLeftToShow) + 1);
                        }
                        else
                        {
                            panelPoolsListScrollbarInner.Invoke((MethodInvoker)delegate
                            {
                                panelPoolsListScrollbarInner.Height = panelPoolsListScrollbarOuter.Height;
                            });
                            poolsListScrollbarIncrement = 0;
                            btnPoolsListScrollDown.Enabled = false;
                            btnPoolsListScrollUp.Enabled = false;
                        }
                        #endregion
                    }
                    #endregion
                }
                #endregion
                #region set list selection to the pool that was passed as a parameter or to the first in the list
                if (String.Compare(poolNameToPass, "empty") != 0) // we want to select a pool set by the pools hashrate or pools blocks screen
                {
                    int counter = 0;
                    int rowHeight = listViewPoolsList.Margin.Vertical + listViewPoolsList.Padding.Vertical + listViewPoolsList.GetItemRect(0).Height;
                    foreach (ListViewItem item in listViewPoolsList.Items)
                    {
                        if (item != null)
                        {
                            counter++;
                            if (String.Compare(item.SubItems[0].Text, poolNameToPass) == 0)
                            {
                                item.Selected = true;
                                lblSelectedPoolMarker.Invoke((MethodInvoker)delegate
                                {
                                    lblSelectedPoolMarker.Location = new Point(lblSelectedPoolMarker.Location.X, counter * rowHeight);
                                });
                            }
                        }
                    }
                }
                else // or we just want to select the first row
                {
                    if (listViewPoolsList.Items.Count > 0)
                    {
                        listViewPoolsList.Items[0].Selected = true;
                        int rowHeight = listViewPoolsList.Margin.Vertical + listViewPoolsList.Padding.Vertical + listViewPoolsList.GetItemRect(0).Height;
                        lblSelectedPoolMarker.Invoke((MethodInvoker)delegate
                        {
                            lblSelectedPoolMarker.Location = new Point(lblSelectedPoolMarker.Location.X, rowHeight);
                        });
                    }
                }
                #endregion
                ToggleLoadingAnimation("disable");
            }
            catch (Exception ex)
            {
                HandleException(ex, "SetupPoolsByBlocksScreen");
            }
        }

        #region poolslist listview scrolling

        private void BtnPoolsListScrollUp_Click(object sender, EventArgs e)
        {
            try
            {
                if (poolsListScrollPosition > panelPoolsListContainer.VerticalScroll.Minimum)
                {
                    int rowHeight = listViewPoolsList.Margin.Vertical + listViewPoolsList.Padding.Vertical + listViewPoolsList.GetItemRect(0).Height;
                    poolsListScrollPosition -= rowHeight;
                    panelPoolsListScrollbarInner.Location = new Point(panelPoolsListScrollbarInner.Location.X, panelPoolsListScrollbarInner.Location.Y - poolsListScrollbarIncrement);
                    panelPoolsListContainer.VerticalScroll.Value = poolsListScrollPosition;
                    lblHeaderBlockAge.Focus();
                }
                else
                {
                    panelPoolsListScrollbarInner.Location = new Point(panelPoolsListScrollbarInner.Location.X, 0);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnPoolsListScrollUp_Click");
            }
        }

        private void BtnPoolsListScrollUp_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isPoolsListButtonPressed = true;
                PoolsListUpButtonPressed = true;
                PoolsListScrollTimer.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnPoolsListScrollUp_MouseDown");
            }
        }

        private void BtnPoolsListScrollUp_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isPoolsListButtonPressed = false;
                PoolsListUpButtonPressed = false;
                PoolsListScrollTimer.Stop();
                PoolsListScrollTimer.Interval = 50; // reset the interval to its original value
                lblHeaderBlockAge.Focus();
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnPoolsListScrollUp_MouseUp");
            }
        }

        private void BtnPoolsListScrollDown_Click(object sender, EventArgs e)
        {
            try
            {
                int rowHeight = listViewPoolsList.Margin.Vertical + listViewPoolsList.Padding.Vertical + listViewPoolsList.GetItemRect(0).Height;
                if (poolsListScrollPosition < (panelPoolsListContainer.VerticalScroll.Maximum - panelPoolsListContainer.Height) - rowHeight)
                {

                    poolsListScrollPosition += rowHeight;
                    panelPoolsListScrollbarInner.Location = new Point(panelPoolsListScrollbarInner.Location.X, panelPoolsListScrollbarInner.Location.Y + poolsListScrollbarIncrement);
                    panelPoolsListContainer.VerticalScroll.Value = poolsListScrollPosition;
                    lblHeaderBlockAge.Focus();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnPoolsListScrollDown_Click");
            }
        }

        private void BtnPoolsListScrollDown_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isPoolsListButtonPressed = true;
                PoolsListDownButtonPressed = true;
                PoolsListScrollTimer.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnPoolsListScrollDown_MouseDown");
            }
        }

        private void BtnPoolsListScrollDown_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isPoolsListButtonPressed = false;
                PoolsListDownButtonPressed = false;
                PoolsListScrollTimer.Stop();
                PoolsListScrollTimer.Interval = 50; // reset the interval to its original value
                lblHeaderBlockAge.Focus();
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnPoolsListScrollDown_MouseUp");
            }
        }

        private void PoolsListScrollTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                if (isPoolsListButtonPressed)
                {
                    if (PoolsListDownButtonPressed)
                    {
                        int rowHeight = listViewPoolsList.Margin.Vertical + listViewPoolsList.Padding.Vertical + listViewPoolsList.GetItemRect(0).Height;
                        if (poolsListScrollPosition < (panelPoolsListContainer.VerticalScroll.Maximum - panelPoolsListContainer.Height) - rowHeight)
                        {
                            if (poolsListScrollPosition < panelPoolsListContainer.VerticalScroll.Maximum + rowHeight)
                            {
                                poolsListScrollPosition += rowHeight;
                                panelPoolsListScrollbarInner.Location = new Point(panelPoolsListScrollbarInner.Location.X, panelPoolsListScrollbarInner.Location.Y + poolsListScrollbarIncrement);
                                panelPoolsListContainer.VerticalScroll.Value = poolsListScrollPosition;
                            }
                        }
                        else
                        {
                            panelPoolsListScrollbarInner.Location = new Point(panelPoolsListScrollbarInner.Location.X, panelPoolsListScrollbarOuter.Height - panelPoolsListScrollbarInner.Height);
                        }
                    }
                    else if (PoolsListUpButtonPressed)
                    {
                        int rowHeight = listViewPoolsList.Margin.Vertical + listViewPoolsList.Padding.Vertical + listViewPoolsList.GetItemRect(0).Height;
                        if (poolsListScrollPosition > panelPoolsListContainer.VerticalScroll.Minimum)
                        {
                            poolsListScrollPosition -= rowHeight;
                            panelPoolsListScrollbarInner.Location = new Point(panelPoolsListScrollbarInner.Location.X, panelPoolsListScrollbarInner.Location.Y - poolsListScrollbarIncrement);
                            panelPoolsListContainer.VerticalScroll.Value = poolsListScrollPosition;
                        }
                        else
                        {
                            panelPoolsListScrollbarInner.Location = new Point(panelPoolsListScrollbarInner.Location.X, 0);
                        }
                    }
                }
                else
                {
                    PoolsListScrollTimer.Stop();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "PoolsListScrollTimer_Tick");
            }
        }

        private void ListViewPoolsList_KeyDown(object sender, KeyEventArgs e)
        {
            e.Handled = true;
        }

        private void ListViewPoolsList_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = true;
        }

        private void ListViewPoolsList_KeyUp(object sender, KeyEventArgs e)
        {
            e.Handled = true;
        }

        private void PanelPoolsListContainer_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                if (listViewPoolsList.Items.Count > 0)
                {
                    int rowHeight = listViewPoolsList.Margin.Vertical + listViewPoolsList.Padding.Vertical + listViewPoolsList.GetItemRect(0).Height;
                    if (poolsListScrollPosition - rowHeight > 0)
                    {
                        panelPoolsListContainer.VerticalScroll.Value = poolsListScrollPosition;
                    }
                    else
                    {
                        panelPoolsListContainer.VerticalScroll.Value = 0;
                        poolsListScrollPosition = 0;
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "panelPoolsListContainer_Paint");
            }
        }
        #endregion

        #region poolslist listview appearance and behaviour

        private void ListViewPoolsList_ColumnWidthChanging(object sender, ColumnWidthChangingEventArgs e)
        {
            // Prevent the column from being resized
            e.Cancel = true;
            e.NewWidth = listViewPoolsList.Columns[e.ColumnIndex].Width;
        }

        private void ListViewPoolsList_ItemSelectionChanged(object sender, ListViewItemSelectionChangedEventArgs e)
        {
            try
            {
                string slug = "";
                string pool = "";
                int counter = 0;
                int rowHeight = listViewPoolsList.Margin.Vertical + listViewPoolsList.Padding.Vertical + listViewPoolsList.GetItemRect(0).Height;

                foreach (ListViewItem item in listViewPoolsList.Items)
                {
                    if (item != null)
                    {
                        counter++;
                        if (item.Selected)
                        {
                            foreach (ListViewItem.ListViewSubItem subItem in item.SubItems)
                            {
                                subItem.ForeColor = MakeColorLighter(tableTextColor, 40);
                            }
                            slug = item.SubItems[1].Text;
                            pool = item.SubItems[0].Text;
                            lblSelectedPoolMarker.Invoke((MethodInvoker)delegate
                            {
                                lblSelectedPoolMarker.Location = new Point(lblSelectedPoolMarker.Location.X, counter * rowHeight);
                            });
                        }
                        else
                        {
                            foreach (ListViewItem.ListViewSubItem subItem in item.SubItems)
                            {
                                subItem.ForeColor = tableTextColor;
                            }
                        }
                    }
                }

                lblHeaderBlockAge.Focus();
                label231.Invoke((MethodInvoker)delegate
                {
                    label231.Text = $"RECENT BLOCKS MINED BY {pool.ToUpper()}";
                });
                label319.Invoke((MethodInvoker)delegate
                {
                    label319.Text = $"ESTIMATED HASHRATE FOR {pool.ToUpper()}";
                });
                label320.Invoke((MethodInvoker)delegate
                {
                    label320.Text = pool.ToUpper();
                });
                ToggleLoadingAnimation("enable");
                GetPoolStatsAsync(slug);
                GetTenRecentBlocksFromPoolAsync(slug);
                ChartsHashrateForPoolScreenAsync(slug);
                ToggleLoadingAnimation("disable");
                panelPoolsListScrollContainer.Invalidate();
                panel160.Invalidate();
                panelPoolsListContainer.Invalidate();
            }
            catch (Exception ex)
            {
                HandleException(ex, "listViewPoolsByBlock_ItemSelectionChanged");
            }
        }

        private void ListViewPoolsList_DrawSubItem(object sender, DrawListViewSubItemEventArgs e)
        {
            try
            {
                var text = e.SubItem.Text;
                var font = listViewPoolsList.Font;
                var columnWidth = e.Header.Width;
                var textWidth = TextRenderer.MeasureText(text, font).Width;
                if (textWidth > columnWidth)
                {
                    // Truncate the text
                    var maxText = $"{text.Substring(0, text.Length * columnWidth / textWidth - 3)}...";
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);
                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewPoolsList.BackColor), bounds);
                    }
                    TextRenderer.DrawText(e.Graphics, maxText, font, bounds, e.Item.ForeColor, TextFormatFlags.EndEllipsis | TextFormatFlags.Left);
                }
                else if (textWidth < columnWidth)
                {
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);

                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewPoolsList.BackColor), bounds);
                    }

                    TextRenderer.DrawText(e.Graphics, text, font, bounds, e.SubItem.ForeColor, TextFormatFlags.Left);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "listViewPoolsList_DrawSubItem");
            }
        }

        #endregion

        #region link to pool website
        private void LblMiningPoolLink_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            System.Diagnostics.Process.Start(lblMiningPoolLink.Text);
        }
        #endregion

        #region get some pool stats

        private async void GetPoolStatsAsync(string slug)
        {
            try
            {
                LightUpNodeLight();
                var poolDataJson = await _poolDataService.GetPoolDataAsync(slug).ConfigureAwait(true);
                if (poolDataJson != null)
                {
                    lblMiningPoolLink.Invoke((MethodInvoker)delegate
                    {
                        lblMiningPoolLink.Text = poolDataJson.Pool!.Link;
                    });
                    lblMiningPoolPool.Invoke((MethodInvoker)delegate
                    {
                        lblMiningPoolPool.Text = poolDataJson.Pool!.Name;
                    });
                    lblMiningPoolHashrate.Invoke((MethodInvoker)delegate
                    {
                        lblMiningPoolHashrate.Text = Convert.ToString(poolDataJson.EstimatedHashrate);
                    });
                    lblMiningPoolHashrate.Invoke((MethodInvoker)delegate
                    {
                        lblMiningPoolHashrate.Text = Convert.ToString(poolDataJson.EstimatedHashrate);
                    });
                    lblMiningPoolBlocksAll.Invoke((MethodInvoker)delegate
                    {
                        lblMiningPoolBlocksAll.Text = Convert.ToString(poolDataJson.BlockCount!.All);
                    });
                    lblMiningPoolBlocks1w.Invoke((MethodInvoker)delegate
                    {
                        lblMiningPoolBlocks1w.Text = Convert.ToString(poolDataJson.BlockCount!._1w);
                    });
                    lblMiningPoolBlocks24h.Invoke((MethodInvoker)delegate
                    {
                        lblMiningPoolBlocks24h.Text = Convert.ToString(poolDataJson.BlockCount!._24h);
                    });
                    lblMiningPoolBlockShareAll.Invoke((MethodInvoker)delegate
                    {
                        lblMiningPoolBlockShareAll.Text = $"{poolDataJson.BlockShare!.All * 100:F5}%";
                    });
                    lblMiningPoolBlockShare1w.Invoke((MethodInvoker)delegate
                    {
                        lblMiningPoolBlockShare1w.Text = $"{poolDataJson.BlockShare!._1w * 100:F5}%";
                    });
                    lblMiningPoolBlockShare24h.Invoke((MethodInvoker)delegate
                    {
                        lblMiningPoolBlockShare24h.Text = $"{poolDataJson.BlockShare!._24h * 100:F5}%";
                    });
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "GetPoolStatsAsync");
            }
}       

        #endregion

        #region get 10 most recent blocks by selected pool

        private async void GetTenRecentBlocksFromPoolAsync(string slug)
        {
            try
            {
                LightUpNodeLight();
                var BlocksByPoolJson = await _blocksByPoolService.GetBlocksByPoolAsync(slug).ConfigureAwait(true);
                var blocksByPool = JsonConvert.DeserializeObject<List<PoolBlock>>(BlocksByPoolJson); // Deserialize into a list

                if (blocksByPool != null)
                {

                    //LIST VIEW
                    listViewBlocksByPool.Invoke((MethodInvoker)delegate
                    {
                        listViewBlocksByPool.Items.Clear(); // remove any data that may be there already
                        listViewBlocksByPool.Columns.Clear();
                    });
                    listViewBlocksByPool.GetType().InvokeMember("DoubleBuffered", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.SetProperty, null, listViewBlocksByPool, new object[] { true });

                    listViewBlocksByPool.Invoke((MethodInvoker)delegate
                    {
                        listViewBlocksByPool.Columns.Add("Block", (int)(60 * UIScale));
                    });
                    listViewBlocksByPool.Invoke((MethodInvoker)delegate
                    {
                        listViewBlocksByPool.Columns.Add("Timestamp", (int)(140 * UIScale));
                    });
                    listViewBlocksByPool.Invoke((MethodInvoker)delegate
                    {
                        listViewBlocksByPool.Columns.Add("Tx's", (int)(55 * UIScale));
                    });
                    listViewBlocksByPool.Invoke((MethodInvoker)delegate
                    {
                        listViewBlocksByPool.Columns.Add("Size", (int)(60 * UIScale));
                    });
                    listViewBlocksByPool.Invoke((MethodInvoker)delegate
                    {
                        listViewBlocksByPool.Columns.Add("Reward", (int)(100 * UIScale));
                    });
                    listViewBlocksByPool.Invoke((MethodInvoker)delegate
                    {
                        listViewBlocksByPool.Columns.Add("Total fees", (int)(100 * UIScale));
                    });

                    // Add the items to the ListView
                    int counter = 0;
                    foreach (var block in blocksByPool)
                    {

                        ListViewItem item = new ListViewItem(Convert.ToString(block.Height)); // create new row
                        long unixTimestamp = block.Timestamp;

                        // Convert Unix timestamp to DateTime
                        DateTime dateTime = DateTimeOffset.FromUnixTimeSeconds(unixTimestamp).DateTime;

                        string formattedDateTime = dateTime.ToString("yyyy-MM-dd HH:mm:ss");

                        // Add formatted date and time to SubItems
                        item.SubItems.Add(formattedDateTime);
                        //item.SubItems.Add(Convert.ToString(block.Timestamp));
                        item.SubItems.Add(Convert.ToString(block.TxCount));
                        item.SubItems.Add(Convert.ToString(block.Size));
                        decimal rewardInBTC = Convert.ToDecimal(block.Extras!.Reward) / 100000000;
                        item.SubItems.Add(Convert.ToString(rewardInBTC));
                        decimal totalFeesInBTC = Convert.ToDecimal(block.Extras.TotalFees) / 100000000;
                        item.SubItems.Add(Convert.ToString(totalFeesInBTC));
                        listViewBlocksByPool.Invoke((MethodInvoker)delegate
                        {
                            listViewBlocksByPool.Items.Add(item); // add row
                        });

                        counter++; // count rows

                        // Get the height of each item to set height of whole listview
                        int rowHeight = listViewBlocksByPool.Margin.Vertical + listViewBlocksByPool.Padding.Vertical + listViewBlocksByPool.GetItemRect(0).Height;
                        int itemCount = listViewBlocksByPool.Items.Count; // Get the number of items in the ListBox
                        int listBoxHeight = (itemCount + 2) * rowHeight; // Calculate the height of the ListBox (the extra 2 gives room for the header)

                        listViewBlocksByPool.Height = listBoxHeight; // Set the height of the ListBox
                        panel163.Height = listBoxHeight;
                    }

                    if (listViewBlocksByPool.Items.Count > 0)
                    {
                        listViewBlocksByPool.Items[0].Selected = true;
                    }

                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "GetTenRecentBlocksFromPool");
            }
        }

        #endregion

        #region recentblocksbypool listview appearance and behaviour
        private void ListViewBlocksByPool_DrawSubItem(object sender, DrawListViewSubItemEventArgs e)
        {
            try
            {
                var text = e.SubItem.Text;
                var font = listViewBlocksByPool.Font;
                var columnWidth = e.Header.Width;
                var textWidth = TextRenderer.MeasureText(text, font).Width;
                if (textWidth > columnWidth)
                {
                    // Truncate the text
                    var maxText = $"{text.Substring(0, text.Length * columnWidth / textWidth - 3)}...";
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);
                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewBlocksByPool.BackColor), bounds);
                    }
                    TextRenderer.DrawText(e.Graphics, maxText, font, bounds, e.Item.ForeColor, TextFormatFlags.EndEllipsis | TextFormatFlags.Left);
                }
                else if (textWidth < columnWidth)
                {
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);

                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewBlocksByPool.BackColor), bounds);
                    }

                    TextRenderer.DrawText(e.Graphics, text, font, bounds, e.SubItem.ForeColor, TextFormatFlags.Left);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "listViewBlocksByPool_DrawSubItem");
            }
        }

        private void ListViewBlocksByPool_ItemSelectionChanged(object sender, ListViewItemSelectionChangedEventArgs e)
        {
            try
            {
                foreach (ListViewItem item in listViewBlocksByPool.Items)
                {
                    if (item != null)
                    {
                        if (item.Selected)
                        {
                            foreach (ListViewItem.ListViewSubItem subItem in item.SubItems)
                            {
                                subItem.ForeColor = MakeColorLighter(tableTextColor, 40);
                            }
                            btnViewBlockFromBlocksByPool.Invoke((MethodInvoker)delegate
                            {
                                btnViewBlockFromBlocksByPool.Location = new Point(btnViewBlockFromBlocksByPool.Location.X, item.Position.Y);
                                btnViewBlockFromBlocksByPool.Height = item.Bounds.Height;
                            });
                        }
                        else
                        {
                            foreach (ListViewItem.ListViewSubItem subItem in item.SubItems)
                            {
                                subItem.ForeColor = tableTextColor;
                            }
                        }
                    }
                }
                btnViewBlockFromBlocksByPool.Visible = listViewBlocksByPool.SelectedItems.Count > 0;
                lblHeaderBlockAge.Focus();
            }
            catch (Exception ex)
            {
                HandleException(ex, "listViewBlocksByPool_ItemSelectionChanged");
            }
        }

        private async void BtnViewBlockFromBlocksByPool_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                await CheckNetworkStatusAsync().ConfigureAwait(true);
                // Get the selected item
                ListViewItem selectedItem = listViewBlocksByPool.SelectedItems[0];
                if (selectedItem != null)
                {
                    string submittedBlockNumber = selectedItem.SubItems[0].Text;
                    numericUpDownSubmittedBlockNumber.Invoke((MethodInvoker)delegate
                    {
                        numericUpDownSubmittedBlockNumber.Text = submittedBlockNumber; // copy block number to block screen
                    });
                    LookupBlockAsync();
                    //show the block screen
                    BtnMenuBlock_ClickAsync(sender, e);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnViewBlockFromBlockList_Click");
            }
        }

        private void ListViewBlocksByPool_ColumnWidthChanging(object sender, ColumnWidthChangingEventArgs e)
        {
            e.Cancel = true;
            e.NewWidth = listViewBlocksByPool.Columns[e.ColumnIndex].Width;
        }

        #endregion

        #region hashrate chart for pools screen
        private async void ChartsHashrateForPoolScreenAsync(string slug)
        {
            try
            {

                // clear any previous graph
                formsPlotPoolHashrate.Plot.Clear();

                LightUpNodeLight();
                var HashrateJson = await _poolHashrateService.GetPoolHashrateAsync(slug).ConfigureAwait(true);
                if (!string.IsNullOrEmpty(HashrateJson))
                {
                    List<PoolHashrateSnapshot>? hashratesList = JsonConvert.DeserializeObject<List<PoolHashrateSnapshot>>(HashrateJson);

                    // create arrays of doubles of the hashrates and the dates
                    double[] yValues = hashratesList.Select(h => (double)(h.AvgHashrate / (decimal)1E18)).ToArray(); // divide by 1E18 to get exahash
                                                                                                                     // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = hashratesList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.Timestamp)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();

                    if (xValues.Max() > xValues.Min())
                    {
                        formsPlotPoolHashrate.Plot.SetAxisLimits(xValues.Min(), xValues.Max(), 0, yValues.Max() * 1.05);

                        scatter = formsPlotPoolHashrate.Plot.AddScatter(xValues, yValues, lineWidth: 1, markerSize: 1);

                        formsPlotPoolHashrate.Plot.XAxis.DateTimeFormat(true);
                        formsPlotPoolHashrate.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                        formsPlotPoolHashrate.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                        formsPlotPoolHashrate.Plot.XAxis.Ticks(true);
                        formsPlotPoolHashrate.Plot.YAxis.Label("EH/s", size: (int)(12 * UIScale), bold: false);

                        // prevent navigating beyond the data
                        formsPlotPoolHashrate.Plot.YAxis.SetBoundary(0, yValues.Max() * 1.05);
                        formsPlotPoolHashrate.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                        formsPlotPoolHashrate.Plot.XAxis.Ticks(true);
                        formsPlotPoolHashrate.Plot.YAxis.Ticks(true);
                        formsPlotPoolHashrate.Plot.XAxis.MajorGrid(true);
                        formsPlotPoolHashrate.Plot.YAxis.MajorGrid(true);
                        formsPlotPoolHashrate.Plot.XAxis.AxisLabel.IsVisible = false;

                        // refresh the graph
                        formsPlotPoolHashrate.Refresh();
                        formsPlotPoolHashrate.Visible = true;
                    }
                    else
                    {
                        formsPlotPoolHashrate.Visible = false;
                    }
                }
                else
                {
                    return;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating pool hashrate chart");
            }
        }
        #endregion

        #endregion
        //![](resources\tinylogo1.png;;;0.04706,0.04877)
        #region ⚡⚡⚡ CHARTS SCREEN⚡
        #region select chart
        private void ComboBoxChartSelect_OnSelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBoxChartSelect.SelectedIndex == 0)
            {
                ChartFeeRatesAsync();
            }
            if (comboBoxChartSelect.SelectedIndex == 1)
            {
                ChartBlockFeesAsync();
            }
            if (comboBoxChartSelect.SelectedIndex == 2)
            {
                ChartRewardAsync();
            }
            if (comboBoxChartSelect.SelectedIndex == 3)
            {
                ChartBlockSizeAsync();
            }
            if (comboBoxChartSelect.SelectedIndex == 4)
            {
                ChartHashrateAsync();
            }
            if (comboBoxChartSelect.SelectedIndex == 5)
            {
                ChartDifficultyAsync();
            }
            if (comboBoxChartSelect.SelectedIndex == 6)
            {
                ChartCirculationAsync();
            }
            if (comboBoxChartSelect.SelectedIndex == 7)
            {
                ChartUniqueAddressesAsync();
            }
            if (comboBoxChartSelect.SelectedIndex == 8)
            {
                ChartUTXOAsync();
            }
            if (comboBoxChartSelect.SelectedIndex == 9)
            {
                ChartPoolsRankingAsync();
            }
            if (comboBoxChartSelect.SelectedIndex == 10)
            {
                ChartNodesByNetworkAsync();
            }
            if (comboBoxChartSelect.SelectedIndex == 11)
            {
                ChartNodesByCountryAsync();
            }
            if (comboBoxChartSelect.SelectedIndex == 12)
            {
                ChartLightningCapacityAsync();
            }
            if (comboBoxChartSelect.SelectedIndex == 13)
            {
                ChartLightningChannelsAsync();
            }
            if (comboBoxChartSelect.SelectedIndex == 14)
            {
                ChartPriceAsync();
            }
            if (comboBoxChartSelect.SelectedIndex == 15)
            {
                ChartMarketCapAsync();
            }
        }
        #endregion
        #region individual charts
        #region chart - pools ranking
        private async void ChartPoolsRankingAsync()
        {
            try
            {
                comboBoxChartSelect.Invoke((MethodInvoker)delegate
                {
                    comboBoxChartSelect.Texts = "🔗 pools ranking";
                });
                previouslyShownChart = comboBoxChartSelect.SelectedIndex;
                ActiveChart = "PoolsRanking";
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot1.Visible = false;
                formsPlot3.Visible = false;
                chartType = "poolranking";

                DisableIrrelevantTimePeriods();

                // clear any previous graph
                ClearAllChartData();
                int desiredSpacing = 98; // spacing added to title to force left-align in
                string spacing = new string('\u00A0', desiredSpacing);
                string title = $"Mining pool rankings - time period: {chartPeriod}{spacing}";
                formsPlot2.Plot.Title(title, size: (int)(13 * UIScale), color: labelColor, bold: false);

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");
                LightUpNodeLight();
                var PoolRankingDataJson = await _poolsRankingDataService.GetPoolsRankingDataAsync(chartPeriod).ConfigureAwait(true);
                if (!string.IsNullOrEmpty(PoolRankingDataJson))
                {
                    JObject jsonObj = JObject.Parse(PoolRankingDataJson);

                    List<PoolsRanking>? poolsRankingList = JsonConvert.DeserializeObject<List<PoolsRanking>>(jsonObj["pools"]!.ToString());

                    // Calculate the total BlockCount
                    int totalBlockCount = poolsRankingList.Sum(p => int.Parse(p.BlockCount));

                    // Create lists for values and labels
                    List<double> values = new List<double>();
                    List<string> labels = new List<string>();

                    // Populate values and labels for the first 15 segments
                    int blocksMinedByTop15 = 0;
                    for (int i = 0; i < Math.Min(15, poolsRankingList!.Count); i++)
                    {
                        var pool = poolsRankingList[i];
                        values.Add(double.Parse(pool.BlockCount));
                        blocksMinedByTop15 += Convert.ToInt32(pool.BlockCount);
                        labels.Add(pool.Name!);
                    }

                    int numberOfBlocksMinedByOthers = totalBlockCount - blocksMinedByTop15;
                    values.Add(numberOfBlocksMinedByOthers);
                    labels.Add("Others");

                    // Copy values list to an array
                    double[] valuesArray = values.ToArray();
                    // Copy labels list to an array
                    string[] labelsArray = labels.ToArray();

                    string[] labelsAndValuesArray = new string[labelsArray.Length]; // this array is used to label the segments
                    for (int i = 0; i < labelsArray.Count(); i++)
                    {
                        string labelAndValue = $"{labelsArray[i]} ({valuesArray[i]})";
                        labelsAndValuesArray[i] = labelAndValue;
                    }

                    // Define the color spectrum
                    Color[] colorSpectrum = GenerateRainbowColorSpectrum(values.Count);

                    // Method to generate a rainbow-like color spectrum
                    Color[] GenerateRainbowColorSpectrum(int segmentCount)
                    {
                        var colors = new Color[segmentCount];
                        double hueIncrement = 360.0 / segmentCount;

                        for (int i = 0; i < segmentCount; i++)
                        {
                            double hue = i * hueIncrement;
                            Color color = ColorFromHSV(hue, 0.6, 0.7);
                            colors[i] = color;
                        }

                        return colors;
                    }

                    // Method to convert HSV (Hue, Saturation, Value) to RGB
                    Color ColorFromHSV(double hue, double saturation, double value)
                    {
                        int hi = Convert.ToInt32(Math.Floor(hue / 60)) % 6;
                        double f = hue / 60 - Math.Floor(hue / 60);

                        value *= 255;
                        int v = Convert.ToInt32(value);
                        int p = Convert.ToInt32(value * (1 - saturation));
                        int q = Convert.ToInt32(value * (1 - f * saturation));
                        int t = Convert.ToInt32(value * (1 - (1 - f) * saturation));

                        if (hi == 0)
                            return Color.FromArgb(255, v, t, p);
                        else if (hi == 1)
                            return Color.FromArgb(255, q, v, p);
                        else if (hi == 2)
                            return Color.FromArgb(255, p, v, t);
                        else if (hi == 3)
                            return Color.FromArgb(255, p, q, v);
                        else if (hi == 4)
                            return Color.FromArgb(255, t, p, v);
                        else
                            return Color.FromArgb(255, v, p, q);
                    }

                    // Create the pie chart 
                    var pie = formsPlot2.Plot.AddPie(valuesArray);
                    pie.DonutSize = .3;
                    pie.DonutLabel = $"{totalBlockCount - 1}\r\nblocks mined\r\nperiod: {chartPeriod}";
                    pie.CenterFont.Color = Color.Orange;
                    pie.CenterFont.Size = (int)(13 * UIScale);
                    pie.CenterFont.Bold = false;
                    pie.SliceFillColors = colorSpectrum;
                    pie.ShowPercentages = true;
                    pie.ShowValues = false;
                    pie.ShowLabels = true;
                    pie.Size = .7;
                    pie.SliceFont.Size = (int)(11 * UIScale);
                    pie.SliceFont.Bold = false;
                    pie.SliceLabels = labelsAndValuesArray;
                    pie.SliceLabelColors = colorSpectrum;
                    pie.SliceLabelPosition = 0.60;

                    var padding = new ScottPlot.PixelPadding(
                        left: 45,
                        right: 25,
                        bottom: 15,
                        top: 27);
                    formsPlot2.Plot.ManualDataArea(padding);

                    formsPlot2.Plot.YAxis.Label("");
                    formsPlot2.Plot.XAxis.Label("");

                    // refresh the graph
                    formsPlot2.Refresh();
                    formsPlot2.Visible = true;
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                    chartRendered = true;
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating pools ranking chart");
            }
        }
        #endregion
        #region chart - fee rates
        private async void ChartFeeRatesAsync()
        {
            try
            {
                comboBoxChartSelect.Invoke((MethodInvoker)delegate
                {
                    comboBoxChartSelect.Texts = "🔗 fee rates";
                });
                previouslyShownChart = comboBoxChartSelect.SelectedIndex;
                ActiveChart = "FeeRates";
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                chartType = "feerates";
                DisableIrrelevantTimePeriods();
                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title($"Block fee rates - time period: {chartPeriod}", size: (int)(13 * UIScale), bold: false);
                PrepareLinearScaleChart();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // Create an instance of HttpClient
                HttpClient client = new HttpClient();

                string url = $"{NodeURL}v1/mining/blocks/fee-rates/{chartPeriod}";
                LightUpNodeLight();
                string json = await client.GetStringAsync(url).ConfigureAwait(true);
                if (!string.IsNullOrEmpty(json))
                {
                    List<BlockFeeRates>? feeRatesList = JsonConvert.DeserializeObject<List<BlockFeeRates>>(json.ToString());

                    // create arrays of doubles of the hashrates and the dates
                    double[] yValues1 = feeRatesList.Select(h => (double)(h.AvgFee_100)).ToArray();
                    double[] yValues2 = feeRatesList.Select(h => (double)(h.AvgFee_90)).ToArray();
                    double[] yValues3 = feeRatesList.Select(h => (double)(h.AvgFee_75)).ToArray();
                    double[] yValues4 = feeRatesList.Select(h => (double)(h.AvgFee_50)).ToArray();
                    double[] yValues5 = feeRatesList.Select(h => (double)(h.AvgFee_25)).ToArray();
                    double[] yValues6 = feeRatesList.Select(h => (double)(h.AvgFee_10)).ToArray();
                    double[] yValues7 = feeRatesList.Select(h => (double)(h.AvgFee_0)).ToArray();
                    // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = feeRatesList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.Timestamp)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();

                    // prevent navigating beyond the data
                    double yBoundary = yValues2.Max();
                    if (yBoundary > 5000)
                    {
                        yBoundary = 5000;
                    }
                    formsPlot1.Plot.SetAxisLimits(xValues.Min(), xValues.Max(), 0, yBoundary);
                    formsPlot1.Plot.YAxis.SetBoundary(0, yBoundary);
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());
                    formsPlot1.Plot.AddFill(xValues, yValues1, 0, color: Color.FromArgb(30, Color.DarkGray));
                    formsPlot1.Plot.AddFill(xValues, yValues2, 0, color: Color.Red);
                    formsPlot1.Plot.AddFill(xValues, yValues3, 0, color: Color.Orange);
                    formsPlot1.Plot.AddFill(xValues, yValues4, 0, color: Color.Yellow);
                    formsPlot1.Plot.AddFill(xValues, yValues5, 0, color: Color.LimeGreen);
                    formsPlot1.Plot.AddFill(xValues, yValues6, 0, color: Color.Blue);
                    formsPlot1.Plot.AddFill(xValues, yValues7, 0, color: Color.Indigo);
                    // create 'pretend' (empty) scatters purely so we can generate a legend/key
                    formsPlot1.Plot.AddScatter(new double[] { 0 }, new double[] { 0 }, markerSize: 0, label: "minimum", color: Color.Indigo);
                    formsPlot1.Plot.AddScatter(new double[] { 0 }, new double[] { 0 }, markerSize: 0, label: "10th", color: Color.Blue);
                    formsPlot1.Plot.AddScatter(new double[] { 0 }, new double[] { 0 }, markerSize: 0, label: "25th", color: Color.LimeGreen);
                    formsPlot1.Plot.AddScatter(new double[] { 0 }, new double[] { 0 }, markerSize: 0, label: "median", color: Color.Yellow);
                    formsPlot1.Plot.AddScatter(new double[] { 0 }, new double[] { 0 }, markerSize: 0, label: "75th", color: Color.Orange);
                    formsPlot1.Plot.AddScatter(new double[] { 0 }, new double[] { 0 }, markerSize: 0, label: "90th", color: Color.Red);
                    formsPlot1.Plot.AddScatter(new double[] { 0 }, new double[] { 0 }, markerSize: 0, label: "maximum", color: Color.DarkGray);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Label("sats per v/byte", size: (int)(12 * UIScale), bold: false);
                    formsPlot1.Plot.XAxis.Label("");

                    Color legendOutlineColour = Color.FromArgb(50, 50, 50);
                    if (String.Compare(lblChartsDarkBackground.Text, "✔️") == 0 || String.Compare(lblChartsMediumBackground.Text, "✔️") == 0)
                    {
                        legendOutlineColour = Color.FromArgb(50, 50, 50);
                    }
                    else
                    {
                        legendOutlineColour = Color.FromArgb(220, 220, 200);
                    }
                    var legend = formsPlot1.Plot.Legend();
                    legend.Location = Alignment.UpperLeft;
                    legend.FillColor = Color.Transparent;
                    legend.FontColor = label77.ForeColor;
                    legend.OutlineColor = legendOutlineColour;
                    legend.ShadowColor = chartsBackgroundColor;

                    // Set the tick and gridline settings
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);

                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                    chartRendered = true;
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating fee rates chart");
            }
        }

        #endregion
        #region chart - nodes by network
        private async void ChartNodesByNetworkAsync()
        {
            try
            {
                comboBoxChartSelect.Invoke((MethodInvoker)delegate
                {
                    comboBoxChartSelect.Texts = "⚡ nodes by network";
                });
                previouslyShownChart = comboBoxChartSelect.SelectedIndex;
                ActiveChart = "NodesByNetwork";
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                chartType = "lightningnodesbynetwork";

                // if chart period too short for this chart, set it to max instead
                if (String.Compare(chartPeriod, "24h") == 0 || String.Compare(chartPeriod, "3d") == 0 || String.Compare(chartPeriod, "1w") == 0)
                {
                    chartPeriod = "all";
                    comboBoxChartsTimePeriod.OnSelectedIndexChanged -= ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                    comboBoxChartsTimePeriod.SelectedIndex = 9;
                    comboBoxChartsTimePeriod.Texts = "all data";
                    comboBoxChartsTimePeriod.OnSelectedIndexChanged += ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                }
                DisableIrrelevantTimePeriods();

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title($"Number of Lightning nodes by network - time period: {chartPeriod}", size: (int)(13 * UIScale), bold: false);

                PrepareLinearScaleChart();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // Create an instance of HttpClient
                HttpClient client = new HttpClient();

                string url = $"{NodeURL}v1/lightning/statistics/{chartPeriod}";
                LightUpNodeLight();
                string json = await client.GetStringAsync(url).ConfigureAwait(true);
                if (!string.IsNullOrEmpty(json))
                {
                    List<NodesPerNetworkAndCapacity>? lightningNodesPerNetworkList = JsonConvert.DeserializeObject<List<NodesPerNetworkAndCapacity>>(json.ToString());

                    // create arrays of doubles
                    double[] yValues1 = lightningNodesPerNetworkList.Select(h => (double)(h.Tor_nodes)).ToArray();
                    double[] yValues2 = lightningNodesPerNetworkList.Select(h => (double)(h.Clearnet_nodes)).ToArray();
                    double[] yValues3 = lightningNodesPerNetworkList.Select(h => (double)(h.Unannounced_nodes)).ToArray();
                    double[] yValues4 = lightningNodesPerNetworkList.Select(h => (double)(h.Clearnet_tor_nodes)).ToArray();
                    // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = lightningNodesPerNetworkList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.Added)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();

                    // prevent navigating beyond the data
                    double yBoundary = yValues1.Max();
                    formsPlot1.Plot.SetAxisLimits(xValues.Min(), xValues.Max(), 0, yBoundary);
                    formsPlot1.Plot.YAxis.SetBoundary(0, yBoundary);
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());
                    formsPlot1.Plot.AddScatter(xValues, yValues1, lineWidth: 1, markerSize: 1, color: Color.IndianRed, label: "Darknet only (Tor, I2P, cjdns)");
                    formsPlot1.Plot.AddScatter(xValues, yValues2, lineWidth: 1, markerSize: 1, color: Color.OliveDrab, label: "Clearnet only (IPv4, IPv6)");
                    formsPlot1.Plot.AddScatter(xValues, yValues3, lineWidth: 1, markerSize: 1, color: Color.SteelBlue, label: "Clearnet and Darknet");
                    formsPlot1.Plot.AddScatter(xValues, yValues4, lineWidth: 1, markerSize: 1, color: Color.Gold, label: "Unknown");

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Label("lightning nodes per network", size: (int)(12 * UIScale), bold: false);
                    formsPlot1.Plot.XAxis.Label("");

                    Color legendOutlineColour = Color.FromArgb(50, 50, 50);
                    if (String.Compare(lblChartsDarkBackground.Text, "✔️") == 0 || String.Compare(lblChartsMediumBackground.Text, "✔️") == 0)
                    {
                        legendOutlineColour = Color.FromArgb(50, 50, 50);
                    }
                    else
                    {
                        legendOutlineColour = Color.FromArgb(220, 220, 200);
                    }
                    var legend = formsPlot1.Plot.Legend();
                    legend.Location = Alignment.UpperLeft;
                    legend.FillColor = Color.Transparent;
                    legend.FontColor = label77.ForeColor;
                    legend.OutlineColor = legendOutlineColour;
                    legend.ShadowColor = chartsBackgroundColor;

                    // Set the tick and gridline settings
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);

                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                    chartRendered = true;
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating nodes by network chart");
            }
        }
        #endregion
        #region chart - hashrate linear and log
        private async void ChartHashrateAsync()
        {
            try
            {
                comboBoxChartSelect.Invoke((MethodInvoker)delegate
                {
                    comboBoxChartSelect.Texts = "🔗 hashrate";
                });
                previouslyShownChart = comboBoxChartSelect.SelectedIndex;
                ActiveChart = "Hashrate";
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                btnHashrateScaleLinear.Enabled = false;
                btnHashrateScaleLog.Enabled = true;
                chartType = "hashrate";
                // if chart period too short for this chart, set it to max instead
                if (String.Compare(chartPeriod, "24h") == 0
                || String.Compare(chartPeriod, "3d") == 0
                || String.Compare(chartPeriod, "1w") == 0)
                {
                    chartPeriod = "all";
                    comboBoxChartsTimePeriod.OnSelectedIndexChanged -= ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                    comboBoxChartsTimePeriod.SelectedIndex = 9;
                    comboBoxChartsTimePeriod.Texts = "all data";
                    comboBoxChartsTimePeriod.OnSelectedIndexChanged += ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                }
                DisableIrrelevantTimePeriods();

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title($"Hashrate (exahash per second) - time period: {chartPeriod}", size: (int)(13 * UIScale), bold: false);

                PrepareLinearScaleChart();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");
                LightUpNodeLight();
                // get a series of historic dates/hashrates/difficulties
                var HashrateAndDifficultyJson = await _hashrateAndDifficultyService.GetHashrateAndDifficultyAsync(chartPeriod).ConfigureAwait(true);
                if (!string.IsNullOrEmpty(HashrateAndDifficultyJson))
                {
                    JObject jsonObj = JObject.Parse(HashrateAndDifficultyJson);

                    //split the data into two lists
                    List<HashrateSnapshot>? hashratesList = JsonConvert.DeserializeObject<List<HashrateSnapshot>>(jsonObj["hashrates"]!.ToString());

                    // create arrays of doubles of the hashrates and the dates
                    double[] yValues = hashratesList.Select(h => (double)(h.AvgHashrate / (decimal)1E18)).ToArray(); // divide by 1E18 to get exahash
                                                                                                                     // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = hashratesList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.Timestamp)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();

                    formsPlot1.Plot.SetAxisLimits(xValues.Min(), xValues.Max(), 0, yValues.Max() * 1.05);

                    scatter = formsPlot1.Plot.AddScatter(xValues, yValues, lineWidth: 1, markerSize: 1);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Label("EH/s", size: (int)(12 * UIScale), bold: false);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(0, yValues.Max() * 1.05);
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;

                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);

                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;

                    panelHashrateScaleButtons.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                    chartRendered = true;
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating hashrate chart");
            }
        }

        private async void ChartHashrateLogAsync()
        {
            try
            {
                comboBoxChartSelect.Invoke((MethodInvoker)delegate
                {
                    comboBoxChartSelect.Texts = "🔗 hashrate";
                });
                previouslyShownChart = comboBoxChartSelect.SelectedIndex;
                ActiveChart = "HashrateLog";
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                btnHashrateScaleLinear.Enabled = true;
                btnHashrateScaleLog.Enabled = false;
                chartType = "hashratelog";

                if (String.Compare(chartPeriod, "24h") == 0
                || String.Compare(chartPeriod, "3d") == 0
                || String.Compare(chartPeriod, "1w") == 0)
                {
                    chartPeriod = "all";
                    comboBoxChartsTimePeriod.OnSelectedIndexChanged -= ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                    comboBoxChartsTimePeriod.SelectedIndex = 9;
                    comboBoxChartsTimePeriod.Texts = "all data";
                    comboBoxChartsTimePeriod.OnSelectedIndexChanged += ComboBoxChartsTimePeriod_OnSelectedIndexChanged;

                }

                DisableIrrelevantTimePeriods();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title($"Hashrate (terrahash per second) - time period: {chartPeriod} (log scale)", size: (int)(13 * UIScale), bold: false);
                LightUpNodeLight();
                // get a series of historic dates/hashrates/difficulties
                var HashrateAndDifficultyJson = await _hashrateAndDifficultyService.GetHashrateAndDifficultyAsync(chartPeriod).ConfigureAwait(true);
                if (!string.IsNullOrEmpty(HashrateAndDifficultyJson))
                {
                    JObject jsonObj = JObject.Parse(HashrateAndDifficultyJson);

                    //split the data into two lists
                    List<HashrateSnapshot>? hashratesList = JsonConvert.DeserializeObject<List<HashrateSnapshot>>(jsonObj["hashrates"]!.ToString());

                    // create arrays of doubles of the hashrates and the dates
                    double[] yValues = hashratesList.Select(h => (double)(h.AvgHashrate / (decimal)1E12)).ToArray(); // divide by 1E12 to get terrahash
                                                                                                                     // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = hashratesList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.Timestamp)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();


                    List<double> filteredYValues = new List<double>();
                    List<double> filteredXValues = new List<double>();

                    for (int i = 0; i < hashratesList!.Count; i++)
                    {
                        double yValue = (double)yValues[i];
                        if (yValue > 0)
                        {
                            filteredYValues.Add(Math.Log10(yValue));
                            filteredXValues.Add(xValues[i]);
                        }
                    }

                    double[] yValues2 = filteredYValues.ToArray();
                    double[] xValuesFiltered = filteredXValues.ToArray();


                    double minY = yValues2.Min();
                    double maxY = yValues2.Max() * 1.05;
                    formsPlot1.Plot.SetAxisLimits(xValuesFiltered.Min(), xValuesFiltered.Max(), minY, maxY);
                    scatter = formsPlot1.Plot.AddScatter(xValuesFiltered, yValues2, lineWidth: 1, markerSize: 1);

                    // Use a custom formatter to control the label for each tick mark
                    static string logTickLabels(double y) => Math.Pow(10, y).ToString("N0");
                    formsPlot1.Plot.YAxis.TickLabelFormat(logTickLabels);

                    // Use log-spaced minor tick marks and grid lines
                    formsPlot1.Plot.YAxis.MinorLogScale(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MinorGrid(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Label("TH/s", size: (int)(12 * UIScale), bold: false);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(minY, maxY);
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;
                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;
                    panelHashrateScaleButtons.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                    chartRendered = true;
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating hashrate chart (log) chart");
            }
        }
        #endregion
        #region chart - lightning capacity
        private async void ChartLightningCapacityAsync()
        {
            try
            {
                comboBoxChartSelect.Invoke((MethodInvoker)delegate
                {
                    comboBoxChartSelect.Texts = "⚡ nodes by capacity";
                });
                previouslyShownChart = comboBoxChartSelect.SelectedIndex;
                ActiveChart = "LightningCapacity";
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                chartType = "lightningcapacity";
                // if chart period too short for this chart, set it to max instead
                if (String.Compare(chartPeriod, "24h") == 0
                || String.Compare(chartPeriod, "3d") == 0
                || String.Compare(chartPeriod, "1w") == 0)
                {
                    chartPeriod = "all";
                    comboBoxChartsTimePeriod.OnSelectedIndexChanged -= ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                    comboBoxChartsTimePeriod.SelectedIndex = 9;
                    comboBoxChartsTimePeriod.Texts = "all data";
                    comboBoxChartsTimePeriod.OnSelectedIndexChanged += ComboBoxChartsTimePeriod_OnSelectedIndexChanged;

                }

                DisableIrrelevantTimePeriods();

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title($"Lightning network capacity - time period: {chartPeriod}", size: (int)(13 * UIScale), bold: false);
                PrepareLinearScaleChart();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // Create an instance of HttpClient
                HttpClient client = new HttpClient();

                string url = $"{NodeURL}v1/lightning/statistics/{chartPeriod}";
                LightUpNodeLight();
                string json = await client.GetStringAsync(url).ConfigureAwait(true);
                if (!string.IsNullOrEmpty(json))
                {
                    List<NodesPerNetworkAndCapacity>? lightningCapacityList = JsonConvert.DeserializeObject<List<NodesPerNetworkAndCapacity>>(json.ToString());

                    // create arrays of doubles
                    double[] yValuesCapacity = lightningCapacityList.Select(h => (double)(h.Total_capacity / 100000000)).ToArray();

                    // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = lightningCapacityList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.Added)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();

                    formsPlot1.Plot.SetAxisLimits(xValues.Min(), xValues.Max(), 0, yValuesCapacity.Max() * 1.05);

                    scatter = formsPlot1.Plot.AddScatter(xValues, yValuesCapacity, lineWidth: 1, markerSize: 1);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Label("Capacity (BTC)", size: (int)(12 * UIScale), bold: false);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(0, yValuesCapacity.Max() * 1.05);
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;

                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);

                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                    chartRendered = true;
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating lightning capacity chart");
            }
        }
        #endregion
        #region chart - lightning channels
        private async void ChartLightningChannelsAsync()
        {
            try
            {
                comboBoxChartSelect.Invoke((MethodInvoker)delegate
                {
                    comboBoxChartSelect.Texts = "⚡ channels";
                });
                previouslyShownChart = comboBoxChartSelect.SelectedIndex;
                ActiveChart = "LightningChannels";
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                chartType = "lightningchannels";
                // if chart period too short for this chart, set it to max instead
                if (String.Compare(chartPeriod, "24h") == 0
                || String.Compare(chartPeriod, "3d") == 0
                || String.Compare(chartPeriod, "1w") == 0)
                {
                    chartPeriod = "all";
                    comboBoxChartsTimePeriod.OnSelectedIndexChanged -= ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                    comboBoxChartsTimePeriod.SelectedIndex = 9;
                    comboBoxChartsTimePeriod.Texts = "all data";
                    comboBoxChartsTimePeriod.OnSelectedIndexChanged += ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                }

                DisableIrrelevantTimePeriods();

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title($"Lightning network channels - time period: {chartPeriod}", size: (int)(13 * UIScale), bold: false);
                PrepareLinearScaleChart();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // Create an instance of HttpClient
                HttpClient client = new HttpClient();

                string url = $"{NodeURL}v1/lightning/statistics/{chartPeriod}";
                LightUpNodeLight();
                string json = await client.GetStringAsync(url).ConfigureAwait(true);
                if (!string.IsNullOrEmpty(json))
                {
                    List<NodesPerNetworkAndCapacity>? lightningChannelsList = JsonConvert.DeserializeObject<List<NodesPerNetworkAndCapacity>>(json.ToString());

                    // create arrays of doubles
                    double[] yValuesChannels = lightningChannelsList.Select(h => (double)(h.Channel_count)).ToArray();

                    // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = lightningChannelsList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.Added)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();

                    formsPlot1.Plot.SetAxisLimits(xValues.Min(), xValues.Max(), 0, yValuesChannels.Max() * 1.05);

                    scatter = formsPlot1.Plot.AddScatter(xValues, yValuesChannels, lineWidth: 1, markerSize: 1);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Label("Capacity (BTC)", size: (int)(12 * UIScale), bold: false);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(0, yValuesChannels.Max() * 1.05);
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;

                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);

                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                    chartRendered = true;
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating lightning channels chart");
            }
        }
        #endregion
        #region chart - nodes by country
        private async void ChartNodesByCountryAsync()
        {
            try
            {
                comboBoxChartSelect.Invoke((MethodInvoker)delegate
                {
                    comboBoxChartSelect.Texts = "⚡ nodes by country";
                });
                previouslyShownChart = comboBoxChartSelect.SelectedIndex;
                ActiveChart = "NodesByCountry";
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot1.Visible = false;
                formsPlot2.Visible = false;
                chartType = "nodesbycountry";

                DisableIrrelevantTimePeriods();

                // clear any previous graph
                ClearAllChartData();
                formsPlot3.Plot.Title("Lightning nodes per country (excluding Darknet)", size: (int)(13 * UIScale), bold: false);

                // switch to linear scaling in case it was log before
                formsPlot3.Plot.YAxis.MinorLogScale(false);
                formsPlot3.Plot.YAxis.MajorGrid(false);
                formsPlot3.Plot.YAxis.MinorGrid(false);

                formsPlot3.Plot.XAxis.DateTimeFormat(false);

                // Define a new tick label formatter for the linear scale
                static string linearTickLabels(double y) => y.ToString("N0");
                formsPlot3.Plot.YAxis.TickLabelFormat(linearTickLabels);

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // Fetch data from the API
                string url = $"{NodeURL}v1/lightning/nodes/countries";
                HttpClient client = new HttpClient();
                LightUpNodeLight();
                string json = await client.GetStringAsync(url).ConfigureAwait(true);
                if (!string.IsNullOrEmpty(json))
                {
                    // Deserialize the JSON response
                    var response = JsonConvert.DeserializeObject<LightningNodeCountry[]>(json);

                    // Extract the top 40 country names (En) and counts, handling nullable decimal values
                    string[] countryNames = response.Select(node => node.Name!.En).Take(40).ToArray()!;
                    double[] counts = response.Select(node => Convert.ToDouble(node.Count)).Take(40).ToArray();
                    double[] allcounts = response.Select(node => Convert.ToDouble(node.Count)).ToArray();
                    double totalNodes = allcounts.Sum();
                    double nodesInTop40 = counts.Sum();
                    double nodesOfOtherCountries = totalNodes - nodesInTop40;
                    countryNames = countryNames.Concat(new[] { "Other" }).ToArray();
                    counts = counts.Concat(new[] { nodesOfOtherCountries }).ToArray();
                    // Create the ScottPlot bar chart
                    var bar = formsPlot3.Plot.AddBar(counts);
                    bar.Orientation = ScottPlot.Orientation.Horizontal;

                    // Generate a sequence of numbers for the Y-axis tick positions
                    double[] yPositions = Enumerable.Range(0, counts.Length).Select(y => (double)y).ToArray();

                    // Set the Y-axis tick positions and labels
                    formsPlot3.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot3.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot3.Plot.YTicks(yPositions, countryNames);
                    formsPlot3.Plot.YLabel("");
                    formsPlot3.Plot.XLabel("");
                    formsPlot3.Plot.SetAxisLimits(xMin: 0, xMax: counts.Max() * 1.05, yMin: -1, yMax: countryNames.Length + 1);
                    formsPlot3.Plot.XAxis.SetBoundary(0, counts.Max() * 1.05);
                    formsPlot3.Plot.YAxis.SetBoundary(-1, countryNames.Length + 1);
                    formsPlot3.Plot.Layout(left: 100, bottom: 50);

                    formsPlot3.Plot.Layout(left: 100, bottom: 50);

                    // refresh the graph
                    formsPlot3.Refresh();
                    formsPlot3.Visible = true;
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                    chartRendered = true;
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating nodes by country chart");
            }
        }
        #endregion
        #region chart - block reward
        private async void ChartRewardAsync()
        {
            try
            {
                comboBoxChartSelect.Invoke((MethodInvoker)delegate
                {
                    comboBoxChartSelect.Texts = "🔗 block reward";
                });
                previouslyShownChart = comboBoxChartSelect.SelectedIndex;
                ActiveChart = "Reward";
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                chartType = "reward";

                DisableIrrelevantTimePeriods();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title($"Block rewards (block subsidy plus fees) - time period: {chartPeriod}", size: (int)(13 * UIScale), bold: false);
                PrepareLinearScaleChart();

                HttpClient client = new HttpClient();
                string url = $"{NodeURL}v1/mining/blocks/rewards/{chartPeriod}";
                LightUpNodeLight();
                string json = await client.GetStringAsync(url).ConfigureAwait(true);
                if (!string.IsNullOrEmpty(json))
                {
                    // Deserialize JSON array into a list of HistoricRewardsAndPrice objects
                    List<HistoricRewardsAndPrice>? rewardsAndPriceList = JsonConvert.DeserializeObject<List<HistoricRewardsAndPrice>>(json);

                    // create arrays of doubles of the rewards and the dates
                    double[] yValues = rewardsAndPriceList.Select(h => (double)(h.AvgRewards / 100000000)).ToArray();
                    // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = rewardsAndPriceList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.Timestamp)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();

                    formsPlot1.Plot.SetAxisLimits(xValues.Min(), xValues.Max(), 0, yValues.Max() * 1.05);
                    scatter = formsPlot1.Plot.AddScatter(xValues, yValues, lineWidth: 1, markerSize: 1);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Label("BTC", size: (int)(12 * UIScale), bold: false);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(0, yValues.Max() * 1.05);
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;

                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);

                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                    chartRendered = true;
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating block reward chart");
            }
        }
        #endregion
        #region chart - block fees
        private async void ChartBlockFeesAsync()
        {
            try
            {
                comboBoxChartSelect.Invoke((MethodInvoker)delegate
                {
                    comboBoxChartSelect.Texts = "🔗 block fees";
                });
                previouslyShownChart = comboBoxChartSelect.SelectedIndex;
                ActiveChart = "BlockFees";
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                chartType = "blockfees";

                DisableIrrelevantTimePeriods();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title($"Average total fees per block - time period: {chartPeriod}", size: (int)(13 * UIScale), bold: false);
                PrepareLinearScaleChart();

                HttpClient client = new HttpClient();
                string url = $"{NodeURL}v1/mining/blocks/fees/{chartPeriod}";
                LightUpNodeLight();
                string json = await client.GetStringAsync(url).ConfigureAwait(true);
                if (!string.IsNullOrEmpty(json))
                {
                    // Deserialize JSON array into a list of HistoricFeesAndPrice objects
                    List<HistoricFeesAndPrice>? feesAndPriceList = JsonConvert.DeserializeObject<List<HistoricFeesAndPrice>>(json);

                    // create arrays of doubles of the rewards and the dates
                    double[] yValues = feesAndPriceList.Select(h => (double)(h.AvgFees / 100000000)).ToArray();
                    // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = feesAndPriceList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.Timestamp)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();
                    formsPlot1.Plot.SetAxisLimits(xValues.Min(), xValues.Max(), 0, yValues.Max() * 1.05);
                    scatter = formsPlot1.Plot.AddScatter(xValues, yValues, lineWidth: 1, markerSize: 1);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Label("BTC", size: (int)(12 * UIScale), bold: false);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(0, yValues.Max() * 1.05);
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;

                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);
                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                    chartRendered = true;
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating block fees chart");
            }
        }
        #endregion
        #region chart - difficulty linear and log
        private async void ChartDifficultyAsync()
        {
            try
            {
                comboBoxChartSelect.Invoke((MethodInvoker)delegate
                {
                    comboBoxChartSelect.Texts = "🔗 difficulty";
                });
                previouslyShownChart = comboBoxChartSelect.SelectedIndex;
                ActiveChart = "Difficulty";
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                btnChartDifficultyLinear.Enabled = false;
                btnChartDifficultyLog.Enabled = true;
                chartType = "difficulty";

                // if chart period too short for this chart, set it to max instead
                if (String.Compare(chartPeriod, "24h") == 0
                || String.Compare(chartPeriod, "3d") == 0
                || String.Compare(chartPeriod, "1w") == 0)
                {
                    chartPeriod = "all";
                    comboBoxChartsTimePeriod.OnSelectedIndexChanged -= ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                    comboBoxChartsTimePeriod.SelectedIndex = 9;
                    comboBoxChartsTimePeriod.Texts = "all data";
                    comboBoxChartsTimePeriod.OnSelectedIndexChanged += ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                }

                DisableIrrelevantTimePeriods();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title($"Difficulty - time period: {chartPeriod}", size: (int)(13 * UIScale), bold: false);
                PrepareLinearScaleChart();

                // get a series of historic dates/hashrates/difficulties
                LightUpNodeLight();
                var HashrateAndDifficultyJson = await _hashrateAndDifficultyService.GetHashrateAndDifficultyAsync(chartPeriod).ConfigureAwait(true);
                if (!string.IsNullOrEmpty(HashrateAndDifficultyJson))
                {
                    JObject jsonObj = JObject.Parse(HashrateAndDifficultyJson);

                    //split the data into two lists
                    List<DifficultySnapshot>? difficultyList = JsonConvert.DeserializeObject<List<DifficultySnapshot>>(jsonObj["difficulty"]!.ToString());

                    // create arrays of doubles of the difficulties and the dates
                    double[] yValues = difficultyList.Select(h => (double)(h.Difficulty / (decimal)1E12)).ToArray(); // divide by 1E12 to convert to trillions
                                                                                                                     // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = difficultyList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.Time)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();
                    formsPlot1.Plot.SetAxisLimits(xValues.Min(), xValues.Max(), 0, yValues.Max() * 1.05);
                    scatter = formsPlot1.Plot.AddScatter(xValues, yValues, lineWidth: 1, markerSize: 1);
                    scatter.StepDisplay = true;

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Label("trillion", size: (int)(12 * UIScale), bold: false, color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(0, yValues.Max() * 1.05);
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;

                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);

                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;
                    panelChartDifficultyScaleButtons.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                    chartRendered = true;
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating difficulty chart");
            }
        }

        private async void ChartDifficultyLogAsync()
        {
            try
            {
                comboBoxChartSelect.Invoke((MethodInvoker)delegate
                {
                    comboBoxChartSelect.Texts = "🔗 difficulty";
                });
                previouslyShownChart = comboBoxChartSelect.SelectedIndex;
                ActiveChart = "DifficultyLog";
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                btnChartDifficultyLinear.Enabled = true;
                btnChartDifficultyLog.Enabled = false;
                chartType = "difficultylog";

                if (String.Compare(chartPeriod, "24h") == 0
                || String.Compare(chartPeriod, "3d") == 0
                || String.Compare(chartPeriod, "1w") == 0)
                {
                    chartPeriod = "all";
                    comboBoxChartsTimePeriod.OnSelectedIndexChanged -= ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                    comboBoxChartsTimePeriod.SelectedIndex = 9;
                    comboBoxChartsTimePeriod.Texts = "all data";
                    comboBoxChartsTimePeriod.OnSelectedIndexChanged += ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                }

                DisableIrrelevantTimePeriods();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title($"Difficulty - time period: {chartPeriod} (log scale)", size: (int)(13 * UIScale), bold: false);
                LightUpNodeLight();
                // get a series of historic dates/hashrates/difficulties
                var HashrateAndDifficultyJson = await _hashrateAndDifficultyService.GetHashrateAndDifficultyAsync(chartPeriod).ConfigureAwait(true);
                if (!string.IsNullOrEmpty(HashrateAndDifficultyJson))
                {
                    JObject jsonObj = JObject.Parse(HashrateAndDifficultyJson);

                    //split the data into two lists
                    List<DifficultySnapshot>? difficultyList = JsonConvert.DeserializeObject<List<DifficultySnapshot>>(jsonObj["difficulty"]!.ToString());

                    // create arrays of doubles of the difficulties and the dates
                    double[] yValues = difficultyList.Select(h => (double)(h.Difficulty / (decimal)1E12)).ToArray(); // divide by 1E12 to convert to trillions
                                                                                                                     // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = difficultyList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.Time)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();


                    List<double> filteredYValues = new List<double>();
                    List<double> filteredXValues = new List<double>();

                    for (int i = 0; i < difficultyList!.Count; i++)
                    {
                        double yValue = (double)yValues[i];
                        if (yValue > 0)
                        {
                            filteredYValues.Add(Math.Log10(yValue));
                            filteredXValues.Add(xValues[i]);
                        }
                    }

                    double[] yValues2 = filteredYValues.ToArray();
                    double[] xValuesFiltered = filteredXValues.ToArray();


                    double minY = yValues2.Min();
                    double maxY = yValues2.Max() * 1.05;
                    formsPlot1.Plot.SetAxisLimits(xValuesFiltered.Min(), xValuesFiltered.Max(), minY, maxY);
                    scatter = formsPlot1.Plot.AddScatter(xValuesFiltered, yValues2, lineWidth: 1, markerSize: 1);

                    // Use a custom formatter to control the label for each tick mark
                    static string logTickLabels(double y) => Math.Pow(10, y).ToString("N0");
                    formsPlot1.Plot.YAxis.TickLabelFormat(logTickLabels);

                    // Use log-spaced minor tick marks and grid lines
                    formsPlot1.Plot.YAxis.MinorLogScale(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MinorGrid(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Label("trillion", size: (int)(12 * UIScale), bold: false);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(minY, maxY);
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;
                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;
                    panelChartDifficultyScaleButtons.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                    chartRendered = true;
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating difficulty chart (log) chart");
            }
        }
        #endregion
        #region chart - unique addresses linear and log
        private async void ChartUniqueAddressesAsync()
        {
            try
            {
                if (!RunBlockchainInfoAPI)
                {
                    comboBoxChartSelect.SelectedIndex = previouslyShownChart;
                    return;
                }

                comboBoxChartSelect.Invoke((MethodInvoker)delegate
                {
                    comboBoxChartSelect.Texts = "🔗 addresses";
                });
                previouslyShownChart = comboBoxChartSelect.SelectedIndex;
                ActiveChart = "UniqueAddresses";
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                btnChartAddressScaleLinear.Enabled = false;
                btnChartAddressScaleLog.Enabled = true;
                chartType = "addresses";

                if (String.Compare(chartPeriod, "24h") == 0
                || String.Compare(chartPeriod, "3d") == 0
                || String.Compare(chartPeriod, "1w") == 0
                || String.Compare(chartPeriod, "2y") == 0)
                {
                    chartPeriod = "all";
                    comboBoxChartsTimePeriod.OnSelectedIndexChanged -= ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                    comboBoxChartsTimePeriod.SelectedIndex = 9;
                    comboBoxChartsTimePeriod.Texts = "all data";
                    comboBoxChartsTimePeriod.OnSelectedIndexChanged += ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                }
                DisableIrrelevantTimePeriods();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title($"Unique addresses used - time period: {chartPeriod}", size: (int)(13 * UIScale), bold: false);
                PrepareLinearScaleChart();
                // get a series of historic price data
                var UniqueAddressesDataJson = await _uniqueAddressesDataService.GetUniqueAddressesDataAsync(chartPeriod).ConfigureAwait(true);
                if (!string.IsNullOrEmpty(UniqueAddressesDataJson))
                {
                    JObject jsonObj = JObject.Parse(UniqueAddressesDataJson);

                    List<UniqueAddressesList>? AddressesList = JsonConvert.DeserializeObject<List<UniqueAddressesList>>(jsonObj["values"]!.ToString());

                    // create arrays of doubles of the amounts and the dates
                    double[] yValues = AddressesList.Select(h => (double)(h.Y)).ToArray();
                    // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = AddressesList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.X)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();
                    formsPlot1.Plot.SetAxisLimits(xValues.Min(), xValues.Max(), 0, yValues.Max() * 1.05);
                    scatter = formsPlot1.Plot.AddScatter(xValues, yValues, lineWidth: 1, markerSize: 1);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Label("Unique addresses used", size: (int)(12 * UIScale), bold: false);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(0, yValues.Max() * 1.05);
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;

                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);

                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;
                    panelUniqueAddressesScaleButtons.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                    chartRendered = true;
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating unique addresses used chart");
            }
        }

        private async void ChartUniqueAddressesLogAsync()
        {
            try
            {
                if (!RunBlockchainInfoAPI)
                {
                    comboBoxChartSelect.SelectedIndex = previouslyShownChart;
                    return;
                }

                comboBoxChartSelect.Invoke((MethodInvoker)delegate
                {
                    comboBoxChartSelect.Texts = "🔗 addresses";
                });
                previouslyShownChart = comboBoxChartSelect.SelectedIndex;
                ActiveChart = "UniqueAddressesLog";
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                btnChartAddressScaleLinear.Enabled = true;
                btnChartAddressScaleLog.Enabled = false;
                chartType = "addresseslog";

                if (String.Compare(chartPeriod, "24h") == 0
                || String.Compare(chartPeriod, "3d") == 0
                || String.Compare(chartPeriod, "1w") == 0
                || String.Compare(chartPeriod, "2y") == 0)
                {
                    chartPeriod = "all";
                    comboBoxChartsTimePeriod.OnSelectedIndexChanged -= ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                    comboBoxChartsTimePeriod.SelectedIndex = 9;
                    comboBoxChartsTimePeriod.Texts = "all data";
                    comboBoxChartsTimePeriod.OnSelectedIndexChanged += ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                }

                DisableIrrelevantTimePeriods();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title($"Unique addresses used - time period: {chartPeriod} (log scale)", size: (int)(13 * UIScale), bold: false);

                // get a series of historic price data
                var UniqueAddressesDataJson = await _uniqueAddressesDataService.GetUniqueAddressesDataAsync(chartPeriod).ConfigureAwait(true);
                if (!string.IsNullOrEmpty(UniqueAddressesDataJson))
                {
                    JObject jsonObj = JObject.Parse(UniqueAddressesDataJson);

                    List<UniqueAddressesList>? AddressList = JsonConvert.DeserializeObject<List<UniqueAddressesList>>(jsonObj["values"]!.ToString());

                    // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = AddressList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.X)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();


                    List<double> filteredYValues = new List<double>();
                    List<double> filteredXValues = new List<double>();

                    for (int i = 0; i < AddressList!.Count; i++)
                    {
                        double yValue = (double)AddressList[i].Y;
                        if (yValue > 0)
                        {
                            filteredYValues.Add(Math.Log10(yValue));
                            filteredXValues.Add(xValues[i]);
                        }
                    }

                    double[] yValues = filteredYValues.ToArray();
                    double[] xValuesFiltered = filteredXValues.ToArray();


                    double minY = yValues.Min();
                    double maxY = yValues.Max() * 1.05;
                    formsPlot1.Plot.SetAxisLimits(xValuesFiltered.Min(), xValuesFiltered.Max(), minY, maxY);
                    scatter = formsPlot1.Plot.AddScatter(xValuesFiltered, yValues, lineWidth: 1, markerSize: 1);

                    // Use a custom formatter to control the label for each tick mark
                    static string logTickLabels(double y) => Math.Pow(10, y).ToString("N0");
                    formsPlot1.Plot.YAxis.TickLabelFormat(logTickLabels);

                    // Use log-spaced minor tick marks and grid lines
                    formsPlot1.Plot.YAxis.MinorLogScale(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MinorGrid(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Label("Unique addresses used", size: (int)(12 * UIScale), bold: false);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(minY, maxY);
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;

                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;
                    panelUniqueAddressesScaleButtons.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                    chartRendered = true;
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating unique addresses used (log) chart");
            }
        }
        #endregion
        #region chart - price linear and log
        private async void ChartPriceAsync()
        {
            try
            {
                if (!RunBlockchainInfoAPI)
                {
                    comboBoxChartSelect.Invoke((MethodInvoker)delegate
                    {
                        comboBoxChartSelect.SelectedIndex = previouslyShownChart;
                    });
                    return;
                }

                comboBoxChartSelect.Invoke((MethodInvoker)delegate
                {
                    comboBoxChartSelect.Texts = "💲 price";
                });
                previouslyShownChart = comboBoxChartSelect.SelectedIndex;
                ActiveChart = "Price";
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                btnPriceChartScaleLinear.Enabled = false;
                btnPriceChartScaleLog.Enabled = true;
                chartType = "price";

                if (String.Compare(chartPeriod, "24h") == 0
                || String.Compare(chartPeriod, "3d") == 0
                || String.Compare(chartPeriod, "1w") == 0
                || String.Compare(chartPeriod, "2y") == 0)
                {
                    chartPeriod = "all";
                    comboBoxChartsTimePeriod.OnSelectedIndexChanged -= ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                    comboBoxChartsTimePeriod.SelectedIndex = 9;
                    comboBoxChartsTimePeriod.Texts = "all data";
                    comboBoxChartsTimePeriod.OnSelectedIndexChanged += ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                }

                DisableIrrelevantTimePeriods();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title($"Average USD market price across major bitcoin exchanges - time period: {chartPeriod}", size: (int)(13 * UIScale), bold: false);
                formsPlot1.Plot.YAxis.Label("Price (USD)", size: (int)(12 * UIScale), bold: false);
                PrepareLinearScaleChart();

                // get a series of historic price data
                var HistoricPriceDataJson = await _historicPriceDataService.GetHistoricPriceDataAsync(chartPeriod).ConfigureAwait(true);
                if (!string.IsNullOrEmpty(HistoricPriceDataJson))
                {
                    JObject jsonObj = JObject.Parse(HistoricPriceDataJson);

                    List<PriceCoordinatesList>? PriceList = JsonConvert.DeserializeObject<List<PriceCoordinatesList>>(jsonObj["values"]!.ToString());

                    // convert data to GBP, EUR, XAU if needed
                    decimal selectedCurrency = 0;
                    decimal exchangeRate = 1;
                    if (btnUSD.Enabled) // user has selected a currency other than USD
                    {
                        string priceUSD = OneBTCInUSD;
                        string priceEUR = OneBTCInEUR;
                        string priceGBP = OneBTCInGBP;
                        string priceXAU = OneBTCInXAU;
                        if (!btnGBP.Enabled) //GBP is selected
                        {
                            selectedCurrency = Convert.ToDecimal(priceGBP);
                            formsPlot1.Plot.Title($"Average GBP market price across major bitcoin exchanges - {chartPeriod}", size: 13, bold: true);
                            formsPlot1.Plot.YAxis.Label("Price (GBP)", size: 12, bold: false);
                        }
                        if (!btnEUR.Enabled) //EUR is selected
                        {
                            selectedCurrency = Convert.ToDecimal(priceEUR);
                            formsPlot1.Plot.Title($"Average EUR market price across major bitcoin exchanges - {chartPeriod}", size: 13, bold: true);
                            formsPlot1.Plot.YAxis.Label("Price (EUR)", size: 12, bold: false);
                        }
                        if (!btnXAU.Enabled) //XAU is selected
                        {
                            selectedCurrency = Convert.ToDecimal(priceXAU);
                            formsPlot1.Plot.Title($"Average XAU market price across major bitcoin exchanges - {chartPeriod}", size: 13, bold: true);
                            formsPlot1.Plot.YAxis.Label("Price (XAU)", size: 12, bold: false);
                        }
                        exchangeRate = selectedCurrency / Convert.ToDecimal(priceUSD);

                        foreach (var item in PriceList!)
                        {
                            item.Y *= exchangeRate;
                        }
                    }

                    // create arrays of doubles of the prices and the dates
                    double[] yValues = PriceList.Select(h => (double)(h.Y)).ToArray();

                    // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = PriceList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.X)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();
                    formsPlot1.Plot.SetAxisLimits(xValues.Min(), xValues.Max(), 0, yValues.Max() * 1.05);
                    scatter = formsPlot1.Plot.AddScatter(xValues, yValues, lineWidth: 1, markerSize: 1);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(0, yValues.Max() * 1.05);
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;

                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);

                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;
                    panelPriceScaleButtons.Visible = true;
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                    chartRendered = true;
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating price chart");
            }
        }

        private async void ChartPriceLogAsync()
        {
            try
            {
                if (!RunBlockchainInfoAPI)
                {
                    comboBoxChartSelect.SelectedIndex = previouslyShownChart;
                    return;
                }

                comboBoxChartSelect.Invoke((MethodInvoker)delegate
                {
                    comboBoxChartSelect.Texts = "💲 price";
                });
                previouslyShownChart = comboBoxChartSelect.SelectedIndex;
                ActiveChart = "PriceLog";
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                btnPriceChartScaleLinear.Enabled = true;
                btnPriceChartScaleLog.Enabled = false;
                chartType = "pricelog";

                if (String.Compare(chartPeriod, "24h") == 0
                || String.Compare(chartPeriod, "3d") == 0
                || String.Compare(chartPeriod, "1w") == 0
                || String.Compare(chartPeriod, "2y") == 0)
                {
                    chartPeriod = "all";
                    comboBoxChartsTimePeriod.OnSelectedIndexChanged -= ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                    comboBoxChartsTimePeriod.SelectedIndex = 9;
                    comboBoxChartsTimePeriod.Texts = "all data";
                    comboBoxChartsTimePeriod.OnSelectedIndexChanged += ComboBoxChartsTimePeriod_OnSelectedIndexChanged;

                }

                DisableIrrelevantTimePeriods();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title($"Average USD market price across major bitcoin exchanges - time period: {chartPeriod} (log scale)", size: (int)(13 * UIScale), bold: false);
                formsPlot1.Plot.YAxis.Label("Price (USD)", size: (int)(12 * UIScale), bold: false);
                // get a series of historic price data
                var HistoricPriceDataJson = await _historicPriceDataService.GetHistoricPriceDataAsync(chartPeriod).ConfigureAwait(true);
                if (!string.IsNullOrEmpty(HistoricPriceDataJson))
                {
                    JObject jsonObj = JObject.Parse(HistoricPriceDataJson);

                    List<PriceCoordinatesList>? PriceList = JsonConvert.DeserializeObject<List<PriceCoordinatesList>>(jsonObj["values"]!.ToString());

                    // convert data to GBP, EUR, XAU if needed
                    decimal selectedCurrency = 0;
                    decimal exchangeRate = 1;
                    if (btnUSD.Enabled) // user has selected a currency other than USD
                    {
                        string priceUSD = OneBTCInUSD;
                        string priceEUR = OneBTCInEUR;
                        string priceGBP = OneBTCInGBP;
                        string priceXAU = OneBTCInXAU;
                        if (!btnGBP.Enabled) //GBP is selected
                        {
                            selectedCurrency = Convert.ToDecimal(priceGBP);
                            formsPlot1.Plot.Title($"Average GBP market price across major bitcoin exchanges - {chartPeriod}", size: 13, bold: true);
                            formsPlot1.Plot.YAxis.Label("Price (GBP)", size: 12, bold: false);
                        }
                        if (!btnEUR.Enabled) //EUR is selected
                        {
                            selectedCurrency = Convert.ToDecimal(priceEUR);
                            formsPlot1.Plot.Title($"Average EUR market price across major bitcoin exchanges - {chartPeriod}", size: 13, bold: true);
                            formsPlot1.Plot.YAxis.Label("Price (EUR)", size: 12, bold: false);
                        }
                        if (!btnXAU.Enabled) //XAU is selected
                        {
                            selectedCurrency = Convert.ToDecimal(priceXAU);
                            formsPlot1.Plot.Title($"Average XAU market price across major bitcoin exchanges - {chartPeriod}", size: 13, bold: true);
                            formsPlot1.Plot.YAxis.Label("Price (XAU)", size: 12, bold: false);
                        }
                        exchangeRate = selectedCurrency / Convert.ToDecimal(priceUSD);

                        foreach (var item in PriceList!)
                        {
                            item.Y *= exchangeRate;
                        }
                    }

                    // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = PriceList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.X)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();


                    List<double> filteredYValues = new List<double>();
                    List<double> filteredXValues = new List<double>();

                    for (int i = 0; i < PriceList!.Count; i++)
                    {
                        double yValue = (double)PriceList[i].Y;
                        if (yValue > 0)
                        {
                            filteredYValues.Add(Math.Log10(yValue));
                            filteredXValues.Add(xValues[i]);
                        }
                    }

                    double[] yValues = filteredYValues.ToArray();
                    double[] xValuesFiltered = filteredXValues.ToArray();


                    double minY = yValues.Min();
                    double maxY = yValues.Max() * 1.05;
                    formsPlot1.Plot.SetAxisLimits(xValuesFiltered.Min(), xValuesFiltered.Max(), minY, maxY);
                    scatter = formsPlot1.Plot.AddScatter(xValuesFiltered, yValues, lineWidth: 1, markerSize: 1);

                    // Use a custom formatter to control the label for each tick mark
                    static string logTickLabels(double y) => Math.Pow(10, y).ToString("N0");
                    formsPlot1.Plot.YAxis.TickLabelFormat(logTickLabels);

                    // Use log-spaced minor tick marks and grid lines
                    formsPlot1.Plot.YAxis.MinorLogScale(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MinorGrid(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(minY, maxY);
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;
                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;
                    panelPriceScaleButtons.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                    chartRendered = true;
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating price (log) chart");
            }
        }
        #endregion
        #region chart - market cap linear and log
        private async void ChartMarketCapAsync()
        {
            try
            {
                if (!RunBlockchainInfoAPI)
                {
                    comboBoxChartSelect.SelectedIndex = previouslyShownChart;
                    return;
                }

                comboBoxChartSelect.Invoke((MethodInvoker)delegate
                {
                    comboBoxChartSelect.Texts = "💲 market cap.";
                });
                previouslyShownChart = comboBoxChartSelect.SelectedIndex;
                ActiveChart = "MarketCap";
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                btnPriceChartScaleLinear.Enabled = false;
                btnChartMarketCapScaleLog.Enabled = true;
                chartType = "marketcap";

                if (String.Compare(chartPeriod, "24h") == 0
                || String.Compare(chartPeriod, "3d") == 0
                || String.Compare(chartPeriod, "1w") == 0
                || String.Compare(chartPeriod, "2y") == 0)
                {
                    chartPeriod = "all";
                    comboBoxChartsTimePeriod.OnSelectedIndexChanged -= ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                    comboBoxChartsTimePeriod.SelectedIndex = 9;
                    comboBoxChartsTimePeriod.Texts = "all data";
                    comboBoxChartsTimePeriod.OnSelectedIndexChanged += ComboBoxChartsTimePeriod_OnSelectedIndexChanged;

                }

                btnChartMarketCapScaleLinear.Enabled = false;
                DisableIrrelevantTimePeriods();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title($"Market capitalization in USD - time period: {chartPeriod}", size: (int)(13 * UIScale), bold: false);
                formsPlot1.Plot.YAxis.Label("Market Capitalization (USD)", size: (int)(12 * UIScale), bold: false);
                PrepareLinearScaleChart();

                // get a series of historic price data
                var MarketCapDataJson = await _marketCapDataService.GetMarketCapDataAsync(chartPeriod).ConfigureAwait(true);
                if (!string.IsNullOrEmpty(MarketCapDataJson))
                {
                    JObject jsonObj = JObject.Parse(MarketCapDataJson);

                    List<MarketCapCoordinatesList>? MarketCapList = JsonConvert.DeserializeObject<List<MarketCapCoordinatesList>>(jsonObj["values"]!.ToString());

                    // convert data to GBP, EUR, XAU if needed
                    decimal selectedCurrency = 0;
                    decimal exchangeRate = 1;
                    if (btnUSD.Enabled) // user has selected a currency other than USD
                    {
                        string priceUSD = OneBTCInUSD;
                        string priceEUR = OneBTCInEUR;
                        string priceGBP = OneBTCInGBP;
                        string priceXAU = OneBTCInXAU;
                        if (!btnGBP.Enabled) //GBP is selected
                        {
                            selectedCurrency = Convert.ToDecimal(priceGBP);
                            formsPlot1.Plot.Title($"Average GBP market price across major bitcoin exchanges - {chartPeriod}", size: 13, bold: true);
                            formsPlot1.Plot.YAxis.Label("Market Capitalization (GBP)", size: 12, bold: false);
                        }
                        if (!btnEUR.Enabled) //EUR is selected
                        {
                            selectedCurrency = Convert.ToDecimal(priceEUR);
                            formsPlot1.Plot.Title($"Average EUR market price across major bitcoin exchanges - {chartPeriod}", size: 13, bold: true);
                            formsPlot1.Plot.YAxis.Label("Market Capitalization (EUR)", size: 12, bold: false);
                        }
                        if (!btnXAU.Enabled) //XAU is selected
                        {
                            selectedCurrency = Convert.ToDecimal(priceXAU);
                            formsPlot1.Plot.Title($"Average XAU market price across major bitcoin exchanges - {chartPeriod}", size: 13, bold: true);
                            formsPlot1.Plot.YAxis.Label("Market Capitalization (XAU)", size: 12, bold: false);
                        }
                        exchangeRate = selectedCurrency / Convert.ToDecimal(priceUSD);

                        foreach (var item in MarketCapList!)
                        {
                            item.Y *= exchangeRate;
                        }
                    }

                    // create arrays of doubles of the difficulties and the dates
                    double[] yValues = MarketCapList.Select(h => (double)(h.Y)).ToArray();
                    // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = MarketCapList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.X)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();
                    formsPlot1.Plot.SetAxisLimits(xValues.Min(), xValues.Max(), 0, yValues.Max() * 1.05);
                    scatter = formsPlot1.Plot.AddScatter(xValues, yValues, lineWidth: 1, markerSize: 1);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: 10);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(0, yValues.Max() * 1.05);
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;

                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);

                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;
                    panelChartMarketCapScaleButtons.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                    chartRendered = true;
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating market cap chart");
            }
        }

        private async void ChartMarketCapLogAsync()
        {
            try
            {
                if (!RunBlockchainInfoAPI)
                {
                    comboBoxChartSelect.SelectedIndex = previouslyShownChart;
                    return;
                }

                comboBoxChartSelect.Invoke((MethodInvoker)delegate
                {
                    comboBoxChartSelect.Texts = "💲 market cap.";
                });
                previouslyShownChart = comboBoxChartSelect.SelectedIndex;
                ActiveChart = "MarketCapLog";
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                btnChartMarketCapScaleLinear.Enabled = true;
                btnChartMarketCapScaleLog.Enabled = false;
                chartType = "marketcaplog";

                if (String.Compare(chartPeriod, "24h") == 0
                || String.Compare(chartPeriod, "3d") == 0
                || String.Compare(chartPeriod, "1w") == 0
                || String.Compare(chartPeriod, "2y") == 0)
                {
                    chartPeriod = "all";
                    comboBoxChartsTimePeriod.OnSelectedIndexChanged -= ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                    comboBoxChartsTimePeriod.SelectedIndex = 9;
                    comboBoxChartsTimePeriod.Texts = "all data";
                    comboBoxChartsTimePeriod.OnSelectedIndexChanged += ComboBoxChartsTimePeriod_OnSelectedIndexChanged;

                }

                btnChartMarketCapScaleLog.Enabled = false;
                DisableIrrelevantTimePeriods();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title($"Market capitalization in USD - time period: {chartPeriod} (log scale)", size: (int)(13 * UIScale), bold: false);
                formsPlot1.Plot.YAxis.Label("Market Capitalization (USD)", size: (int)(12 * UIScale), bold: false);
                // get a series of market cap data
                var MarketCapDataJson = await _marketCapDataService.GetMarketCapDataAsync(chartPeriod).ConfigureAwait(true);
                if (!string.IsNullOrEmpty(MarketCapDataJson))
                {
                    JObject jsonObj = JObject.Parse(MarketCapDataJson);

                    List<MarketCapCoordinatesList>? MarketCapList = JsonConvert.DeserializeObject<List<MarketCapCoordinatesList>>(jsonObj["values"]!.ToString());

                    // convert data to GBP, EUR, XAU if needed
                    decimal selectedCurrency = 0;
                    decimal exchangeRate = 1;
                    if (btnUSD.Enabled) // user has selected a currency other than USD
                    {
                        string priceUSD = OneBTCInUSD;
                        string priceEUR = OneBTCInEUR;
                        string priceGBP = OneBTCInGBP;
                        string priceXAU = OneBTCInXAU;
                        if (!btnGBP.Enabled) //GBP is selected
                        {
                            selectedCurrency = Convert.ToDecimal(priceGBP);
                            formsPlot1.Plot.Title($"Average GBP market price across major bitcoin exchanges - {chartPeriod}", size: 13, bold: true);
                            formsPlot1.Plot.YAxis.Label("Market Capitalization (GBP)", size: 12, bold: false);
                        }
                        if (!btnEUR.Enabled) //EUR is selected
                        {
                            selectedCurrency = Convert.ToDecimal(priceEUR);
                            formsPlot1.Plot.Title($"Average EUR market price across major bitcoin exchanges - {chartPeriod}", size: 13, bold: true);
                            formsPlot1.Plot.YAxis.Label("Market Capitalization (EUR)", size: 12, bold: false);
                        }
                        if (!btnXAU.Enabled) //XAU is selected
                        {
                            selectedCurrency = Convert.ToDecimal(priceXAU);
                            formsPlot1.Plot.Title($"Average XAU market price across major bitcoin exchanges - {chartPeriod}", size: 13, bold: true);
                            formsPlot1.Plot.YAxis.Label("Market Capitalization (XAU)", size: 12, bold: false);
                        }
                        exchangeRate = selectedCurrency / Convert.ToDecimal(priceUSD);

                        foreach (var item in MarketCapList!)
                        {
                            item.Y *= exchangeRate;
                        }
                    }

                    // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = MarketCapList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.X)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();


                    List<double> filteredYValues = new List<double>();
                    List<double> filteredXValues = new List<double>();

                    for (int i = 0; i < MarketCapList!.Count; i++)
                    {
                        double yValue = (double)MarketCapList[i].Y;
                        if (yValue > 0)
                        {
                            filteredYValues.Add(Math.Log10(yValue));
                            filteredXValues.Add(xValues[i]);
                        }
                    }

                    double[] yValues = filteredYValues.ToArray();
                    double[] xValuesFiltered = filteredXValues.ToArray();


                    double minY = yValues.Min();
                    double maxY = yValues.Max() * 1.05;
                    formsPlot1.Plot.SetAxisLimits(xValuesFiltered.Min(), xValuesFiltered.Max(), minY, maxY);
                    scatter = formsPlot1.Plot.AddScatter(xValuesFiltered, yValues, lineWidth: 1, markerSize: 1);

                    // Use a custom formatter to control the label for each tick mark
                    static string logTickLabels(double y) => Math.Pow(10, y).ToString("N0");
                    formsPlot1.Plot.YAxis.TickLabelFormat(logTickLabels);

                    // Use log-spaced minor tick marks and grid lines
                    formsPlot1.Plot.YAxis.MinorLogScale(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MinorGrid(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(minY, maxY);
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;
                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;
                    panelChartMarketCapScaleButtons.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                    chartRendered = true;
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating market cap (log) chart");
            }
        }
        #endregion
        #region chart - utxo count linear and log
        private async void ChartUTXOAsync()
        {
            try
            {
                if (!RunBlockchainInfoAPI)
                {
                    comboBoxChartSelect.SelectedIndex = previouslyShownChart;
                    return;
                }

                comboBoxChartSelect.Invoke((MethodInvoker)delegate
                {
                    comboBoxChartSelect.Texts = "🔗 UTXO's";
                });
                previouslyShownChart = comboBoxChartSelect.SelectedIndex;
                ActiveChart = "UTXO";
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                btnChartUTXOScaleLinear.Enabled = false;
                btnChartUTXOScaleLog.Enabled = true;
                chartType = "utxo";

                if (String.Compare(chartPeriod, "24h") == 0
                || String.Compare(chartPeriod, "3d") == 0
                || String.Compare(chartPeriod, "1w") == 0
                || String.Compare(chartPeriod, "2y") == 0)
                {
                    chartPeriod = "all";
                    comboBoxChartsTimePeriod.OnSelectedIndexChanged -= ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                    comboBoxChartsTimePeriod.SelectedIndex = 9;
                    comboBoxChartsTimePeriod.Texts = "all data";
                    comboBoxChartsTimePeriod.OnSelectedIndexChanged += ComboBoxChartsTimePeriod_OnSelectedIndexChanged;

                }

                DisableIrrelevantTimePeriods();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title($"Total number of valid unspent transaction outputs - time period: {chartPeriod}", size: (int)(13 * UIScale), bold: false);
                PrepareLinearScaleChart();

                // get a series of historic price data
                var UTXODataJson = await _utxoDataService.GetUTXODataAsync(chartPeriod).ConfigureAwait(true);
                if (!string.IsNullOrEmpty(UTXODataJson))
                {
                    JObject jsonObj = JObject.Parse(UTXODataJson);

                    List<UTXOList>? UTXOList = JsonConvert.DeserializeObject<List<UTXOList>>(jsonObj["values"]!.ToString());

                    // create arrays of doubles
                    double[] yValues = UTXOList.Select(h => (double)(h.Y)).ToArray();
                    // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = UTXOList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.X)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();
                    formsPlot1.Plot.SetAxisLimits(xValues.Min(), xValues.Max(), 0, yValues.Max() * 1.05);
                    scatter = formsPlot1.Plot.AddScatter(xValues, yValues, lineWidth: 1, markerSize: 1);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Label("valid UTXO count", size: (int)(12 * UIScale), bold: false);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(0, yValues.Max() * 1.05);
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;

                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);

                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;
                    panelChartUTXOScaleButtons.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                    chartRendered = true;
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating UTXO chart");
            }
        }

        private async void ChartUTXOLogAsync()
        {
            try
            {
                if (!RunBlockchainInfoAPI)
                {
                    comboBoxChartSelect.SelectedIndex = previouslyShownChart;
                    return;
                }

                comboBoxChartSelect.Invoke((MethodInvoker)delegate
                {
                    comboBoxChartSelect.Texts = "🔗 UTXO's";
                });
                previouslyShownChart = comboBoxChartSelect.SelectedIndex;
                ActiveChart = "UTXOLog";
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                btnChartUTXOScaleLinear.Enabled = true;
                btnChartUTXOScaleLog.Enabled = false;
                chartType = "utxolog";

                if (String.Compare(chartPeriod, "24h") == 0
                || String.Compare(chartPeriod, "3d") == 0
                || String.Compare(chartPeriod, "1w") == 0
                || String.Compare(chartPeriod, "2y") == 0)
                {
                    chartPeriod = "all";
                    comboBoxChartsTimePeriod.OnSelectedIndexChanged -= ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                    comboBoxChartsTimePeriod.SelectedIndex = 9;
                    comboBoxChartsTimePeriod.Texts = "all data";
                    comboBoxChartsTimePeriod.OnSelectedIndexChanged += ComboBoxChartsTimePeriod_OnSelectedIndexChanged;

                }

                DisableIrrelevantTimePeriods();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title($"Total number of valid unspent transaction outputs - time period: {chartPeriod} (log scale)", size: (int)(13 * UIScale), bold: false);

                // get a series of historic price data
                var UTXODataJson = await _utxoDataService.GetUTXODataAsync(chartPeriod).ConfigureAwait(true);
                if (!string.IsNullOrEmpty(UTXODataJson))
                {
                    JObject jsonObj = JObject.Parse(UTXODataJson);

                    List<UTXOList>? UTXOList = JsonConvert.DeserializeObject<List<UTXOList>>(jsonObj["values"]!.ToString());

                    // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = UTXOList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.X)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();


                    List<double> filteredYValues = new List<double>();
                    List<double> filteredXValues = new List<double>();

                    for (int i = 0; i < UTXOList!.Count; i++)
                    {
                        double yValue = (double)UTXOList[i].Y;
                        if (yValue > 0)
                        {
                            filteredYValues.Add(Math.Log10(yValue));
                            filteredXValues.Add(xValues[i]);
                        }
                    }

                    double[] yValues = filteredYValues.ToArray();
                    double[] xValuesFiltered = filteredXValues.ToArray();


                    double minY = yValues.Min();
                    double maxY = yValues.Max() * 1.05;
                    formsPlot1.Plot.SetAxisLimits(xValuesFiltered.Min(), xValuesFiltered.Max(), minY, maxY);
                    scatter = formsPlot1.Plot.AddScatter(xValuesFiltered, yValues, lineWidth: 1, markerSize: 1);

                    // Use a custom formatter to control the label for each tick mark
                    static string logTickLabels(double y) => Math.Pow(10, y).ToString("N0");
                    formsPlot1.Plot.YAxis.TickLabelFormat(logTickLabels);

                    // Use log-spaced minor tick marks and grid lines
                    formsPlot1.Plot.YAxis.MinorLogScale(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MinorGrid(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Label("valid UTXO count", size: (int)(12 * UIScale), bold: false);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(minY, maxY);
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;
                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;
                    panelChartUTXOScaleButtons.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                    chartRendered = true;
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating UTXO (log) chart");
            }
        }
        #endregion
        #region chart - block size
        private async void ChartBlockSizeAsync()
        {
            try
            {
                comboBoxChartSelect.Invoke((MethodInvoker)delegate
                {
                    comboBoxChartSelect.Texts = "🔗 block size";
                });
                previouslyShownChart = comboBoxChartSelect.SelectedIndex;
                ActiveChart = "BlockSize";
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                chartType = "blocksize";

                DisableIrrelevantTimePeriods();

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title($"Block size - time period: {chartPeriod}", size: (int)(13 * UIScale), bold: false);
                PrepareLinearScaleChart();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");
                LightUpNodeLight();
                // get a series of historic dates/hashrates/difficulties
                var BlockSizeAndWeightJson = await _blockSizeAndWeightService.GetBlockSizeAndWeightServiceAsync(chartPeriod).ConfigureAwait(true);
                if (!string.IsNullOrEmpty(BlockSizeAndWeightJson))
                {
                    JObject jsonObj = JObject.Parse(BlockSizeAndWeightJson);

                    //split the data into two lists
                    List<Sizes>? blockSizeList = JsonConvert.DeserializeObject<List<Sizes>>(jsonObj["sizes"]!.ToString());

                    // create arrays of doubles of the hashrates and the dates
                    double[] yValues = blockSizeList.Select(h => (double)h.AvgSize / (1000 * 1000)).ToArray();
                    // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = blockSizeList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.Timestamp)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();

                    formsPlot1.Plot.SetAxisLimits(xValues.Min(), xValues.Max(), 0, yValues.Max() * 1.05);

                    scatter = formsPlot1.Plot.AddScatter(xValues, yValues, lineWidth: 1, markerSize: 1);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Label("Block size (MB)", size: (int)(12 * UIScale), bold: false);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(0, yValues.Max() * 1.05);
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;

                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);

                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                    chartRendered = true;
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating block size chart");
            }
        }
        #endregion
        #region chart - circulation
        private async void ChartCirculationAsync()
        {
            try
            {
                if (!RunBlockchainInfoAPI)
                {
                    comboBoxChartSelect.SelectedIndex = previouslyShownChart;
                    return;
                }
                comboBoxChartSelect.Invoke((MethodInvoker)delegate
                {
                    comboBoxChartSelect.Texts = "🔗 circulation";
                });
                previouslyShownChart = comboBoxChartSelect.SelectedIndex;
                ActiveChart = "Circulation";
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                chartType = "circulation";

                if (String.Compare(chartPeriod, "24h") == 0
                || String.Compare(chartPeriod, "3d") == 0
                || String.Compare(chartPeriod, "1w") == 0
                || String.Compare(chartPeriod, "2y") == 0)
                {
                    chartPeriod = "all";
                    comboBoxChartsTimePeriod.OnSelectedIndexChanged -= ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                    comboBoxChartsTimePeriod.SelectedIndex = 9;
                    comboBoxChartsTimePeriod.Texts = "all data";
                    comboBoxChartsTimePeriod.OnSelectedIndexChanged += ComboBoxChartsTimePeriod_OnSelectedIndexChanged;

                }

                DisableIrrelevantTimePeriods();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title($"Bitcoin circulation - time period: {chartPeriod}", size: (int)(13 * UIScale), bold: false);
                PrepareLinearScaleChart();

                // get a series of historic dates and amounts of btc in circulation
                var CirculationJson = await _bitcoinsInCirculationDataService.GetBitcoinsInCirculationAsync(chartPeriod).ConfigureAwait(true);
                if (!string.IsNullOrEmpty(CirculationJson))
                {
                    JObject jsonObj = JObject.Parse(CirculationJson);

                    List<BTCInCircChartCoordinates>? CirculationList = JsonConvert.DeserializeObject<List<BTCInCircChartCoordinates>>(jsonObj["values"]!.ToString());

                    // create arrays of doubles of the difficulties and the dates
                    double[] yValues = CirculationList.Select(h => (double)(h.Y)).ToArray();
                    // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = CirculationList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.X)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();
                    formsPlot1.Plot.SetAxisLimits(xValues.Min(), xValues.Max(), 0, 22500000);
                    scatter = formsPlot1.Plot.AddScatter(xValues, yValues, lineWidth: 1, markerSize: 1, color: Color.Orange);

                    double[] yConstant = new double[xValues.Count()];
                    for (int i = 0; i < xValues.Count(); i++)
                    {
                        yConstant[i] = 21000000;
                    }

                    formsPlot1.Plot.AddFill(xValues, yConstant, 0, color: Color.FromArgb(30, Color.Orange));
                    formsPlot1.Plot.AddFill(xValues, yValues, 0, color: Color.Orange);
                    // create 'pretend' (empty) scatters purely so we can generate a legend/key
                    formsPlot1.Plot.AddScatter(new double[] { 0 }, new double[] { 0 }, markerSize: 0, label: "to be mined", color: Color.FromArgb(30, Color.Orange));
                    formsPlot1.Plot.AddScatter(new double[] { 0 }, new double[] { 0 }, markerSize: 0, label: "already mined", color: Color.Orange);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Label("Bitcoin (max. 21m)", size: (int)(12 * UIScale), bold: false);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(0, 22500000);
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;

                    Color legendOutlineColour = Color.FromArgb(50, 50, 50);
                    if (String.Compare(lblChartsDarkBackground.Text, "✔️") == 0 || String.Compare(lblChartsMediumBackground.Text, "✔️") == 0)
                    {
                        legendOutlineColour = Color.FromArgb(50, 50, 50);
                    }
                    else
                    {
                        legendOutlineColour = Color.FromArgb(220, 220, 200);
                    }
                    var legend = formsPlot1.Plot.Legend();
                    legend.Location = Alignment.UpperRight;
                    legend.FillColor = Color.Transparent;
                    legend.FontColor = label77.ForeColor;
                    legend.OutlineColor = legendOutlineColour;
                    legend.ShadowColor = chartsBackgroundColor;

                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);

                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                    chartRendered = true;
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating circulation chart");
            }
        }
        #endregion
        #endregion
        #region show/hide chart loading panel
        private void ShowChartLoadingPanel()
        {
            try
            {
                pictureBoxChartLoadingAnimation.Enabled = true;
                panelChartLoading.Visible = true;
            }
            catch (WebException ex)
            {
                HandleException(ex, "ShowChartLoadingPanel");
            }
        }

        private void HideChartLoadingPanel()
        {
            try
            {
                pictureBoxChartLoadingAnimation.Enabled = false;
                panelChartLoading.Visible = false;
            }
            catch (WebException ex)
            {
                HandleException(ex, "HideChartLoadingPanel");
            }
        }
        #endregion
        #region disable/enable charts, time periods, hide panels, etc

        private void ClearAllChartData()
        {
            try
            {
                formsPlot1.Plot.Clear();
                formsPlot2.Plot.Clear();
                formsPlot3.Plot.Clear();
            }
            catch (WebException ex)
            {
                HandleException(ex, "ClearAllChartData");
            }
        }

        private void HideAllChartKeysAndPanels()
        {
            try
            {
                Control[] controlsToHide = { panelHashrateScaleButtons, panelChartUTXOScaleButtons, panelUniqueAddressesScaleButtons, panelPriceScaleButtons, panelChartMarketCapScaleButtons, panelChartDifficultyScaleButtons };
                foreach (Control control in controlsToHide)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.Visible = false;
                    });
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "HideAllChartKeysAndPanels");
            }
        }

        private void DisableIrrelevantTimePeriods()
        {
            try
            {
                if (String.Compare(chartType, "hashrate") == 0 || String.Compare(chartType, "hashratelog") == 0)
                {
                    comboBoxChartsTimePeriod.OnSelectedIndexChanged -= ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                    comboBoxChartsTimePeriod.Items[0] = "24 hours (disabled)";
                    comboBoxChartsTimePeriod.Items[1] = "3 days (disabled)";
                    comboBoxChartsTimePeriod.Items[2] = "1 week (disabled)";
                    comboBoxChartsTimePeriod.Items[3] = "1 month";
                    comboBoxChartsTimePeriod.Items[4] = "3 months";
                    comboBoxChartsTimePeriod.Items[5] = "6 months";
                    comboBoxChartsTimePeriod.Items[6] = "1 year";
                    comboBoxChartsTimePeriod.Items[7] = "2 years";
                    comboBoxChartsTimePeriod.Items[8] = "3 years";
                    comboBoxChartsTimePeriod.Items[9] = "all data";
                    comboBoxChartsTimePeriod.OnSelectedIndexChanged += ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                }
                else
                {
                    if (String.Compare(chartType, "difficulty") == 0 || String.Compare(chartType, "difficultylog") == 0)
                    {
                        comboBoxChartsTimePeriod.OnSelectedIndexChanged -= ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                        comboBoxChartsTimePeriod.Items[0] = "24 hours (disabled)";
                        comboBoxChartsTimePeriod.Items[1] = "3 days (disabled)";
                        comboBoxChartsTimePeriod.Items[2] = "1 week (disabled)";
                        comboBoxChartsTimePeriod.Items[3] = "1 month";
                        comboBoxChartsTimePeriod.Items[4] = "3 months";
                        comboBoxChartsTimePeriod.Items[5] = "6 months";
                        comboBoxChartsTimePeriod.Items[6] = "1 year";
                        comboBoxChartsTimePeriod.Items[7] = "2 years";
                        comboBoxChartsTimePeriod.Items[8] = "3 years";
                        comboBoxChartsTimePeriod.Items[9] = "all data";
                        comboBoxChartsTimePeriod.OnSelectedIndexChanged += ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                    }
                    else
                    {

                        if (String.Compare(chartType, "price") == 0
                        || String.Compare(chartType, "pricelog") == 0
                        || String.Compare(chartType, "circulation") == 0
                        || String.Compare(chartType, "addresses") == 0
                        || String.Compare(chartType, "addresseslog") == 0
                        || String.Compare(chartType, "utxo") == 0
                        || String.Compare(chartType, "utxolog") == 0
                        || String.Compare(chartType, "marketcap") == 0
                        || String.Compare(chartType, "marketcaplog") == 0)
                        {
                            comboBoxChartsTimePeriod.OnSelectedIndexChanged -= ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                            comboBoxChartsTimePeriod.Items[0] = "24 hours (disabled)";
                            comboBoxChartsTimePeriod.Items[1] = "3 days (disabled)";
                            comboBoxChartsTimePeriod.Items[2] = "1 week (disabled)";
                            comboBoxChartsTimePeriod.Items[3] = "1 month";
                            comboBoxChartsTimePeriod.Items[4] = "3 months";
                            comboBoxChartsTimePeriod.Items[5] = "6 months";
                            comboBoxChartsTimePeriod.Items[6] = "1 year";
                            comboBoxChartsTimePeriod.Items[7] = "2 years (disabled)";
                            comboBoxChartsTimePeriod.Items[8] = "3 years";
                            comboBoxChartsTimePeriod.Items[9] = "all data";
                            comboBoxChartsTimePeriod.OnSelectedIndexChanged += ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                        }
                        else
                        {
                            if (String.Compare(chartType, "nodesbycountry") == 0)
                            {
                                comboBoxChartsTimePeriod.OnSelectedIndexChanged -= ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                                comboBoxChartsTimePeriod.Items[0] = "24 hours (disabled)";
                                comboBoxChartsTimePeriod.Items[1] = "3 days (disabled)";
                                comboBoxChartsTimePeriod.Items[2] = "1 week (disabled)";
                                comboBoxChartsTimePeriod.Items[3] = "1 month (disabled)";
                                comboBoxChartsTimePeriod.Items[4] = "3 months (disabled)";
                                comboBoxChartsTimePeriod.Items[5] = "6 months (disabled)";
                                comboBoxChartsTimePeriod.Items[6] = "1 year (disabled)";
                                comboBoxChartsTimePeriod.Items[7] = "2 years (disabled)";
                                comboBoxChartsTimePeriod.Items[8] = "3 years (disabled)";
                                comboBoxChartsTimePeriod.Items[9] = "all data (disabled)";
                                comboBoxChartsTimePeriod.OnSelectedIndexChanged += ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                            }
                            else
                            {
                                if (String.Compare(chartType, "lightningcapacity") == 0
                                || String.Compare(chartType, "lightningchannels") == 0
                                || String.Compare(chartType, "lightningnodesbynetwork") == 0)
                                {
                                    comboBoxChartsTimePeriod.OnSelectedIndexChanged -= ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                                    comboBoxChartsTimePeriod.Items[0] = "24 hours (disabled)";
                                    comboBoxChartsTimePeriod.Items[1] = "3 days (disabled)";
                                    comboBoxChartsTimePeriod.Items[2] = "1 week (disabled)";
                                    comboBoxChartsTimePeriod.Items[3] = "1 month";
                                    comboBoxChartsTimePeriod.Items[4] = "3 months";
                                    comboBoxChartsTimePeriod.Items[5] = "6 months";
                                    comboBoxChartsTimePeriod.Items[6] = "1 year";
                                    comboBoxChartsTimePeriod.Items[7] = "2 years";
                                    comboBoxChartsTimePeriod.Items[8] = "3 years";
                                    comboBoxChartsTimePeriod.Items[9] = "all data";
                                    comboBoxChartsTimePeriod.OnSelectedIndexChanged += ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                                }

                                else
                                {
                                    comboBoxChartsTimePeriod.OnSelectedIndexChanged -= ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                                    comboBoxChartsTimePeriod.Items[0] = "24 hours";
                                    comboBoxChartsTimePeriod.Items[1] = "3 days";
                                    comboBoxChartsTimePeriod.Items[2] = "1 week";
                                    comboBoxChartsTimePeriod.Items[3] = "1 month";
                                    comboBoxChartsTimePeriod.Items[4] = "3 months";
                                    comboBoxChartsTimePeriod.Items[5] = "6 months";
                                    comboBoxChartsTimePeriod.Items[6] = "1 year";
                                    comboBoxChartsTimePeriod.Items[7] = "2 years";
                                    comboBoxChartsTimePeriod.Items[8] = "3 years";
                                    comboBoxChartsTimePeriod.Items[9] = "all data";
                                    comboBoxChartsTimePeriod.OnSelectedIndexChanged += ComboBoxChartsTimePeriod_OnSelectedIndexChanged;
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "disabling irrelevant chart time periods");
            }
        }

        private void DisableEnableChartButtons(string enableOrDisableAllButtons)
        {
            try
            {
                if (String.Compare(enableOrDisableAllButtons, "disable") == 0)
                {
                    ignoreMouseMoveOnChart = true;
                    // get current state of buttons before disabling them
                    btnHashrateScaleLogWasEnabled = btnHashrateScaleLog.Enabled;
                    btnHashrateScaleLinearWasEnabled = btnHashrateScaleLinear.Enabled;
                    btnChartAddressScaleLinearWasEnabled = btnChartAddressScaleLinear.Enabled;
                    btnChartAddressScaleLogWasEnabled = btnChartAddressScaleLog.Enabled;
                    btnPriceChartScaleLogWasEnabled = btnPriceChartScaleLog.Enabled;
                    btnPriceChartScaleLinearWasEnabled = btnPriceChartScaleLinear.Enabled;
                    btnChartMarketCapLogWasEnabled = btnChartMarketCapScaleLog.Enabled;
                    btnChartMarketCapLinearWasEnabled = btnChartMarketCapScaleLinear.Enabled;
                    btnChartDifficultyLinearWasEnabled = btnChartDifficultyLinear.Enabled;
                    btnChartDifficultyLogWasEnabled = btnChartDifficultyLog.Enabled;

                    //disable them all

                    Control[] disableTheseControls = { btnHashrateScaleLinear,
                        btnHashrateScaleLog, btnChartAddressScaleLinear, btnChartAddressScaleLog, btnPriceChartScaleLog, btnPriceChartScaleLinear,
                        btnChartMarketCapScaleLog, btnChartMarketCapScaleLinear, btnChartDifficultyLinear, btnChartDifficultyLog };
                    foreach (Control control in disableTheseControls)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.Enabled = false;
                        });
                    }
                }
                else
                {
                    // use previously saved states to reinstate buttons
                    btnChartAddressScaleLinear.Enabled = btnChartAddressScaleLinearWasEnabled;
                    btnChartAddressScaleLog.Enabled = btnChartAddressScaleLogWasEnabled;
                    btnHashrateScaleLinear.Enabled = btnHashrateScaleLinearWasEnabled;
                    btnHashrateScaleLog.Enabled = btnHashrateScaleLogWasEnabled;
                    btnPriceChartScaleLog.Enabled = btnPriceChartScaleLogWasEnabled;
                    btnPriceChartScaleLinear.Enabled = btnPriceChartScaleLinearWasEnabled;
                    btnChartMarketCapScaleLog.Enabled = btnChartMarketCapLogWasEnabled;
                    btnChartMarketCapScaleLinear.Enabled = btnChartMarketCapLinearWasEnabled;
                    btnChartDifficultyLinear.Enabled = btnChartDifficultyLinearWasEnabled;
                    btnChartDifficultyLog.Enabled = btnChartDifficultyLogWasEnabled;
                    ignoreMouseMoveOnChart = false;
                }
                // disable charts where corresponding API is disabled
                if (RunBlockchainInfoAPI == false)
                {
                    DisableChartsThatUseBlockchainInfoAPI();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "changing chart button states");
            }
        }

        private void DisableChartsThatUseBlockchainInfoAPI()
        {
            try
            {
                Control[] disableTheseControls = { lblChartCirculation, lblHeaderPriceChart, lblPriceChart, lblConverterChart, lblMarketCapChart, lblUniqueAddressesChart, lblHeaderConverterChart, lblHeaderMarketCapChart };
                foreach (Control control in disableTheseControls)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.Enabled = false;
                    });
                }

                comboBoxChartSelect.Items[6] = "🔗 circulation (disabled)";
                comboBoxChartSelect.Items[15] = "💲 market cap.(disabled)";
                comboBoxChartSelect.Items[14] = "💲 price (disabled)";
                comboBoxChartSelect.Items[7] = "🔗 addresses (disabled)";
                comboBoxChartSelect.Items[8] = "🔗 UTXO's (disabled)";
            }
            catch (Exception ex)
            {
                HandleException(ex, "Disabling non-mempool.space charts");
            }
        }

        private void EnableChartsThatUseBlockchainInfoAPI()
        {
            try
            {
                Control[] disableTheseControls = { lblChartCirculation, lblHeaderPriceChart, lblPriceChart, lblConverterChart, lblMarketCapChart, lblUniqueAddressesChart, lblHeaderConverterChart, lblHeaderMarketCapChart };
                foreach (Control control in disableTheseControls)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.Enabled = true;
                    });
                }

                comboBoxChartSelect.Items[6] = "🔗 circulation";
                comboBoxChartSelect.Items[15] = "💲 market cap.";
                comboBoxChartSelect.Items[14] = "💲 price";
                comboBoxChartSelect.Items[7] = "🔗 addresses";
                comboBoxChartSelect.Items[8] = "🔗 UTXO's";
            }
            catch (Exception ex)
            {
                HandleException(ex, "Enabling non-mempool.space charts");
            }
        }

        #endregion
        #region prepare for linear scale chart
        private void PrepareLinearScaleChart()
        {
            try
            {
                // switch to linear scaling in case it was log before
                formsPlot1.Plot.YAxis.MinorLogScale(false);
                formsPlot1.Plot.YAxis.MajorGrid(false);
                formsPlot1.Plot.YAxis.MinorGrid(false);

                // Define a new tick label formatter for the linear scale
                static string linearTickLabels(double y) => y.ToString("N0");
                formsPlot1.Plot.YAxis.TickLabelFormat(linearTickLabels);

                // Revert back to automatic data area
                formsPlot1.Plot.ResetLayout();
                formsPlot1.Plot.AxisAuto();
            }
            catch (Exception ex)
            {
                HandleException(ex, "switching to linear scale chart");
            }
        }
        #endregion
        #region linear/log buttons
        private void BtnChartUTXOScaleLinear_Click(object sender, EventArgs e)
        {
            ChartUTXOAsync();
        }

        private void BtnChartUTXOScaleLog_Click(object sender, EventArgs e)
        {
            ChartUTXOLogAsync();
        }

        private void BtnChartDifficultyLinear_Click(object sender, EventArgs e)
        {
            ChartDifficultyAsync();
        }

        private void BtnChartDifficultyLog_Click(object sender, EventArgs e)
        {
            ChartDifficultyLogAsync();
        }

        private void BtnChartMarketCapScaleLinear_Click(object sender, EventArgs e)
        {
            ChartMarketCapAsync();
        }

        private void BtnChartMarketCapScaleLog_Click(object sender, EventArgs e)
        {
            ChartMarketCapLogAsync();
        }

        private void BtnHashrateScaleLinear_Click(object sender, EventArgs e)
        {
            ChartHashrateAsync();
        }

        private void BtnHashrateScaleLog_Click(object sender, EventArgs e)
        {
            ChartHashrateLogAsync();
        }

        private void BtnPriceChartScaleLinear_Click(object sender, EventArgs e)
        {
            ChartPriceAsync();
        }

        private void BtnPriceChartScaleLog_Click(object sender, EventArgs e)
        {
            ChartPriceLogAsync();
        }

        private void BtnChartAddressScaleLinear_Click(object sender, EventArgs e)
        {
            ChartUniqueAddressesAsync();
        }

        private void BtnChartAddressScaleLog_Click(object sender, EventArgs e)
        {
            ChartUniqueAddressesLogAsync();
        }
        #endregion
        #region change chart time period

        private void ComboBoxChartsTimePeriod_OnSelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBoxChartsTimePeriod.SelectedIndex == 0)
            {
                chartPeriod = "24h";
            }
            if (comboBoxChartsTimePeriod.SelectedIndex == 1)
            {
                chartPeriod = "3d";
            }
            if (comboBoxChartsTimePeriod.SelectedIndex == 2)
            {
                chartPeriod = "1w";
            }
            if (comboBoxChartsTimePeriod.SelectedIndex == 3)
            {
                chartPeriod = "1m";
            }
            if (comboBoxChartsTimePeriod.SelectedIndex == 4)
            {
                chartPeriod = "3m";
            }
            if (comboBoxChartsTimePeriod.SelectedIndex == 5)
            {
                chartPeriod = "6m";
            }
            if (comboBoxChartsTimePeriod.SelectedIndex == 6)
            {
                chartPeriod = "1y";
            }
            if (comboBoxChartsTimePeriod.SelectedIndex == 7)
            {
                chartPeriod = "2y";
            }
            if (comboBoxChartsTimePeriod.SelectedIndex == 8)
            {
                chartPeriod = "3y";
            }
            if (comboBoxChartsTimePeriod.SelectedIndex == 9)
            {
                chartPeriod = "all";
            }

            if (String.Compare(chartType, "utxo") == 0)
            {
                ChartUTXOAsync();
            }
            if (String.Compare(chartType, "utxolog") == 0)
            {
                ChartUTXOLogAsync();
            }
            if (String.Compare(chartType, "hashrate") == 0)
            {
                ChartHashrateAsync();
            }
            if (String.Compare(chartType, "hashratelog") == 0)
            {
                ChartHashrateLogAsync();
            }
            if (String.Compare(chartType, "blockfees") == 0)
            {
                ChartBlockFeesAsync();
            }
            if (String.Compare(chartType, "difficulty") == 0)
            {
                ChartDifficultyAsync();
            }
            if (String.Compare(chartType, "difficultylog") == 0)
            {
                ChartDifficultyLogAsync();
            }
            if (String.Compare(chartType, "price") == 0)
            {
                ChartPriceAsync();
            }
            if (String.Compare(chartType, "pricelog") == 0)
            {
                ChartPriceLogAsync();
            }
            if (String.Compare(chartType, "reward") == 0)
            {
                ChartRewardAsync();
            }
            if (String.Compare(chartType, "feerates") == 0)
            {
                ChartFeeRatesAsync();
            }
            if (String.Compare(chartType, "blocksize") == 0)
            {
                ChartBlockSizeAsync();
            }
            if (String.Compare(chartType, "addresses") == 0)
            {
                ChartUniqueAddressesAsync();
            }
            if (String.Compare(chartType, "addresseslog") == 0)
            {
                ChartUniqueAddressesLogAsync();
            }
            if (String.Compare(chartType, "poolranking") == 0)
            {
                ChartPoolsRankingAsync();
            }
            if (String.Compare(chartType, "lightningnodesbynetwork") == 0)
            {
                ChartNodesByNetworkAsync();
            }
            if (String.Compare(chartType, "lightningcapacity") == 0)
            {
                ChartLightningCapacityAsync();
            }
            if (String.Compare(chartType, "lightningchannels") == 0)
            {
                ChartLightningChannelsAsync();
            }
            if (String.Compare(chartType, "marketcap") == 0)
            {
                ChartMarketCapAsync();
            }
            if (String.Compare(chartType, "marketcaplog") == 0)
            {
                ChartMarketCapLogAsync();
            }
            if (String.Compare(chartType, "circulation") == 0)
            {
                ChartCirculationAsync();
            }
        }
        #endregion
        #region track mouse position to show nearest data point
        private void FormsPlot1_MouseMove(object sender, MouseEventArgs e)
        {
            try
            {
                if (!ignoreMouseMoveOnChart)
                {
                    if (String.Compare(chartType, "feerates") != 0
                    && String.Compare(chartType, "poolranking") != 0
                    && String.Compare(chartType, "lightningnodesbynetwork") != 0
                    && String.Compare(chartType, "nodesbycountry") != 0)
                    {
                        // determine point nearest the cursor
                        (double mouseCoordX, double mouseCoordY) = formsPlot1.GetMouseCoordinates();
                        double xyRatio = formsPlot1.Plot.XAxis.Dims.PxPerUnit / formsPlot1.Plot.YAxis.Dims.PxPerUnit;
                        (double pointX, double pointY, int pointIndex) = scatter!.GetPointNearest(mouseCoordX, mouseCoordY, xyRatio);

                        // place the highlight over the point of interest
                        HighlightedPoint!.X = pointX;
                        HighlightedPoint.Y = pointY;
                        HighlightedPoint.IsVisible = true;

                        // render if the highlighted point chnaged
                        if (LastHighlightedIndex != pointIndex)
                        {
                            LastHighlightedIndex = pointIndex;

                            // Convert pointX to a DateTime object
                            DateTime pointXDate = DateTime.FromOADate(pointX);

                            // Format the DateTime object using the desired format string
                            string formattedPointX = pointXDate.ToString("yyyy-MM-dd");

                            if (String.Compare(chartType, "pricelog") == 0
                            || String.Compare(chartType, "addresseslog") == 0
                            || String.Compare(chartType, "utxolog") == 0
                            || String.Compare(chartType, "marketcaplog") == 0
                            || String.Compare(chartType, "hashratelog") == 0
                            || String.Compare(chartType, "difficultylog") == 0)
                            {
                                double originalY = Math.Pow(10, pointY); // Convert back to the original scale
                                                                         //annotation to obscure the previous one before drawing the new one
                                var blankAnnotation = formsPlot1.Plot.AddAnnotation("████████████████████████████████████", Alignment.UpperLeft);
                                blankAnnotation.Font.Name = "Consolas";
                                blankAnnotation.Font.Size = (int)(12 * UIScale);
                                blankAnnotation.Shadow = false;
                                blankAnnotation.BorderWidth = 0;
                                blankAnnotation.BorderColor = chartsBackgroundColor;
                                blankAnnotation.MarginX = 2;
                                blankAnnotation.MarginY = 2;
                                blankAnnotation.Font.Color = chartsBackgroundColor;
                                blankAnnotation.BackgroundColor = chartsBackgroundColor;

                                var actualAnnotation = formsPlot1.Plot.AddAnnotation($"{originalY:N2} ({formattedPointX})", Alignment.UpperLeft);
                                actualAnnotation.Font.Name = "Consolas";
                                actualAnnotation.Font.Size = (int)(12 * UIScale);
                                actualAnnotation.Shadow = false;
                                actualAnnotation.BorderWidth = 0;
                                actualAnnotation.BorderColor = chartsBackgroundColor;
                                actualAnnotation.MarginX = 2;
                                actualAnnotation.MarginY = 2;
                                actualAnnotation.Font.Color = label148.ForeColor;
                                actualAnnotation.BackgroundColor = chartsBackgroundColor;
                            }
                            else
                            {
                                //annotation to obscure the previous one before drawing the new one
                                var blankAnnotation = formsPlot1.Plot.AddAnnotation("████████████████████████████████████", Alignment.UpperLeft);
                                blankAnnotation.Font.Name = "Consolas";
                                blankAnnotation.Font.Size = (int)(12 * UIScale);
                                blankAnnotation.Shadow = false;
                                blankAnnotation.BorderWidth = 0;
                                blankAnnotation.BorderColor = chartsBackgroundColor;
                                blankAnnotation.MarginX = 2;
                                blankAnnotation.MarginY = 2;
                                blankAnnotation.Font.Color = chartsBackgroundColor;
                                blankAnnotation.BackgroundColor = chartsBackgroundColor;

                                //new annotation
                                var actualAnnotation = formsPlot1.Plot.AddAnnotation($"{pointY:N2} ({formattedPointX})", Alignment.UpperLeft);
                                actualAnnotation.Font.Name = "Consolas";
                                actualAnnotation.Font.Size = (int)(12 * UIScale);
                                actualAnnotation.Shadow = false;
                                actualAnnotation.BorderWidth = 0;
                                actualAnnotation.BorderColor = chartsBackgroundColor;
                                actualAnnotation.MarginX = 2;
                                actualAnnotation.MarginY = 2;
                                actualAnnotation.Font.Color = label148.ForeColor;
                                actualAnnotation.BackgroundColor = chartsBackgroundColor;
                            }
                            formsPlot1.Render();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "rendering mouse-over chart coordinates data");
            }
        }
        #endregion
        #region save chart image
        private void BtnSaveChart_Click(object sender, EventArgs e)
        {
            try
            {
                var sfd = new SaveFileDialog
                {
                    FileName = "SATSuma.png",
                    Filter = "PNG Files (*.png)|*.png;*.png" +
                     "|JPG Files (*.jpg, *.jpeg)|*.jpg;*.jpeg" +
                     "|BMP Files (*.bmp)|*.bmp;*.bmp" +
                     "|All files (*.*)|*.*"
                };

                if (sfd.ShowDialog() == DialogResult.OK)
                {
                    if (formsPlot1.Visible == true)
                    {
                        formsPlot1.Plot.SaveFig(sfd.FileName);
                    }
                    if (formsPlot2.Visible == true)
                    {
                        formsPlot2.Plot.SaveFig(sfd.FileName);
                    }
                    if (formsPlot3.Visible == true)
                    {
                        formsPlot3.Plot.SaveFig(sfd.FileName);
                    }
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "BtnSaveChart_Click");
            }
        }
        #endregion
        #endregion
        //![](resources\tinylogo1.png;;;0.04706,0.04877)
        #region ⚡⚡⚡ ADD TO BOOKMARKS TAB⚡
        #region show, populate or hide the add bookmark tab
        private void BtnAddToBookmarks_Click(object sender, EventArgs e)
        {
            try
            {
                if (!panelAddToBookmarks.Visible)
                {

                    panelAddToBookmarksBorder.Visible = true;
                    panelAddToBookmarksBorder.BringToFront();
                    panelAddToBookmarks.Visible = true;
                    panelAddToBookmarks.BringToFront();
                    lblBookmarkSavedSuccess.Visible = false;
                    btnCommitToBookmarks.Enabled = true;
                    btnCancelAddToBookmarks.Enabled = true;
                    panelAddToBookmarks.BringToFront();
                }
                else
                {
                    panelAddToBookmarks.Visible = false;
                    panelAddToBookmarksBorder.Visible = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnAddToBookmarks_Click");
            }
        }

        private void PanelAddToBookmarks_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                if (panelAddress.Visible)
                {
                    lblBookmarkProposalType.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkProposalType.Text = "address";
                    });
                    lblBookmarkProposalData.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkProposalData.Text = textboxSubmittedAddress.Text;
                    });

                }
                if (panelBlock.Visible)
                {
                    lblBookmarkProposalType.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkProposalType.Text = "block";
                    });
                    lblBookmarkProposalData.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkProposalData.Text = numericUpDownSubmittedBlockNumber.Text;
                    });
                }
                if (panelTransaction.Visible)
                {
                    lblBookmarkProposalType.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkProposalType.Text = "transaction";
                    });
                    lblBookmarkProposalData.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkProposalData.Text = textBoxTransactionID.Text;
                    });
                }
                if (panelXpub.Visible)
                {
                    lblBookmarkProposalType.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkProposalType.Text = "xpub";
                    });
                    lblBookmarkProposalData.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkProposalData.Text = textBoxSubmittedXpub.Text;
                    });
                }
                lblBookmarkProposalType.Invoke((MethodInvoker)delegate
                {
                    lblBookmarkProposalType.Location = new Point(label131.Location.X + label131.Width, label131.Location.Y);
                });
                lblBookmarkProposalData.Invoke((MethodInvoker)delegate
                {
                    lblBookmarkProposalData.Location = new Point(lblBookmarkProposalType.Location.X + lblBookmarkProposalType.Width, lblBookmarkProposalType.Location.Y);
                    lblBookmarkProposalData.Width = panelAddToBookmarks.Width - label131.Width - lblBookmarkProposalType.Width - 5;
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "PanelAddToBookmarks_Paint");
            }
        }

        private void BtnCancelAddToBookmarks_Click(object sender, EventArgs e)
        {
            try
            {
                HideBookmarksShowFees(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnCancelAddToBookmarks_Click");
            }
        }

        private void HideBookmarksShowFees(object sender, EventArgs e)
        {
            try
            {
                panelAddToBookmarks.Visible = false;
                panelAddToBookmarksBorder.Visible = false;
            }
            catch (Exception ex)
            {
                HandleException(ex, "HideBookmarksShowFees");
            }
        }
        #endregion
        #region create bookmark record to be saved
        private void BtnCommitToBookmarks_Click(object sender, EventArgs e)
        {
            try
            {
                DateTime today = DateTime.Today.Date;
                bool toBeEncrypted = false;
                if (String.Compare(textBoxBookmarkEncryptionKey.Text, "") == 0 || String.Compare(textBoxBookmarkEncryptionKey.Text, "optional encryption key") == 0)
                {
                    toBeEncrypted = false;
                }
                else
                {
                    toBeEncrypted = true;
                }

                string bookmarkNote;
                if (String.Compare(textBoxBookmarkProposedNote.Text, "optional notes") == 0 || String.Compare(textBoxBookmarkProposedNote.Text, "") == 0)
                {
                    bookmarkNote = "";
                }
                else
                {
                    bookmarkNote = textBoxBookmarkProposedNote.Text;
                }

                string bookmarkData;
                string keyCheck = "21m";
                if (toBeEncrypted)
                {
                    // Encrypt the new bookmark using the encryption key
                    string encryptionKey = textBoxBookmarkEncryptionKey.Text;
                    string unencryptedBookmarkData = lblBookmarkProposalData.Text;
                    string unencryptedBookmarkNote = bookmarkNote;
                    string unencryptedKeyCheck = "21m";
                    string encryptedKeyCheck = Encrypt(unencryptedKeyCheck, encryptionKey);
                    string encryptedBookmarkData = Encrypt(unencryptedBookmarkData, encryptionKey);
                    string encryptedBookmarkNote = Encrypt(unencryptedBookmarkNote, encryptionKey);
                    bookmarkNote = encryptedBookmarkNote;
                    bookmarkData = encryptedBookmarkData;
                    keyCheck = encryptedKeyCheck;
                }
                else
                {
                    bookmarkData = lblBookmarkProposalData.Text;
                }

                var newBookmark = new Bookmark { DateAdded = today, Type = lblBookmarkProposalType.Text, Data = bookmarkData, Note = bookmarkNote, Encrypted = toBeEncrypted, KeyCheck = keyCheck };

                // Read the existing bookmarks from the JSON file
                var bookmarks = ReadBookmarksFromJsonFile();

                // Add the new bookmark to the list
                bookmarks.Add(newBookmark);

                // Write the updated list of bookmarks back to the JSON file
                WriteBookmarksToJsonFile(bookmarks);
                lblBookmarkSavedSuccess.Visible = true;
                btnCommitToBookmarks.Enabled = false;
                btnCancelAddToBookmarks.Enabled = false;
                intHideAddToBookmarksTimeShown = 0;
                bookmarkHasBeenAdded = true;
                textBoxBookmarkProposedNote.Text = "";
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnCommitToBookmarks_Click");
            }
        }

        bool bookmarkHasBeenAdded;
        #endregion
        #region read bookmarks from file
        private static List<Bookmark> ReadBookmarksFromJsonFile()
        {
            string bookmarksFileName = "SATSuma_bookmarks.json";
            string appDataDirectory = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
            string applicationDirectory = Path.Combine(appDataDirectory, "SATSuma");
            // Create the application directory if it doesn't exist
            Directory.CreateDirectory(applicationDirectory);
            string bookmarksFilePath = Path.Combine(applicationDirectory, bookmarksFileName);
            string filePath = bookmarksFilePath;

            if (!System.IO.File.Exists(filePath))
            {
                System.IO.File.Create(filePath).Dispose();
            }
            // Read the contents of the JSON file into a string
            string json = System.IO.File.ReadAllText(filePath);

            // Deserialize the JSON string into a list of bookmark objects
            var bookmarks = JsonConvert.DeserializeObject<List<Bookmark>>(json);

            // If the JSON file doesn't exist or is empty, return an empty list
            bookmarks ??= new List<Bookmark>();
            bookmarks = bookmarks.OrderByDescending(b => b.DateAdded).ToList();
            return bookmarks;
        }
        #endregion
        #region write bookmarks to file
        private static void WriteBookmarksToJsonFile(List<Bookmark> bookmarks)
        {
            // Serialize the list of bookmark objects into a JSON string
            string json = JsonConvert.SerializeObject(bookmarks);

            string bookmarksFileName = "SATSuma_bookmarks.json";
            string appDataDirectory = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
            string applicationDirectory = Path.Combine(appDataDirectory, "SATSuma");
            // Create the application directory if it doesn't exist
            Directory.CreateDirectory(applicationDirectory);
            string bookmarksFilePath = Path.Combine(applicationDirectory, bookmarksFileName);
            string filePath = bookmarksFilePath;

            // Write the JSON string to the bookmarks.json file
            System.IO.File.WriteAllText(filePath, json);
        }
        #endregion
        #region user input
        private void TextBoxBookmarkProposedNote_Enter(object sender, EventArgs e)
        {
            try
            {
                if (isBookmarkNoteWatermarkTextDisplayed)
                {
                    textBoxBookmarkProposedNote.Invoke((MethodInvoker)delegate
                    {
                        textBoxBookmarkProposedNote.Text = "";
                        textBoxBookmarkProposedNote.ForeColor = Color.White;
                    });
                    isBookmarkNoteWatermarkTextDisplayed = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxBookmarkProposedNote_Enter");
            }
        }

        private void TextBoxBookmarkProposedNote_Leave(object sender, EventArgs e)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(textBoxBookmarkProposedNote.Text))
                {
                    textBoxBookmarkProposedNote.Invoke((MethodInvoker)delegate
                    {
                        textBoxBookmarkProposedNote.Text = "optional notes";
                        textBoxBookmarkProposedNote.ForeColor = Color.Gray;
                    });
                    isBookmarkNoteWatermarkTextDisplayed = true;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxBookmarkProposedNote_Leave");
            }
        }

        private void TextBoxBookmarkProposedNote_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (isBookmarkNoteWatermarkTextDisplayed)
                {
                    textBoxBookmarkProposedNote.ForeColor = Color.White;
                    isBookmarkNoteWatermarkTextDisplayed = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxBookmarkProposedNote_Leave");
            }
        }

        private void TextBoxBookmarkProposedNote_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (isBookmarkNoteWatermarkTextDisplayed)
                {
                    textBoxBookmarkProposedNote.Invoke((MethodInvoker)delegate
                    {
                        textBoxBookmarkProposedNote.Text = "";
                        textBoxBookmarkProposedNote.ForeColor = Color.White;
                    });
                    isBookmarkNoteWatermarkTextDisplayed = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxBookmarkProposedNote_Leave");
            }
        }

        private void TextBoxBookmarkEncryptionKey_Enter(object sender, EventArgs e)
        {
            try
            {
                if (isEncryptionKeyWatermarkTextDisplayed)
                {
                    textBoxBookmarkEncryptionKey.Invoke((MethodInvoker)delegate
                    {
                        textBoxBookmarkEncryptionKey.Text = "";
                        textBoxBookmarkEncryptionKey.ForeColor = Color.White;
                    });
                    isEncryptionKeyWatermarkTextDisplayed = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxBookmarkEncryptionKey_Enter");
            }
        }

        private void TextBoxBookmarkEncryptionKey_Leave(object sender, EventArgs e)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(textBoxBookmarkEncryptionKey.Text))
                {
                    textBoxBookmarkEncryptionKey.Invoke((MethodInvoker)delegate
                    {
                        textBoxBookmarkEncryptionKey.Text = "optional encryption key";
                        textBoxBookmarkEncryptionKey.ForeColor = Color.Gray;
                    });
                    isEncryptionKeyWatermarkTextDisplayed = true;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxBookmarkEncryptionKey_Leave");
            }
        }

        private void TextBoxBookmarkEncryptionKey_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (isEncryptionKeyWatermarkTextDisplayed)
                {
                    textBoxBookmarkEncryptionKey.ForeColor = Color.White;
                    isEncryptionKeyWatermarkTextDisplayed = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxBookmarkEncryptionKey_TextChanged");
            }
        }

        private void TextBoxBookmarkEncryptionKey_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (isEncryptionKeyWatermarkTextDisplayed)
                {
                    textBoxBookmarkEncryptionKey.Invoke((MethodInvoker)delegate
                    {
                        textBoxBookmarkEncryptionKey.Text = "";
                        textBoxBookmarkEncryptionKey.ForeColor = Color.White;
                    });
                    isEncryptionKeyWatermarkTextDisplayed = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxBookmarkEncryptionKey_KeyPress");
            }
        }
        #endregion
        #endregion
        //![](resources\tinylogo1.png;;;0.04706,0.04877)
        #region ⚡⚡⚡ BOOKMARKS SCREEN
        #region set up bookmarks screen
        private void SetupBookmarksScreen()
        {
            try
            {
                bool bookmarkFound = false;
                var bookmarks = ReadBookmarksFromJsonFile();

                foreach (var bookmark in bookmarks)
                {
                    if (String.Compare(bookmark.Type, "block") == 0
                    || String.Compare(bookmark.Type, "address") == 0
                    || String.Compare(bookmark.Type, "transaction") == 0
                    || String.Compare(bookmark.Type, "xpub") == 0)
                    {
                        // there is at least one bookmark
                        panel32.Visible = true;
                        panelBookmarksScrollContainer.Visible = true;
                        panel100.Visible = true;
                        listViewBookmarks.Visible = true;
                        btnDeleteAllBookmarks.Enabled = true;
                        bookmarkFound = true;
                    }
                }
                if (!bookmarkFound) // there are no bookmarks
                {
                    lblBookmarkDataInFull.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkDataInFull.Text = "";
                    });
                    lblBookmarkNoteInFull.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkNoteInFull.Text = "";
                    });
                    panel32.Visible = false;
                    panelBookmarksScrollContainer.Visible = false;
                    panel100.Visible = false;
                    listViewBookmarks.Visible = false;
                    btnDeleteAllBookmarks.Enabled = false;
                    lblBookmarkTotalCount.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkTotalCount.Text = "0";
                    });
                    lblBookmarkAddressCount.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkAddressCount.Text = "0";
                    });
                    lblBookmarkBlocksCount.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkBlocksCount.Text = "0";
                    });
                    lblBookmarkTransactionsCount.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkTransactionsCount.Text = "0";
                    });
                    lblBookmarkXpubsCount.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkXpubsCount.Text = "0";
                    });
                    return;
                }

                btnViewBookmark.Enabled = false;
                btnDeleteBookmark.Enabled = false;
                lblBookmarkDataInFull.Invoke((MethodInvoker)delegate
                {
                    lblBookmarkDataInFull.Text = "";
                });
                lblBookmarkNoteInFull.Invoke((MethodInvoker)delegate
                {
                    lblBookmarkNoteInFull.Text = "";
                });
                label138.Invoke((MethodInvoker)delegate
                {
                    label138.Text = "";
                });
                lblSelectedBookmarkType.Invoke((MethodInvoker)delegate
                {
                    lblSelectedBookmarkType.Text = "";
                });
                //LIST VIEW
                listViewBookmarks.Invoke((MethodInvoker)delegate
                {
                    listViewBookmarks.Items.Clear(); // remove any data that may be there already
                });
                listViewBookmarks.GetType().InvokeMember("DoubleBuffered", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.SetProperty, null, listViewBookmarks, new object[] { true });
                // Check if the column header already exists
                if (listViewBookmarks.Columns.Count == 0)
                {
                    // If not, add the column header
                    listViewBookmarks.Invoke((MethodInvoker)delegate
                    {
                        listViewBookmarks.Columns.Add("Date added", (int)(80 * UIScale));
                    });
                }

                if (listViewBookmarks.Columns.Count == 1)
                {
                    listViewBookmarks.Invoke((MethodInvoker)delegate
                    {
                        listViewBookmarks.Columns.Add("Type", (int)(80 * UIScale));
                    });
                }

                if (listViewBookmarks.Columns.Count == 2)
                {
                    listViewBookmarks.Invoke((MethodInvoker)delegate
                    {
                        listViewBookmarks.Columns.Add("", (int)(20 * UIScale));
                    });
                }
                if (listViewBookmarks.Columns.Count == 3)
                {
                    listViewBookmarks.Invoke((MethodInvoker)delegate
                    {
                        listViewBookmarks.Columns.Add("Bookmark", (int)(166 * UIScale));
                    });
                }
                if (listViewBookmarks.Columns.Count == 4)
                {
                    listViewBookmarks.Invoke((MethodInvoker)delegate
                    {
                        listViewBookmarks.Columns.Add("Note", (int)(665 * UIScale));
                    });
                }
                if (listViewBookmarks.Columns.Count == 5)
                {
                    listViewBookmarks.Invoke((MethodInvoker)delegate
                    {
                        listViewBookmarks.Columns.Add("HiddenColumn", (int)(600 * UIScale)); //used to store the KeyCheck string.
                    });
                }
                // Add the items to the ListView
                int counterAllBookmarks = 0; // used to count rows in list as they're added
                int counterBlocks = 0;
                int counterAddresses = 0;
                int counterXpubs = 0;
                int counterTransactions = 0;

                foreach (var bookmark in bookmarks)
                {
                    if (String.Compare(bookmark.Type, "block") == 0
                    || String.Compare(bookmark.Type, "address") == 0
                    || String.Compare(bookmark.Type, "transaction") == 0
                    || String.Compare(bookmark.Type, "xpub") == 0)
                    {
                        ListViewItem item = new ListViewItem(bookmark.DateAdded.ToString("yyyy-MM-dd").Substring(0, 10));
                        item.SubItems.Add(bookmark.Type);
                        if (bookmark.Encrypted == true)
                        {
                            item.SubItems.Add("🔒");
                        }
                        else
                        {
                            item.SubItems.Add("");
                        }
                        item.SubItems.Add(bookmark.Data);
                        item.SubItems.Add(bookmark.Note);
                        item.SubItems.Add(bookmark.KeyCheck);
                        listViewBookmarks.Invoke((MethodInvoker)delegate
                        {
                            listViewBookmarks.Items.Add(item); // add row
                        });

                        // Get the height of each item to set height of whole listview
                        int rowHeight = listViewBookmarks.Margin.Vertical + listViewBookmarks.Padding.Vertical + listViewBookmarks.GetItemRect(0).Height;
                        int itemCount = listViewBookmarks.Items.Count; // Get the number of items in the ListBox
                        int listBoxHeight = (itemCount + 2) * rowHeight; // Calculate the height of the ListBox (the extra 2 gives room for the header)

                        listViewBookmarks.Height = listBoxHeight; // Set the height of the ListBox

                        if (String.Compare(bookmark.Type, "block") == 0)
                        {
                            counterBlocks++;
                        }
                        if (String.Compare(bookmark.Type, "address") == 0)
                        {
                            counterAddresses++;
                        }
                        if (String.Compare(bookmark.Type, "xpub") == 0)
                        {
                            counterXpubs++;
                        }
                        if (String.Compare(bookmark.Type, "transaction") == 0)
                        {
                            counterTransactions++;
                        }
                        counterAllBookmarks++;
                    }
                }

                #region scrollbar
                decimal displayRatio = Convert.ToDecimal(panelBookmarksScrollContainer.Height) / Convert.ToDecimal(listViewBookmarks.Height);
                panelBookmarksScrollbarInner.Invoke((MethodInvoker)delegate
                {
                    panelBookmarksScrollbarInner.Height = (int)(panelBookmarksScrollbarOuter.Height * displayRatio);
                    panelBookmarksScrollbarInner.Refresh();
                });
                int distanceToBeScrolled = panelBookmarksScrollbarOuter.Height - panelBookmarksScrollbarInner.Height;
                int numberOfRowsLeftToShow = listViewBookmarks.Items.Count - 23;
                if (numberOfRowsLeftToShow > 0)
                {
                    bookmarksScrollbarIncrement = Convert.ToInt32(distanceToBeScrolled / numberOfRowsLeftToShow);
                }
                else
                {
                    panelBookmarksScrollbarInner.Invoke((MethodInvoker)delegate
                    {
                        panelBookmarksScrollbarInner.Height = panelBookmarksScrollbarOuter.Height;
                    });
                    bookmarksScrollbarIncrement = 0;
                    btnBookmarksListDown.Enabled = false;
                    btnBookmarksListUp.Enabled = false;
                }
                #endregion

                if (listViewBookmarks.Items.Count > 23)
                {
                    btnBookmarksListUp.Enabled = true;
                    btnBookmarksListDown.Enabled = true;
                }
                else
                {
                    btnBookmarksListUp.Enabled = false;
                    btnBookmarksListDown.Enabled = false;

                }

                listViewBookmarks.Items[0].Selected = true;

                lblBookmarkTotalCount.Invoke((MethodInvoker)delegate
                {
                    lblBookmarkTotalCount.Text = counterAllBookmarks.ToString();
                });
                label144.Invoke((MethodInvoker)delegate
                {
                    label144.Location = new Point(lblBookmarkTotalCount.Location.X + lblBookmarkTotalCount.Width, label144.Location.Y);
                });
                lblBookmarkAddressCount.Invoke((MethodInvoker)delegate
                {
                    lblBookmarkAddressCount.Text = counterAddresses.ToString();
                    lblBookmarkAddressCount.Location = new Point(label144.Location.X + label144.Width, lblBookmarkAddressCount.Location.Y);
                });
                label153.Invoke((MethodInvoker)delegate
                {
                    label153.Location = new Point(lblBookmarkAddressCount.Location.X + lblBookmarkAddressCount.Width, label153.Location.Y);
                });
                lblBookmarkBlocksCount.Invoke((MethodInvoker)delegate
                {
                    lblBookmarkBlocksCount.Text = counterBlocks.ToString();
                    lblBookmarkBlocksCount.Location = new Point(label153.Location.X + label153.Width, lblBookmarkBlocksCount.Location.Y);
                });
                label151.Invoke((MethodInvoker)delegate
                {
                    label151.Location = new Point(lblBookmarkBlocksCount.Location.X + lblBookmarkBlocksCount.Width, label151.Location.Y);
                });
                lblBookmarkTransactionsCount.Invoke((MethodInvoker)delegate
                {
                    lblBookmarkTransactionsCount.Text = counterTransactions.ToString();
                    lblBookmarkTransactionsCount.Location = new Point(label151.Location.X + label151.Width, lblBookmarkTransactionsCount.Location.Y);
                });
                label147.Invoke((MethodInvoker)delegate
                {
                    label147.Location = new Point(lblBookmarkTransactionsCount.Location.X + lblBookmarkTransactionsCount.Width, label147.Location.Y);
                });
                lblBookmarkXpubsCount.Invoke((MethodInvoker)delegate
                {
                    lblBookmarkXpubsCount.Text = counterXpubs.ToString();
                    lblBookmarkXpubsCount.Location = new Point(label147.Location.X + label147.Width, lblBookmarkXpubsCount.Location.Y);
                });
                label142.Invoke((MethodInvoker)delegate
                {
                    label142.Location = new Point(lblBookmarkXpubsCount.Location.X + lblBookmarkXpubsCount.Width, label142.Location.Y);
                });

                lblBookmarkStatusMessage.Invoke((MethodInvoker)delegate
                {
                    lblBookmarkStatusMessage.Location = new Point(btnDecryptBookmark.Location.X + btnDecryptBookmark.Width + (int)(10 * UIScale), lblBookmarkStatusMessage.Location.Y);
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "SetupBookmarksScreen");
            }
        }
        #endregion
        #region view and unlock bookmarks
        private void ListViewBookmarks_ItemSelectionChanged(object sender, ListViewItemSelectionChangedEventArgs e)
        {
            try
            {
                textBoxBookmarkKey.Visible = false;
                panelBookmarkKeyContainer.Visible = false;
                btnDecryptBookmark.Visible = false;
                foreach (ListViewItem item in listViewBookmarks.Items)
                {
                    if (item != null)
                    {
                        if (item.Selected)
                        {
                            item.EnsureVisible();

                            if (String.Compare(item.SubItems[1].Text, "xpub") == 0)
                            {
                                if (lblXpubScreenOwnNodeStatusLight.ForeColor == Color.OliveDrab)
                                {
                                    btnViewBookmark.Enabled = true;
                                }
                                else
                                {
                                    ShowAlertSymbol();
                                    lblErrorMessage.Invoke((MethodInvoker)delegate
                                    {
                                        lblErrorMessage.Text = "you need to connect to a full node before the selected Xpub can be viewed.";
                                    });
                                }
                            }

                            btnDeleteBookmark.Enabled = true;
                            item.BackColor = Color.Blue;
                            item.ForeColor = MakeColorLighter(tableTextColor, 20);
                            item.SubItems[2].ForeColor = MakeColorLighter(tableTextColor, 20);
                            item.SubItems[3].ForeColor = MakeColorLighter(tableTextColor, 20);
                            item.SubItems[4].ForeColor = MakeColorLighter(tableTextColor, 20);
                            lblSelectedBookmarkType.Invoke((MethodInvoker)delegate
                            {
                                lblSelectedBookmarkType.Text = item.SubItems[1].Text;
                            });
                            label138.Invoke((MethodInvoker)delegate
                            {
                                label138.Text = "note";
                            });
                            lblSelectedBookmarkType.Invoke((MethodInvoker)delegate
                            {
                                lblBookmarkDataInFull.Location = new Point(lblSelectedBookmarkType.Location.X + lblSelectedBookmarkType.Width, lblSelectedBookmarkType.Location.Y);
                                lblBookmarkDataInFull.Text = item.SubItems[3].Text;
                                bookmarkDataInFullPreserved = item.SubItems[3].Text;
                            });
                            lblBookmarkNoteInFull.Invoke((MethodInvoker)delegate
                            {
                                lblBookmarkNoteInFull.Location = new Point(label138.Location.X + label138.Width, label138.Location.Y);
                                lblBookmarkNoteInFull.Text = item.SubItems[4].Text;
                                bookmarkNoteInFullPreserved = item.SubItems[4].Text;
                            });
                            if (String.Compare(item.SubItems[2].Text, "🔒") == 0)
                            {
                                btnBookmarkUnlock.Enabled = true;
                                bookmarkKeyCheckPreserved = item.SubItems[5].Text;
                                btnViewBookmark.Enabled = false;
                            }
                            else
                            {
                                btnBookmarkUnlock.Enabled = false;
                                btnViewBookmark.Enabled = true;
                            }
                        }
                        else
                        {
                            item.ForeColor = tableTextColor;
                            item.SubItems[2].ForeColor = tableTextColor;
                            item.SubItems[3].ForeColor = tableTextColor;
                            item.SubItems[4].ForeColor = tableTextColor;
                        }
                    }
                }


                panelBookmarksContainer.Invalidate();
                lblHeaderBlockAge.Focus();
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewBookmarks_ItemSelectionChanged");
            }
        }

        private void BtnBookmarkUnlock_Click(object sender, EventArgs e)
        {
            try
            {
                if (textBoxBookmarkKey.Visible)
                {
                    textBoxBookmarkKey.Visible = false;
                    panelBookmarkKeyContainer.Visible = false;
                    btnDecryptBookmark.Visible = false;
                }
                else
                {
                    textBoxBookmarkKey.Visible = true;
                    panelBookmarkKeyContainer.Visible = true;
                    btnDecryptBookmark.Visible = true;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnBookmarkUnlock_Click");
            }
        }

        private void BtnViewBookmark_Click(object sender, EventArgs e)
        {
            try
            {
                panelBookmarks.Invoke((MethodInvoker)delegate
                {
                    panelBookmarks.Visible = false;
                });
                if (String.Compare(lblSelectedBookmarkType.Text, "block") == 0)
                {
                    numericUpDownSubmittedBlockNumber.Invoke((MethodInvoker)delegate
                    {
                        numericUpDownSubmittedBlockNumber.Text = lblBookmarkDataInFull.Text;
                    });
                    try
                    {
                        LookupBlockAsync();
                    }
                    catch (Exception ex)
                    {
                        HandleException(ex, "btnViewBookmark_Click");
                    }
                    //show the block screen
                    BtnMenuBlock_ClickAsync(sender, e);
                }
                if (String.Compare(lblSelectedBookmarkType.Text, "address") == 0)
                {
                    textboxSubmittedAddress.Invoke((MethodInvoker)delegate
                    {
                        textboxSubmittedAddress.Text = lblBookmarkDataInFull.Text;
                    });
                    //show the address screen
                    BtnMenuAddress_ClickAsync(sender, e);
                }
                if (String.Compare(lblSelectedBookmarkType.Text, "transaction") == 0)
                {
                    textBoxTransactionID.Invoke((MethodInvoker)delegate
                    {
                        textBoxTransactionID.Text = lblBookmarkDataInFull.Text;
                    });
                    //show the transaction screen
                    BtnMenuTransaction_ClickAsync(sender, e);
                }
                if (String.Compare(lblSelectedBookmarkType.Text, "xpub") == 0)
                {
                    textBoxSubmittedXpub.Invoke((MethodInvoker)delegate
                    {
                        textBoxSubmittedXpub.Text = lblBookmarkDataInFull.Text;
                    });
                    BtnMenuXpub_ClickAsync(sender, e);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnViewBookmark_Click");
            }
        }
        #endregion
        #region delete bookmark
        private void BtnDeleteBoookmark_Click(object sender, EventArgs e)
        {
            try
            {
                string bookmarkDataToDelete = "";

                foreach (ListViewItem item in listViewBookmarks.Items)
                {
                    if (item != null && item.Selected)
                    {
                        bookmarkDataToDelete = item.SubItems[3].Text;
                    }
                }
                DeleteBookmarkFromJsonFile(bookmarkDataToDelete);

                lblBookmarkStatusMessage.Invoke((MethodInvoker)delegate
                {
                    lblBookmarkStatusMessage.ForeColor = Color.IndianRed;
                    lblBookmarkStatusMessage.Text = "bookmark deleted";
                    lblBookmarkStatusMessage.Visible = true;
                });
                intAddToBookmarksMessageTimeLightLit = 0;
                SetupBookmarksScreen();
                lblBookmarkDataInFull.Invoke((MethodInvoker)delegate
                {
                    lblBookmarkDataInFull.Text = "";
                });
                lblBookmarkNoteInFull.Invoke((MethodInvoker)delegate
                {
                    lblBookmarkNoteInFull.Text = "";
                });
                label138.Invoke((MethodInvoker)delegate
                {
                    label138.Text = "";
                });
                lblSelectedBookmarkType.Invoke((MethodInvoker)delegate
                {
                    lblSelectedBookmarkType.Text = "";
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnDeleteBookmark_Click");
            }
        }

        private static void DeleteBookmarkFromJsonFile(string bookmarkDataToDelete)
        {
            // Read the existing bookmarks from the JSON file
            var bookmarks = ReadBookmarksFromJsonFile();

            // Find the index of the bookmark with the specified data
            int index = bookmarks.FindIndex(bookmark =>
                String.Compare(bookmark.Data, bookmarkDataToDelete, StringComparison.Ordinal) == 0);


            // If a matching bookmark was found, remove it from the list
            if (index >= 0)
            {
                bookmarks.RemoveAt(index);

                // Write the updated list of bookmarks back to the JSON file
                WriteBookmarksToJsonFile(bookmarks);
            }
        }

        private void BtnDeleteAllBookmarks_Click(object sender, EventArgs e)
        {
            try
            {
                panelDeleteAllBookmarks.Visible = false;
                panelDeleteAllBookmarksConfirm.Visible = true;
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDeleteAllBookmarks_Click");
            }
        }

        private void BtnDeleteAllBookmarksNo_Click(object sender, EventArgs e)
        {
            try
            {
                panelDeleteAllBookmarks.Visible = true;
                panelDeleteAllBookmarksConfirm.Visible = false;
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDeleteAllBookmarksNo_Click");
            }
        }

        private void BtnDeleteAllBookmarksYes_Click(object sender, EventArgs e)
        {
            try
            {
                DeleteAllBookmarksFromJsonFile();
                panelDeleteAllBookmarks.Visible = true;
                panelDeleteAllBookmarksConfirm.Visible = false;
                SetupBookmarksScreen();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDeleteAllBookmarksYes_Click");
            }
        }

        private void DeleteAllBookmarksFromJsonFile()
        {
            try
            {
                string bookmarkDataToDelete = "";

                foreach (ListViewItem item in listViewBookmarks.Items)
                {
                    bookmarkDataToDelete = item.SubItems[3].Text;
                    DeleteBookmarkFromJsonFile(bookmarkDataToDelete);
                }
                lblBookmarkStatusMessage.Invoke((MethodInvoker)delegate
                {
                    lblBookmarkStatusMessage.ForeColor = Color.IndianRed;
                    lblBookmarkStatusMessage.Text = "bookmarks deleted";
                    lblBookmarkStatusMessage.Visible = true;
                });
                intAddToBookmarksMessageTimeLightLit = 0;
                SetupBookmarksScreen();
                lblBookmarkDataInFull.Invoke((MethodInvoker)delegate
                {
                    lblBookmarkDataInFull.Text = "";
                });
                lblBookmarkNoteInFull.Invoke((MethodInvoker)delegate
                {
                    lblBookmarkNoteInFull.Text = "";
                });
                label138.Invoke((MethodInvoker)delegate
                {
                    label138.Text = "";
                });
                lblSelectedBookmarkType.Invoke((MethodInvoker)delegate
                {
                    lblSelectedBookmarkType.Text = "";
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnDeleteBookmark_Click");
            }
        }

        #endregion
        #region listview appearance
        private void ListViewBookmarks_ColumnWidthChanging(object sender, ColumnWidthChangingEventArgs e)
        {
            try
            {
                if (e.ColumnIndex == 0)
                {
                    if (listViewBookmarks.Columns[e.ColumnIndex].Width < (int)(80 * UIScale)) // min width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(80 * UIScale);
                    }
                    if (listViewBookmarks.Columns[e.ColumnIndex].Width > (int)(80 * UIScale)) // max width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(80 * UIScale);
                    }
                }

                if (e.ColumnIndex == 1)
                {
                    if (listViewBookmarks.Columns[e.ColumnIndex].Width != (int)(80 * UIScale)) // don't allow this one to change
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(80 * UIScale);
                    }
                }


                if (e.ColumnIndex == 2)
                {
                    if (listViewBookmarks.Columns[e.ColumnIndex].Width != (int)(20 * UIScale)) // don't allow this one to change
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(20 * UIScale);
                    }
                }

                if (e.ColumnIndex == 3)
                {
                    if (listViewBookmarks.Columns[e.ColumnIndex].Width < (int)(203 * UIScale)) // min width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(203 * UIScale);
                    }
                    if (listViewBookmarks.Columns[e.ColumnIndex].Width > (int)(203 * UIScale)) // max width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(203 * UIScale);
                    }
                }
                if (e.ColumnIndex == 4)
                {
                    if (listViewBookmarks.Columns[e.ColumnIndex].Width < (int)(665 * UIScale)) // min width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(665 * UIScale);
                    }
                    if (listViewBookmarks.Columns[e.ColumnIndex].Width > (int)(665 * UIScale)) // max width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(665 * UIScale);
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewBookmarks_ColumnWidthChanging");
            }
        }

        private void ListViewBookmarks_DrawSubItem(object sender, DrawListViewSubItemEventArgs e)
        {
            try
            {
                var text = e.SubItem.Text;
                if (e.ColumnIndex == 2)
                {
                    if (text == "")
                    {
                        e.SubItem.ForeColor = Color.OliveDrab;
                    }
                    else
                    {
                        e.SubItem.ForeColor = Color.IndianRed;
                    }
                }
                var font = listViewBookmarks.Font;
                var columnWidth = e.Header.Width;
                var textWidth = TextRenderer.MeasureText(text, font).Width;
                if (textWidth > columnWidth)
                {
                    // Truncate the text
                    var maxText = $"{text.Substring(0, text.Length * columnWidth / textWidth - 3)}...";
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);
                    // Clear the background
                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                        TextRenderer.DrawText(e.Graphics, maxText, font, bounds, MakeColorLighter(e.Item.ForeColor, 40), TextFormatFlags.EndEllipsis | TextFormatFlags.Left);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewBookmarks.BackColor), bounds);
                        TextRenderer.DrawText(e.Graphics, maxText, font, bounds, e.Item.ForeColor, TextFormatFlags.EndEllipsis | TextFormatFlags.Left);
                    }
                }
                else if (textWidth < columnWidth)
                {
                    // Clear the background
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);

                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                        TextRenderer.DrawText(e.Graphics, text, font, bounds, MakeColorLighter(e.SubItem.ForeColor, 40), TextFormatFlags.Left);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewBookmarks.BackColor), bounds);
                        TextRenderer.DrawText(e.Graphics, text, font, bounds, e.SubItem.ForeColor, TextFormatFlags.Left);
                    }

                    TextRenderer.DrawText(e.Graphics, text, font, bounds, e.SubItem.ForeColor, TextFormatFlags.Left);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewBookmarks_DrawSubItem");
            }
        }

        private void ListViewBookmarks_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (listViewBookmarks.SelectedItems.Count > 0)
                {
                    Rectangle itemRect = listViewBookmarks.GetItemRect(listViewBookmarks.SelectedIndices[0]);
                    panel169.Invoke((MethodInvoker)delegate
                    {
                        panel169.Top = itemRect.Top + (itemRect.Height / 2);
                    });
                    label335.Invoke((MethodInvoker)delegate
                    {
                        label335.Top = itemRect.Top;
                    });
                    panel171.Invoke((MethodInvoker)delegate
                    {
                        panel171.Height = panel170.Top - panel169.Top + 30;
                        panel171.Top = panel169.Top;
                    });
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "listViewBookmarks_SelectedIndexChanged");
            }
        }

        #endregion
        #region scroll listview
        private void BtnDecryptBookmark_Click(object sender, EventArgs e)
        {
            try
            {
                string decryptedBookmarkData = Decrypt(bookmarkDataInFullPreserved, textBoxBookmarkKey.Text);
                string decryptedBookmarkNote = Decrypt(bookmarkNoteInFullPreserved, textBoxBookmarkKey.Text);
                string decryptedBookmarkKeyCheck = Decrypt(bookmarkKeyCheckPreserved, textBoxBookmarkKey.Text);
                if (String.Compare(decryptedBookmarkKeyCheck, "21m") == 0) // correct key
                {
                    lblBookmarkDataInFull.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkDataInFull.Text = decryptedBookmarkData;
                        lblBookmarkNoteInFull.Text = decryptedBookmarkNote;
                    });
                    textBoxBookmarkKey.Invoke((MethodInvoker)delegate
                    {
                        textBoxBookmarkKey.Text = "";
                    });
                    lblBookmarkStatusMessage.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkStatusMessage.ForeColor = Color.OliveDrab;
                        lblBookmarkStatusMessage.Text = "bookmark unlocked";
                        lblBookmarkStatusMessage.Visible = true;
                    });
                    intAddToBookmarksMessageTimeLightLit = 0;
                    btnViewBookmark.Enabled = true;
                }
                else // wrong key
                {
                    lblBookmarkStatusMessage.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkStatusMessage.ForeColor = Color.IndianRed;
                        lblBookmarkStatusMessage.Text = "incorrect key";
                        lblBookmarkStatusMessage.Visible = true;
                    });
                    intAddToBookmarksMessageTimeLightLit = 0;
                    btnViewBookmark.Enabled = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "decrypting bookmark");
            }
        }

        private void BtnBookmarksListDown_Click(object sender, EventArgs e)
        {
            try
            {
                int rowHeight = listViewBookmarks.Margin.Vertical + listViewBookmarks.Padding.Vertical + listViewBookmarks.GetItemRect(0).Height;
                if (bookmarksScrollPosition < (panelBookmarksContainer.VerticalScroll.Maximum - panelBookmarksContainer.Height) - rowHeight)
                {
                    bookmarksScrollPosition += rowHeight;
                    panelBookmarksContainer.VerticalScroll.Value = bookmarksScrollPosition;
                    panelBookmarksScrollbarInner.Location = new Point(panelBookmarksScrollbarInner.Location.X, panelBookmarksScrollbarInner.Location.Y + bookmarksScrollbarIncrement);
                    lblHeaderBlockAge.Focus();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnBookmarksListDown_Click");
            }

        }

        private void BtnBookmarksListDown_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isBookmarksButtonPressed = true;
                bookmarksDownButtonPressed = true;
                BookmarksScrollTimer.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnBookmarksListDown_MouseDown");
            }
        }

        private void BtnBookmarksListDown_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isBookmarksButtonPressed = false;
                bookmarksDownButtonPressed = false;
                BookmarksScrollTimer.Stop();
                BookmarksScrollTimer.Interval = 50; // reset the interval to its original value
                lblHeaderBlockAge.Focus();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnBookmarksListDown_MouseUp");
            }
        }

        private void BtnBookmarksListUp_Click(object sender, EventArgs e)
        {
            try
            {
                if (panelBookmarksContainer.VerticalScroll.Value > panelBookmarksContainer.VerticalScroll.Minimum)
                {
                    int rowHeight = listViewBookmarks.Margin.Vertical + listViewBookmarks.Padding.Vertical + listViewBookmarks.GetItemRect(0).Height;
                    bookmarksScrollPosition -= rowHeight;
                    panelBookmarksContainer.VerticalScroll.Value = bookmarksScrollPosition;
                    panelBookmarksScrollbarInner.Location = new Point(panelBookmarksScrollbarInner.Location.X, panelBookmarksScrollbarInner.Location.Y - bookmarksScrollbarIncrement);
                    lblHeaderBlockAge.Focus();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnBookmarksListUp_Click");
            }
        }

        private void BtnBookmarksListUp_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isBookmarksButtonPressed = true;
                bookmarksUpButtonPressed = true;
                BookmarksScrollTimer.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnBookmarksListUp_MouseDown");
            }
        }

        private void BtnBookmarksListUp_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isBookmarksButtonPressed = false;
                bookmarksUpButtonPressed = false;
                BookmarksScrollTimer.Stop();
                BookmarksScrollTimer.Interval = 50; // reset the interval to its original value
                lblHeaderBlockAge.Focus();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnBookmarksListUp_MouseUp");
            }
        }

        private void BookmarksScrollTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                if (isBookmarksButtonPressed)
                {
                    if (bookmarksDownButtonPressed)
                    {
                        int rowHeight = listViewBookmarks.Margin.Vertical + listViewBookmarks.Padding.Vertical + listViewBookmarks.GetItemRect(0).Height;
                        if (bookmarksScrollPosition < (panelBookmarksContainer.VerticalScroll.Maximum - panelBookmarksContainer.Height) - rowHeight)
                        {
                            if (bookmarksScrollPosition < panelBookmarksContainer.VerticalScroll.Maximum + rowHeight)
                            {
                                bookmarksScrollPosition += rowHeight;
                                panelBookmarksScrollbarInner.Location = new Point(panelBookmarksScrollbarInner.Location.X, panelBookmarksScrollbarInner.Location.Y + bookmarksScrollbarIncrement);
                                panelBookmarksContainer.VerticalScroll.Value = bookmarksScrollPosition;
                            }

                        }
                        else
                        {
                            panelBookmarksScrollbarInner.Location = new Point(panelBookmarksScrollbarInner.Location.X, panelBookmarksScrollbarOuter.Height - panelBookmarksScrollbarInner.Height);
                        }
                    }
                    else if (bookmarksUpButtonPressed)
                    {
                        int rowHeight = listViewBookmarks.Margin.Vertical + listViewBookmarks.Padding.Vertical + listViewBookmarks.GetItemRect(0).Height;
                        if (bookmarksScrollPosition > panelBookmarksContainer.VerticalScroll.Minimum + rowHeight)
                        {
                            bookmarksScrollPosition -= rowHeight;
                            panelBookmarksContainer.VerticalScroll.Value = bookmarksScrollPosition;
                            panelBookmarksScrollbarInner.Location = new Point(panelBookmarksScrollbarInner.Location.X, panelBookmarksScrollbarInner.Location.Y - bookmarksScrollbarIncrement);
                        }
                        else
                        {
                            panelBookmarksScrollbarInner.Location = new Point(panelBookmarksScrollbarInner.Location.X, 0);
                        }
                    }
                }
                else
                {
                    BookmarksScrollTimer.Stop();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BookmarksScrollTimer_Tick");
            }
        }

        private void PanelBookmarksContainer_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                int rowHeight = listViewBookmarks.Margin.Vertical + listViewBookmarks.Padding.Vertical + listViewBookmarks.GetItemRect(0).Height;
                if (bookmarksScrollPosition - rowHeight > 0)
                {
                    panelBookmarksContainer.VerticalScroll.Value = bookmarksScrollPosition;
                }
                else
                {
                    panelBookmarksContainer.VerticalScroll.Value = 0;
                    bookmarksScrollPosition = 0;
                }
                lblHeaderBlockAge.Focus();
            }
            catch (Exception ex)
            {
                HandleException(ex, "PanelBookmarksContainer_Paint");
            }
        }
        #endregion
        #region user input
        private void TextBoxBookmarkKey_Enter(object sender, EventArgs e)
        {
            try
            {
                if (isBookmarkKeyWatermarkTextDisplayed)
                {
                    textBoxBookmarkKey.Invoke((MethodInvoker)delegate
                    {
                        textBoxBookmarkKey.Text = "";
                        textBoxBookmarkKey.ForeColor = Color.White;
                    });
                    isBookmarkKeyWatermarkTextDisplayed = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxBookmarkKey_Enter");
            }
        }

        private void TextBoxBookmarkKey_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (isBookmarkKeyWatermarkTextDisplayed)
                {
                    textBoxBookmarkKey.Invoke((MethodInvoker)delegate
                    {
                        textBoxBookmarkKey.Text = "";
                        textBoxBookmarkKey.ForeColor = Color.White;
                    });
                    isBookmarkKeyWatermarkTextDisplayed = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxBookmarkKey_KeyPress");
            }
        }

        private void TextBoxBookmarkKey_Leave(object sender, EventArgs e)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(textBoxBookmarkKey.Text))
                {
                    textBoxBookmarkKey.Invoke((MethodInvoker)delegate
                    {
                        textBoxBookmarkKey.Text = "enter key to unlock";
                        textBoxBookmarkKey.ForeColor = Color.Gray;
                        isBookmarkKeyWatermarkTextDisplayed = true;
                    });

                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxBookmarkKey_Leave");
            }
        }

        private void TextBoxBookmarkKey_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (isBookmarkKeyWatermarkTextDisplayed)
                {
                    textBoxBookmarkKey.ForeColor = Color.White;
                    isBookmarkKeyWatermarkTextDisplayed = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxBookmarkKey_TextChanged");
            }
        }
        #endregion
        #region disable keys
        private void ListViewBookmarks_KeyDown(object sender, KeyEventArgs e)
        {
            e.Handled = true;
        }

        private void ListViewBookmarks_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = true;
        }

        private void ListViewBookmarks_KeyUp(object sender, KeyEventArgs e)
        {
            e.Handled = true;
        }
        #endregion
        #endregion
        //![](resources\tinylogo1.png;;;0.04706,0.04877)
        #region ⚡⚡⚡ DCA CALCULATOR

        private async void PopulateDCACalculatorAsync()
        {
            try
            {
                if (!offlineMode && !testNet && OneBTCinSelectedCurrency > 0)
                {
                    ShowDCAChartLoadingPanel();

                    panelRefreshChart.Visible = false;

                    ToggleLoadingAnimation("enable");

                    // clear any previous graph
                    ClearAllDCAChartData();

                    formsPlotDCA.Visible = true;

                    formsPlotDCA.Plot.Title("", size: (int)(12 * UIScale), bold: false, color: label77.ForeColor);
                    formsPlotDCA.Plot.YAxis.Label("Price (USD)", size: (int)(12 * UIScale), bold: false);
                    PrepareLinearScaleDCAChart();

                    // nb the api doesn't return items for every single date so we fill in all missing dates and prices (using average of the price either side of the missing date)
                    // get a series of historic price data
                    var HistoricPriceDataJson = await _historicPriceDataService.GetHistoricPriceDataAsync(chartPeriod).ConfigureAwait(true);
                    if (!string.IsNullOrEmpty(HistoricPriceDataJson))
                    {
                        JObject jsonObj = JObject.Parse(HistoricPriceDataJson);

                        List<PriceCoordinatesList>? PriceList = JsonConvert.DeserializeObject<List<PriceCoordinatesList>>(jsonObj["values"]!.ToString());

                        long minUnixTime = long.MaxValue;
                        long maxUnixTime = long.MinValue;

                        // Find start and end dates in Unix timestamp format
                        foreach (var item in PriceList!)
                        {
                            long unixTime = long.Parse(item.X);
                            if (unixTime < minUnixTime)
                                minUnixTime = unixTime;
                            if (unixTime > maxUnixTime)
                                maxUnixTime = unixTime;
                        }

                        // Insert missing dates with specified Y value in Unix timestamp format
                        DateTime startDate = DateTimeOffset.FromUnixTimeSeconds(minUnixTime).DateTime;
                        DateTime endDate = DateTimeOffset.FromUnixTimeSeconds(maxUnixTime).DateTime;

                        DateTime currentDate = startDate;
                        List<PriceCoordinatesList> updatedList = new List<PriceCoordinatesList>();

                        while (currentDate <= endDate)
                        {
                            long currentDateUnix = ((DateTimeOffset)currentDate).ToUnixTimeSeconds();
                            var existingItem = PriceList.Find(p => DateTimeOffset.FromUnixTimeSeconds(long.Parse(p.X)).DateTime.Date == currentDate.Date);
                            if (existingItem != null)
                            {
                                updatedList.Add(existingItem);
                            }
                            else
                            {
                                if (currentDateUnix < 1282089600)
                                {
                                    updatedList.Add(new PriceCoordinatesList { X = currentDateUnix.ToString(), Y = 0 });
                                }
                                else
                                {
                                    updatedList.Add(new PriceCoordinatesList { X = currentDateUnix.ToString(), Y = 999999912345 });
                                }
                            }
                            currentDate = currentDate.AddDays(1);
                        }
                        // Update PriceList with the updated list
                        PriceList = updatedList;

                        ProcessPriceList(PriceList);

                        // convert data to GBP, EUR, XAU if needed
                        decimal selectedCurrency = 0;
                        decimal exchangeRate = 1;
                        if (btnUSD.Enabled) // user has selected a currency other than USD
                        {
                            string priceUSD = OneBTCInUSD;
                            string priceEUR = OneBTCInEUR;
                            string priceGBP = OneBTCInGBP;
                            string priceXAU = OneBTCInXAU;
                            if (!btnGBP.Enabled) //GBP is selected
                            {
                                selectedCurrency = Convert.ToDecimal(priceGBP);
                                formsPlotDCA.Plot.YAxis.Label("Price (GBP)", size: 12, bold: false);
                            }
                            if (!btnEUR.Enabled) //EUR is selected
                            {
                                selectedCurrency = Convert.ToDecimal(priceEUR);
                                formsPlotDCA.Plot.YAxis.Label("Price (EUR)", size: 12, bold: false);
                            }
                            if (!btnXAU.Enabled) //XAU is selected
                            {
                                selectedCurrency = Convert.ToDecimal(priceXAU);
                                formsPlotDCA.Plot.YAxis.Label("Price (XAU)", size: 12, bold: false);
                            }
                            exchangeRate = selectedCurrency / Convert.ToDecimal(priceUSD);

                            foreach (var item in PriceList)
                            {
                                item.Y *= exchangeRate;
                            }
                        }

                        //create the arrays for the price scatter graph
                        double[] yPriceChartPrices = PriceList.Select(h => (double)(h.Y)).ToArray(); // create array of doubles of the prices
                        List<DateTime> dateList = PriceList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.X)).LocalDateTime).ToList(); // create a new list of the dates, this time in DateTime format
                        double[] xPriceChartDates = dateList.Select(x => x.ToOADate()).ToArray(); // create array doubles of the dates

                        #region set up variables used for DCA calculation
                        double DCAAmount = Convert.ToDouble(textBoxDCAAmountInput.Text);

                        Dictionary<int, double> screenMap = new Dictionary<int, double>
                        {
                            { 0, 1 },
                            { 1, 7 },
                            { 2, 30 },
                            { 3, 365 }
                        };
                        if (screenMap.ContainsKey(comboBoxDCAFrequency.SelectedIndex))
                        {
                            DCAFrequencyDays = screenMap[comboBoxDCAFrequency.SelectedIndex];
                        }
                        DateTime DCAStartDate = rjDatePickerDCAStartDate.Value;
                        DateTime DCAEndDate = rjDatePickerDCAEndDate.Value;
                        #endregion

                        #region create list of dates that DCA purchases occurred
                        List<DateTime> DCADateList = new List<DateTime>
                        {
                            // Add the start date
                            DCAStartDate
                        };

                        // Add the dates in between
                        DateTime nextDCADate = DCAStartDate;
                        while (nextDCADate < DCAEndDate)
                        {
                            nextDCADate = nextDCADate.AddDays(DCAFrequencyDays);
                            DCADateList.Add(nextDCADate);
                        }

                        if (!DCADateList.Contains(DCAEndDate))
                        {
                            DCADateList.Add(DCAEndDate);
                        }
                        #endregion

                        #region create arrays for the DCA graph
                        double[] xDCAChartDates = DCADateList.Select(x => x.ToOADate()).ToArray(); // create array doubles of the dates
                        #endregion

                        #region create list of prices for the corresponding dca dates
                        List<double> DCABitcoinAmountList = new List<double>();
                        List<double> DCABitcoinAmountRunningTotalList = new List<double>();
                        double bitcoinBoughtRunningTotal = 0;
                        double lastAmountBought = 0;

                        foreach (double xDCADate in xDCAChartDates)
                        {
                            // Cast both values to integers to compare only the whole number part
                            int xDCADateWhole = (int)xDCADate;

                            // Find the index of xDCAValue in xValues
                            int index = Array.FindIndex(xPriceChartDates, x => (int)x == xDCADateWhole);

                            if (index != -1)
                            {
                                // Corresponding price found
                                DCABitcoinAmountList.Add(DCAAmount / yPriceChartPrices[index]);
                                lastAmountBought = DCAAmount / yPriceChartPrices[index]; // store this value in case we don't have a price available to calculate with for the next date
                            }
                            else
                            {
                                // Date not found in the original data
                                DCABitcoinAmountList.Add(lastAmountBought);
                            }
                            bitcoinBoughtRunningTotal += lastAmountBought;
                            DCABitcoinAmountRunningTotalList.Add(bitcoinBoughtRunningTotal);
                        }
                        #endregion

                        double[] yDCAChartBitcoinAmounts = DCABitcoinAmountList.ToArray();
                        double[] yDCAChartBitcoinRunningTotal = DCABitcoinAmountRunningTotalList.ToArray();

                        // set axis limits
                        formsPlotDCA.Plot.SetAxisLimits(xMin: xPriceChartDates.Min(), xMax: xPriceChartDates.Max()); // date
                        formsPlotDCA.Plot.SetAxisLimits(yMin: 0, yMax: yPriceChartPrices.Max() * 1.1, yAxisIndex: 0); // price
                        formsPlotDCA.Plot.SetAxisLimits(yMin: 0, yMax: yDCAChartBitcoinRunningTotal.Max() * 1.1, yAxisIndex: 1);  // bitcoin acquired

                        formsPlotDCA.Plot.SetAxisLimits(yMin: 0, yMax: yDCAChartBitcoinAmounts.Max() * 1.1, yAxisIndex: 2);

                        scatter = formsPlotDCA.Plot.AddScatter(xPriceChartDates, yPriceChartPrices, lineWidth: 1, markerSize: 1, color: Color.Orange, label: "Market price of 1 BTC");

                        // plot another set of data to show amount bought per purchase using the additional axis
                        var BTCscatter = formsPlotDCA.Plot.AddScatterStep(xDCAChartDates, yDCAChartBitcoinAmounts, color: Color.IndianRed, lineWidth: 1, label: "BTC purchased per transaction");
                        BTCscatter.YAxisIndex = 2;

                        formsPlotDCA.Plot.YAxis2.Label("", color: btnMenuDirectory.ForeColor);

                        // plot another set of data to show running total bought using the additional axis
                        var BTCRunningTotalscatter = formsPlotDCA.Plot.AddScatterStep(xDCAChartDates, yDCAChartBitcoinRunningTotal, color: Color.OliveDrab, lineWidth: 1, label: "BTC purchased over time");
                        yAxis3!.Label("", color: btnMenuDirectory.ForeColor);
                        yAxis3.SetBoundary(0, yDCAChartBitcoinAmounts.Max() * 1.1);
                        BTCRunningTotalscatter.YAxisIndex = 1;

                        formsPlotDCA.Plot.XAxis.DateTimeFormat(true);

                        formsPlotDCA.Plot.XAxis.Color(color: label77.ForeColor);
                        formsPlotDCA.Plot.YAxis.Color(color: label77.ForeColor);
                        formsPlotDCA.Plot.YAxis2.Color(color: label77.ForeColor);
                        yAxis3.Color(color: btnMenuDirectory.ForeColor);

                        formsPlotDCA.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                        formsPlotDCA.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: Color.Orange);
                        formsPlotDCA.Plot.YAxis2.TickLabelStyle(fontSize: (int)(10 * UIScale), color: Color.OliveDrab);
                        yAxis3.TickLabelStyle(fontSize: (int)(10 * UIScale), color: Color.IndianRed);

                        formsPlotDCA.Plot.XAxis.Ticks(true);
                        formsPlotDCA.Plot.XAxis.Label("");

                        Color legendOutlineColour = Color.FromArgb(50, 50, 50);
                        if (String.Compare(lblChartsDarkBackground.Text, "✔️") == 0 || String.Compare(lblChartsMediumBackground.Text, "✔️") == 0)
                        {
                            legendOutlineColour = Color.FromArgb(50, 50, 50);
                        }
                        else
                        {
                            legendOutlineColour = Color.FromArgb(220, 220, 200);
                        }
                        var legend = formsPlotDCA.Plot.Legend();
                        legend.Location = Alignment.UpperLeft;
                        legend.FillColor = Color.Transparent;
                        legend.FontColor = label77.ForeColor;
                        legend.OutlineColor = legendOutlineColour;
                        legend.ShadowColor = chartsBackgroundColor;

                        // prevent navigating beyond the data
                        formsPlotDCA.Plot.YAxis.SetBoundary(0, yPriceChartPrices.Max() * 1.1);
                        formsPlotDCA.Plot.XAxis.SetBoundary(xPriceChartDates.Min(), xPriceChartDates.Max());
                        formsPlotDCA.Plot.YAxis2.SetBoundary(0, yDCAChartBitcoinRunningTotal.Max() * 1.1);

                        formsPlotDCA.Plot.XAxis.Ticks(true);
                        formsPlotDCA.Plot.YAxis.Ticks(true);
                        formsPlotDCA.Plot.YAxis2.Ticks(true);
                        formsPlotDCA.Plot.XAxis.MajorGrid(true);
                        formsPlotDCA.Plot.YAxis.MajorGrid(true);


                        double minX2 = xDCAChartDates.Min();
                        double maxX2 = xDCAChartDates.Max();

                        // Set the initial visible range of the x-axis to focus on the DCA data
                        formsPlotDCA.Plot.SetAxisLimits(xMin: minX2, xMax: maxX2);

                        // refresh the graph
                        formsPlotDCA.Refresh();
                        formsPlotDCA.Visible = true;

                        string currencyName = "D";
                        string currencySymbol = "$";
                        if (String.Compare(currencySelected, "D") == 0)
                        {
                            currencyName = "USD";
                            currencySymbol = "$";
                        }
                        else
                        {
                            if (String.Compare(currencySelected, "P") == 0)
                            {
                                currencyName = "GBP";
                                currencySymbol = "£";
                            }
                            else
                            {
                                if (String.Compare(currencySelected, "E") == 0)
                                {
                                    currencyName = "EUR";
                                    currencySymbol = "€";
                                }
                                else
                                {
                                    if (String.Compare(currencySelected, "G") == 0)
                                    {
                                        currencyName = "XAU";
                                        currencySymbol = "\U0001fa99";
                                    }
                                }
                            }
                        }

                        double xDCAChartDatesCount = xDCAChartDates.Count();
                        double percentageChange = (bitcoinBoughtRunningTotal * Convert.ToDouble(OneBTCinSelectedCurrency)) / (xDCAChartDatesCount * DCAAmount) * 100;

                        lblDCABTCPurchases.Invoke((MethodInvoker)delegate
                        {
                            lblDCABTCPurchases.Text = Convert.ToString(xDCAChartDates.Count());
                        });
                        label206.Invoke((MethodInvoker)delegate
                        {
                            label206.Text = $"{currencyName} spent";
                        });
                        lblDCAAmountSpent.Invoke((MethodInvoker)delegate
                        {
                            lblDCAAmountSpent.Text = $"{currencySymbol}{xDCAChartDates.Count() * DCAAmount}";
                        });
                        lblDCABTCPurchased.Invoke((MethodInvoker)delegate
                        {
                            lblDCABTCPurchased.Text = bitcoinBoughtRunningTotal.ToString("0.00000000");
                        });
                        lblDCACurrentValue.Invoke((MethodInvoker)delegate
                        {
                            lblDCACurrentValue.Text = $"{currencySymbol}{(Convert.ToDecimal(bitcoinBoughtRunningTotal) * OneBTCinSelectedCurrency):N2}";
                        });
                        lblDCAPercentageChange.Invoke((MethodInvoker)delegate
                        {
                            lblDCAPercentageChange.Text = $"{percentageChange:0.00}%";
                        });
                        panelDCASummary.Visible = true;

                        ToggleLoadingAnimation("disable");
                        HideDCAChartLoadingPanel();
                        DCAChartRendered = true;
                    }
                    else
                    {
                        ToggleLoadingAnimation("disable");
                        HideDCAChartLoadingPanel();
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating DCA chart");
            }
        }

        static void ProcessPriceList(List<PriceCoordinatesList> priceList)
        {
            for (int i = 0; i < priceList.Count; i++)
            {
                if (priceList[i].Y == 999999912345)
                {
                    // Find the previous non-999999912345 Y value
                    decimal prevY = FindPreviousNonSpecialValue(priceList, i);

                    // Find the next non-999999912345 Y value
                    decimal nextY = FindNextNonSpecialValue(priceList, i);

                    // Calculate the average and update the current Y value
                    decimal average = (prevY + nextY) / 2;
                    priceList[i].Y = average;
                }
            }
        }

        static decimal FindPreviousNonSpecialValue(List<PriceCoordinatesList> priceList, int currentIndex)
        {
            for (int i = currentIndex - 1; i >= 0; i--)
            {
                if (priceList[i].Y != 999999912345)
                {
                    return priceList[i].Y;
                }
            }
            return 0;
        }

        static decimal FindNextNonSpecialValue(List<PriceCoordinatesList> priceList, int currentIndex)
        {
            for (int i = currentIndex + 1; i < priceList.Count; i++)
            {
                if (priceList[i].Y != 999999912345)
                {
                    return priceList[i].Y;
                }
            }
            return 0;
        }

        #region show/hide DCA chart loading panel
        private void ShowDCAChartLoadingPanel()
        {
            try
            {
                pictureBoxDCAChartLoadingAnimation.Enabled = true;
                panelDCAChartLoadingPanel.Visible = true;
            }
            catch (WebException ex)
            {
                HandleException(ex, "ShowDCAChartLoadingPanel");
            }
        }

        private void HideDCAChartLoadingPanel()
        {
            try
            {
                pictureBoxDCAChartLoadingAnimation.Enabled = false;
                panelDCAChartLoadingPanel.Visible = false;
            }
            catch (WebException ex)
            {
                HandleException(ex, "HideDCAChartLoadingPanel");
            }
        }
        #endregion

        private void ClearAllDCAChartData()
        {
            try
            {
                formsPlotDCA.Plot.Clear();
            }

            catch (WebException ex)
            {
                HandleException(ex, "ClearAllDCAChartData");
            }
        }

        private void PrepareLinearScaleDCAChart()
        {
            try
            {
                // switch to linear scaling in case it was log before
                formsPlotDCA.Plot.YAxis.MinorLogScale(false);
                formsPlotDCA.Plot.YAxis.MajorGrid(false);
                formsPlotDCA.Plot.YAxis.MinorGrid(false);

                // Define a new tick label formatter for the linear scale
                static string linearTickLabels(double y) => y.ToString("N0");
                formsPlotDCA.Plot.YAxis.TickLabelFormat(linearTickLabels);

                // Revert back to automatic data area
                formsPlotDCA.Plot.ResetLayout();
                formsPlotDCA.Plot.AxisAuto();
            }
            catch (Exception ex)
            {
                HandleException(ex, "switching to linear scale chart");
            }
        }
        #region user input
        private void RjDatePickerDCAStartDate_ValueChanged(object sender, EventArgs e)
        {
            rjDatePickerDCAEndDate.MinDate = rjDatePickerDCAStartDate.Value;
            ValidateDCAInputs();
        }

        private void RjDatePickerDCAEndDate_ValueChanged(object sender, EventArgs e)
        {
            rjDatePickerDCAStartDate.MaxDate = rjDatePickerDCAEndDate.Value;
            ValidateDCAInputs();
        }

        private void ComboBoxDCAFrequency_OnSelectedIndexChanged(object sender, EventArgs e)
        {
            ValidateDCAInputs();
        }

        private void TextBoxDCAAmountInput_Leave(object sender, EventArgs e)
        {
            try
            {
                if (textBoxDCAAmountInput.Text == "")
                {
                    textBoxDCAAmountInput.Invoke((MethodInvoker)delegate
                    {
                        textBoxDCAAmountInput.Text = "1.00";
                    });
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "textBoxDCAAmountInput_Leave");
            }
        }

        private void BtnCalculateDCA_Click(object sender, EventArgs e)
        {
            if (String.Compare(lblBlockchainInfoEndpoints.Text, "✔️") == 0 && String.Compare(lblCoinbaseEndpoints.Text, "✔️") == 0)
            {
                PopulateDCACalculatorAsync();
            }
        }

        private void ValidateDCAInputs()
        {
            try
            {
                lblDCAMessage.Text = "";
                double amountDCA = Convert.ToDouble(textBoxDCAAmountInput.Text);
                if (amountDCA <= 0)
                {
                    btnCalculateDCA.Enabled = false;
                    panelDCASummary.Visible = false;
                    panelDCAMessages.Visible = true;
                    lblDCAMessage.Invoke((MethodInvoker)delegate
                    {
                        lblDCAMessage.Text = "You need to provide an amount that you wish to DCA in to bitcoin on a regular basis";
                    });
                    return;
                }
            }
            catch
            {
                btnCalculateDCA.Enabled = false;
                panelDCASummary.Visible = false;
                panelDCAMessages.Visible = true;
                lblDCAMessage.Invoke((MethodInvoker)delegate
                {
                    lblDCAMessage.Text = "You need to provide an amount that you wish to DCA in to bitcoin on a regular basis";
                });
                return;
            }
            DateTime endDate = rjDatePickerDCAEndDate.Value;
            DateTime startDate = rjDatePickerDCAStartDate.Value;

            TimeSpan dateDifference = endDate - startDate;

            int DCACalcMinimumPeriod = 0;
            if (DCAFrequencyDays == 1)
            {
                DCACalcMinimumPeriod = 7; // 7 days
            }
            else
            {
                if (DCAFrequencyDays == 7)
                {
                    DCACalcMinimumPeriod = 21; // 3 weeks
                }
                else
                {
                    if (DCAFrequencyDays == 30)
                    {
                        DCACalcMinimumPeriod = 90; // 3 months
                    }
                    else
                    {
                        if (DCAFrequencyDays == 365)
                        {
                            DCACalcMinimumPeriod = 730; // 2 years
                        }
                    }
                }
            }

            if (dateDifference.Days < DCACalcMinimumPeriod)
            {
                btnCalculateDCA.Enabled = false;
                panelDCAMessages.Visible = true;
                lblDCAMessage.Invoke((MethodInvoker)delegate
                {
                    lblDCAMessage.Text = $"There should be at least {DCACalcMinimumPeriod} days between the start date and the end date for the selected DCA frequency";
                });
                return;
            }

            btnCalculateDCA.Enabled = true;
            panelDCAMessages.Visible = false;
            panelDCASummary.Visible = false;

            panelRefreshChart.Visible = true;
            lblDCAMessage.Text = "";
        }

        private void TextBoxDCAAmountInput_TextChanged(object sender, EventArgs e)
        {
            ValidateDCAInputs();
        }
        #endregion
        #endregion
        //![](resources\tinylogo1.png;;;0.04706,0.04877)
        #region ⚡⚡⚡ BTC/FIAT CONVERTER
        #region populate data
        private void PopulateConverterScreen()
        {
            try
            {
                if (!offlineMode && !testNet)
                {
                    string priceUSD = OneBTCInUSD;
                    string priceEUR = OneBTCInEUR;
                    string priceGBP = OneBTCInGBP;
                    string priceXAU = OneBTCInXAU;

                    #region USD list
                    if (string.IsNullOrEmpty(priceUSD) || !double.TryParse(priceUSD, out _))
                    {
                        priceUSD = "0";
                    }
                    UpdateLabelValueAsync(labelPCUSD1, (Convert.ToDecimal(priceUSD) / 100000000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCUSD2, (Convert.ToDecimal(priceUSD) / 10000000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCUSD3, (Convert.ToDecimal(priceUSD) / 1000000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCUSD4, (Convert.ToDecimal(priceUSD) / 100000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCUSD5, (Convert.ToDecimal(priceUSD) / 10000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCUSD6, (Convert.ToDecimal(priceUSD) / 1000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCUSD7, (Convert.ToDecimal(priceUSD) / 100).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCUSD8, (Convert.ToDecimal(priceUSD) / 10).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCUSD9, (Convert.ToDecimal(priceUSD)).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCUSD10, (Convert.ToDecimal(priceUSD) * 10).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCUSD11, (Convert.ToDecimal(priceUSD) * 100).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCUSD12, (Convert.ToDecimal(priceUSD) * 1000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCUSD13, (Convert.ToDecimal(priceUSD) * 10000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCUSD14, (Convert.ToDecimal(priceUSD) * 100000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCUSD15, (Convert.ToDecimal(priceUSD) * 1000000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCUSD16, (Convert.ToDecimal(priceUSD) * 10000000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCUSD17, (Convert.ToDecimal(priceUSD) * 21000000).ToString("0.00"));
                    #endregion
                    #region EUR list
                    if (string.IsNullOrEmpty(priceEUR) || !double.TryParse(priceEUR, out _))
                    {
                        priceEUR = "0";
                    }
                    UpdateLabelValueAsync(labelPCEUR1, (Convert.ToDecimal(priceEUR) / 100000000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCEUR2, (Convert.ToDecimal(priceEUR) / 10000000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCEUR3, (Convert.ToDecimal(priceEUR) / 1000000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCEUR4, (Convert.ToDecimal(priceEUR) / 100000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCEUR5, (Convert.ToDecimal(priceEUR) / 10000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCEUR6, (Convert.ToDecimal(priceEUR) / 1000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCEUR7, (Convert.ToDecimal(priceEUR) / 100).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCEUR8, (Convert.ToDecimal(priceEUR) / 10).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCEUR9, (Convert.ToDecimal(priceEUR)).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCEUR10, (Convert.ToDecimal(priceEUR) * 10).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCEUR11, (Convert.ToDecimal(priceEUR) * 100).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCEUR12, (Convert.ToDecimal(priceEUR) * 1000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCEUR13, (Convert.ToDecimal(priceEUR) * 10000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCEUR14, (Convert.ToDecimal(priceEUR) * 100000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCEUR15, (Convert.ToDecimal(priceEUR) * 1000000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCEUR16, (Convert.ToDecimal(priceEUR) * 10000000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCEUR17, (Convert.ToDecimal(priceEUR) * 21000000).ToString("0.00"));
                    #endregion
                    #region GBP list
                    if (string.IsNullOrEmpty(priceGBP) || !double.TryParse(priceGBP, out _))
                    {
                        priceGBP = "0";
                    }
                    UpdateLabelValueAsync(labelPCGBP1, (Convert.ToDecimal(priceGBP) / 100000000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCGBP2, (Convert.ToDecimal(priceGBP) / 10000000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCGBP3, (Convert.ToDecimal(priceGBP) / 1000000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCGBP4, (Convert.ToDecimal(priceGBP) / 100000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCGBP5, (Convert.ToDecimal(priceGBP) / 10000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCGBP6, (Convert.ToDecimal(priceGBP) / 1000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCGBP7, (Convert.ToDecimal(priceGBP) / 100).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCGBP8, (Convert.ToDecimal(priceGBP) / 10).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCGBP9, (Convert.ToDecimal(priceGBP)).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCGBP10, (Convert.ToDecimal(priceGBP) * 10).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCGBP11, (Convert.ToDecimal(priceGBP) * 100).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCGBP12, (Convert.ToDecimal(priceGBP) * 1000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCGBP13, (Convert.ToDecimal(priceGBP) * 10000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCGBP14, (Convert.ToDecimal(priceGBP) * 100000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCGBP15, (Convert.ToDecimal(priceGBP) * 1000000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCGBP16, (Convert.ToDecimal(priceGBP) * 10000000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCGBP17, (Convert.ToDecimal(priceGBP) * 21000000).ToString("0.00"));
                    #endregion
                    #region XAU list
                    if (string.IsNullOrEmpty(priceXAU) || !double.TryParse(priceXAU, out _))
                    {
                        priceXAU = "0";
                    }
                    UpdateLabelValueAsync(labelPCXAU1, (Convert.ToDecimal(priceXAU) / 100000000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCXAU2, (Convert.ToDecimal(priceXAU) / 10000000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCXAU3, (Convert.ToDecimal(priceXAU) / 1000000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCXAU4, (Convert.ToDecimal(priceXAU) / 100000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCXAU5, (Convert.ToDecimal(priceXAU) / 10000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCXAU6, (Convert.ToDecimal(priceXAU) / 1000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCXAU7, (Convert.ToDecimal(priceXAU) / 100).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCXAU8, (Convert.ToDecimal(priceXAU) / 10).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCXAU9, (Convert.ToDecimal(priceXAU)).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCXAU10, (Convert.ToDecimal(priceXAU) * 10).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCXAU11, (Convert.ToDecimal(priceXAU) * 100).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCXAU12, (Convert.ToDecimal(priceXAU) * 1000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCXAU13, (Convert.ToDecimal(priceXAU) * 10000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCXAU14, (Convert.ToDecimal(priceXAU) * 100000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCXAU15, (Convert.ToDecimal(priceXAU) * 1000000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCXAU16, (Convert.ToDecimal(priceXAU) * 10000000).ToString("0.00"));
                    UpdateLabelValueAsync(labelPCXAU17, (Convert.ToDecimal(priceXAU) * 21000000).ToString("0.00"));
                    #endregion
                    #region calculate fields derived from user input
                    SetCalculatedFiatAmounts();
                    SetCalculatedUSDAmount();
                    SetCalculatedEURAmount();
                    SetCalculatedGBPAmount();
                    SetCalculatedXAUAmount();
                    #endregion
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "PopulateConverterScreen");
            }
        }
        #endregion
        #region set textboxes to 0 if left empty by user
        private void TextBoxConvertUSDtoBTC_Leave(object sender, EventArgs e)
        {
            try
            {
                if (textBoxConvertUSDtoBTC.Text == "")
                {
                    textBoxConvertUSDtoBTC.Invoke((MethodInvoker)delegate
                    {
                        textBoxConvertUSDtoBTC.Text = "1.00";
                    });
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "TextBoxConvertUSDtoBTC_Leave");
            }
        }

        private void TextBoxConvertEURtoBTC_Leave(object sender, EventArgs e)
        {
            try
            {
                if (textBoxConvertEURtoBTC.Text == "")
                {
                    textBoxConvertEURtoBTC.Invoke((MethodInvoker)delegate
                    {
                        textBoxConvertEURtoBTC.Text = "1.00";
                    });
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "TextBoxConvertEURtoBTC_Leave");
            }
        }

        private void TextBoxConvertGBPtoBTC_Leave(object sender, EventArgs e)
        {
            try
            {
                if (textBoxConvertGBPtoBTC.Text == "")
                {
                    textBoxConvertGBPtoBTC.Invoke((MethodInvoker)delegate
                    {
                        textBoxConvertGBPtoBTC.Text = "1.00";
                    });
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "TextBoxConvertGBPtoBTC_Leave");
            }
        }

        private void TextBoxConvertXAUtoBTC_Leave(object sender, EventArgs e)
        {
            try
            {
                if (textBoxConvertXAUtoBTC.Text == "")
                {
                    textBoxConvertXAUtoBTC.Invoke((MethodInvoker)delegate
                    {
                        textBoxConvertXAUtoBTC.Text = "1.00";
                    });
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "TextBoxConvertXAUtoBTC_Leave");
            }
        }

        private void TextBoxConvertBTCtoFiat_Leave(object sender, EventArgs e)
        {
            try
            {
                if (textBoxConvertBTCtoFiat.Text == "")
                {
                    textBoxConvertBTCtoFiat.Invoke((MethodInvoker)delegate
                    {
                        textBoxConvertBTCtoFiat.Text = "1.00000000";
                    });
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "TextBoxConvertBTCtoFiat_Leave");
            }
        }
        #endregion
        #region validate user inputs
        private void CurrencyTextBoxes_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                System.Windows.Forms.TextBox? textBox = sender as System.Windows.Forms.TextBox;
                string text = textBox!.Text;

                // Allow digits, backspace, and decimal point
                if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar) && (e.KeyChar != '.'))
                {
                    e.Handled = true;
                    return;
                }

                // Only allow one decimal point
                if (e.KeyChar == '.' && text.Contains('.'))
                {
                    e.Handled = true;
                    return;
                }

                // Get the current caret position
                int caretPos = textBox.SelectionStart;

                // Check if the new character is being inserted after the decimal point
                if (text.Contains('.') && caretPos > text.IndexOf('.'))
                {
                    // Allow two digits after the decimal point
                    int decimalPlaces = text.Length - text.IndexOf('.') - 1;
                    if (decimalPlaces >= 2)
                    {
                        e.Handled = true;
                        return;
                    }
                }

                // Combine the current text with the newly typed character
                string newText = $"{text.Substring(0, caretPos)}{e.KeyChar}{text.Substring(caretPos)}";

                // Remove any commas in the text
                string strippedText = newText.Replace(",", "");

                // max = 100 trillion
                if (!string.IsNullOrEmpty(strippedText) && decimal.TryParse(strippedText, out decimal value))
                {
                    if (value > 100000000000000)
                    {
                        e.Handled = true;
                        return;
                    }
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "CurrencyTextBoxes_KeyPress - validating currency input");
            }
        }

        private void TextBoxConvertBTCtoFiat_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                TextBox? textBox = sender as TextBox;
                string text = textBox!.Text;

                // Allow digits, backspace, and decimal point
                if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar) && (e.KeyChar != '.'))
                {
                    e.Handled = true;
                    return;
                }

                // Only allow one decimal point
                if (e.KeyChar == '.' && text.Contains('.'))
                {
                    e.Handled = true;
                    return;
                }

                // Get the current caret position
                int caretPos = textBox.SelectionStart;

                // Check if the new character is being inserted after the decimal point
                if (text.Contains('.') && caretPos > text.IndexOf('.'))
                {
                    // Allow 8 digits after the decimal point
                    int decimalPlaces = text.Length - text.IndexOf('.') - 1;
                    if (decimalPlaces >= 8)
                    {
                        e.Handled = true;
                        return;
                    }
                }

                // Combine the current text with the newly typed character
                string newText = $"{text.Substring(0, caretPos)}{e.KeyChar}{text.Substring(caretPos)}";

                // Remove any commas in the text
                string strippedText = newText.Replace(",", "");

                // max = 21 million
                if (!string.IsNullOrEmpty(strippedText) && decimal.TryParse(strippedText, out decimal value))
                {
                    if (value > 21000000)
                    {
                        e.Handled = true;
                        return;
                    }
                }

            }
            catch (WebException ex)
            {
                HandleException(ex, "textBoxConvertBTCtoFiat_KeyPress - validating BTC input");
            }
        }
        #endregion
        #region respond to and calculate from user inputs
        private void TextBoxConvertBTCtoFiat_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (textBoxConvertBTCtoFiat.Text != "")
                {
                    SetCalculatedFiatAmounts();
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "TextBoxConvertBTCtoFiat_TextChanged");
            }
        }

        private void SetCalculatedFiatAmounts()
        {
            try
            {
                UpdateLabelValueAsync(labelPCUSDcustom, (Convert.ToDecimal(textBoxConvertBTCtoFiat.Text) * Convert.ToDecimal(labelPCUSD9.Text)).ToString("0.00"));
                UpdateLabelValueAsync(labelPCEURcustom, (Convert.ToDecimal(textBoxConvertBTCtoFiat.Text) * Convert.ToDecimal(labelPCEUR9.Text)).ToString("0.00"));
                UpdateLabelValueAsync(labelPCGBPcustom, (Convert.ToDecimal(textBoxConvertBTCtoFiat.Text) * Convert.ToDecimal(labelPCGBP9.Text)).ToString("0.00"));
                UpdateLabelValueAsync(labelPCXAUcustom, (Convert.ToDecimal(textBoxConvertBTCtoFiat.Text) * Convert.ToDecimal(labelPCXAU9.Text)).ToString("0.00"));
            }
            catch (WebException ex)
            {
                HandleException(ex, "SetCalculatedFiatAmounts");
            }
        }

        private void FiatAmountTextBoxes_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (textBoxConvertUSDtoBTC.Text != "")
                {
                    SetCalculatedUSDAmount();
                }
                if (textBoxConvertEURtoBTC.Text != "")
                {
                    SetCalculatedEURAmount();
                }
                if (textBoxConvertGBPtoBTC.Text != "")
                {
                    SetCalculatedGBPAmount();
                }
                if (textBoxConvertXAUtoBTC.Text != "")
                {
                    SetCalculatedXAUAmount();
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "FiatAmountTextBoxes_TextChanged");
            }
        }

        private void SetCalculatedUSDAmount()
        {
            try
            {
                if (decimal.TryParse(labelPCUSD9.Text, out decimal pcusd9text) && decimal.TryParse(textBoxConvertUSDtoBTC.Text, out decimal usdtobtctext))
                {
                    if (String.Compare(labelPCUSD9.Text, "USD") != 0 && pcusd9text > 0)
                    {
                        UpdateLabelValueAsync(lblCalculatedUSDFromBTCAmount, (usdtobtctext / pcusd9text).ToString("0.00000000"));
                        label267.Invoke((MethodInvoker)delegate
                        {
                            label267.Text = $"${textBoxConvertUSDtoBTC.Text} USD (US dollar) =";
                        });
                        lblCalculatedUSDFromBTCAmount.Invoke((MethodInvoker)delegate
                        {
                            lblCalculatedUSDFromBTCAmount.Location = new Point(label267.Location.X + label267.Width, lblCalculatedUSDFromBTCAmount.Location.Y);
                        });
                        label273.Invoke((MethodInvoker)delegate
                        {
                            label273.Location = new Point(lblCalculatedUSDFromBTCAmount.Location.X + lblCalculatedUSDFromBTCAmount.Width, label273.Location.Y);
                        });
                    }
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "SetCalculatedUSDAmount");
            }
        }
        private void SetCalculatedEURAmount()
        {
            try
            {
                if (decimal.TryParse(labelPCEUR9.Text, out decimal pceur9text) && decimal.TryParse(textBoxConvertEURtoBTC.Text, out decimal eurtobtctext))
                {
                    if (String.Compare(labelPCEUR9.Text, "EUR") != 0 && pceur9text > 0)
                    {
                        UpdateLabelValueAsync(lblCalculatedEURFromBTCAmount, (eurtobtctext / pceur9text).ToString("0.00000000"));
                        label270.Invoke((MethodInvoker)delegate
                        {
                            label270.Text = $"€{textBoxConvertEURtoBTC.Text} EUR (European euro) =";
                        });
                        lblCalculatedEURFromBTCAmount.Invoke((MethodInvoker)delegate
                        {
                            lblCalculatedEURFromBTCAmount.Location = new Point(label270.Location.X + label270.Width, lblCalculatedEURFromBTCAmount.Location.Y);
                        });
                        label274.Invoke((MethodInvoker)delegate
                        {
                            label274.Location = new Point(lblCalculatedEURFromBTCAmount.Location.X + lblCalculatedEURFromBTCAmount.Width, label274.Location.Y);
                        });
                    }
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "SetCalculatedEURAmount");
            }
        }
        private void SetCalculatedGBPAmount()
        {
            try
            {
                if (decimal.TryParse(labelPCGBP9.Text, out decimal pcgbp9text) && decimal.TryParse(textBoxConvertGBPtoBTC.Text, out decimal gbptobtctext))
                {
                    if (String.Compare(labelPCGBP9.Text, "GBP") != 0 && pcgbp9text > 0)
                    {
                        UpdateLabelValueAsync(lblCalculatedGBPFromBTCAmount, (gbptobtctext / pcgbp9text).ToString("0.00000000"));
                        label269.Invoke((MethodInvoker)delegate
                        {
                            label269.Text = $"£{textBoxConvertGBPtoBTC.Text} GBP (British pound sterling) =";
                        });
                        lblCalculatedGBPFromBTCAmount.Invoke((MethodInvoker)delegate
                        {
                            lblCalculatedGBPFromBTCAmount.Location = new Point(label269.Location.X + label269.Width, lblCalculatedGBPFromBTCAmount.Location.Y);
                        });
                        label276.Invoke((MethodInvoker)delegate
                        {
                            label276.Location = new Point(lblCalculatedGBPFromBTCAmount.Location.X + lblCalculatedGBPFromBTCAmount.Width, label276.Location.Y);
                        });
                    }
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "SetCalculatedGBPAmount");
            }
        }
        private void SetCalculatedXAUAmount()
        {
            try
            {
                if (decimal.TryParse(labelPCXAU9.Text, out decimal pcxau9text) && decimal.TryParse(textBoxConvertXAUtoBTC.Text, out decimal xautobtctext))
                {
                    if (String.Compare(labelPCXAU9.Text, "XAU") != 0 && pcxau9text > 0)
                    {
                        UpdateLabelValueAsync(lblCalculatedXAUFromBTCAmount, (xautobtctext / pcxau9text).ToString("0.00000000"));
                        label268.Invoke((MethodInvoker)delegate
                        {
                            label268.Text = $"🪙{textBoxConvertXAUtoBTC.Text} XAU (ounce of gold) =";
                        });
                        lblCalculatedXAUFromBTCAmount.Invoke((MethodInvoker)delegate
                        {
                            lblCalculatedXAUFromBTCAmount.Location = new Point(label268.Location.X + label268.Width, lblCalculatedXAUFromBTCAmount.Location.Y);
                        });
                        label275.Invoke((MethodInvoker)delegate
                        {
                            label275.Location = new Point(lblCalculatedXAUFromBTCAmount.Location.X + lblCalculatedXAUFromBTCAmount.Width, label275.Location.Y);
                        });
                    }
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "SetCalculatedXAUAmount");
            }
        }
        #endregion
        #endregion
        //![](resources\tinylogo1.png;;;0.04706,0.04877)
        #region ⚡⚡⚡ DIRECTORY SCREEN
        #region load the directory page
        private void LoadAndStyleDirectoryBrowser()
        {
            try
            {
                if (!offlineMode && enableDirectory)
                {
                    webBrowserDirectory.Visible = true;
                    string directoryURL = "https://btcdir.org/satsuma-dir/";
                    webBrowserDirectory.Navigate(new Uri(directoryURL));
                }
                else
                {
                    webBrowserDirectory.Visible = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "LoadAndStyleDirectoryBrowser");
            }
        }
        #endregion
        #region manipulate colours to match theme and subscribe links to LinkElement_Click to use default browser
        private void WebBrowserDirectory_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)
        {
            try
            {
                // Get the page
                var document = webBrowserDirectory.Document;
                if (document != null)
                {
                    var navElements = document.GetElementsByTagName("nav");
                    var categoryWidth = (int)(160 * UIScale);
                    // set width of category column
                    foreach (HtmlElement navElement in navElements)
                    {
                        if (String.Compare(navElement.GetAttribute("className"), "floating-menu") == 0)
                        {
                            navElement.Style = $"width: {categoryWidth}px;";
                        }
                    }

                    var spanElements2 = document.GetElementsByTagName("div");
                    var linksPadding = (int)(170 * UIScale);
                    foreach (HtmlElement spanElement in spanElements2)
                    {
                        // set font
                        if (String.Compare(spanElement.GetAttribute("className"), "site-content") == 0)
                        {
                            spanElement.Style = "font-family: Century Gothic;";
                        }

                        // set width of links column
                        if (String.Compare(spanElement.GetAttribute("className"), "linklist") == 0)
                        {
                            spanElement.Style = $"padding-left: {linksPadding}px; width: 98%;";
                        }
                    }

                    // Modify background color
                    var backgroundColor = panel88.BackColor;
                    var backgroundColorString = ColorTranslator.ToHtml(backgroundColor);
                    document.Body.Style = $"background-color: {backgroundColorString};";

                    // Modify links color
                    var linkColor = lblHeaderMarketCap.ForeColor;
                    var linkColorString = ColorTranslator.ToHtml(linkColor);

                    document.InvokeScript("execScript", new object[] { $"var links = document.getElementsByTagName('a');" +
                                $"for (var i = 0; i < links.length; i++) {{" +
                                    $"links[i].style.color = '{linkColorString}';" +
                                $"}}" });
                    // Make all div elements transparent
                    document.InvokeScript("execScript", new object[] { $"var divs = document.getElementsByTagName('div');" +
                                                $"for (var i = 0; i < divs.length; i++) {{" +
                                                    $"divs[i].style.backgroundColor = 'transparent';" +
                                                $"}}" });

                    // Change the color of all category titles
                    var spanColor = btnTransactionOutputsUp.ForeColor;
                    var spanColorString = ColorTranslator.ToHtml(spanColor);
                    var spanElements = document.GetElementsByTagName("span");
                    var adjustedFontSize = 8 * UIScale;
                    foreach (HtmlElement spanElement in spanElements)
                    {
                        if (String.Compare(spanElement.GetAttribute("className"), "linklistcatclass") == 0)
                        {
                            spanElement.Style = $"color: {spanColorString}; font-weight: normal; font-size: {adjustedFontSize}pt;";
                        }
                    }

                    var titleDivBGColor = btnTransactionOutputsUp.BackColor;
                    var titleDivBGColorString = ColorTranslator.ToHtml(titleDivBGColor);
                    var titleDivBGColorElements = document.GetElementsByTagName("div");
                    foreach (HtmlElement titleDivBGColorElement in titleDivBGColorElements)
                    {
                        if (String.Compare(titleDivBGColorElement.GetAttribute("className"), "linklistcatname") == 0)
                        {
                            titleDivBGColorElement.Style = $"background: {titleDivBGColorString};";
                        }
                        if (String.Compare(titleDivBGColorElement.GetAttribute("className"), "linklistindex") == 0)
                        {
                            var backgroundColor2 = panel16.BackColor;
                            var lighterBackgroundColor = MakeColorLighter(backgroundColor2, 10);
                            var lighterBackgroundColorString = ColorTranslator.ToHtml(lighterBackgroundColor);
                            titleDivBGColorElement.Style = $"border: 1px solid {titleDivBGColorString}; background-color: {lighterBackgroundColorString}; font-size: {adjustedFontSize}pt;";
                        }
                    }

                    // Change the color of all other text
                    var textColor = label77.ForeColor;
                    var textColorString = ColorTranslator.ToHtml(textColor);
                    var textElements = document.GetElementsByTagName("span");
                    var adjustedFontSize3 = 0.76 * UIScale;
                    foreach (HtmlElement textElement in textElements)
                    {
                        if (String.Compare(textElement.GetAttribute("className"), "linklistdesc") == 0)
                        {
                            textElement.Style = $"color: {textColorString}; font-size: {adjustedFontSize3}em";
                        }
                    }

                    // Attach a custom event handler to all anchor (<a>) elements in the loaded document
                    // to enable links to open in default browser rather than IE
                    foreach (HtmlElement linkElement in webBrowserDirectory.Document.Links)
                    {
                        linkElement.Click += LinkElement_Click;
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "WebBrowserDirectory_DocumentCompleted");
            }
        }
        #endregion
        #region scroll the directory
        private System.Windows.Forms.Timer? scrollTimer;
        private readonly int scrollStep = 6;

        private void BtnDirectoryScrollUp_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                scrollTimer = new System.Windows.Forms.Timer
                {
                    Interval = 1 // scrolling speed
                };
                scrollTimer.Tick += (s, ev) =>
                {
                    // Inject JavaScript to scroll up
                    InjectJavaScript($"window.scrollBy(0, -{scrollStep});");
                };
                scrollTimer.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDirectoryScrollUp_MouseDown");
            }
        }

        private void BtnDirectoryScrollDown_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                scrollTimer = new System.Windows.Forms.Timer
                {
                    Interval = 1 // scrolling speed
                };
                scrollTimer.Tick += (s, ev) =>
                {
                    // Inject JavaScript to scroll down
                    InjectJavaScript($"window.scrollBy(0, {scrollStep});");
                };
                scrollTimer.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDirectoryScrollDown_MouseDown");
            }
        }

        private void BtnDirectoryScrollUp_Click(object sender, EventArgs e)
        {
            try
            {
                if (webBrowserDirectory.Document != null)
                {
                    InjectJavaScript("window.scrollBy(0, -4);");
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDirectoryScrollUp_Click");
            }
        }

        private void BtnDirectoryScrollDown_Click(object sender, EventArgs e)
        {
            try
            {
                if (webBrowserDirectory.Document != null)
                {
                    InjectJavaScript("window.scrollBy(0, 4);");
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDirectoryScrollDown_Click");
            }
        }

        private void ScrollButton_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                // Stop the timer when the mouse button is released
                scrollTimer!.Stop();
                scrollTimer.Dispose();
            }
            catch (Exception ex)
            {
                HandleException(ex, "ScrollButton_MouseUp");
            }
        }

        private void InjectJavaScript(string script)
        {
            try
            {
                if (webBrowserDirectory.Document != null)
                {
                    HtmlElement head = webBrowserDirectory.Document.GetElementsByTagName("head")[0];
                    HtmlElement scriptElement = webBrowserDirectory.Document.CreateElement("script");
                    scriptElement.SetAttribute("text", script);
                    head.AppendChild(scriptElement);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "InjectJavaScript");
            }
        }
        #endregion
        #region use default browser for external links
        private void LinkElement_Click(object sender, HtmlElementEventArgs e)
        {
            try
            {
                if (linkClicked) return; // If the link was already clicked less than a second ago, do nothing (linkClicked resets to false 1 sec after clicking link. Not doing this spawns multiple tabs)

                HtmlElement? linkElement = sender as HtmlElement;
                if (linkElement != null)
                {
                    string url = linkElement.GetAttribute("href");

                    // Check if the URL starts with "https://btcdir.org/satsuma-dir"
                    if (url.StartsWith("https://btcdir.org/satsuma-dir"))
                    {
                        // do nothing (open these links in webbrowser control)
                        return;
                    }

                    // External links open in the default browser
                    try
                    {
                        Process.Start(new ProcessStartInfo
                        {
                            FileName = url,
                            UseShellExecute = true
                        });
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"Error opening link: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }

                    // Set the linkClicked flag to true to avoid multiple tabs for a single click
                    linkClicked = true;
                    intExternalLinkClickedFlagToFalse = 0;

                    // Cancel the default behavior for the link click to stop IE opening
                    e.ReturnValue = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "LinkElement_Click");
            }
        }

        #endregion
        #endregion
        //![](resources\tinylogo1.png;;;0.04706,0.04877)
        #region ⚡⚡⚡ SETTINGS SCREEN
        #region user input own node url
        private void TextBoxSettingsOwnNodeURL_Enter(object sender, EventArgs e)
        {
            try
            {
                if (isTextBoxSettingsOwnNodeURLWatermarkTextDisplayed)
                {
                    textBoxSettingsOwnNodeURL.Invoke((MethodInvoker)delegate
                    {
                        textBoxSettingsOwnNodeURL.Text = "";
                        textBoxSettingsOwnNodeURL.ForeColor = Color.White;
                    });
                    isTextBoxSettingsOwnNodeURLWatermarkTextDisplayed = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxSettingsOwnNodeURL_Enter");
            }
        }

        private void TextBoxSettingsOwnNodeURL_Leave(object sender, EventArgs e)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(textBoxSettingsOwnNodeURL.Text))
                {
                    textBoxSettingsOwnNodeURL.Invoke((MethodInvoker)delegate
                    {
                        textBoxSettingsOwnNodeURL.Invoke((MethodInvoker)delegate
                        {
                            textBoxSettingsOwnNodeURL.Text = "e.g http://umbrel.local:3006/api/";
                            textBoxSettingsOwnNodeURL.ForeColor = Color.Gray;
                        });
                    });

                    lblSettingsOwnNodeStatus.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsOwnNodeStatus.Text = "invalid / node offline";
                        lblSettingsOwnNodeStatus.Location = new Point((int)(750 * UIScale) - lblSettingsOwnNodeStatus.Width, lblSettingsOwnNodeStatus.Location.Y);
                    });
                    lblSettingsOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsOwnNodeStatusLight.ForeColor = Color.IndianRed;
                        lblSettingsOwnNodeStatusLight.Location = new Point(lblSettingsOwnNodeStatus.Location.X - lblSettingsOwnNodeStatusLight.Width, lblSettingsOwnNodeStatusLight.Location.Y);
                    });


                    isTextBoxSettingsOwnNodeURLWatermarkTextDisplayed = true;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxSettingsOwnNodeURL_Leave");
            }
        }

        private void TextBoxSettingsOwnNodeURL_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (isTextBoxSettingsOwnNodeURLWatermarkTextDisplayed)
                {
                    textBoxSettingsOwnNodeURL.ForeColor = Color.White;
                    isTextBoxSettingsOwnNodeURLWatermarkTextDisplayed = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxSettingsOwnNodeURL_TextChanged");
            }
        }

        private void TextBoxSettingsOwnNodeURL_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (isTextBoxSettingsOwnNodeURLWatermarkTextDisplayed)
                {
                    textBoxSettingsOwnNodeURL.Invoke((MethodInvoker)delegate
                    {
                        textBoxSettingsOwnNodeURL.Text = "";
                        textBoxSettingsOwnNodeURL.ForeColor = Color.White;
                    });
                    isTextBoxSettingsOwnNodeURLWatermarkTextDisplayed = false;
                }
                else
                {
                    previousXpubScreenOwnNodeURLStringToCompare = textBoxSettingsOwnNodeURL.Text;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxSettingsOwnNodeURL_KeyPress");
            }
        }

        private void TextBoxSettingsOwnNodeURL_KeyUp(object sender, KeyEventArgs e)
        {
            try
            {
                if (String.Compare(previousXpubScreenOwnNodeURLStringToCompare, textBoxSettingsOwnNodeURL.Text) != 0)
                {
                    textBoxSubmittedXpub.Enabled = false;
                    lblXpubScreenOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                    {
                        lblXpubScreenOwnNodeStatusLight.ForeColor = Color.IndianRed;
                    });
                    lblSettingsOwnNodeSelected.Enabled = false;
                    label174.Invoke((MethodInvoker)delegate
                    {
                        label174.Text = "your node (not connected)";
                    });
                    MoveNodeSelections();
                    lblXpubScreenOwnNodeStatus.Invoke((MethodInvoker)delegate
                    {
                        lblXpubScreenOwnNodeStatus.Text = "invalid / node offline";
                    });
                    lblSettingsOwnNodeStatus.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsOwnNodeStatus.Text = "invalid / node offline";
                        lblSettingsOwnNodeStatus.Location = new Point((int)(750 * UIScale) - lblSettingsOwnNodeStatus.Width, lblSettingsOwnNodeStatus.Location.Y);
                    });
                    lblSettingsOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsOwnNodeStatusLight.ForeColor = Color.IndianRed;
                        lblSettingsOwnNodeStatusLight.Location = new Point(lblSettingsOwnNodeStatus.Location.X - lblSettingsOwnNodeStatusLight.Width, lblSettingsOwnNodeStatusLight.Location.Y);
                    });

                    textBoxSubmittedXpub.Invoke((MethodInvoker)delegate
                    {
                        textBoxSubmittedXpub.Text = "";
                    });
                    previousXpubScreenOwnNodeURLStringToCompare = textBoxSettingsOwnNodeURL.Text;
                    textBoxXpubScreenOwnNodeURL.Invoke((MethodInvoker)delegate
                    {
                        textBoxXpubScreenOwnNodeURL.Text = textBoxSettingsOwnNodeURL.Text;
                    });
                    CheckOwnNodeIsOnlineAsync();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxSettingsOwnNodeURL_KeyUp");
            }
        }
        #endregion
        #region node selection
        private async void LblSettingsNodeMainnet_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                if (String.Compare(lblSettingsNodeMainnetSelected.Text, "❌") == 0)
                {
                    lblSettingsNodeMainnetSelected.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsNodeMainnetSelected.ForeColor = Color.Green;
                        lblSettingsNodeMainnetSelected.Text = "✔️";
                    });
                    testNet = false;
                    lblSettingsNodeTestnetSelected.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsNodeTestnetSelected.ForeColor = Color.IndianRed;
                        lblSettingsNodeTestnetSelected.Text = "❌";
                    });
                    lblSettingsOwnNodeSelected.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsOwnNodeSelected.ForeColor = Color.IndianRed;
                        lblSettingsOwnNodeSelected.Text = "❌";
                    });
                    NodeURL = "https://mempool.space/api/";
                    RunMempoolSpaceLightningAPI = true;
                    await CheckNetworkStatusAsync().ConfigureAwait(true);
                    CreateDataServices();
                    SaveSettings();
                    if (RunBlockchainInfoAPI)
                    {
                        EnableChartsThatUseBlockchainInfoAPI();
                    }
                    await GetBlockTipAndCirculationAsync().ConfigureAwait(true);
                    LookupBlockListAsync();
                    EnableFunctionalityForMainNet();
                    _ = UpdateBitcoinAndLightningDashboardsAsync();
                    btnMenuAddressUTXO.Enabled = true;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "LblSettingsNodeMainnet_Click");
            }
        }

        private async void LblSettingsNodeTestnet_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                if (String.Compare(lblSettingsNodeTestnetSelected.Text, "❌") == 0)
                {
                    lblSettingsNodeTestnetSelected.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsNodeTestnetSelected.ForeColor = Color.Green;
                        lblSettingsNodeTestnetSelected.Text = "✔️";
                    });
                    testNet = true;
                    lblSettingsNodeMainnetSelected.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsNodeMainnetSelected.ForeColor = Color.IndianRed;
                        lblSettingsNodeMainnetSelected.Text = "❌";
                    });
                    lblSettingsOwnNodeSelected.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsOwnNodeSelected.ForeColor = Color.IndianRed;
                        lblSettingsOwnNodeSelected.Text = "❌";
                    });
                    NodeURL = "https://mempool.space/testnet/api/";
                    RunMempoolSpaceLightningAPI = true;
                    await CheckNetworkStatusAsync().ConfigureAwait(true);
                    CreateDataServices();
                    SaveSettings();
                    DisableFunctionalityForTestNet();
                    await GetBlockTipAndCirculationAsync().ConfigureAwait(true);
                    LookupBlockListAsync();
                    _ = UpdateBitcoinAndLightningDashboardsAsync();
                    btnMenuAddressUTXO.Enabled = true;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "LblSettingsNodeTestnet_Click");
            }
        }

        private async void LblSettingsNodeCustom_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                if (String.Compare(lblSettingsOwnNodeSelected.Text, "❌") == 0)
                {
                    lblSettingsOwnNodeSelected.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsOwnNodeSelected.ForeColor = Color.Green;
                        lblSettingsOwnNodeSelected.Text = "✔️";
                    });
                    testNet = false;
                    lblSettingsNodeMainnetSelected.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsNodeMainnetSelected.ForeColor = Color.IndianRed;
                        lblSettingsNodeMainnetSelected.Text = "❌";
                    });
                    lblSettingsNodeTestnetSelected.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsNodeTestnetSelected.ForeColor = Color.IndianRed;
                        lblSettingsNodeTestnetSelected.Text = "❌";
                    });
                    lblSettingsSelectedNodeStatus.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsSelectedNodeStatus.Text = "invalid / node offline";
                        lblSettingsSelectedNodeStatus.Location = new Point((int)(750 * UIScale) - lblSettingsSelectedNodeStatus.Width, lblSettingsSelectedNodeStatus.Location.Y);
                    });
                    lblSettingsSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsSelectedNodeStatusLight.ForeColor = Color.IndianRed;
                        lblSettingsSelectedNodeStatusLight.Location = new Point(lblSettingsSelectedNodeStatus.Location.X - lblSettingsSelectedNodeStatusLight.Width, lblSettingsSelectedNodeStatusLight.Location.Y);
                    });
                    previousXpubScreenOwnNodeURLStringToCompare = textBoxSettingsOwnNodeURL.Text;
                    RunMempoolSpaceLightningAPI = false;
                    CheckOwnNodeIsOnlineAsync();
                    NodeURL = textBoxSettingsOwnNodeURL.Text;
                    await CheckNetworkStatusAsync().ConfigureAwait(true);

                    if (lblSettingsOwnNodeStatusLight.ForeColor == Color.OliveDrab)
                    {
                        CreateDataServices();
                        SaveSettings();
                        await GetBlockTipAndCirculationAsync().ConfigureAwait(true);
                        LookupBlockListAsync();
                        _ = UpdateBitcoinAndLightningDashboardsAsync();

                        // write the node url to the settings file
                        ownNode = textBoxSettingsOwnNodeURL.Text;
                        SaveSettings();
                    }
                    btnMenuAddressUTXO.Enabled = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "LblSettingsNodeCustom_Click");
            }
        }

        private void MoveNodeSelections()
        {
            try
            {
                lblSettingsNodeMainnetSelected.Invoke((MethodInvoker)delegate
                {
                    lblSettingsNodeMainnetSelected.Location = new Point(label174.Location.X + label174.Width + (int)(20 * UIScale), lblSettingsNodeMainnetSelected.Location.Y);
                });
                label157.Invoke((MethodInvoker)delegate
                {
                    label157.Location = new Point(lblSettingsNodeMainnetSelected.Location.X + lblSettingsNodeMainnetSelected.Width, label157.Location.Y);
                });
                lblSettingsNodeTestnetSelected.Invoke((MethodInvoker)delegate
                {
                    lblSettingsNodeTestnetSelected.Location = new Point(label157.Location.X + label157.Width + (int)(20 * UIScale), lblSettingsNodeTestnetSelected.Location.Y);
                });
                label172.Invoke((MethodInvoker)delegate
                {
                    label172.Location = new Point(lblSettingsNodeTestnetSelected.Location.X + lblSettingsNodeTestnetSelected.Width, label172.Location.Y);
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "MoveNodeSelections");
            }
        }

        #endregion
        #region enable/disable directory
        private void LblEnableDirectory_Click(object sender, EventArgs e)
        {
            try
            {
                if (String.Compare(lblEnableDirectory.Text, "✔️") == 0)
                {
                    lblEnableDirectory.Invoke((MethodInvoker)delegate
                    {
                        lblEnableDirectory.ForeColor = Color.IndianRed;
                        lblEnableDirectory.Text = "❌";
                    });
                    enableDirectory = false;
                    directoryEnabled = "0"; // for settings file
                }
                else
                {
                    lblEnableDirectory.Invoke((MethodInvoker)delegate
                    {
                        lblEnableDirectory.ForeColor = Color.Green;
                        lblEnableDirectory.Text = "✔️";
                    });
                    enableDirectory = true;
                    directoryEnabled = "1"; // for settings file
                }
                LoadAndStyleDirectoryBrowser();
                SaveSettings();
            }
            catch (Exception ex)
            {
                HandleException(ex, "LblEnableDirectory_Click");
            }

        }
        #endregion
        #region enable/disable api's
        private void LblMessariJSON_Click(object sender, EventArgs e)
        {
            try
            {
                if (String.Compare(lblMessariJSON.Text, "✔️") == 0)
                {
                    lblMessariJSON.Invoke((MethodInvoker)delegate
                    {
                        lblMessariJSON.ForeColor = Color.IndianRed;
                        lblMessariJSON.Text = "❌";
                    });
                    RunMessariAPI = false;
                    messariJSONSelected = "0";
                }
                else
                {
                    lblMessariJSON.Invoke((MethodInvoker)delegate
                    {
                        lblMessariJSON.ForeColor = Color.Green;
                        lblMessariJSON.Text = "✔️";
                    });
                    RunMessariAPI = true;
                    messariJSONSelected = "1";
                }
                SaveSettings();
                RefreshScreensAsync();
            }
            catch (Exception ex)
            {
                HandleException(ex, "LblMessariJSON_Click");
            }
        }

        private void LblCoinbaseEndpoints_Click(object sender, EventArgs e)
        {
            try
            {
                if (String.Compare(lblCoinbaseEndpoints.Text, "✔️") == 0)
                {
                    lblCoinbaseEndpoints.Invoke((MethodInvoker)delegate
                    {
                        lblCoinbaseEndpoints.ForeColor = Color.IndianRed;
                        lblCoinbaseEndpoints.Text = "❌";
                    });
                    RunCoinbaseAPI = false;
                    coinbaseEnpointsSelected = "0";
                    CoinbasePriceIndicator.Invoke((MethodInvoker)delegate
                    {
                        CoinbasePriceIndicator.ForeColor = Color.LightGray;
                    });

                    // don't show a value for price change
                    readyToShowPriceChangeLabelYet = false;
                    readyToShowRedAndGreenLabelsYet = false;
                    lblHeaderPriceChange.Invoke((MethodInvoker)delegate
                    {
                        lblHeaderPriceChange.Visible = false;
                    });

                    if (!RunCoingeckoAPI && !RunMempoolSpacePriceAPI)
                    {
                        HideAllFiatConversionFields();
                        btnMenuPriceConverter.Enabled = false;
                        btnMenuDCACalculator.Enabled = false;
                    }
                }
                else
                {
                    lblCoinbaseEndpoints.Invoke((MethodInvoker)delegate
                    {
                        lblCoinbaseEndpoints.ForeColor = Color.Green;
                        lblCoinbaseEndpoints.Text = "✔️";
                    });
                    RunCoinbaseAPI = true;
                    btnMenuPriceConverter.Enabled = true;
                    btnMenuDCACalculator.Enabled = true;
                    coinbaseEnpointsSelected = "1";
                    CoinbasePriceIndicator.Invoke((MethodInvoker)delegate
                    {
                        CoinbasePriceIndicator.ForeColor = Color.OliveDrab;
                    });
                    ShowAllFiatConversionFields();
                }
                SaveSettings();
                RefreshScreensAsync();
            }
            catch (Exception ex)
            {
                HandleException(ex, "LblCoinbaseEndpoints_Click");
            }
        }

        private void LblCoingeckoComJSON_Click(object sender, EventArgs e)
        {
            try
            {
                if (String.Compare(lblCoingeckoComJSON.Text, "✔️") == 0)
                {
                    lblCoingeckoComJSON.Invoke((MethodInvoker)delegate
                    {
                        lblCoingeckoComJSON.ForeColor = Color.IndianRed;
                        lblCoingeckoComJSON.Text = "❌";
                    });
                    RunCoingeckoAPI = false;
                    coingeckoAPISelected = "0";
                    lblCoingeckoPriceIndicator.Invoke((MethodInvoker)delegate
                    {
                        lblCoingeckoPriceIndicator.ForeColor = Color.LightGray;
                    });

                    // don't show a value for price change
                    readyToShowPriceChangeLabelYet = false;
                    readyToShowRedAndGreenLabelsYet = false;
                    lblHeaderPriceChange.Invoke((MethodInvoker)delegate
                    {
                        lblHeaderPriceChange.Visible = false;
                    });

                    if (!RunCoinbaseAPI && !RunMempoolSpacePriceAPI)
                    {
                        HideAllFiatConversionFields();
                        btnMenuPriceConverter.Enabled = false;
                        btnMenuDCACalculator.Enabled = false;
                    }
                }
                else
                {
                    lblCoingeckoComJSON.Invoke((MethodInvoker)delegate
                    {
                        lblCoingeckoComJSON.ForeColor = Color.Green;
                        lblCoingeckoComJSON.Text = "✔️";
                    });
                    RunCoingeckoAPI = true;
                    btnMenuPriceConverter.Enabled = true;
                    btnMenuDCACalculator.Enabled = true;
                    coingeckoAPISelected = "1";
                    lblCoingeckoPriceIndicator.Invoke((MethodInvoker)delegate
                    {
                        lblCoingeckoPriceIndicator.ForeColor = Color.OliveDrab;
                    });
                    ShowAllFiatConversionFields();
                }
                SaveSettings();
                RefreshScreensAsync();
            }
            catch (Exception ex)
            {
                HandleException(ex, "LblCoingeckoComJSON_Click");
            }
        }

        private void LblMempoolSpacePriceAPI_Click(object sender, EventArgs e)
        {
            try
            {
                if (String.Compare(lblMempoolSpacePriceAPI.Text, "✔️") == 0)
                {
                    lblMempoolSpacePriceAPI.Invoke((MethodInvoker)delegate
                    {
                        lblMempoolSpacePriceAPI.ForeColor = Color.IndianRed;
                        lblMempoolSpacePriceAPI.Text = "❌";
                    });
                    RunMempoolSpacePriceAPI = false;
                    mempoolSpacePriceAPISelected = "0";
                    lblMempoolSpacePriceIndicator.Invoke((MethodInvoker)delegate
                    {
                        lblMempoolSpacePriceIndicator.ForeColor = Color.LightGray;
                    });

                    // don't show a value for price change
                    readyToShowPriceChangeLabelYet = false;
                    readyToShowRedAndGreenLabelsYet = false;
                    lblHeaderPriceChange.Invoke((MethodInvoker)delegate
                    {
                        lblHeaderPriceChange.Visible = false;
                    });

                    if (!RunCoinbaseAPI && !RunCoingeckoAPI)
                    {
                        HideAllFiatConversionFields();
                        btnMenuPriceConverter.Enabled = false;
                        btnMenuDCACalculator.Enabled = false;
                    }
                }
                else
                {
                    lblMempoolSpacePriceAPI.Invoke((MethodInvoker)delegate
                    {
                        lblMempoolSpacePriceAPI.ForeColor = Color.Green;
                        lblMempoolSpacePriceAPI.Text = "✔️";
                    });
                    RunMempoolSpacePriceAPI = true;
                    btnMenuPriceConverter.Enabled = true;
                    btnMenuDCACalculator.Enabled = true;
                    mempoolSpacePriceAPISelected = "1";
                    lblMempoolSpacePriceIndicator.Invoke((MethodInvoker)delegate
                    {
                        lblMempoolSpacePriceIndicator.ForeColor = Color.OliveDrab;
                    });
                    ShowAllFiatConversionFields();
                }
                SaveSettings();
                RefreshScreensAsync();
            }
            catch (Exception ex)
            {
                HandleException(ex, "LblMempoolSpacePriceAPI_Click");
            }
        }

        private void LblBlockchainInfoEndpoints_Click(object sender, EventArgs e)
        {
            try
            {
                if (String.Compare(lblBlockchainInfoEndpoints.Text, "✔️") == 0)
                {
                    lblBlockchainInfoEndpoints.Invoke((MethodInvoker)delegate
                    {
                        lblBlockchainInfoEndpoints.ForeColor = Color.IndianRed;
                        lblBlockchainInfoEndpoints.Text = "❌";
                    });
                    RunBlockchainInfoAPI = false;
                    blockchainInfoEndpointsSelected = "0";
                    btnMenuDCACalculator.Enabled = false;
                    DisableChartsThatUseBlockchainInfoAPI();
                }
                else
                {
                    lblBlockchainInfoEndpoints.Invoke((MethodInvoker)delegate
                    {
                        lblBlockchainInfoEndpoints.ForeColor = Color.Green;
                        lblBlockchainInfoEndpoints.Text = "✔️";
                    });
                    RunBlockchainInfoAPI = true;
                    blockchainInfoEndpointsSelected = "1";
                    btnMenuDCACalculator.Enabled = true;
                    EnableChartsThatUseBlockchainInfoAPI();
                }
                SaveSettings();
                RefreshScreensAsync();
            }
            catch (Exception ex)
            {
                HandleException(ex, "LblBlockchainInfoEndpoints_Click");
            }
        }
        #endregion
        #region always on top settings

        private void LblAlwaysOnTop_Click(object sender, EventArgs e)
        {
            try
            {
                if (String.Compare(lblAlwaysOnTop.Text, "✔️") == 0)
                {
                    lblAlwaysOnTop.Invoke((MethodInvoker)delegate
                    {
                        lblAlwaysOnTop.ForeColor = Color.IndianRed;
                        lblAlwaysOnTop.Text = "❌";
                    });
                    this.TopMost = false;
                }
                else
                {
                    lblAlwaysOnTop.Invoke((MethodInvoker)delegate
                    {
                        lblAlwaysOnTop.ForeColor = Color.Green;
                        lblAlwaysOnTop.Text = "✔️";
                    });
                    this.TopMost = true;
                }
                SaveSettings();
            }
            catch (Exception ex)
            {
                HandleException(ex, "LblAlwaysOnTop_Click");
            }
        }
        #endregion
        #region enable/disable offline mode
        private void LblOfflineMode_Click(object sender, EventArgs e)
        {
            try
            {
                if (String.Compare(lblOfflineMode.Text, "❌") == 0)
                {
                    EnableOfflineModeAsync();
                }
                else
                {
                    DisableOfflineMode();
                }
                SaveSettings();
            }
            catch (Exception ex)
            {
                HandleException(ex, "LblOfflineMode_Click");
            }
        }

        private void DisableOfflineMode()
        {
            try
            {
                offlineMode = false;
                lblOfflineModeLight.Invoke((MethodInvoker)delegate
                {
                    btnMenuHelp.Text = "   help";
                    btnMenuHelp.Enabled = true;
                });
                if (RunBlockchainInfoAPI)
                {
                    btnMenuDCACalculator.Enabled = true;
                }
                if (RunCoinbaseAPI || RunCoingeckoAPI || RunMempoolSpacePriceAPI)
                {
                    btnMenuPriceConverter.Enabled = true;
                }
                btnHelp.Enabled = true;
                lblOfflineModeLight.Invoke((MethodInvoker)delegate
                {
                    lblOfflineModeLight.Text = "🟢";
                    lblOfflineModeLight.ForeColor = Color.OliveDrab;
                });
                lblOfflineModeActive.Invoke((MethodInvoker)delegate
                {
                    lblOfflineModeActive.Text = "Online mode";
                });
                lblOfflineMode.Invoke((MethodInvoker)delegate
                {
                    lblOfflineMode.ForeColor = Color.IndianRed;
                    lblOfflineMode.Text = "❌";
                });
                lblMessariJSON.Invoke((MethodInvoker)delegate
                {
                    lblMessariJSON.ForeColor = Color.IndianRed;
                    lblMessariJSON.Text = "❌";
                    lblMessariJSON.Enabled = true;
                });
                RunMessariAPI = false;
                lblCoingeckoComJSON.Invoke((MethodInvoker)delegate
                {
                    lblCoingeckoComJSON.ForeColor = Color.IndianRed;
                    lblCoingeckoComJSON.Text = "❌";
                    lblCoingeckoComJSON.Enabled = true;
                });
                RunCoingeckoAPI = false;
                lblMempoolSpacePriceAPI.Invoke((MethodInvoker)delegate
                {
                    lblMempoolSpacePriceAPI.ForeColor = Color.IndianRed;
                    lblMempoolSpacePriceAPI.Text = "❌";
                    lblMempoolSpacePriceAPI.Enabled = true;
                });
                RunMempoolSpacePriceAPI = false;
                lblCoinbaseEndpoints.Invoke((MethodInvoker)delegate
                {
                    lblCoinbaseEndpoints.ForeColor = Color.IndianRed;
                    lblCoinbaseEndpoints.Text = "❌";
                    lblCoinbaseEndpoints.Enabled = true;
                });
                RunCoinbaseAPI = false;
                lblBlockchainInfoEndpoints.Invoke((MethodInvoker)delegate
                {
                    lblBlockchainInfoEndpoints.ForeColor = Color.IndianRed;
                    lblBlockchainInfoEndpoints.Text = "❌";
                    lblBlockchainInfoEndpoints.Enabled = true;
                });
                RunBlockchainInfoAPI = false;
                lblEnableDirectory.Invoke((MethodInvoker)delegate
                {
                    lblEnableDirectory.ForeColor = Color.IndianRed;
                    lblEnableDirectory.Text = "❌";
                    lblEnableDirectory.Enabled = true;
                });
                enableDirectory = false;
                directoryEnabled = "0"; // for settings file
                OfflineModeSelected = "0";
                messariJSONSelected = "0";
                coinbaseEnpointsSelected = "0";
                blockchainInfoEndpointsSelected = "0";

                lblSettingsNodeTestnetSelected.Invoke((MethodInvoker)delegate
                {
                    lblSettingsNodeTestnetSelected.Text = "❌";
                    lblSettingsNodeTestnetSelected.ForeColor = Color.IndianRed;
                    lblSettingsNodeTestnetSelected.Enabled = true;
                });
                lblSettingsNodeMainnetSelected.Invoke((MethodInvoker)delegate
                {
                    lblSettingsNodeMainnetSelected.Text = "❌";
                    lblSettingsNodeMainnetSelected.ForeColor = Color.IndianRed;
                    lblSettingsNodeMainnetSelected.Enabled = true;
                });
                ShowAllFiatConversionFields();
            }
            catch (Exception ex)
            {
                HandleException(ex, "DisableOfflineMode");
            }
        }

        private async void EnableOfflineModeAsync()
        {
            try
            {
                offlineMode = true;
                lblOfflineModeLight.Invoke((MethodInvoker)delegate
                {
                    btnMenuHelp.Text = "   help (offline)";
                    btnMenuHelp.Enabled = false;
                });
                btnMenuPriceConverter.Enabled = false;
                btnMenuDCACalculator.Enabled = false;
                btnHelp.Enabled = false;
                lblOfflineModeLight.Invoke((MethodInvoker)delegate
                {
                    lblOfflineModeLight.Text = "🟢";
                    lblOfflineModeLight.ForeColor = Color.IndianRed;
                });
                lblOfflineModeActive.Invoke((MethodInvoker)delegate
                {
                    lblOfflineModeActive.Text = "Offline mode";
                });
                lblOfflineMode.Invoke((MethodInvoker)delegate
                {
                    lblOfflineMode.ForeColor = Color.Green;
                    lblOfflineMode.Text = "✔️";
                });
                lblMessariJSON.Invoke((MethodInvoker)delegate
                {
                    lblMessariJSON.ForeColor = Color.Gray;
                    lblMessariJSON.Text = "❌";
                    lblMessariJSON.Enabled = false;
                });
                RunMessariAPI = false;
                lblCoingeckoComJSON.Invoke((MethodInvoker)delegate
                {
                    lblCoingeckoComJSON.ForeColor = Color.Gray;
                    lblCoingeckoComJSON.Text = "❌";
                    lblCoingeckoComJSON.Enabled = false;
                });
                lblCoingeckoPriceIndicator.Invoke((MethodInvoker)delegate
                {
                    lblCoingeckoPriceIndicator.ForeColor = Color.LightGray;
                });
                RunCoingeckoAPI = false;
                lblMempoolSpacePriceAPI.Invoke((MethodInvoker)delegate
                {
                    lblMempoolSpacePriceAPI.ForeColor = Color.Gray;
                    lblMempoolSpacePriceAPI.Text = "❌";
                    lblMempoolSpacePriceAPI.Enabled = false;
                });
                lblMempoolSpacePriceIndicator.Invoke((MethodInvoker)delegate
                {
                    lblMempoolSpacePriceIndicator.ForeColor = Color.LightGray;
                });
                RunMempoolSpacePriceAPI = false;
                lblCoinbaseEndpoints.Invoke((MethodInvoker)delegate
                {
                    lblCoinbaseEndpoints.ForeColor = Color.Gray;
                    lblCoinbaseEndpoints.Text = "❌";
                    lblCoinbaseEndpoints.Enabled = false;
                });
                CoinbasePriceIndicator.Invoke((MethodInvoker)delegate
                {
                    CoinbasePriceIndicator.ForeColor = Color.LightGray;
                });
                RunCoinbaseAPI = false;
                lblBlockchainInfoEndpoints.Invoke((MethodInvoker)delegate
                {
                    lblBlockchainInfoEndpoints.ForeColor = Color.Gray;
                    lblBlockchainInfoEndpoints.Text = "❌";
                    lblBlockchainInfoEndpoints.Enabled = false;
                });
                lblEnableDirectory.Invoke((MethodInvoker)delegate
                {
                    lblEnableDirectory.ForeColor = Color.IndianRed;
                    lblEnableDirectory.Text = "❌";
                    lblEnableDirectory.Enabled = false;
                });
                enableDirectory = false;
                directoryEnabled = "0"; // for settings file
                RunBlockchainInfoAPI = false;
                RunMempoolSpaceLightningAPI = false;
                OfflineModeSelected = "1";
                messariJSONSelected = "0";
                coinbaseEnpointsSelected = "0";
                blockchainInfoEndpointsSelected = "0";
                coingeckoAPISelected = "0";
                mempoolSpacePriceAPISelected = "0";

                lblSettingsOwnNodeSelected.Invoke((MethodInvoker)delegate
                {
                    lblSettingsOwnNodeSelected.ForeColor = Color.Green;
                    lblSettingsOwnNodeSelected.Text = "✔️";
                });
                testNet = false;

                lblSettingsSelectedNodeStatus.Invoke((MethodInvoker)delegate
                {
                    lblSettingsSelectedNodeStatus.Text = "invalid / node offline";
                    lblSettingsSelectedNodeStatus.Location = new Point((int)(750 * UIScale) - lblSettingsSelectedNodeStatus.Width, lblSettingsSelectedNodeStatus.Location.Y);
                });
                lblSettingsSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                {
                    lblSettingsSelectedNodeStatusLight.ForeColor = Color.IndianRed;
                    lblSettingsSelectedNodeStatusLight.Location = new Point(lblSettingsSelectedNodeStatus.Location.X - lblSettingsSelectedNodeStatusLight.Width, lblSettingsSelectedNodeStatusLight.Location.Y);
                });
                previousXpubScreenOwnNodeURLStringToCompare = textBoxSettingsOwnNodeURL.Text;

                CheckOwnNodeIsOnlineAsync();
                NodeURL = textBoxSettingsOwnNodeURL.Text;
                await CheckNetworkStatusAsync().ConfigureAwait(true);

                lblSettingsNodeTestnetSelected.Invoke((MethodInvoker)delegate
                {
                    lblSettingsNodeTestnetSelected.ForeColor = Color.Gray;
                    lblSettingsNodeTestnetSelected.Text = "❌";
                    lblSettingsNodeTestnetSelected.Enabled = false;
                });
                lblSettingsNodeMainnetSelected.Invoke((MethodInvoker)delegate
                {
                    lblSettingsNodeMainnetSelected.ForeColor = Color.Gray;
                    lblSettingsNodeMainnetSelected.Text = "❌";
                    lblSettingsNodeMainnetSelected.Enabled = false;
                });
                DisableChartsThatUseBlockchainInfoAPI();
                HideAllFiatConversionFields();
            }
            catch (Exception ex)
            {
                HandleException(ex, "EnableOfflineMode");
            }
        }
        #endregion
        #region numeric up/down control changes
        private void NumericUpDownDashboardRefresh_ValueChanged(object sender, EventArgs e)
        {
            try
            {
                APIGroup1DisplayTimerIntervalSecsConstant = (int)numericUpDownDashboardRefresh.Value * 60;
                intDisplayCountdownToRefresh = APIGroup1DisplayTimerIntervalSecsConstant;
                progressBarRefreshData.Maximum = (int)(numericUpDownDashboardRefresh.Value * 60000);
                SaveSettings();
            }
            catch (Exception ex)
            {
                HandleException(ex, "NumericUpDownDashboardRefresh_ValueChanged");
            }
        }

        private void BtnDashBoardRefreshUp_Click(object sender, EventArgs e)
        {
            try
            {
                if (numericUpDownDashboardRefresh.Value < 1440)
                {
                    numericUpDownDashboardRefresh.Value++;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDashBoardRefreshUp_Click");
            }
        }

        private void BtnDashboardRefreshDown_Click(object sender, EventArgs e)
        {
            try
            {
                if (numericUpDownDashboardRefresh.Value > 1)
                {
                    numericUpDownDashboardRefresh.Value--;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDashboardRefreshDown_Click");
            }
        }

        #region continuous increment/decrement of numericUpDown controls when mouse button held down
        private void BtnDataRefreshPeriodUp_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isDataRefreshPeriodUpHeldDown = true;
                timerNumUpDownContinuous.Enabled = true;
                timerNumUpDownContinuous.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDataRefreshPeriodUp_MouseDown");
            }
        }

        private void BtnDataRefreshPeriodUp_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isDataRefreshPeriodUpHeldDown = false;
                timerNumUpDownContinuous.Stop();
                timerNumUpDownContinuous.Enabled = false;
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDataRefreshPeriodUp_MouseUp");
            }
        }

        private void BtnDataRefreshPeriodDown_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isDataRefreshPeriodDownHeldDown = true;
                timerNumUpDownContinuous.Enabled = true;
                timerNumUpDownContinuous.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDataRefreshPeriodDown_MouseDown");
            }
        }

        private void BtnDataRefreshPeriodDown_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isDataRefreshPeriodDownHeldDown = false;
                timerNumUpDownContinuous.Stop();
                timerNumUpDownContinuous.Enabled = false;
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDataRefreshPeriodDown_MouseUp");
            }
        }
        #endregion
        #endregion
        #region enable/disable functionality depending on mainnet/testnet
        private void DisableFunctionalityForTestNet()
        {
            try
            {
                Control[] DisableThisStuffForTestnet = { btnMenuLightningDashboard, btnCurrency, btnMenuDCACalculator, btnMenuPriceConverter ,lblLightningChannelsChart, btnMenuCharts, lblBlockListFeeChart2, lblHeaderPriceChart, lblHeaderMarketCapChart, lblHeaderConverterChart, lblBlockListDifficultyChart, lblHeaderFeeRatesChart, lblBlockListFeeRangeChart2, lblBlockListHashrateChart, lblBlockListBlockSizeChart, lblBlockListFeeChart,
                    lblBlockListRewardChart, lblBlockListFeeRangeChart, lblHeaderBlockSizeChart, lblBlockScreenChartBlockSize, lblBlockFeeChart, lblBlockScreenChartReward, lblBlockScreenChartFeeRange, lblPriceChart, lblMarketCapChart, lblChartCirculation, lblUniqueAddressesChart, lblPoolRankingChart, lblBlockFeesChart, lblFeeRangeChart, lblHashrateChart, lblDifficultyChart, lblLightningCapacityChart, lblLightningNodesChart };
                foreach (Control control in DisableThisStuffForTestnet)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.Enabled = false;
                    });
                }
                HideAllFiatConversionFields();
            }
            catch (Exception ex)
            {
                HandleException(ex, "DisableFunctionalityForTestNet");
            }
        }

        private void EnableFunctionalityForMainNet()
        {
            try
            {
                btnMenuCharts.Enabled = true;
                if (RunBlockchainInfoAPI == true && offlineMode == false)
                {
                    EnableChartsThatUseBlockchainInfoAPI();
                }
                Control[] EnableThisStuffForMainnet = { btnMenuLightningDashboard, btnCurrency, btnMenuDCACalculator, btnMenuPriceConverter, lblLightningChannelsChart, lblBlockListDifficultyChart, lblHeaderFeeRatesChart, lblBlockListFeeRangeChart2, lblBlockListHashrateChart, lblBlockListFeeChart2, lblBlockListBlockSizeChart, lblBlockListFeeChart, lblBlockListRewardChart, lblBlockListFeeRangeChart, lblHeaderBlockSizeChart, lblBlockScreenChartBlockSize,
                    lblBlockFeeChart, lblBlockScreenChartReward, lblBlockScreenChartFeeRange, lblPoolRankingChart, lblBlockFeesChart, lblFeeRangeChart, lblHashrateChart, lblDifficultyChart, lblLightningCapacityChart, lblLightningNodesChart };
                foreach (Control control in EnableThisStuffForMainnet)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.Enabled = true;
                    });
                }
                ShowAllFiatConversionFields();
            }
            catch (Exception ex)
            {
                HandleException(ex, "EnableFunctionalityForMainNet");
            }
        }
        #endregion
        #region save chosen startup screen
        private void ComboBoxStartupScreen_OnSelectedIndexChanged(object sender, EventArgs e)
        {
            // Define a dictionary to map indices to their corresponding strings
            Dictionary<int, string> screenMap = new Dictionary<int, string>
            {
                { 0, "blocks----" },
                { 1, "block-----" },
                { 2, "address---" },
                { 3, "addressutx" },
                { 4, "transactio" },
                { 5, "xpub------" },
                { 6, "bitcoindas" },
                { 7, "lightndash" },
                { 8, "bookmarks-" },
                { 9, "directory-" },
                { 10, "chtfeerate" },
                { 11, "chtblkfees" },
                { 12, "chtblkrwrd" },
                { 13, "chtblksize" },
                { 14, "chthashrte" },
                { 15, "chtdffclty" },
                { 16, "chtcirclat" },
                { 17, "chtaddrrss" },
                { 18, "chtutxo---" },
                { 19, "chtplranks" },
                { 20, "chtnetwork" },
                { 21, "chtcntries" },
                { 22, "chtcapcity" },
                { 23, "chtchannls" },
                { 24, "chtprice--" },
                { 25, "chtmrktcap" },
                { 26, "btcconvert" },
                { 27, "dcacalcrtr" },
                { 28, "miningpool" },
                { 29, "poolrankng" }
            };

            if (screenMap.ContainsKey(comboBoxStartupScreen.SelectedIndex))
            {
                startupScreenToSave = screenMap[comboBoxStartupScreen.SelectedIndex];
                SaveSettings();
            }
        }
        #endregion
        #region save settings
        private void SaveSettings()
        {
            try
            {
                if (!preventSavingSettings)
                {
                    if (btnUSD.Enabled == false)
                    {
                        currencySelected = "D";
                    }
                    if (btnGBP.Enabled == false)
                    {
                        currencySelected = "P";
                    }
                    if (btnEUR.Enabled == false)
                    {
                        currencySelected = "E";
                    }
                    if (btnXAU.Enabled == false)
                    {
                        currencySelected = "G";
                    }
                    if (testNet == false && RunMempoolSpaceLightningAPI == true)
                    {
                        selectedNetwork = "M";
                    }
                    if (testNet == true && RunMempoolSpaceLightningAPI == true)
                    {
                        selectedNetwork = "T";
                    }
                    if (testNet == false && RunMempoolSpaceLightningAPI == false)
                    {
                        selectedNetwork = "C";
                    }
                    if (String.Compare(lblOfflineMode.Text, "✔️") == 0)
                    {
                        OfflineModeSelected = "1";
                    }
                    else
                    {
                        OfflineModeSelected = "0";
                    }
                    if (RunMessariAPI)
                    {
                        messariJSONSelected = "1";
                    }
                    else
                    {
                        messariJSONSelected = "0";
                    }
                    if (RunCoinbaseAPI)
                    {
                        coinbaseEnpointsSelected = "1";
                    }
                    else
                    {
                        coinbaseEnpointsSelected = "0";
                    }
                    if (RunBlockchainInfoAPI)
                    {
                        blockchainInfoEndpointsSelected = "1";
                    }
                    else
                    {
                        blockchainInfoEndpointsSelected = "0";
                    }
                    if (enableDirectory)
                    {
                        directoryEnabled = "1";
                    }
                    else
                    {
                        directoryEnabled = "0";
                    }
                    if (String.Compare(lblAlwaysOnTop.Text, "✔️") == 0)
                    {
                        alwaysOnTop = "1";
                    }
                    else
                    {
                        alwaysOnTop = "0";
                    }
                    if (String.Compare(startupScreenToSave, "") == 0)
                    {
                        startupScreenToSave = "blocks----";
                    }
                    if (String.Compare(lblScaleAmount.Text, "smallest") == 0)
                    {
                        UIScaleToBeSavedToSettings = 1;
                    }
                    else
                    {
                        if (String.Compare(lblScaleAmount.Text, "small") == 0)
                        {
                            UIScaleToBeSavedToSettings = 2;
                        }
                        else
                        {
                            if (String.Compare(lblScaleAmount.Text, "normal") == 0)
                            {
                                UIScaleToBeSavedToSettings = 3;
                            }
                            else
                            {
                                if (String.Compare(lblScaleAmount.Text, "big") == 0)
                                {
                                    UIScaleToBeSavedToSettings = 4;
                                }
                                else
                                {
                                    if (String.Compare(lblScaleAmount.Text, "biggest") == 0)
                                    {
                                        UIScaleToBeSavedToSettings = 5;
                                    }
                                    else
                                    {
                                        UIScaleToBeSavedToSettings = 3;
                                    }
                                }
                            }
                        }
                    }
                    if (RunCoingeckoAPI)
                    {
                        coingeckoAPISelected = "1";
                    }
                    else
                    {
                        coingeckoAPISelected = "0";
                    }
                    if (RunMempoolSpacePriceAPI)
                    {
                        mempoolSpacePriceAPISelected = "1";
                    }
                    else
                    {
                        mempoolSpacePriceAPISelected = "0";
                    }

                    var newSettings = new Settings { SettingsCurrencySelected = currencySelected, SettingsSelectedNetwork = selectedNetwork, SettingsMessariJSONSelected = messariJSONSelected, SettingsCoinbaseEnpointsSelected = coinbaseEnpointsSelected, SettingsBlockchainInfoEndpointsSelected = blockchainInfoEndpointsSelected, SettingsOfflineModeSelected = OfflineModeSelected, SettingsDirectoryEnabled = directoryEnabled, SettingsAlwaysOnTop = alwaysOnTop, SettingsDataRefreshPeriod = numericUpDownDashboardRefresh.Value.ToString().PadLeft(4, '0'), SettingsNumberOfConsecutiveUnusedAddresses = numericUpDownMaxNumberOfConsecutiveUnusedAddresses.Value.ToString().PadLeft(2, '0'), SettingsNumberUpDownDerivationPathsToCheck = numberUpDownDerivationPathsToCheck.Value.ToString().PadLeft(3, '0'), SettingsStartupScreen = startupScreenToSave, SettingsUIScale = Convert.ToString(UIScaleToBeSavedToSettings), SettingsCoingeckoAPISelected = coingeckoAPISelected, SettingsMempoolSpacePriceAPISelected = mempoolSpacePriceAPISelected, SettingsNode = ownNode, SettingsDefaultTheme = defaultTheme };
                    WriteSettingsToJsonFile(newSettings);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "SaveSettings");
            }
        }
        #endregion
        #region write settings to json file
        private void WriteSettingsToJsonFile(Settings settings)
        {
            // Serialize the list of settings objects into a JSON string
            string json = JsonConvert.SerializeObject(settings);

            string settingsFileName = "SATSuma_settings.json";
            string appDataDirectory = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
            string applicationDirectory = Path.Combine(appDataDirectory, "SATSuma");
            // Create the application directory if it doesn't exist
            Directory.CreateDirectory(applicationDirectory);
            string settingsFilePath = Path.Combine(applicationDirectory, settingsFileName);
            string filePath = settingsFilePath;

            intSavingSettingsTimeLightLit = 0;
            labelSettingsSaved.Invoke((MethodInvoker)delegate
            {
                labelSettingsSaved.Text = "Saving settings";
            });
            lblSaveSettingsLight.Invoke((MethodInvoker)delegate
            {
                lblSaveSettingsLight.ForeColor = Color.Lime;
            });
            // Write the JSON string to the settings.json file
            File.WriteAllText(filePath, json);
        }
        #endregion

        string fiatSymbol = "$";

        #region restore settings
        private void RestoreSavedSettings()
        {
            try
            {
                //var settings = ReadSettingsFromJsonFile();

                #region determine startup screen (needs to occur before rest of settings screen is restored)
                UpdateLoadingScreenMessage("determining startup screen...", "Restoring preferences...");
                // Define a dictionary to map strings to their corresponding values
                Dictionary<string, string> screenMap = new Dictionary<string, string>
                {
                    { "blocks----", "blocks" },
                    { "block-----", "block" },
                    { "address---", "address - tx's" },
                    { "addressutx", "address - utxo's" },
                    { "transactio", "transaction" },
                    { "xpub------", "xpub" },
                    { "bitcoindas", "bitcoin dashboard" },
                    { "lightndash", "lightning dashboard" },
                    { "bookmarks-", "bookmarks" },
                    { "directory-", "directory" },
                    { "chtfeerate", "chart - fee rates" },
                    { "chtblkfees", "chart - block fees" },
                    { "chtblkrwrd", "chart - block reward" },
                    { "chtblksize", "chart - block size" },
                    { "chthashrte", "chart - hashrate" },
                    { "chtdffclty", "chart - difficulty" },
                    { "chtcirclat", "chart - circulation" },
                    { "chtaddrrss", "chart - addresses" },
                    { "chtutxo---", "chart - UTXO's" },
                    { "chtplranks", "chart - pools ranking" },
                    { "chtnetwork", "chart - ⚡nodes by network" },
                    { "chtcntries", "chart - ⚡nodes by country" },
                    { "chtcapcity", "chart - ⚡nodes by capacity" },
                    { "chtchannls", "chart - ⚡channels" },
                    { "chtprice--", "chart - price" },
                    { "chtmrktcap", "chart - market cap." },
                    { "btcconvert", "btc/fiat converter" },
                    { "dcacalcrtr", "dca calculator" },
                    { "miningpool", "mining pools" },
                    { "poolrankng", "pool rankings" }

                };

                if (screenMap.ContainsKey(SettingsManager.Settings!.SettingsStartupScreen!))
                {
                    startupScreenToSave = SettingsManager.Settings.SettingsStartupScreen!;
                    comboBoxStartupScreen.Invoke((MethodInvoker)delegate
                    {
                        comboBoxStartupScreen.Texts = screenMap[SettingsManager.Settings.SettingsStartupScreen!];
                    });
                }
                #endregion
                #region restore own node url
                // check if there is a node address saved in the file
                textBoxXpubScreenOwnNodeURL.Invoke((MethodInvoker)delegate
                {
                    textBoxXpubScreenOwnNodeURL.Text = SettingsManager.Settings.SettingsNode; // move node url string to the form
                });
                textBoxSettingsOwnNodeURL.Invoke((MethodInvoker)delegate
                {
                    textBoxSettingsOwnNodeURL.Text = SettingsManager.Settings.SettingsNode; // and to the settings screen
                });
                CheckOwnNodeIsOnlineAsync();

                #endregion
                #region restore remainder of settings
                // check if settings are already saved in the file and either restore them or use defaults
                #region restore default fiat currency
                UpdateLoadingScreenMessage("restoring default currency...", "Restoring preferences...");
                if (String.Compare(Convert.ToString(SettingsManager.Settings.SettingsCurrencySelected), "P") == 0)
                {
                    //GBP
                    fiatSymbol = "£";
                    lblCurrencyMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                    {
                        lblCurrencyMenuHighlightedButtonText.Text = "GBP £";
                        lblCurrencyMenuHighlightedButtonText.Location = new Point(btnGBP.Location.X + (int)(10 * UIScale), btnGBP.Location.Y);
                    });
                    ClearCurrencyMenuMarkers();
                    btnGBP.Invoke((MethodInvoker)delegate
                    {
                        btnGBP.BackgroundImage = Resources.marker;
                    });
                    btnGBP.Enabled = false;
                    btnUSD.Enabled = true;
                    btnEUR.Enabled = true;
                    btnXAU.Enabled = true;
                    btnCurrency.Text = "   currency (GBP) ▼";
                }
                if (String.Compare(Convert.ToString(SettingsManager.Settings.SettingsCurrencySelected), "D") == 0)
                {
                    //USD
                    fiatSymbol = "$";
                    lblCurrencyMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                    {
                        lblCurrencyMenuHighlightedButtonText.Text = "USD $";
                        lblCurrencyMenuHighlightedButtonText.Location = new Point(btnUSD.Location.X + (int)(10 * UIScale), btnUSD.Location.Y);
                    });
                    ClearCurrencyMenuMarkers();
                    btnUSD.Invoke((MethodInvoker)delegate
                    {
                        btnUSD.BackgroundImage = Resources.marker;
                    });
                    btnGBP.Enabled = true;
                    btnUSD.Enabled = false;
                    btnEUR.Enabled = true;
                    btnXAU.Enabled = true;
                    btnCurrency.Text = "   currency (USD) ▼";
                }
                if (String.Compare(Convert.ToString(SettingsManager.Settings.SettingsCurrencySelected), "E") == 0)
                {
                    //EUR
                    fiatSymbol = "€";
                    lblCurrencyMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                    {
                        lblCurrencyMenuHighlightedButtonText.Text = "EUR €";
                        lblCurrencyMenuHighlightedButtonText.Location = new Point(btnEUR.Location.X + (int)(10 * UIScale), btnEUR.Location.Y);
                    });
                    ClearCurrencyMenuMarkers();
                    btnEUR.Invoke((MethodInvoker)delegate
                    {
                        btnEUR.BackgroundImage = Resources.marker;
                    });
                    btnGBP.Enabled = true;
                    btnUSD.Enabled = true;
                    btnEUR.Enabled = false;
                    btnXAU.Enabled = true;
                    btnCurrency.Text = "   currency (EUR) ▼";
                }
                if (String.Compare(Convert.ToString(SettingsManager.Settings.SettingsCurrencySelected), "G") == 0)
                {
                    //XAU
                    fiatSymbol = "\U0001fa99";
                    lblCurrencyMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                    {
                        lblCurrencyMenuHighlightedButtonText.Text = "XAU 🪙";
                        lblCurrencyMenuHighlightedButtonText.Location = new Point(btnXAU.Location.X + (int)(10 * UIScale), btnXAU.Location.Y);
                    });
                    ClearCurrencyMenuMarkers();
                    btnXAU.Invoke((MethodInvoker)delegate
                    {
                        btnXAU.BackgroundImage = Resources.marker;
                    });
                    btnGBP.Enabled = true;
                    btnUSD.Enabled = true;
                    btnEUR.Enabled = true;
                    btnXAU.Enabled = false;
                    btnCurrency.Text = "   currency (XAU) ▼";
                }
                #endregion
                #region restore offline mode settings
                UpdateLoadingScreenMessage("restoring offline mode selection...", "Restoring preferences...");
                if (String.Compare(Convert.ToString(SettingsManager.Settings.SettingsOfflineModeSelected), "1") == 0)
                {
                    lblOfflineMode.Invoke((MethodInvoker)delegate
                    {
                        lblOfflineMode.Enabled = true;
                        lblOfflineMode.Text = "✔️";
                        lblOfflineMode.ForeColor = Color.Green;
                    });
                    EnableOfflineModeAsync();
                }
                else
                {
                    offlineMode = false;
                    lblOfflineMode.Invoke((MethodInvoker)delegate
                    {
                        lblOfflineMode.Text = "❌";
                        lblOfflineMode.ForeColor = Color.IndianRed;
                    });
                    DisableOfflineMode();
                    lblMessariJSON.Enabled = true;
                    lblCoinbaseEndpoints.Enabled = true;
                    lblBlockchainInfoEndpoints.Enabled = true;
                    lblCoingeckoComJSON.Enabled = true;
                    lblMempoolSpacePriceAPI.Enabled = true;
                    lblSettingsNodeMainnetSelected.Enabled = true;
                    lblSettingsNodeTestnetSelected.Enabled = true;
                    lblEnableDirectory.Enabled = true;
                    btnMenuHelp.Invoke((MethodInvoker)delegate
                    {
                        btnMenuHelp.Text = "   help";
                        btnMenuHelp.Enabled = true;
                    });
                    btnHelp.Enabled = true;
                }
                #endregion
                #region restore network
                UpdateLoadingScreenMessage("restoring network settings...", "Restoring preferences...");
                if (String.Compare(Convert.ToString(SettingsManager.Settings.SettingsSelectedNetwork), "M") == 0)
                {
                    //mainnet
                    testNet = false;
                    NodeURL = "https://mempool.space/api/";
                    RunMempoolSpaceLightningAPI = true;
                    CreateDataServices();
                    lblSettingsNodeMainnetSelected.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsNodeMainnetSelected.Text = "✔️";
                        lblSettingsNodeMainnetSelected.ForeColor = Color.Green;
                    });
                    lblSettingsNodeTestnetSelected.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsNodeTestnetSelected.Text = "❌";
                        lblSettingsNodeTestnetSelected.ForeColor = Color.IndianRed;
                    });
                    lblSettingsOwnNodeSelected.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsOwnNodeSelected.Text = "❌";
                        lblSettingsOwnNodeSelected.ForeColor = Color.IndianRed;
                    });
                    btnMenuAddressUTXO.Enabled = true;
                }
                if (String.Compare(Convert.ToString(SettingsManager.Settings.SettingsSelectedNetwork), "T") == 0)
                {
                    //testnet
                    testNet = true;
                    NodeURL = "https://mempool.space/testnet/api/";
                    RunMempoolSpaceLightningAPI = true;
                    CreateDataServices();
                    DisableFunctionalityForTestNet();
                    lblSettingsNodeMainnetSelected.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsNodeMainnetSelected.Text = "❌";
                        lblSettingsNodeMainnetSelected.ForeColor = Color.IndianRed;
                    });
                    lblSettingsNodeTestnetSelected.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsNodeTestnetSelected.Text = "✔️";
                        lblSettingsNodeTestnetSelected.ForeColor = Color.Green;
                    });
                    lblSettingsOwnNodeSelected.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsOwnNodeSelected.Text = "❌";
                        lblSettingsOwnNodeSelected.ForeColor = Color.IndianRed;
                    });
                    btnMenuAddressUTXO.Enabled = true;
                }
                if (String.Compare(Convert.ToString(SettingsManager.Settings.SettingsSelectedNetwork), "C") == 0)
                {
                    //custom
                    RunMempoolSpaceLightningAPI = false;
                    NodeURL = textBoxSettingsOwnNodeURL.Text;
                    CreateDataServices();
                    lblSettingsNodeMainnetSelected.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsNodeMainnetSelected.Text = "❌";
                        lblSettingsNodeMainnetSelected.ForeColor = Color.IndianRed;
                    });
                    lblSettingsNodeTestnetSelected.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsNodeTestnetSelected.Text = "❌";
                        lblSettingsNodeTestnetSelected.ForeColor = Color.IndianRed;
                    });
                    lblSettingsOwnNodeSelected.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsOwnNodeSelected.Text = "✔️";
                        lblSettingsOwnNodeSelected.ForeColor = Color.Green;
                    });
                    btnMenuAddressUTXO.Enabled = false;
                }
                #endregion
                #region restore API settings
                UpdateLoadingScreenMessage("restoring API preferences...", "Restoring preferences...");
                if (!offlineMode)
                {
                    if (String.Compare(Convert.ToString(SettingsManager.Settings.SettingsMessariJSONSelected), "1") == 0)
                    {
                        RunMessariAPI = true;
                        lblMessariJSON.Invoke((MethodInvoker)delegate
                        {
                            lblMessariJSON.Text = "✔️";
                            lblMessariJSON.ForeColor = Color.Green;
                        });
                    }
                    else
                    {
                        RunMessariAPI = false;
                        lblMessariJSON.Invoke((MethodInvoker)delegate
                        {
                            lblMessariJSON.Text = "❌";
                            lblMessariJSON.ForeColor = Color.IndianRed;
                        });
                    }
                    if (String.Compare(Convert.ToString(SettingsManager.Settings.SettingsCoinbaseEnpointsSelected), "1") == 0)
                    {
                        RunCoinbaseAPI = true;
                        lblCoinbaseEndpoints.Invoke((MethodInvoker)delegate
                        {
                            lblCoinbaseEndpoints.Text = "✔️";
                            lblCoinbaseEndpoints.ForeColor = Color.Green;
                        });
                    }
                    else
                    {
                        RunCoinbaseAPI = false;
                        lblCoinbaseEndpoints.Invoke((MethodInvoker)delegate
                        {
                            lblCoinbaseEndpoints.Text = "❌";
                            lblCoinbaseEndpoints.ForeColor = Color.IndianRed;
                        });
                    }
                    if (String.Compare(Convert.ToString(SettingsManager.Settings.SettingsBlockchainInfoEndpointsSelected), "1") == 0)
                    {
                        RunBlockchainInfoAPI = true;
                        lblBlockchainInfoEndpoints.Invoke((MethodInvoker)delegate
                        {
                            lblBlockchainInfoEndpoints.Text = "✔️";
                            lblBlockchainInfoEndpoints.ForeColor = Color.Green;
                        });
                    }
                    else
                    {
                        RunBlockchainInfoAPI = false;
                        lblBlockchainInfoEndpoints.Invoke((MethodInvoker)delegate
                        {
                            lblBlockchainInfoEndpoints.Text = "❌";
                            lblBlockchainInfoEndpoints.ForeColor = Color.IndianRed;
                        });
                    }
                    if (String.Compare(Convert.ToString(SettingsManager.Settings.SettingsCoingeckoAPISelected), "1") == 0)
                    {
                        RunCoingeckoAPI = true;
                        lblCoingeckoComJSON.Invoke((MethodInvoker)delegate
                        {
                            lblCoingeckoComJSON.Text = "✔️";
                            lblCoingeckoComJSON.ForeColor = Color.Green;
                        });
                    }
                    else
                    {
                        RunCoingeckoAPI = false;
                        lblCoingeckoComJSON.Invoke((MethodInvoker)delegate
                        {
                            lblCoingeckoComJSON.Text = "❌";
                            lblCoingeckoComJSON.ForeColor = Color.IndianRed;
                        });
                    }
                    if (String.Compare(Convert.ToString(SettingsManager.Settings.SettingsMempoolSpacePriceAPISelected), "1") == 0)
                    {
                        RunMempoolSpacePriceAPI = true;
                        lblMempoolSpacePriceAPI.Invoke((MethodInvoker)delegate
                        {
                            lblMempoolSpacePriceAPI.Text = "✔️";
                            lblMempoolSpacePriceAPI.ForeColor = Color.Green;
                        });
                    }
                    else
                    {
                        RunMempoolSpacePriceAPI = false;
                        lblMempoolSpacePriceAPI.Invoke((MethodInvoker)delegate
                        {
                            lblMempoolSpacePriceAPI.Text = "❌";
                            lblMempoolSpacePriceAPI.ForeColor = Color.IndianRed;
                        });
                    }
                    if (!RunMempoolSpacePriceAPI && !RunCoingeckoAPI && !RunCoinbaseAPI)
                    {
                        HideAllFiatConversionFields();
                        btnMenuPriceConverter.Enabled = false;
                        btnMenuDCACalculator.Enabled = false;
                    }
                    else
                    {
                        ShowAllFiatConversionFields();
                        btnMenuPriceConverter.Enabled = true;
                        btnMenuDCACalculator.Enabled = true;
                    }
                }


                #endregion
                #region restore directory settings
                UpdateLoadingScreenMessage("restoring directory preferences...", "Restoring preferences...");
                if (!offlineMode)
                {
                    if (String.Compare(Convert.ToString(SettingsManager.Settings.SettingsDirectoryEnabled), "1") == 0)
                    {
                        lblEnableDirectory.Invoke((MethodInvoker)delegate
                        {
                            lblEnableDirectory.Text = "✔️";
                            lblEnableDirectory.ForeColor = Color.Green;
                        });
                        enableDirectory = true;
                        LoadAndStyleDirectoryBrowser();
                    }
                    else
                    {
                        lblEnableDirectory.Invoke((MethodInvoker)delegate
                        {
                            lblEnableDirectory.Text = "❌";
                            lblEnableDirectory.ForeColor = Color.IndianRed;
                        });
                        enableDirectory = false;
                        LoadAndStyleDirectoryBrowser();
                    }
                }
                #endregion
                #region restore always on top setting
                UpdateLoadingScreenMessage("restoring 'always on top' setting...", "Restoring preferences...");
                if (String.Compare(Convert.ToString(SettingsManager.Settings.SettingsAlwaysOnTop), "1") == 0)
                {
                    lblAlwaysOnTop.Invoke((MethodInvoker)delegate
                    {
                        lblAlwaysOnTop.Text = "✔️";
                        lblAlwaysOnTop.ForeColor = Color.Green;
                        this.TopMost = true;
                    });
                }
                else
                {
                    lblAlwaysOnTop.Invoke((MethodInvoker)delegate
                    {
                        lblAlwaysOnTop.Text = "❌";
                        lblAlwaysOnTop.ForeColor = Color.IndianRed;
                        this.TopMost = false;
                    });
                }
                #endregion
                numericUpDownDashboardRefresh.Value = Convert.ToInt32(SettingsManager.Settings.SettingsDataRefreshPeriod);
                progressBarRefreshData.Maximum = (int)(numericUpDownDashboardRefresh.Value * 60000);
                numericUpDownMaxNumberOfConsecutiveUnusedAddresses.Value = Convert.ToInt32(SettingsManager.Settings.SettingsNumberOfConsecutiveUnusedAddresses);
                numberUpDownDerivationPathsToCheck.Value = Convert.ToInt32(SettingsManager.Settings.SettingsNumberUpDownDerivationPathsToCheck);
                #endregion
                #region determine default theme
                UpdateLoadingScreenMessage("fetching default theme...", "Restoring preferences...");
                // check if there is a default theme saved in the file
                var themes = ThemesManager.Themes;
                foreach (Theme theme in themes!)
                {
                    if (String.Compare(theme.ThemeName, SettingsManager.Settings.SettingsDefaultTheme) == 0)
                    {
                        if (String.Compare(theme.ThemeName, "Genesis (preset)") == 0)
                        {
                            BtnMenuThemeGenesis.Enabled = false;
                            btnMenuThemeFranklin.Enabled = true;
                            btnMenuThemeSatsuma.Enabled = true;
                            btnMenuThemeSymbol.Enabled = true;
                            btnMenuThemeStackSats.Enabled = true;
                            btnMenuThemeHoneyBadger.Enabled = true;
                            lblThemeMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                            {
                                lblThemeMenuHighlightedButtonText.Text = "genesis";
                                lblThemeMenuHighlightedButtonText.Location = new Point(BtnMenuThemeGenesis.Location.X + (int)(14 * UIScale), BtnMenuThemeGenesis.Location.Y);
                            });
                            ClearThemeMenuMarkers();
                            BtnMenuThemeGenesis.Invoke((MethodInvoker)delegate
                            {
                                BtnMenuThemeGenesis.BackgroundImage = Resources.marker;
                            });
                            btnMenuApplyCustomTheme.Invoke((MethodInvoker)delegate
                            {
                                btnMenuApplyCustomTheme.Text = "apply theme";
                            });
                        }
                        else
                        {
                            if (String.Compare(theme.ThemeName, "Franklin (preset)") == 0)
                            {
                                BtnMenuThemeGenesis.Enabled = true;
                                btnMenuThemeFranklin.Enabled = false;
                                btnMenuThemeSatsuma.Enabled = true;
                                btnMenuThemeSymbol.Enabled = true;
                                btnMenuThemeStackSats.Enabled = true;
                                btnMenuThemeHoneyBadger.Enabled = true;
                                lblThemeMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                                {
                                    lblThemeMenuHighlightedButtonText.Text = "franklin";
                                    lblThemeMenuHighlightedButtonText.Location = new Point(btnMenuThemeFranklin.Location.X + (int)(14 * UIScale), btnMenuThemeFranklin.Location.Y);
                                });
                                ClearThemeMenuMarkers();
                                btnMenuThemeFranklin.Invoke((MethodInvoker)delegate
                                {
                                    btnMenuThemeFranklin.BackgroundImage = Resources.marker;
                                });
                                btnMenuApplyCustomTheme.Invoke((MethodInvoker)delegate
                                {
                                    btnMenuApplyCustomTheme.Text = "apply theme";
                                });
                            }
                            else
                            {
                                if (String.Compare(theme.ThemeName, "Satsuma (preset)") == 0)
                                {
                                    BtnMenuThemeGenesis.Enabled = true;
                                    btnMenuThemeFranklin.Enabled = true;
                                    btnMenuThemeSatsuma.Enabled = false;
                                    btnMenuThemeSymbol.Enabled = true;
                                    btnMenuThemeStackSats.Enabled = true;
                                    btnMenuThemeHoneyBadger.Enabled = true;
                                    lblThemeMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                                    {
                                        lblThemeMenuHighlightedButtonText.Text = "satsuma";
                                        lblThemeMenuHighlightedButtonText.Location = new Point(btnMenuThemeSatsuma.Location.X + (int)(14 * UIScale), btnMenuThemeSatsuma.Location.Y);
                                    });
                                    ClearThemeMenuMarkers();
                                    btnMenuThemeSatsuma.Invoke((MethodInvoker)delegate
                                    {
                                        btnMenuThemeSatsuma.BackgroundImage = Resources.marker;
                                    });
                                    btnMenuApplyCustomTheme.Invoke((MethodInvoker)delegate
                                    {
                                        btnMenuApplyCustomTheme.Text = "apply theme";
                                    });
                                }
                                else
                                {
                                    if (String.Compare(theme.ThemeName, "StackSats (preset)") == 0)
                                    {
                                        BtnMenuThemeGenesis.Enabled = true;
                                        btnMenuThemeFranklin.Enabled = true;
                                        btnMenuThemeSatsuma.Enabled = true;
                                        btnMenuThemeSymbol.Enabled = true;
                                        btnMenuThemeStackSats.Enabled = false;
                                        btnMenuThemeHoneyBadger.Enabled = true;
                                        lblThemeMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                                        {
                                            lblThemeMenuHighlightedButtonText.Text = "stack sats";
                                            lblThemeMenuHighlightedButtonText.Location = new Point(btnMenuThemeStackSats.Location.X + (int)(14 * UIScale), btnMenuThemeStackSats.Location.Y);
                                        });
                                        ClearThemeMenuMarkers();
                                        btnMenuThemeStackSats.Invoke((MethodInvoker)delegate
                                        {
                                            btnMenuThemeStackSats.BackgroundImage = Resources.marker;
                                        });
                                        btnMenuApplyCustomTheme.Invoke((MethodInvoker)delegate
                                        {
                                            btnMenuApplyCustomTheme.Text = "apply theme";
                                        });
                                    }
                                    else
                                    {
                                        if (String.Compare(theme.ThemeName, "HoneyBadger (preset)") == 0)
                                        {
                                            BtnMenuThemeGenesis.Enabled = true;
                                            btnMenuThemeFranklin.Enabled = true;
                                            btnMenuThemeSatsuma.Enabled = true;
                                            btnMenuThemeSymbol.Enabled = true;
                                            btnMenuThemeStackSats.Enabled = true;
                                            btnMenuThemeHoneyBadger.Enabled = false;
                                            lblThemeMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                                            {
                                                lblThemeMenuHighlightedButtonText.Text = "honey badger";
                                                lblThemeMenuHighlightedButtonText.Location = new Point(btnMenuThemeHoneyBadger.Location.X + (int)(14 * UIScale), btnMenuThemeHoneyBadger.Location.Y);
                                            });
                                            ClearThemeMenuMarkers();
                                            btnMenuThemeHoneyBadger.Invoke((MethodInvoker)delegate
                                            {
                                                btnMenuThemeHoneyBadger.BackgroundImage = Resources.marker;
                                            });
                                            btnMenuApplyCustomTheme.Invoke((MethodInvoker)delegate
                                            {
                                                btnMenuApplyCustomTheme.Text = "apply theme";
                                            });
                                        }
                                        else
                                        {
                                            if (String.Compare(theme.ThemeName, "Symbol (preset)") == 0)
                                            {
                                                BtnMenuThemeGenesis.Enabled = true;
                                                btnMenuThemeFranklin.Enabled = true;
                                                btnMenuThemeSatsuma.Enabled = true;
                                                btnMenuThemeSymbol.Enabled = false;
                                                btnMenuThemeStackSats.Enabled = true;
                                                btnMenuThemeHoneyBadger.Enabled = true;
                                                lblThemeMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                                                {
                                                    lblThemeMenuHighlightedButtonText.Text = "symbol";
                                                    lblThemeMenuHighlightedButtonText.Location = new Point(btnMenuThemeSymbol.Location.X + (int)(14 * UIScale), btnMenuThemeSymbol.Location.Y);
                                                });
                                                ClearThemeMenuMarkers();
                                                btnMenuThemeSymbol.Invoke((MethodInvoker)delegate
                                                {
                                                    btnMenuThemeSymbol.BackgroundImage = Resources.marker;
                                                });
                                                btnMenuApplyCustomTheme.Invoke((MethodInvoker)delegate
                                                {
                                                    btnMenuApplyCustomTheme.Text = "apply theme";
                                                });
                                            }
                                            else
                                            {
                                                lblThemeMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                                                {
                                                    lblThemeMenuHighlightedButtonText.Visible = false;
                                                    lblThemeMenuHighlightedButtonText.Text = $"{theme.ThemeName}!";
                                                    lblThemeMenuHighlightedButtonText.Location = new Point(btnMenuApplyCustomTheme.Location.X + (int)(14 * UIScale), btnMenuApplyCustomTheme.Location.Y);
                                                });
                                                ClearThemeMenuMarkers();
                                                btnMenuApplyCustomTheme.Invoke((MethodInvoker)delegate
                                                {
                                                    btnMenuApplyCustomTheme.BackgroundImage = Resources.marker;
                                                });
                                                btnMenuApplyCustomTheme.Invoke((MethodInvoker)delegate
                                                {
                                                    btnMenuApplyCustomTheme.Text = theme.ThemeName;
                                                });
                                                BtnMenuThemeGenesis.Enabled = true;
                                                btnMenuThemeFranklin.Enabled = true;
                                                btnMenuThemeSatsuma.Enabled = true;
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        RestoreTheme(theme);
                        defaultTheme = SettingsManager.Settings.SettingsDefaultTheme!;
                        return;
                    }
                }
                #endregion
            }
            catch (Exception ex)
            {
                HandleException(ex, "RestoreSavedSettings");
            }
        }
        #endregion
        #region UI Scaling

        #region restore UIScale
        private void RestoreUIScale()
        {
            try
            {
                if (SettingsManager.Settings!.SettingsUIScale != null)
                {
                    UIScaleInFile = SettingsManager.Settings.SettingsUIScale;
                }
                else
                {
                    UIScaleInFile = "3";
                }

                UIScaleAlreadySavedInFile = true;
            }
            catch (Exception ex)
            {
                HandleException(ex, "RestoreUIScale");
            }
        }
        #endregion
        private void StoreOriginalDimensions(Control parentControl)
        {
            try
            {
                foreach (Control control in parentControl.Controls)
                {
                    control.Tag = new Size(control.Width, control.Height);

                    // Store the original font size of each control
                    if (control.Font != null)
                    {
                        control.Tag = new Tuple<Size, Font>((Size)control.Tag, control.Font);
                    }

                    // Recursively handle controls within panels
                    if (control.HasChildren)
                    {
                        StoreOriginalDimensions(control);
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "storeOriginalDimensions");
            }
        }

        private void ScaleAllElements()
        {
            BtnScaleApply(this);
        }

        private void BtnScaleApply(Control parentControl)
        {
            try
            {
                // Resize each control within the provided parentControl
                foreach (Control control in parentControl.Controls)
                {
                    Size originalSize = ((Tuple<Size, Font>)control.Tag).Item1;

                    // apply a scaled radius to buttons to keep them fully rounded
                    if (control.GetType() == typeof(RJButton))
                    {
                        RJButton rjButton = (RJButton)control;
                        // Set the borderRadius to a different value for each RJButton
                        rjButton.BorderRadius = (int)(11 * UIScale);
                    }

                    control.Width = (int)(originalSize.Width * UIScale);
                    control.Left = (int)(control.Left * UIScale);
                    control.Top = (int)(control.Top * UIScale);
                    control.Height = (int)(originalSize.Height * UIScale);

                    // Resize font size
                    if (control.Font != null)
                    {
                        Font originalControlFont = ((Tuple<Size, Font>)control.Tag).Item2;
                        float scaledFontSize = (float)(originalControlFont.Size * UIScale);
                        control.Font = new Font(originalControlFont.FontFamily, scaledFontSize - 1, originalControlFont.Style);
                    }

                    // Recursively handle controls within panels
                    if (control.HasChildren)
                    {
                        BtnScaleApply(control);
                    }
                }

                // Trigger layout update for child controls
                parentControl.PerformLayout();
                parentControl.Invalidate();
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnScaleApply");
            }
        }

        private void BtnBiggerScale_Click(object sender, EventArgs e)
        {
            try
            {
                if (String.Compare(lblScaleAmount.Text, "smallest") == 0)
                {
                    lblScaleAmount.Invoke((MethodInvoker)delegate
                    {
                        lblScaleAmount.Text = "small";
                    });
                    UIScaleToBeSavedToSettings = 2;

                    // enable the shrink button
                    btnSmallerScale.Invoke((MethodInvoker)delegate
                    {
                        btnSmallerScale.Enabled = true;
                    });
                    SaveSettings();
                }
                else
                {
                    if (String.Compare(lblScaleAmount.Text, "small") == 0)
                    {
                        lblScaleAmount.Invoke((MethodInvoker)delegate
                        {
                            lblScaleAmount.Text = "normal";
                        });
                        UIScaleToBeSavedToSettings = 3;
                        // enable the shrink button
                        btnSmallerScale.Invoke((MethodInvoker)delegate
                        {
                            btnSmallerScale.Enabled = true;
                        });
                        SaveSettings();
                    }
                    else
                    {
                        if (String.Compare(lblScaleAmount.Text, "normal") == 0)
                        {
                            lblScaleAmount.Invoke((MethodInvoker)delegate
                            {
                                lblScaleAmount.Text = "big";
                            });
                            btnSmallerScale.Invoke((MethodInvoker)delegate
                            {
                                btnSmallerScale.Enabled = true;
                            });
                            UIScaleToBeSavedToSettings = 4;
                            SaveSettings();
                        }
                        else
                        {
                            if (String.Compare(lblScaleAmount.Text, "big") == 0)
                            {
                                lblScaleAmount.Invoke((MethodInvoker)delegate
                                {
                                    lblScaleAmount.Text = "biggest";
                                });
                                UIScaleToBeSavedToSettings = 5;
                                btnSmallerScale.Invoke((MethodInvoker)delegate
                                {
                                    btnSmallerScale.Enabled = true;
                                });
                                // disable the enlarge button
                                btnBiggerScale.Invoke((MethodInvoker)delegate
                                {
                                    btnBiggerScale.Enabled = false;
                                });
                                SaveSettings();
                            }
                            else
                            {
                                return;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnBiggerScale_Click");
            }
        }

        private void BtnSmallerScale_Click(object sender, EventArgs e)
        {
            try
            {
                if (String.Compare(lblScaleAmount.Text, "biggest") == 0)
                {
                    lblScaleAmount.Invoke((MethodInvoker)delegate
                    {
                        lblScaleAmount.Text = "big";
                    });
                    UIScaleToBeSavedToSettings = 4;

                    // enable the enlarge button
                    btnBiggerScale.Invoke((MethodInvoker)delegate
                    {
                        btnBiggerScale.Enabled = true;
                    });
                    SaveSettings();
                }
                else
                {
                    if (String.Compare(lblScaleAmount.Text, "big") == 0)
                    {
                        lblScaleAmount.Invoke((MethodInvoker)delegate
                        {
                            lblScaleAmount.Text = "normal";
                        });
                        UIScaleToBeSavedToSettings = 3;
                        // disable the shrink button
                        btnSmallerScale.Invoke((MethodInvoker)delegate
                        {
                            btnSmallerScale.Enabled = false;
                        });
                        SaveSettings();
                    }
                    else
                    {
                        return;
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnBiggerScale_Click");
            }
        }

        #endregion
        #region reset all settings (restore original json files)
        private void LblConfirmReset_Click(object sender, EventArgs e)
        {
            if (String.Compare(lblConfirmReset.Text, "❌") == 0)
            {
                lblConfirmReset.Invoke((MethodInvoker)delegate
                {
                    lblConfirmReset.ForeColor = Color.Green;
                    lblConfirmReset.Text = "✔️";
                });
                label302.Invoke((MethodInvoker)delegate
                {
                    label302.Text = "Yes, reset anyway. Press to confirm 👉";
                });
                btnResetAll.Enabled = true;
            }
            else
            {
                lblConfirmReset.Invoke((MethodInvoker)delegate
                {
                    lblConfirmReset.ForeColor = Color.IndianRed;
                    lblConfirmReset.Text = "❌";
                });
                label302.Invoke((MethodInvoker)delegate
                {
                    label302.Text = "Yes, reset anyway";
                });
                btnResetAll.Enabled = false;
            }
        }

        private void BtnResetAll_Click(object sender, EventArgs e)
        {
            // files to be checked
            string appDataFolder = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
            string bookmarkFilePath = Path.Combine(appDataFolder, "SATSuma", "SATSuma_bookmarks.json");
            string themeFilePath = Path.Combine(appDataFolder, "SATSuma", "SATSuma_themes.json");
            string settingsFilePath = Path.Combine(appDataFolder, "SATSuma", "SATSuma_settings.json");
            // files to be restored if necessary
            string backupFolder = Path.Combine(Application.StartupPath, "Restore");
            string backupBookmarkFilePath = Path.Combine(backupFolder, "SATSuma_bookmarks.json");
            string backupThemeFilePath = Path.Combine(backupFolder, "SATSuma_themes.json");
            string backupSettingsFilePath = Path.Combine(backupFolder, "SATSuma_settings.json");
            // restore files
            if (File.Exists(bookmarkFilePath))
            {
                File.Delete(bookmarkFilePath);
            }

            if (File.Exists(themeFilePath))
            {
                File.Delete(themeFilePath);
            }

            if (File.Exists(settingsFilePath))
            {
                File.Delete(settingsFilePath);
            }
            // Ensure the directory exists before copying the file
            Directory.CreateDirectory(Path.GetDirectoryName(bookmarkFilePath));
            Directory.CreateDirectory(Path.GetDirectoryName(themeFilePath));
            Directory.CreateDirectory(Path.GetDirectoryName(settingsFilePath));

            File.Copy(backupBookmarkFilePath, bookmarkFilePath, true);
            File.Copy(backupThemeFilePath, themeFilePath, true);
            File.Copy(backupSettingsFilePath, settingsFilePath, true);

            BtnExit_ClickAsync(sender, e);
        }
        #endregion
        #endregion
        //![](resources\tinylogo1.png;;;0.04706,0.04877)
        #region ⚡⚡⚡ CREATE THEME SCREEN
        #region main menu theme switching buttons
        private void BtnThemeMenu_Click(object sender, EventArgs e)
        {
            try
            {
                CloseHelpAboutMenu();
                CloseCurrencyMenu();
                panelThemeMenu.BringToFront();
                btnThemeMenu.BringToFront();
                if (panelThemeMenu.Height == 0)
                {
                    //expand the panel
                    currentHeightExpandingPanel = panelThemeMenu.Height;
                    StartExpandingPanelVert(panelThemeMenu);
                }
                else
                {
                    CloseThemeMenu();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnThemeMenu_Click");
            }
        }

        private void ComboBoxHeaderCustomThemes_OnSelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (!firstTimeCustomThemeIndexChanged)
                {
                    btnMenuApplyCustomTheme.Invoke((MethodInvoker)delegate
                    {
                        btnMenuApplyCustomTheme.Enabled = true;
                        btnMenuApplyCustomTheme.Text = "apply theme";
                        btnMenuApplyCustomTheme.BringToFront();
                    });

                    lblApplyThemeButtonDisabledMask.Invoke((MethodInvoker)delegate
                    {
                        lblApplyThemeButtonDisabledMask.Visible = false;
                    });
                }

                firstTimeCustomThemeIndexChanged = false;
            }
            catch (Exception ex)
            {
                HandleException(ex, "ComboBoxHeaderCustomThemes_OnSelectedIndexChanged");
            }
        }

        private void BtnMenuThemeGenesis_Click(object sender, EventArgs e)
        {
            try
            {
                CloseThemeMenu();
                BtnMenuThemeGenesis.Enabled = false;
                btnMenuThemeFranklin.Enabled = true;
                btnMenuThemeHoneyBadger.Enabled = true;
                btnMenuThemeStackSats.Enabled = true;
                btnMenuThemeSymbol.Enabled = true;
                btnMenuThemeSatsuma.Enabled = true;
                lblApplyThemeButtonDisabledMask.Invoke((MethodInvoker)delegate
                {
                    lblApplyThemeButtonDisabledMask.Visible = true;
                });
                lblThemeMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblThemeMenuHighlightedButtonText.Visible = true;
                    lblThemeMenuHighlightedButtonText.Text = "genesis";
                    lblThemeMenuHighlightedButtonText.Location = new Point(BtnMenuThemeGenesis.Location.X + (int)(14 * UIScale), BtnMenuThemeGenesis.Location.Y);
                });
                ClearThemeMenuMarkers();
                BtnMenuThemeGenesis.Invoke((MethodInvoker)delegate
                {
                    BtnMenuThemeGenesis.BackgroundImage = Resources.marker;
                });
                ResetCustomThemeCombos();
                var themes = ThemesManager.Themes;
                foreach (Theme theme in themes!)
                {
                    if (String.Compare(theme.ThemeName, "Genesis (preset)") == 0)
                    {
                        RestoreThemeWithLoadingScreenAsync(theme);
                        SaveThemeAsDefault(theme.ThemeName!);
                        ReloadScreensWithListviews();
                        intSavingSettingsTimeLightLit = 0;
                        labelSettingsSaved.Invoke((MethodInvoker)delegate
                        {
                            labelSettingsSaved.Text = "Saving settings";
                        });
                        lblSaveSettingsLight.Invoke((MethodInvoker)delegate
                        {
                            lblSaveSettingsLight.ForeColor = Color.Lime;
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnMenuThemeGenesis_Click");
            }
        }

        private void BtnMenuThemeFranklin_Click(object sender, EventArgs e)
        {
            try
            {
                CloseThemeMenu();
                BtnMenuThemeGenesis.Enabled = true;
                btnMenuThemeFranklin.Enabled = false;
                btnMenuThemeSatsuma.Enabled = true;
                btnMenuThemeStackSats.Enabled = true;
                btnMenuThemeSymbol.Enabled = true;
                btnMenuThemeHoneyBadger.Enabled = true;
                lblApplyThemeButtonDisabledMask.Invoke((MethodInvoker)delegate
                {
                    lblApplyThemeButtonDisabledMask.Visible = true;
                });
                lblThemeMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblThemeMenuHighlightedButtonText.Visible = true;
                    lblThemeMenuHighlightedButtonText.Text = "franklin";
                    lblThemeMenuHighlightedButtonText.Location = new Point(btnMenuThemeFranklin.Location.X + (int)(14 * UIScale), btnMenuThemeFranklin.Location.Y);
                });
                ClearThemeMenuMarkers();
                btnMenuThemeFranklin.Invoke((MethodInvoker)delegate
                {
                    btnMenuThemeFranklin.BackgroundImage = Resources.marker;
                });
                ResetCustomThemeCombos();
                var themes = ThemesManager.Themes;
                foreach (Theme theme in themes!)
                {
                    if (String.Compare(theme.ThemeName, "Franklin (preset)") == 0)
                    {
                        RestoreThemeWithLoadingScreenAsync(theme);
                        SaveThemeAsDefault(theme.ThemeName!);
                        ReloadScreensWithListviews();
                        intSavingSettingsTimeLightLit = 0;
                        labelSettingsSaved.Invoke((MethodInvoker)delegate
                        {
                            labelSettingsSaved.Text = "Saving settings";
                        });
                        lblSaveSettingsLight.Invoke((MethodInvoker)delegate
                        {
                            lblSaveSettingsLight.ForeColor = Color.Lime;
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnMenuThemeFranklin_Click");
            }
        }

        private void BtnMenuThemeSatsuma_Click(object sender, EventArgs e)
        {
            try
            {
                CloseThemeMenu();
                BtnMenuThemeGenesis.Enabled = true;
                btnMenuThemeFranklin.Enabled = true;
                btnMenuThemeHoneyBadger.Enabled = true;
                btnMenuThemeStackSats.Enabled = true;
                btnMenuThemeSymbol.Enabled = true;
                btnMenuThemeSatsuma.Enabled = false;
                lblApplyThemeButtonDisabledMask.Invoke((MethodInvoker)delegate
                {
                    lblApplyThemeButtonDisabledMask.Visible = true;
                });
                lblThemeMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblThemeMenuHighlightedButtonText.Visible = true;
                    lblThemeMenuHighlightedButtonText.Text = "satsuma";
                    lblThemeMenuHighlightedButtonText.Location = new Point(btnMenuThemeSatsuma.Location.X + (int)(14 * UIScale), btnMenuThemeSatsuma.Location.Y);
                });
                ClearThemeMenuMarkers();
                btnMenuThemeSatsuma.Invoke((MethodInvoker)delegate
                {
                    btnMenuThemeSatsuma.BackgroundImage = Resources.marker;
                });
                ResetCustomThemeCombos();
                var themes = ThemesManager.Themes;
                foreach (Theme theme in themes!)
                {
                    if (String.Compare(theme.ThemeName, "Satsuma (preset)") == 0)
                    {
                        RestoreThemeWithLoadingScreenAsync(theme);
                        SaveThemeAsDefault(theme.ThemeName!);
                        ReloadScreensWithListviews();
                        intSavingSettingsTimeLightLit = 0;
                        labelSettingsSaved.Invoke((MethodInvoker)delegate
                        {
                            labelSettingsSaved.Text = "Saving settings";
                        });
                        lblSaveSettingsLight.Invoke((MethodInvoker)delegate
                        {
                            lblSaveSettingsLight.ForeColor = Color.Lime;
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnMenuThemeSatsuma_Click");
            }
        }

        private void BtnMenuThemeHoneyBadger_Click(object sender, EventArgs e)
        {
            try
            {
                CloseThemeMenu();
                BtnMenuThemeGenesis.Enabled = true;
                btnMenuThemeFranklin.Enabled = true;
                btnMenuThemeHoneyBadger.Enabled = false;
                btnMenuThemeStackSats.Enabled = true;
                btnMenuThemeSymbol.Enabled = true;
                btnMenuThemeSatsuma.Enabled = true;
                lblApplyThemeButtonDisabledMask.Invoke((MethodInvoker)delegate
                {
                    lblApplyThemeButtonDisabledMask.Visible = true;
                });
                lblThemeMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblThemeMenuHighlightedButtonText.Visible = true;
                    lblThemeMenuHighlightedButtonText.Text = "honey badger";
                    lblThemeMenuHighlightedButtonText.Location = new Point(btnMenuThemeHoneyBadger.Location.X + (int)(14 * UIScale), btnMenuThemeHoneyBadger.Location.Y);
                });
                ClearThemeMenuMarkers();
                btnMenuThemeHoneyBadger.Invoke((MethodInvoker)delegate
                {
                    btnMenuThemeHoneyBadger.BackgroundImage = Resources.marker;
                });
                ResetCustomThemeCombos();
                var themes = ThemesManager.Themes;
                foreach (Theme theme in themes!)
                {
                    if (String.Compare(theme.ThemeName, "HoneyBadger (preset)") == 0)
                    {
                        RestoreThemeWithLoadingScreenAsync(theme);
                        SaveThemeAsDefault(theme.ThemeName!);
                        ReloadScreensWithListviews();
                        intSavingSettingsTimeLightLit = 0;
                        labelSettingsSaved.Invoke((MethodInvoker)delegate
                        {
                            labelSettingsSaved.Text = "Saving settings";
                        });
                        lblSaveSettingsLight.Invoke((MethodInvoker)delegate
                        {
                            lblSaveSettingsLight.ForeColor = Color.Lime;
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuThemeHoneyBadger_Click");
            }
        }

        private void BtnMenuThemeStackSats_Click(object sender, EventArgs e)
        {
            try
            {
                CloseThemeMenu();
                BtnMenuThemeGenesis.Enabled = true;
                btnMenuThemeFranklin.Enabled = true;
                btnMenuThemeHoneyBadger.Enabled = true;
                btnMenuThemeStackSats.Enabled = false;
                btnMenuThemeSymbol.Enabled = true;
                btnMenuThemeSatsuma.Enabled = true;
                lblApplyThemeButtonDisabledMask.Invoke((MethodInvoker)delegate
                {
                    lblApplyThemeButtonDisabledMask.Visible = true;
                });
                lblThemeMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblThemeMenuHighlightedButtonText.Visible = true;
                    lblThemeMenuHighlightedButtonText.Text = "stack sats";
                    lblThemeMenuHighlightedButtonText.Location = new Point(btnMenuThemeStackSats.Location.X + (int)(14 * UIScale), btnMenuThemeStackSats.Location.Y);
                });
                ClearThemeMenuMarkers();
                btnMenuThemeStackSats.Invoke((MethodInvoker)delegate
                {
                    btnMenuThemeStackSats.BackgroundImage = Resources.marker;
                });
                ResetCustomThemeCombos();
                var themes = ThemesManager.Themes;
                foreach (Theme theme in themes!)
                {
                    if (String.Compare(theme.ThemeName, "StackSats (preset)") == 0)
                    {
                        RestoreThemeWithLoadingScreenAsync(theme);
                        SaveThemeAsDefault(theme.ThemeName!);
                        ReloadScreensWithListviews();
                        intSavingSettingsTimeLightLit = 0;
                        labelSettingsSaved.Invoke((MethodInvoker)delegate
                        {
                            labelSettingsSaved.Text = "Saving settings";
                        });
                        lblSaveSettingsLight.Invoke((MethodInvoker)delegate
                        {
                            lblSaveSettingsLight.ForeColor = Color.Lime;
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuThemeStackSats_Click");
            }
        }

        private void BtnMenuThemeSymbol_Click(object sender, EventArgs e)
        {
            try
            {
                CloseThemeMenu();
                BtnMenuThemeGenesis.Enabled = true;
                btnMenuThemeFranklin.Enabled = true;
                btnMenuThemeHoneyBadger.Enabled = true;
                btnMenuThemeStackSats.Enabled = true;
                btnMenuThemeSymbol.Enabled = false;
                btnMenuThemeSatsuma.Enabled = true;
                lblApplyThemeButtonDisabledMask.Invoke((MethodInvoker)delegate
                {
                    lblApplyThemeButtonDisabledMask.Visible = true;
                });
                lblThemeMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblThemeMenuHighlightedButtonText.Visible = true;
                    lblThemeMenuHighlightedButtonText.Text = "symbol";
                    lblThemeMenuHighlightedButtonText.Location = new Point(btnMenuThemeSymbol.Location.X + (int)(14 * UIScale), btnMenuThemeSymbol.Location.Y);
                });
                ClearThemeMenuMarkers();
                btnMenuThemeSymbol.Invoke((MethodInvoker)delegate
                {
                    btnMenuThemeSymbol.BackgroundImage = Resources.marker;
                });
                ResetCustomThemeCombos();
                var themes = ThemesManager.Themes;
                foreach (Theme theme in themes!)
                {
                    if (String.Compare(theme.ThemeName, "Symbol (preset)") == 0)
                    {
                        RestoreThemeWithLoadingScreenAsync(theme);
                        SaveThemeAsDefault(theme.ThemeName!);
                        ReloadScreensWithListviews();
                        intSavingSettingsTimeLightLit = 0;
                        labelSettingsSaved.Invoke((MethodInvoker)delegate
                        {
                            labelSettingsSaved.Text = "Saving settings";
                        });
                        lblSaveSettingsLight.Invoke((MethodInvoker)delegate
                        {
                            lblSaveSettingsLight.ForeColor = Color.Lime;
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuThemeSymbol_Click");
            }
        }

        private void ResetCustomThemeCombos()
        {
            try
            {
                btnMenuApplyCustomTheme.Invoke((MethodInvoker)delegate
                {
                    btnMenuApplyCustomTheme.Text = "apply theme";
                });
                comboBoxHeaderCustomThemes.Invoke((MethodInvoker)delegate
                {
                    comboBoxHeaderCustomThemes.Texts = "   saved themes ▼";
                });
                comboBoxCustomizeScreenThemeList.Invoke((MethodInvoker)delegate
                {
                    comboBoxCustomizeScreenThemeList.Texts = "select theme";
                });
                lblApplyThemeButtonDisabledMask.Visible = true;
                btnMenuApplyCustomTheme.Enabled = false;
            }
            catch (Exception ex)
            {
                HandleException(ex, "ResetCustomThemeCombos");
            }
        }

        private async void BtnAppearance_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                #region display loading screen
                bool wasOnTop = false;
                
                if (!fullScreenLoadingScreenVisible)
                {
                    if (this.TopMost == true)
                    {
                        wasOnTop = true;
                        this.TopMost = false;
                    }

                    // work out the position to place the loading form
                    Point panelScreenLocation = lblNowViewing.PointToScreen(Point.Empty);
                    panelScreenLocation.Y -= (int)(160 * UIScale);
                    panelScreenLocation.X -= (int)(13 * UIScale);

                    loadingScreen = new LoadingScreen(UIScale)
                    {
                        Owner = this,
                        StartPosition = FormStartPosition.Manual, // Set the start position manually
                        FormBorderStyle = FormBorderStyle.None,
                        BackColor = panel84.BackColor, // Set the background color to match panel colours
                        Opacity = 1, // Set the opacity to 100%
                        LabelColor = label77.ForeColor,
                        Location = panelScreenLocation // Set the location of the loadingScreen form
                    };
                    loadingScreen.Show(this);
                    partialLoadingScreenVisible = true;
                    await BriefPauseAsync(100).ConfigureAwait(true);
                }
                #endregion
                UpdateLoadingScreenMessage("please wait...", "Preparing theme creator...");
                CloseThemeMenu();
                
                SuspendLayout();
                await HideAllScreensAsync().ConfigureAwait(true);
                btnMenuCreateTheme.Invoke((MethodInvoker)delegate
                {
                    btnMenuCreateTheme.BackgroundImage = Resources.marker;
                });
                panelAppearance.Invoke((MethodInvoker)delegate
                {
                    panelAppearance.Visible = true;
                });
                lblMenuArrow.Visible = false;

                lblMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblMenuHighlightedButtonText.Visible = false;
                });
                EnableAllMenuButtons();
                btnMenuCreateTheme.Enabled = false;
                ResumeLayout(false);
                ToggleLoadingAnimation("enable");
                SuspendLayout();


                Control[] controlsToRefresh = { panelAppearance, panel88, panel89, panel90, panel86, panel87, panel103, panel46, panel51, panel96, panel70, panel71, panel91 };
                foreach (Control control in controlsToRefresh)
                {
                    if (control.InvokeRequired)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.Refresh();
                        });
                    }
                    else
                    {
                        control.Refresh();
                    }
                }

                #region close loading screen
                //wait a moment to give time for screen to paint
                await BriefPauseAsync(700).ConfigureAwait(true);
                //close the loading screen
                partialLoadingScreenVisible = false;
                loadingScreen!.Close();
                #endregion
                if (wasOnTop)
                {
                    this.TopMost = true;
                }
                ResumeLayout(false);
                ToggleLoadingAnimation("disable");
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnAppearance_Click");
            }
        }

        private void BtnMenuApplyCustomTheme_Click(object sender, EventArgs e)
        {
            try
            {
                if (String.Compare(comboBoxHeaderCustomThemes.Texts, "   saved themes ▼") != 0)
                {

                    CloseThemeMenu();
                    var themes = ThemesManager.Themes;
                    foreach (Theme theme in themes!)
                    {
                        if (String.Compare(theme.ThemeName, comboBoxHeaderCustomThemes.Texts.TrimStart()) == 0) // the theme names are displayed with 3 leading spaces in the combobox so trim them out for the compare
                        {
                            BtnMenuThemeGenesis.Enabled = true;
                            btnMenuThemeFranklin.Enabled = true;
                            btnMenuThemeSatsuma.Enabled = true;
                            btnMenuThemeSymbol.Enabled = true;
                            btnMenuThemeStackSats.Enabled = true;
                            btnMenuThemeHoneyBadger.Enabled = true;
                            btnMenuApplyCustomTheme.Enabled = false;
                            lblThemeMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                            {
                                lblThemeMenuHighlightedButtonText.Text = theme.ThemeName;
                                lblThemeMenuHighlightedButtonText.Location = new Point(btnMenuApplyCustomTheme.Location.X + (int)(14 * UIScale), btnMenuApplyCustomTheme.Location.Y);
                            });
                            ClearThemeMenuMarkers();
                            btnMenuApplyCustomTheme.Invoke((MethodInvoker)delegate
                            {
                                btnMenuApplyCustomTheme.BackgroundImage = Resources.marker;
                            });
                            btnMenuApplyCustomTheme.Invoke((MethodInvoker)delegate
                            {
                                btnMenuApplyCustomTheme.Text = theme.ThemeName;
                            });
                            comboBoxHeaderCustomThemes.Invoke((MethodInvoker)delegate
                            {
                                comboBoxHeaderCustomThemes.Texts = "   saved themes ▼";
                                comboBoxHeaderCustomThemes.BringToFront();
                            });
                            comboBoxCustomizeScreenThemeList.Invoke((MethodInvoker)delegate
                            {
                                comboBoxCustomizeScreenThemeList.Texts = "select theme";
                            });
                            RestoreThemeWithLoadingScreenAsync(theme);
                            SaveThemeAsDefault(theme.ThemeName!);
                            ReloadScreensWithListviews();
                            intSavingSettingsTimeLightLit = 0;
                            labelSettingsSaved.Invoke((MethodInvoker)delegate
                            {
                                labelSettingsSaved.Text = "Saving settings";
                            });
                            lblSaveSettingsLight.Invoke((MethodInvoker)delegate
                            {
                                lblSaveSettingsLight.ForeColor = Color.Lime;
                            });
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnLoadTheme_Click");
            }
        }

        #endregion
        #region select colours
        private void BtnColorDataFields_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForDataFields = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = label154.ForeColor
                };

                if (colorDlgForDataFields.ShowDialog() == DialogResult.OK)
                {
                    ColorDataFields(colorDlgForDataFields.Color);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnColorDataFields_Click");
            }
        }

        private void BtnColorLabels_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForLabels = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = label73.ForeColor
                };

                if (colorDlgForLabels.ShowDialog() == DialogResult.OK)
                {
                    ColorLabels(colorDlgForLabels.Color);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnColorLabels_Click");
            }
        }

        private void BtnColorFiatConversionText_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForFiatConversions = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = label288.ForeColor
                };

                if (colorDlgForFiatConversions.ShowDialog() == DialogResult.OK)
                {
                    ColorFiatConversionText(colorDlgForFiatConversions.Color);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnColorFiatConversionText_Click");
            }
        }

        private void BtnColorPanels_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForPanels = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = panel73.BackColor
                };

                if (colorDlgForPanels.ShowDialog() == DialogResult.OK)
                {
                    ColorPanels(colorDlgForPanels.Color);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnColorPanels_Click");
            }
        }

        private void BtnColorHeadings_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForHeadings = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = label156.ForeColor
                };

                if (colorDlgForHeadings.ShowDialog() == DialogResult.OK)
                {
                    ColorHeadings(colorDlgForHeadings.Color);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnColorHeadings_Click");
            }
        }

        private void BtnColorProgressBars_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForProgressBars = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = colorProgressBar1.BarColor
                };

                if (colorDlgForProgressBars.ShowDialog() == DialogResult.OK)
                {
                    ColorProgressBars(colorDlgForProgressBars.Color);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnColorProgressBars_Click");
            }
        }

        private void BtnColorButtons_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForButtons = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = button1.BackColor
                };

                if (colorDlgForButtons.ShowDialog() == DialogResult.OK)
                {
                    ColorButtons(colorDlgForButtons.Color);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnColorButtons_Click");
            }
        }

        private void BtnColorButtonText_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForButtonText = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = button1.ForeColor
                };

                if (colorDlgForButtonText.ShowDialog() == DialogResult.OK)
                {
                    ColorButtonText(colorDlgForButtonText.Color);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnColorButtonText_Click");
            }
        }

        private void BtnColorLines_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForLines = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = panel61.BackColor
                };

                if (colorDlgForLines.ShowDialog() == DialogResult.OK)
                {
                    ColorLines(colorDlgForLines.Color);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnColorLines_Click");
            }
        }

        private void BtnColorTableText_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForTableText = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = label170.ForeColor
                };

                if (colorDlgForTableText.ShowDialog() == DialogResult.OK)
                {
                    ColorTables(colorDlgForTableText.Color);
                    // reload the listviews to apply the new color
                    LookupBlockListAsync();
                    LookupBlockAsync();
                    SetupBookmarksScreen();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnColorTableText_Click");
            }
        }

        private void BtnColorOtherText_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForOtherText = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = label173.ForeColor
                };

                if (colorDlgForOtherText.ShowDialog() == DialogResult.OK)
                {
                    ColorOtherText(colorDlgForOtherText.Color);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnColorOtherText_Click");
            }
        }

        private void BtnColorTextBox_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForTextBoxes = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = textBox1.BackColor
                };

                if (colorDlgForTextBoxes.ShowDialog() == DialogResult.OK)
                {
                    ColorTextBoxes(colorDlgForTextBoxes.Color);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnColorTextBox_Click");
            }
        }

        private void BtnColorPriceBlock_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForPriceBlock = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = label175.ForeColor
                };

                if (colorDlgForPriceBlock.ShowDialog() == DialogResult.OK)
                {
                    ColorPriceBlock(colorDlgForPriceBlock.Color);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnColorPriceBlock_Click");
            }
        }

        private void BtnColorStatusError_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForStatusError = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = label176.ForeColor
                };

                if (colorDlgForStatusError.ShowDialog() == DialogResult.OK)
                {
                    ColorStatusError(colorDlgForStatusError.Color);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnColorStatusError_Click");
            }
        }

        private void BtnColorTableBackground_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForTableBackgrounds = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = panel66.BackColor
                };

                if (colorDlgForTableBackgrounds.ShowDialog() == DialogResult.OK)
                {
                    ColorTableBackgrounds(colorDlgForTableBackgrounds.Color);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnColorTableBackground_Click");
            }
        }

        private void BtnColorTableTitleBar_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForlistViewTitleBarBG = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = panel67.BackColor
                };

                if (colorDlgForlistViewTitleBarBG.ShowDialog() == DialogResult.OK)
                {
                    ColorTableTitleBars(colorDlgForlistViewTitleBarBG.Color);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnColorTableTitleBar_Click");
            }
        }

        private void BtnListViewHeadingColor_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForTableHeadings = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = label190.ForeColor
                };

                if (colorDlgForTableHeadings.ShowDialog() == DialogResult.OK)
                {
                    ColorTableHeadings(colorDlgForTableHeadings.Color);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnListViewHeadingColor_Click");
            }
        }

        #endregion
        #region style progress bars
        private void StyleProgressBars_Click(object sender, EventArgs e)
        {
            try
            {
                if (String.Compare(lblSolidProgressBars.Text, "❌") == 0)
                {
                    lblSolidProgressBars.Invoke((MethodInvoker)delegate
                    {
                        lblSolidProgressBars.ForeColor = Color.Green;
                        lblSolidProgressBars.Text = "✔️";
                    });
                    lblDashedProgressBars.Invoke((MethodInvoker)delegate
                    {
                        lblDashedProgressBars.ForeColor = Color.IndianRed;
                        lblDashedProgressBars.Text = "❌";
                    });
                    StyleProgressBars("solid");
                }
                else
                {
                    lblDashedProgressBars.Invoke((MethodInvoker)delegate
                    {
                        lblDashedProgressBars.ForeColor = Color.Green;
                        lblDashedProgressBars.Text = "✔️";
                    });
                    lblSolidProgressBars.Invoke((MethodInvoker)delegate
                    {
                        lblSolidProgressBars.ForeColor = Color.IndianRed;
                        lblSolidProgressBars.Text = "❌";
                    });
                    StyleProgressBars("dashed");
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "lblChartsLightBackground_Click");
            }
        }
        #endregion
        #region enable/disable realtime clock in genesis background
        private void LblShowClock_Click(object sender, EventArgs e)
        {
            try
            {
                if (String.Compare(lblShowClock.Text, "✔️") == 0)
                {
                    lblShowClock.Invoke((MethodInvoker)delegate
                    {
                        lblShowClock.ForeColor = Color.IndianRed;
                        lblShowClock.Text = "❌";
                    });
                    lblTime.Visible = false;
                }
                else
                {
                    lblShowClock.Invoke((MethodInvoker)delegate
                    {
                        lblShowClock.ForeColor = Color.Green;
                        lblShowClock.Text = "✔️";
                    });
                    if (lblBackgroundGenesisSelected.Visible == true)
                    {
                        lblTime.Font = new Font(lblTime.Font.FontFamily, (int)(14 * UIScale), lblTime.Font.Style);
                        lblTime.Location = new Point((int)(840 * UIScale), (int)(44 * UIScale));
                        lblTime.Visible = true;
                        lblTime.BringToFront();
                    }
                    else
                    {
                        lblTime.Visible = false;
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "LblShowClock_Click");
            }
        }
        #endregion
        #region preview loading animations
        private void BtnPreviewAnimations_Click(object sender, EventArgs e)
        {
            try
            {
                if (pictureBox2.Enabled == false)
                {
                    btnPreviewAnimations.Text = "⏸️";
                    pictureBox4.Enabled = true;
                    pictureBox2.Enabled = true;
                    pictureBox3.Enabled = true;
                }
                else
                {
                    btnPreviewAnimations.Text = "▶️";
                    pictureBox4.Enabled = false;
                    pictureBox2.Enabled = false;
                    pictureBox3.Enabled = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnPreviewAnimations_Click");
            }
        }
        #endregion
        #region select loading animation
        private void LabelInfinity1_Click(object sender, EventArgs e)
        {
            try
            {
                if (String.Compare(lblInfinity1.Text, "❌") == 0)
                {
                    lblInfinity1.Invoke((MethodInvoker)delegate
                    {
                        lblInfinity1.ForeColor = Color.Green;
                        lblInfinity1.Text = "✔️";
                    });
                    lblInfinity2.Invoke((MethodInvoker)delegate
                    {
                        lblInfinity2.ForeColor = Color.IndianRed;
                        lblInfinity2.Text = "❌";
                    });
                    lblInfinity3.Invoke((MethodInvoker)delegate
                    {
                        lblInfinity3.ForeColor = Color.IndianRed;
                        lblInfinity3.Text = "❌";
                    });
                    pictureBoxChartLoadingAnimation.Invoke((MethodInvoker)delegate
                    {
                        pictureBoxChartLoadingAnimation.Image = Properties.Resources.InfinityTrans;
                    });
                    pictureBoxDCAChartLoadingAnimation.Invoke((MethodInvoker)delegate
                    {
                        pictureBoxDCAChartLoadingAnimation.Image = Properties.Resources.InfinityTrans;
                    });
                }
            }

            catch (Exception ex)
            {
                HandleException(ex, "lblInfinity1_Click");
            }
        }

        private void LblInfinity2_Click(object sender, EventArgs e)
        {
            try
            {
                if (String.Compare(lblInfinity2.Text, "❌") == 0)
                {
                    lblInfinity2.Invoke((MethodInvoker)delegate
                    {
                        lblInfinity2.ForeColor = Color.Green;
                        lblInfinity2.Text = "✔️";
                    });
                    lblInfinity1.Invoke((MethodInvoker)delegate
                    {
                        lblInfinity1.ForeColor = Color.IndianRed;
                        lblInfinity1.Text = "❌";
                    });
                    lblInfinity3.Invoke((MethodInvoker)delegate
                    {
                        lblInfinity3.ForeColor = Color.IndianRed;
                        lblInfinity3.Text = "❌";
                    });
                    pictureBoxChartLoadingAnimation.Invoke((MethodInvoker)delegate
                    {
                        pictureBoxChartLoadingAnimation.Image = Properties.Resources.OrangeInfinity;
                    });
                    pictureBoxDCAChartLoadingAnimation.Invoke((MethodInvoker)delegate
                    {
                        pictureBoxDCAChartLoadingAnimation.Image = Properties.Resources.OrangeInfinity;
                    });
                }
            }

            catch (Exception ex)
            {
                HandleException(ex, "lblInfinity2_Click");
            }
        }

        private void LblInfinity3_Click(object sender, EventArgs e)
        {
            try
            {
                if (String.Compare(lblInfinity3.Text, "❌") == 0)
                {
                    lblInfinity3.Invoke((MethodInvoker)delegate
                    {
                        lblInfinity3.ForeColor = Color.Green;
                        lblInfinity3.Text = "✔️";
                    });
                    lblInfinity1.Invoke((MethodInvoker)delegate
                    {
                        lblInfinity1.ForeColor = Color.IndianRed;
                        lblInfinity1.Text = "❌";
                    });
                    lblInfinity2.Invoke((MethodInvoker)delegate
                    {
                        lblInfinity2.ForeColor = Color.IndianRed;
                        lblInfinity2.Text = "❌";
                    });
                    pictureBoxChartLoadingAnimation.Invoke((MethodInvoker)delegate
                    {
                        pictureBoxChartLoadingAnimation.Image = Properties.Resources.infinityspectrum;
                    });
                    pictureBoxDCAChartLoadingAnimation.Invoke((MethodInvoker)delegate
                    {
                        pictureBoxDCAChartLoadingAnimation.Image = Properties.Resources.infinityspectrum;
                    });
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "lblInfinity3_Click");
            }
        }
        #endregion
        #region select border radius

        private void BtnSquareCorners_Click(object sender, EventArgs e)
        {
            try
            {
                panelErrorMessage.Invoke((MethodInvoker)delegate
                {
                    panelErrorMessage.Width = 0;
                });
                btnSquareCorners.Enabled = false;
                btnPartialCorners.Enabled = true;
                btnRoundCorners.Enabled = true;
                SetButtonAndPanelRadius(1);
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnSquareCorners_Click");
            }
        }

        private void BtnPartialCorners_Click(object sender, EventArgs e)
        {
            try
            {
                panelErrorMessage.Invoke((MethodInvoker)delegate
                {
                    panelErrorMessage.Width = 0;
                });
                btnSquareCorners.Enabled = true;
                btnPartialCorners.Enabled = false;
                btnRoundCorners.Enabled = true;
                SetButtonAndPanelRadius(6);
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnPartialCorners_Click");
            }
        }

        private void BtnRoundCorners_Click(object sender, EventArgs e)
        {
            try
            {
                panelErrorMessage.Invoke((MethodInvoker)delegate
                {
                    panelErrorMessage.Width = 0;
                });
                btnSquareCorners.Enabled = true;
                btnPartialCorners.Enabled = true;
                btnRoundCorners.Enabled = false;
                SetButtonAndPanelRadius(12);
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnRoundCorners_Click");
            }
        }
        #endregion
        #region charts background colour
        private void LblChartsLightBackground_Click(object sender, EventArgs e)
        {
            try
            {
                if (String.Compare(lblChartsLightBackground.Text, "❌") == 0)
                {
                    lblChartsLightBackground.Invoke((MethodInvoker)delegate
                    {
                        lblChartsLightBackground.ForeColor = Color.Green;
                        lblChartsLightBackground.Text = "✔️";
                    });
                    lblChartsMediumBackground.Invoke((MethodInvoker)delegate
                    {
                        lblChartsMediumBackground.ForeColor = Color.IndianRed;
                        lblChartsMediumBackground.Text = "❌";
                    });
                    lblChartsDarkBackground.Invoke((MethodInvoker)delegate
                    {
                        lblChartsDarkBackground.ForeColor = Color.IndianRed;
                        lblChartsDarkBackground.Text = "❌";
                    });
                    chartsBackgroundColor = Color.FromArgb(244, 244, 244);
                    panelLoadingAnimationContainer.Invoke((MethodInvoker)delegate
                    {
                        panelLoadingAnimationContainer.BackColor = Color.FromArgb(244, 244, 244);
                    });
                    pictureBoxLoadingAnimation.Invoke((MethodInvoker)delegate
                    {
                        pictureBoxLoadingAnimation.Image = Properties.Resources.SatsumaAnimatedWhite;
                    });
                    CustomiseCharts(lblHeaderPrice.ForeColor);

                    ColorMenuAndHeaderButtonsAsync();
                }
                else
                {
                    return;
                }
            }

            catch (Exception ex)
            {
                HandleException(ex, "lblChartsLightBackground_Click");
            }
        }

        private void LblChartsMediumBackground_Click(object sender, EventArgs e)
        {
            try
            {
                if (String.Compare(lblChartsMediumBackground.Text, "❌") == 0)
                {
                    lblChartsMediumBackground.Invoke((MethodInvoker)delegate
                    {
                        lblChartsMediumBackground.ForeColor = Color.Green;
                        lblChartsMediumBackground.Text = "✔️";
                    });
                    lblChartsLightBackground.Invoke((MethodInvoker)delegate
                    {
                        lblChartsLightBackground.ForeColor = Color.IndianRed;
                        lblChartsLightBackground.Text = "❌";
                    });
                    lblChartsDarkBackground.Invoke((MethodInvoker)delegate
                    {
                        lblChartsDarkBackground.ForeColor = Color.IndianRed;
                        lblChartsDarkBackground.Text = "❌";
                    });
                    chartsBackgroundColor = Color.FromArgb(40, 40, 40);
                    panelLoadingAnimationContainer.Invoke((MethodInvoker)delegate
                    {
                        panelLoadingAnimationContainer.BackColor = Color.FromArgb(40, 40, 40);
                    });
                    pictureBoxLoadingAnimation.Invoke((MethodInvoker)delegate
                    {
                        pictureBoxLoadingAnimation.Image = Properties.Resources.SatsumaAnimated;
                    });
                    CustomiseCharts(lblHeaderPrice.ForeColor);

                    ColorMenuAndHeaderButtonsAsync();
                }
                else
                {
                    return;
                }

            }

            catch (Exception ex)
            {
                HandleException(ex, "lblChartsMediumBackground_Click");
            }
        }

        private void LblChartsDarkBackground_Click(object sender, EventArgs e)
        {
            try
            {
                if (String.Compare(lblChartsDarkBackground.Text, "❌") == 0)
                {
                    lblChartsDarkBackground.Invoke((MethodInvoker)delegate
                    {
                        lblChartsDarkBackground.ForeColor = Color.Green;
                        lblChartsDarkBackground.Text = "✔️";
                    });
                    lblChartsLightBackground.Invoke((MethodInvoker)delegate
                    {
                        lblChartsLightBackground.ForeColor = Color.IndianRed;
                        lblChartsLightBackground.Text = "❌";
                    });
                    lblChartsMediumBackground.Invoke((MethodInvoker)delegate
                    {
                        lblChartsMediumBackground.ForeColor = Color.IndianRed;
                        lblChartsMediumBackground.Text = "❌";
                    });
                    chartsBackgroundColor = Color.FromArgb(20, 20, 20);
                    panelLoadingAnimationContainer.Invoke((MethodInvoker)delegate
                    {
                        panelLoadingAnimationContainer.BackColor = Color.FromArgb(20, 20, 20);
                    });
                    pictureBoxLoadingAnimation.Invoke((MethodInvoker)delegate
                    {
                        pictureBoxLoadingAnimation.Image = Properties.Resources.SatsumaAnimated;
                    });
                    CustomiseCharts(lblHeaderPrice.ForeColor);
                    ColorMenuAndHeaderButtonsAsync();
                }
                else
                {
                    return;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "lblChartsDarkBackground_Click");
            }
        }

        private async void ColorMenuAndHeaderButtonsAsync()
        {
            try
            {
                #region display loading screen
                bool wasOnTop = false;
                if (this.TopMost == true)
                {
                    wasOnTop = true;
                    this.TopMost = false;
                }
                // display semi-transparent overlay form
                Form loadingTheme = new FullSizeLoadingScreen(UIScale)
                {
                    Owner = this,
                    StartPosition = FormStartPosition.CenterParent,
                    FormBorderStyle = FormBorderStyle.None,
                    BackColor = panel84.BackColor, // Set the background color to match panel colours
                    Opacity = 1,
                };
                loadingTheme.StartPosition = FormStartPosition.CenterParent;

                // Calculate the overlay form's location to place it in the center of the parent form
                loadingTheme.StartPosition = FormStartPosition.Manual;
                int parentCenterX = this.Location.X + this.Width / 2;
                int parentCenterY = this.Location.Y + this.Height / 2;
                int overlayX = parentCenterX - loadingTheme.Width / 2;
                int overlayY = parentCenterY - loadingTheme.Height / 2;
                loadingTheme.Location = new Point(overlayX, overlayY);
                loadingTheme.Show(this);
                #endregion

                Color menuAndHeaderButtonsColour;
                if (chartsBackgroundColor == Color.FromArgb(20, 20, 20) || chartsBackgroundColor == Color.FromArgb(40, 40, 40))
                {
                    menuAndHeaderButtonsColour = Color.FromArgb(20, 20, 20);
                }
                else
                {
                    menuAndHeaderButtonsColour = Color.FromArgb(244, 244, 244);
                }

                Control[] listHeaderButtonsToColor = { btnAnimation, btnAddToBookmarks, btnHelp, btnMinimise, btnShowGlobalSearch, btnMoveWindow, btnExit, btnMenuCreateTheme, btnMenuThemeFranklin, btnMenuThemeSatsuma, btnMenuThemeHoneyBadger, btnMenuThemeStackSats, btnMenuThemeSymbol, BtnMenuThemeGenesis, btnUSD, btnEUR, btnGBP, btnXAU, btnHideErrorMessage, btnCopyErrorMessage };
                foreach (Control control in listHeaderButtonsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = menuAndHeaderButtonsColour;
                    });
                }
                lblCurrencyMenuHighlightedButtonText.BackColor = menuAndHeaderButtonsColour;
                lblThemeMenuHighlightedButtonText.BackColor = menuAndHeaderButtonsColour;
                lblApplyThemeButtonDisabledMask.BackColor = menuAndHeaderButtonsColour;
                comboBoxHeaderCustomThemes.BackColor = menuAndHeaderButtonsColour;
                comboBoxHeaderCustomThemes.ListBackColor = menuAndHeaderButtonsColour;
                btnMenuApplyCustomTheme.BackColor = menuAndHeaderButtonsColour;
                btnMenuSplash.FlatAppearance.BorderColor = menuAndHeaderButtonsColour;
                btnMenuHelp.FlatAppearance.BorderColor = menuAndHeaderButtonsColour;

                Control[] listHeaderButtonTextToColor = { btnCurrency, btnAddToBookmarks, btnHelp, btnMinimise, btnShowGlobalSearch, btnMoveWindow, btnExit, btnCommitToBookmarks, btnCancelAddToBookmarks, btnMenuAddress, btnMenuCreateTheme, btnMenuBitcoinDashboard, btnMenuBlock, btnMenuBlockList, btnMenuDirectory, btnMenuBookmarks, btnMenuCharts, btnMenuHelp, btnMenuLightningDashboard, btnMenuSettings, btnMenuSplash, btnMenuTransaction, btnMenuXpub, btnThemeMenu, btnMenuDCACalculator, btnMenuThemeFranklin, btnMenuThemeSatsuma, BtnMenuThemeGenesis, btnMenuThemeStackSats, btnMenuThemeSymbol, btnMenuThemeHoneyBadger, btnUSD, btnEUR, btnGBP, btnXAU, btnHideErrorMessage, btnCopyErrorMessage, btnMenuMiningPools, btnMenuPoolsByBlocks };
                if (String.Compare(lblChartsDarkBackground.Text, "✔️") == 0 || String.Compare(lblChartsMediumBackground.Text, "✔️") == 0)
                {
                    //header

                    foreach (Control control in listHeaderButtonTextToColor)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.ForeColor = Color.Silver;
                        });
                    }
                    comboBoxHeaderCustomThemes.ForeColor = Color.Silver;
                    comboBoxHeaderCustomThemes.ListTextColor = Color.Silver;
                    btnMenuApplyCustomTheme.ForeColor = Color.Silver;
                    lblCurrencyMenuHighlightedButtonText.ForeColor = Color.DimGray;
                    lblMenuHighlightedButtonText.ForeColor = Color.DimGray;
                    lblThemeMenuHighlightedButtonText.ForeColor = Color.DimGray;
                    lblApplyThemeButtonDisabledMask.ForeColor = Color.DimGray;
                }
                else
                {
                    //header
                    foreach (Control control in listHeaderButtonTextToColor)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.ForeColor = Color.DimGray;
                        });
                    }
                    comboBoxHeaderCustomThemes.ForeColor = Color.DimGray;
                    comboBoxHeaderCustomThemes.ListTextColor = Color.DimGray;
                    btnMenuApplyCustomTheme.ForeColor = Color.DimGray;
                    lblCurrencyMenuHighlightedButtonText.ForeColor = Color.Silver;
                    lblMenuHighlightedButtonText.ForeColor = Color.Silver;
                    lblThemeMenuHighlightedButtonText.ForeColor = Color.Silver;
                    lblApplyThemeButtonDisabledMask.ForeColor = Color.Silver;
                }

                //wait 2 secs 
                await Wait2SecsAsync().ConfigureAwait(true);
                //close the loading screen
                loadingTheme.Close();
                if (wasOnTop)
                {
                    this.TopMost = true;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorMenuAndHeaderButtonsAsync");
            }
        }
        #endregion
        #region select opacity
        private void NumericUpDownOpacity_ValueChanged(object sender, EventArgs e)
        {
            try
            {
                this.Opacity = Convert.ToDouble(numericUpDownOpacity.Value / 100);
            }
            catch (Exception ex)
            {
                HandleException(ex, "NumericUpDownOpacity_ValueChanged");
            }
        }

        private void BtnOpacityUp_Click(object sender, EventArgs e)
        {
            try
            {
                if (numericUpDownOpacity.Value < 100)
                {
                    numericUpDownOpacity.Value++;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnOpacityUp_Click");
            }
        }

        private void BtnOpacityDown_Click(object sender, EventArgs e)
        {
            try
            {
                if (numericUpDownOpacity.Value > 10)
                {
                    numericUpDownOpacity.Value--;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnOpacityDown_Click");
            }
        }

        private void BtnOpacityUp_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isOpacityUpHeldDown = true;
                timerNumUpDownContinuous.Enabled = true;
                timerNumUpDownContinuous.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnOpacityUp_MouseDown");
            }
        }

        private void BtnOpacityUp_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isOpacityUpHeldDown = false;
                timerNumUpDownContinuous.Stop();
                timerNumUpDownContinuous.Enabled = false;
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnOpacityUp_MouseUp");
            }
        }

        private void BtnOpacityDown_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isOpacityDownHeldDown = true;
                timerNumUpDownContinuous.Enabled = true;
                timerNumUpDownContinuous.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnOpacityDown_MouseDown");
            }
        }

        private void BtnOpacityDown_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isOpacityDownHeldDown = false;
                timerNumUpDownContinuous.Stop();
                timerNumUpDownContinuous.Enabled = false;
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnOpacityDown_MouseUp");
            }
        }
        #endregion
        #region background picture/colour
        private async void PictureBoxGenesis_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                #region display loading screen
                bool wasOnTop = false;
                if (this.TopMost == true)
                {
                    wasOnTop = true;
                    this.TopMost = false;
                }
                Form loadingTheme = new FullSizeLoadingScreen(UIScale)
                {
                    Owner = this,
                    StartPosition = FormStartPosition.CenterParent,
                    FormBorderStyle = FormBorderStyle.None,
                    BackColor = panel84.BackColor, // Set the background color to match panel colours
                    Opacity = 1,
                };
                loadingTheme.StartPosition = FormStartPosition.CenterParent;

                // Calculate the overlay form's location to place it in the center of the parent form
                loadingTheme.StartPosition = FormStartPosition.Manual;
                int parentCenterX = this.Location.X + this.Width / 2;
                int parentCenterY = this.Location.Y + this.Height / 2;
                int overlayX = parentCenterX - loadingTheme.Width / 2;
                int overlayY = parentCenterY - loadingTheme.Height / 2;
                loadingTheme.Location = new Point(overlayX, overlayY);
                loadingTheme.Show(this);
                await BriefPauseAsync(100).ConfigureAwait(true);
                #endregion
                lblShowClock.Enabled = true;
                this.Invoke((MethodInvoker)delegate
                {
                    this.BackgroundImage = Properties.Resources.Genesis;
                });
                lblBackgroundGenesisSelected.Visible = true;
                Control[] controlsToHide = { lblBackgroundFranklinSelected, lblBackgroundHoneyBadgerSelected, lblBackgroundSymbolSelected, lblBackgroundStackSatsSelected, lblBackgroundSatsumaSelected, lblBackgroundCustomColorSelected, lblBackgroundCustomImageSelected };
                foreach (Control control in controlsToHide)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.Visible = false;
                    });
                }
                lblTime.Visible = true;
                lblThemeImage.Invoke((MethodInvoker)delegate
                {
                    lblThemeImage.Text = "no custom image selected";
                });
                pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                //wait a sec 
                await BriefPauseAsync(500).ConfigureAwait(true);
                //close the loading screen
                loadingTheme.Close();
                if (wasOnTop)
                {
                    this.TopMost = true;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxGenesis_Click");
            }
        }

        private async void PictureBoxFranklin_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                #region display loading screen
                bool wasOnTop = false;
                if (this.TopMost == true)
                {
                    wasOnTop = true;
                    this.TopMost = false;
                }
                Form loadingTheme = new FullSizeLoadingScreen(UIScale)
                {
                    Owner = this,
                    StartPosition = FormStartPosition.CenterParent,
                    FormBorderStyle = FormBorderStyle.None,
                    BackColor = panel84.BackColor, // Set the background color to match panel colours
                    Opacity = 1,
                };
                loadingTheme.StartPosition = FormStartPosition.CenterParent;

                // Calculate the overlay form's location to place it in the center of the parent form
                loadingTheme.StartPosition = FormStartPosition.Manual;
                int parentCenterX = this.Location.X + this.Width / 2;
                int parentCenterY = this.Location.Y + this.Height / 2;
                int overlayX = parentCenterX - loadingTheme.Width / 2;
                int overlayY = parentCenterY - loadingTheme.Height / 2;
                loadingTheme.Location = new Point(overlayX, overlayY);
                loadingTheme.Show(this);
                await BriefPauseAsync(100).ConfigureAwait(true);
                #endregion
                lblShowClock.Enabled = false;
                this.Invoke((MethodInvoker)delegate
                {
                    this.BackgroundImage = Properties.Resources.Franklin;
                });

                Control[] controlsToHide = { lblTime, lblBackgroundGenesisSelected, lblBackgroundSatsumaSelected, lblBackgroundHoneyBadgerSelected, lblBackgroundSymbolSelected, lblBackgroundStackSatsSelected, lblBackgroundCustomColorSelected, lblBackgroundCustomImageSelected };
                foreach (Control control in controlsToHide)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.Visible = false;
                    });
                }

                lblBackgroundFranklinSelected.Visible = true;
                lblThemeImage.Invoke((MethodInvoker)delegate
                {
                    lblThemeImage.Text = "no custom image selected";
                });
                pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                //wait a sec 
                await BriefPauseAsync(500).ConfigureAwait(true);
                //close the loading screen
                loadingTheme.Close();
                if (wasOnTop)
                {
                    this.TopMost = true;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxFranklin_Click");
            }
        }

        private async void PictureBoxSatsuma_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                #region display loading screen
                bool wasOnTop = false;
                if (this.TopMost == true)
                {
                    wasOnTop = true;
                    this.TopMost = false;
                }
                Form loadingTheme = new FullSizeLoadingScreen(UIScale)
                {
                    Owner = this,
                    StartPosition = FormStartPosition.CenterParent,
                    FormBorderStyle = FormBorderStyle.None,
                    BackColor = panel84.BackColor, // Set the background color to match panel colours
                    Opacity = 1,
                };
                loadingTheme.StartPosition = FormStartPosition.CenterParent;

                // Calculate the overlay form's location to place it in the center of the parent form
                loadingTheme.StartPosition = FormStartPosition.Manual;
                int parentCenterX = this.Location.X + this.Width / 2;
                int parentCenterY = this.Location.Y + this.Height / 2;
                int overlayX = parentCenterX - loadingTheme.Width / 2;
                int overlayY = parentCenterY - loadingTheme.Height / 2;
                loadingTheme.Location = new Point(overlayX, overlayY);
                loadingTheme.Show(this);
                await BriefPauseAsync(100).ConfigureAwait(true);
                #endregion
                lblShowClock.Enabled = false;
                this.Invoke((MethodInvoker)delegate
                {
                    this.BackgroundImage = Properties.Resources.Satsuma;
                });
                Control[] controlsToHide = { lblTime, lblBackgroundGenesisSelected, lblBackgroundFranklinSelected, lblBackgroundHoneyBadgerSelected, lblBackgroundSymbolSelected, lblBackgroundStackSatsSelected, lblBackgroundCustomColorSelected, lblBackgroundCustomImageSelected };
                foreach (Control control in controlsToHide)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.Visible = false;
                    });
                }

                lblBackgroundSatsumaSelected.Visible = true;
                lblThemeImage.Invoke((MethodInvoker)delegate
                {
                    lblThemeImage.Text = "no custom image selected";
                });
                pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                //wait a sec 
                await BriefPauseAsync(500).ConfigureAwait(true);
                //close the loading screen
                loadingTheme.Close();
                if (wasOnTop)
                {
                    this.TopMost = true;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxSatsuma_Click");
            }
        }

        private async void PictureBoxHoneyBadger_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                #region display loading screen
                bool wasOnTop = false;
                if (this.TopMost == true)
                {
                    wasOnTop = true;
                    this.TopMost = false;
                }
                Form loadingTheme = new FullSizeLoadingScreen(UIScale)
                {
                    Owner = this,
                    StartPosition = FormStartPosition.CenterParent,
                    FormBorderStyle = FormBorderStyle.None,
                    BackColor = panel84.BackColor, // Set the background color to match panel colours
                    Opacity = 1,
                };
                loadingTheme.StartPosition = FormStartPosition.CenterParent;

                // Calculate the overlay form's location to place it in the center of the parent form
                loadingTheme.StartPosition = FormStartPosition.Manual;
                int parentCenterX = this.Location.X + this.Width / 2;
                int parentCenterY = this.Location.Y + this.Height / 2;
                int overlayX = parentCenterX - loadingTheme.Width / 2;
                int overlayY = parentCenterY - loadingTheme.Height / 2;
                loadingTheme.Location = new Point(overlayX, overlayY);
                loadingTheme.Show(this);
                await BriefPauseAsync(100).ConfigureAwait(true);
                #endregion
                lblShowClock.Enabled = false;
                this.Invoke((MethodInvoker)delegate
                {
                    this.BackgroundImage = Properties.Resources.HoneyBadger;
                });
                Control[] controlsToHide = { lblTime, lblBackgroundGenesisSelected, lblBackgroundFranklinSelected, lblBackgroundSatsumaSelected, lblBackgroundSymbolSelected, lblBackgroundStackSatsSelected, lblBackgroundCustomColorSelected, lblBackgroundCustomImageSelected };
                foreach (Control control in controlsToHide)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.Visible = false;
                    });
                }

                lblBackgroundHoneyBadgerSelected.Visible = true;
                lblThemeImage.Invoke((MethodInvoker)delegate
                {
                    lblThemeImage.Text = "no custom image selected";
                });
                pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                //wait a sec 
                await BriefPauseAsync(500).ConfigureAwait(true);
                //close the loading screen
                loadingTheme.Close();
                if (wasOnTop)
                {
                    this.TopMost = true;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "pictureBoxHoneyBadger_Click");
            }
        }

        private async void PictureBoxSymbol_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                #region display loading screen
                bool wasOnTop = false;
                if (this.TopMost == true)
                {
                    wasOnTop = true;
                    this.TopMost = false;
                }
                Form loadingTheme = new FullSizeLoadingScreen(UIScale)
                {
                    Owner = this,
                    StartPosition = FormStartPosition.CenterParent,
                    FormBorderStyle = FormBorderStyle.None,
                    BackColor = panel84.BackColor, // Set the background color to match panel colours
                    Opacity = 1,
                };
                loadingTheme.StartPosition = FormStartPosition.CenterParent;

                // Calculate the overlay form's location to place it in the center of the parent form
                loadingTheme.StartPosition = FormStartPosition.Manual;
                int parentCenterX = this.Location.X + this.Width / 2;
                int parentCenterY = this.Location.Y + this.Height / 2;
                int overlayX = parentCenterX - loadingTheme.Width / 2;
                int overlayY = parentCenterY - loadingTheme.Height / 2;
                loadingTheme.Location = new Point(overlayX, overlayY);
                loadingTheme.Show(this);
                await BriefPauseAsync(100).ConfigureAwait(true);
                #endregion
                lblShowClock.Enabled = false;
                this.Invoke((MethodInvoker)delegate
                {
                    this.BackgroundImage = Properties.Resources.Symbol;
                });
                Control[] controlsToHide = { lblTime, lblBackgroundGenesisSelected, lblBackgroundFranklinSelected, lblBackgroundSatsumaSelected, lblBackgroundStackSatsSelected, lblBackgroundHoneyBadgerSelected, lblBackgroundCustomColorSelected, lblBackgroundCustomImageSelected };
                foreach (Control control in controlsToHide)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.Visible = false;
                    });
                }

                lblBackgroundSymbolSelected.Visible = true;
                lblThemeImage.Invoke((MethodInvoker)delegate
                {
                    lblThemeImage.Text = "no custom image selected";
                });
                pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                //wait a sec 
                await BriefPauseAsync(500).ConfigureAwait(true);
                //close the loading screen
                loadingTheme.Close();
                if (wasOnTop)
                {
                    this.TopMost = true;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "pictureBoxSymbol_Click");
            }
        }

        private async void PictureBoxStackSats_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                #region display loading screen
                bool wasOnTop = false;
                if (this.TopMost == true)
                {
                    wasOnTop = true;
                    this.TopMost = false;
                }
                Form loadingTheme = new FullSizeLoadingScreen(UIScale)
                {
                    Owner = this,
                    StartPosition = FormStartPosition.CenterParent,
                    FormBorderStyle = FormBorderStyle.None,
                    BackColor = panel84.BackColor, // Set the background color to match panel colours
                    Opacity = 1,
                };
                loadingTheme.StartPosition = FormStartPosition.CenterParent;

                // Calculate the overlay form's location to place it in the center of the parent form
                loadingTheme.StartPosition = FormStartPosition.Manual;
                int parentCenterX = this.Location.X + this.Width / 2;
                int parentCenterY = this.Location.Y + this.Height / 2;
                int overlayX = parentCenterX - loadingTheme.Width / 2;
                int overlayY = parentCenterY - loadingTheme.Height / 2;
                loadingTheme.Location = new Point(overlayX, overlayY);
                loadingTheme.Show(this);
                await BriefPauseAsync(100).ConfigureAwait(true);
                #endregion
                lblShowClock.Enabled = false;
                this.Invoke((MethodInvoker)delegate
                {
                    this.BackgroundImage = Properties.Resources.StackSats;
                });
                Control[] controlsToHide = { lblTime, lblBackgroundGenesisSelected, lblBackgroundFranklinSelected, lblBackgroundSatsumaSelected, lblBackgroundSymbolSelected, lblBackgroundHoneyBadgerSelected, lblBackgroundCustomColorSelected, lblBackgroundCustomImageSelected };
                foreach (Control control in controlsToHide)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.Visible = false;
                    });
                }

                lblBackgroundStackSatsSelected.Visible = true;
                lblThemeImage.Invoke((MethodInvoker)delegate
                {
                    lblThemeImage.Text = "no custom image selected";
                });
                pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                //wait a sec 
                await BriefPauseAsync(500).ConfigureAwait(true);
                //close the loading screen
                loadingTheme.Close();
                if (wasOnTop)
                {
                    this.TopMost = true;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "pictureBoxStackSats_Click");
            }
        }

        private async void PictureBoxCustomImage_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                System.Windows.Forms.OpenFileDialog openFileDialog1 = new System.Windows.Forms.OpenFileDialog
                {
                    Filter = "Images (*.BMP;*.JPG;*.GIF,*.PNG)|*.BMP;*.JPG;*.GIF;*.PNG;|" + "All files (*.*)|*.*"
                };

                if (openFileDialog1.ShowDialog() == DialogResult.OK)
                {
                    #region display loading screen
                    bool wasOnTop = false;
                    if (this.TopMost == true)
                    {
                        wasOnTop = true;
                        this.TopMost = false;
                    }
                    Form loadingTheme = new FullSizeLoadingScreen(UIScale)
                    {
                        Owner = this,
                        StartPosition = FormStartPosition.CenterParent,
                        FormBorderStyle = FormBorderStyle.None,
                        BackColor = panel84.BackColor, // Set the background color to match panel colours
                        Opacity = 1,
                    };
                    loadingTheme.StartPosition = FormStartPosition.CenterParent;

                    // Calculate the overlay form's location to place it in the center of the parent form
                    loadingTheme.StartPosition = FormStartPosition.Manual;
                    int parentCenterX = this.Location.X + this.Width / 2;
                    int parentCenterY = this.Location.Y + this.Height / 2;
                    int overlayX = parentCenterX - loadingTheme.Width / 2;
                    int overlayY = parentCenterY - loadingTheme.Height / 2;
                    loadingTheme.Location = new Point(overlayX, overlayY);
                    loadingTheme.Show(this);
                    await BriefPauseAsync(100).ConfigureAwait(true);
                    #endregion
                    lblShowClock.Enabled = false;
                    string selectedFilePath = openFileDialog1.FileName;
                    lblThemeImage.Text = selectedFilePath;
                    this.BackgroundImage = System.Drawing.Image.FromFile(selectedFilePath);
                    pictureBoxCustomImage.Image = System.Drawing.Image.FromFile(selectedFilePath);
                    Control[] controlsToHide = { lblBackgroundGenesisSelected, lblBackgroundSatsumaSelected, lblBackgroundSymbolSelected, lblBackgroundFranklinSelected, lblBackgroundHoneyBadgerSelected, lblBackgroundStackSatsSelected, lblBackgroundCustomColorSelected };
                    foreach (Control control in controlsToHide)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.Visible = false;
                        });
                    }

                    lblBackgroundCustomImageSelected.Visible = true;
                    lblTime.Visible = false;

                    //wait a sec 
                    await BriefPauseAsync(500).ConfigureAwait(true);
                    //close the loading screen
                    loadingTheme.Close();
                    if (wasOnTop)
                    {
                        this.TopMost = true;
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxCustomImage_Click");
            }
        }

        private async void PictureBoxCustomColor_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForFormBackground = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = Color.Red
                };

                if (colorDlgForFormBackground.ShowDialog() == DialogResult.OK)
                {
                    #region display loading screen
                    bool wasOnTop = false;
                    if (this.TopMost == true)
                    {
                        wasOnTop = true;
                        this.TopMost = false;
                    }
                    Form loadingTheme = new FullSizeLoadingScreen(UIScale)
                    {
                        Owner = this,
                        StartPosition = FormStartPosition.CenterParent,
                        FormBorderStyle = FormBorderStyle.None,
                        BackColor = panel84.BackColor, // Set the background color to match panel colours
                        Opacity = 1,
                    };
                    loadingTheme.StartPosition = FormStartPosition.CenterParent;

                    // Calculate the overlay form's location to place it in the center of the parent form
                    loadingTheme.StartPosition = FormStartPosition.Manual;
                    int parentCenterX = this.Location.X + this.Width / 2;
                    int parentCenterY = this.Location.Y + this.Height / 2;
                    int overlayX = parentCenterX - loadingTheme.Width / 2;
                    int overlayY = parentCenterY - loadingTheme.Height / 2;
                    loadingTheme.Location = new Point(overlayX, overlayY);
                    loadingTheme.Show(this);
                    await BriefPauseAsync(100).ConfigureAwait(true);
                    #endregion
                    lblShowClock.Enabled = false;
                    this.Invoke((MethodInvoker)delegate
                    {
                        this.BackColor = colorDlgForFormBackground.Color;
                        panelBookmarksScrollContainer.BackColor = colorDlgForFormBackground.Color;
                        panelXpubScrollContainer.BackColor = colorDlgForFormBackground.Color;
                        panelTXInScrollContainer.BackColor = colorDlgForFormBackground.Color;
                        panelTXOutScrollContainer.BackColor = colorDlgForFormBackground.Color;
                        this.BackgroundImage = null;
                    });
                    Control[] controlsToHide = { lblTime, lblBackgroundStackSatsSelected, lblBackgroundSymbolSelected, lblBackgroundGenesisSelected, lblBackgroundFranklinSelected, lblBackgroundSatsumaSelected, lblBackgroundCustomImageSelected };
                    foreach (Control control in controlsToHide)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.Visible = false;
                        });
                    }

                    lblBackgroundCustomColorSelected.Visible = true;
                    lblThemeImage.Invoke((MethodInvoker)delegate
                    {
                        lblThemeImage.Text = "no custom image selected";
                    });
                    pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                    //wait a sec 
                    await BriefPauseAsync(500).ConfigureAwait(true);
                    //close the loading screen
                    loadingTheme.Close();
                    if (wasOnTop)
                    {
                        this.TopMost = true;
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxCustomColor_Click");
            }
        }
        #endregion
        #region title backgrounds
        private void ComboBoxSelectHeadingBackground_OnSelectedIndexChanged(object sender, EventArgs e)
        {
            if (String.Compare(lblTitlesBackgroundImage.Text, "✔️") == 0)
            {
                HeadingBackgroundsToImage();
            }
        }

        private void LblTitleBackgroundNone_Click(object sender, EventArgs e)
        {
            try
            {
                comboBoxTitlesBackgroundImage.Enabled = false;
                if (String.Compare(lblTitleBackgroundNone.Text, "✔️") != 0)
                {
                    HeadingBackgroundsToNone();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "LblTitleBackgroundNone_Click");
            }
        }

        private void LblTitleBackgroundDefault_Click(object sender, EventArgs e)
        {
            try
            {
                lblTitlesBackgroundImage.Invoke((MethodInvoker)delegate
                {
                    lblTitlesBackgroundImage.ForeColor = Color.Green;
                    lblTitlesBackgroundImage.Text = "✔️";
                });
                lblTitleBackgroundNone.Invoke((MethodInvoker)delegate
                {
                    lblTitleBackgroundNone.ForeColor = Color.IndianRed;
                    lblTitleBackgroundNone.Text = "❌";
                });
                lblTitleBackgroundCustom.Invoke((MethodInvoker)delegate
                {
                    lblTitleBackgroundCustom.ForeColor = Color.IndianRed;
                    lblTitleBackgroundCustom.Text = "❌";
                });
                if (String.Compare(lblTitlesBackgroundImage.Text, "✔️") == 0)
                {
                    comboBoxTitlesBackgroundImage.Enabled = true;
                }
                HeadingBackgroundsToImage();
            }
            catch (Exception ex)
            {
                HandleException(ex, "LblTitleBackgroundDefault_Click");
            }
        }

        private void BtnColorTitleBackgrounds_Click(object sender, EventArgs e)
        {
            try
            {
                comboBoxTitlesBackgroundImage.Enabled = false;
                ColorDialog colorDlgForTitleBackgrounds = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = panel58.BackColor
                };

                if (colorDlgForTitleBackgrounds.ShowDialog() == DialogResult.OK)
                {
                    titleBackgroundColor = colorDlgForTitleBackgrounds.Color;
                    lblTitleBackgroundCustom.ForeColor = Color.Green;
                    lblTitleBackgroundCustom.Invoke((MethodInvoker)delegate
                    {
                        lblTitleBackgroundCustom.Text = "✔️";
                    });
                    lblTitleBackgroundNone.ForeColor = Color.IndianRed;
                    lblTitleBackgroundNone.Invoke((MethodInvoker)delegate
                    {
                        lblTitleBackgroundNone.Text = "❌";
                    });
                    lblTitlesBackgroundImage.ForeColor = Color.IndianRed;
                    lblTitlesBackgroundImage.Invoke((MethodInvoker)delegate
                    {
                        lblTitlesBackgroundImage.Text = "❌";
                    });

                    SetCustomTitleBackgroundColor();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnColorTitleBackgrounds_Click");
            }
        }

        private void LblTitleBackgroundCustom_Click(object sender, EventArgs e)
        {
            try
            {
                if (String.Compare(lblTitleBackgroundCustom.Text, "✔️") != 0)
                {
                    comboBoxTitlesBackgroundImage.Enabled = false;
                    lblTitleBackgroundCustom.Invoke((MethodInvoker)delegate
                    {
                        lblTitleBackgroundCustom.Text = "✔️";
                        lblTitleBackgroundCustom.ForeColor = Color.Green;
                    });
                    lblTitleBackgroundNone.Invoke((MethodInvoker)delegate
                    {
                        lblTitleBackgroundNone.Text = "❌";
                        lblTitleBackgroundNone.ForeColor = Color.IndianRed;
                    });
                    lblTitlesBackgroundImage.Invoke((MethodInvoker)delegate
                    {
                        lblTitlesBackgroundImage.Text = "❌";
                        lblTitlesBackgroundImage.ForeColor = Color.IndianRed;
                    });
                    SetCustomTitleBackgroundColor();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "LblTitleBackgroundCustom_Click");
            }
        }

        private void SetCustomTitleBackgroundColor()
        {
            try
            {
                HeadingBackgroundsToCustomColor();
            }
            catch (Exception ex)
            {
                HandleException(ex, "SetCustomTitleBackgroundColor");
            }
        }
        #endregion
        #region construct theme record to be saved
        private void TextBoxThemeName_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (textBoxThemeName.Text.Length > 0)
                {
                    btnSaveTheme.Enabled = true;
                }
                else
                {
                    btnSaveTheme.Enabled = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxThemeName_TextChanged");
            }
        }

        private void BtnSaveTheme_Click(object sender, EventArgs e)
        {
            try
            {
                //take the selected color values from examples on the appearance screen
                Color datafields = label154.ForeColor;
                Color labels = label73.ForeColor;
                Color fiatconversions = label288.ForeColor;
                Color headings = label156.ForeColor;
                Color tables = label170.ForeColor;
                Color tableheadings = label190.ForeColor;
                Color othertext = label173.ForeColor;
                Color priceblock = label175.ForeColor;
                Color statuserrors = label176.ForeColor;
                Color buttons = button1.BackColor;
                Color buttontext = button2.ForeColor;
                Color lines = panel61.BackColor;
                Color textboxes = textBox1.BackColor;
                Color progressbars = colorProgressBar1.BarColor;
                Color tablebackgrounds = panel66.BackColor;
                Color tabletitlebars = panel67.BackColor;
                Color panels = panel73.BackColor;
                string chartsDark = "D";
                if (String.Compare(lblChartsDarkBackground.Text, "✔️") == 0)
                {
                    chartsDark = "D";
                }
                if (String.Compare(lblChartsMediumBackground.Text, "✔️") == 0)
                {
                    chartsDark = "M";
                }
                if (String.Compare(lblChartsLightBackground.Text, "✔️") == 0)
                {
                    chartsDark = "L";
                }
                bool showtime = lblTime.Visible;
                bool headingbgdefault = false;
                if (String.Compare(lblTitlesBackgroundImage.Text, "✔️") == 0)
                {
                    headingbgdefault = true;
                }
                bool headingbgnone = false;
                if (String.Compare(lblTitleBackgroundNone.Text, "✔️") == 0)
                {
                    headingbgnone = true;
                }
                bool headingbgcustom = false;
                if (String.Compare(lblTitleBackgroundCustom.Text, "✔️") == 0)
                {
                    headingbgcustom = true;
                }
                bool backgroundgenesis = false;
                if (lblBackgroundGenesisSelected.Visible == true)
                {
                    backgroundgenesis = true;
                }
                bool backgroundFranklin = false;
                if (lblBackgroundFranklinSelected.Visible == true)
                {
                    backgroundFranklin = true;
                }
                bool backgroundSatsuma = false;
                if (lblBackgroundSatsumaSelected.Visible == true)
                {
                    backgroundSatsuma = true;
                }
                bool backgroundHoneyBadger = false;
                if (lblBackgroundHoneyBadgerSelected.Visible == true)
                {
                    backgroundHoneyBadger = true;
                }
                bool backgroundSymbol = false;
                if (lblBackgroundSymbolSelected.Visible == true)
                {
                    backgroundSymbol = true;
                }
                bool backgroundStackSats = false;
                if (lblBackgroundStackSatsSelected.Visible == true)
                {
                    backgroundStackSats = true;
                }
                bool backgroundcustomcolor = false;
                if (lblBackgroundCustomColorSelected.Visible == true)
                {
                    backgroundcustomcolor = true;
                }
                bool backgroundcustomimage = false;
                if (lblBackgroundCustomImageSelected.Visible == true)
                {
                    backgroundcustomimage = true;
                }
                Color headingbackgrounds = panel64.BackColor;
                Color windowbackground = this.BackColor;
                string windowimage = "";
                if (lblBackgroundGenesisSelected.Visible)
                {
                    windowimage = "Genesis.png";
                }
                else
                {
                    if (lblBackgroundFranklinSelected.Visible)
                    {
                        windowimage = "Franklin.png";
                    }
                    else
                    {
                        if (lblBackgroundSatsumaSelected.Visible)
                        {
                            windowimage = "Satsuma.png";
                        }
                        else
                        {
                            if (this.BackgroundImage != null && lblThemeImage.Text.Length > 0)
                            {
                                windowimage = lblThemeImage.Text;
                            }
                            else
                            {
                                windowimage = "";
                            }
                        }
                    }
                }
                int orangeinfinity = 1;
                if (String.Compare(lblInfinity1.Text, "✔️") == 0)
                {
                    orangeinfinity = 1;
                }
                if (String.Compare(lblInfinity2.Text, "✔️") == 0)
                {
                    orangeinfinity = 2;
                }
                if (String.Compare(lblInfinity3.Text, "✔️") == 0)
                {
                    orangeinfinity = 3;
                }

                int borderradius = 12;
                if (btnSquareCorners.Enabled == false)
                {
                    borderradius = 1;
                }
                else
                {
                    if (btnPartialCorners.Enabled == false)
                    {
                        borderradius = 6;
                    }
                    else
                    {
                        if (btnRoundCorners.Enabled == false)
                        {
                            borderradius = 12;
                        }
                    }
                }

                decimal opacity = numericUpDownOpacity.Value;

                int titlesBackgroundImage = comboBoxTitlesBackgroundImage.SelectedIndex;

                string progBarStyle;
                if (String.Compare(lblSolidProgressBars.Text, "❌") == 0)
                {
                    progBarStyle = "dashed";
                }
                else
                {
                    progBarStyle = "solid";
                }

                var newTheme = new Theme { ThemeName = textBoxThemeName.Text, DataFields = datafields, Labels = labels, Headings = headings, Tables = tables, TableHeadings = tableheadings, OtherText = othertext, PriceBlock = priceblock, StatusErrors = statuserrors, Buttons = buttons, ButtonText = buttontext, Lines = lines, TextBoxes = textboxes, ProgressBars = progressbars, TableBackgrounds = tablebackgrounds, TableTitleBars = tabletitlebars, ShowTime = showtime, HeadingBGDefault = headingbgdefault, HeadingBGNone = headingbgnone, HeadingBGCustom = headingbgcustom, HeadingBackgrounds = headingbackgrounds, WindowBackground = windowbackground, WindowImage = windowimage, BackgroundGenesis = backgroundgenesis, BackgroundFranklin = backgroundFranklin, BackgroundSatsuma = backgroundSatsuma, BackgroundHoneyBadger = backgroundHoneyBadger, BackgroundSymbol = backgroundSymbol, BackgroundStackSats = backgroundStackSats, BackgroundCustomColor = backgroundcustomcolor, BackgroundCustomImage = backgroundcustomimage, Panels = panels, ChartsDark = chartsDark, OrangeInfinity = orangeinfinity, BorderRadius = borderradius, FiatConversionText = fiatconversions, Opacity = opacity, TitlesBackgroundImage = titlesBackgroundImage, ProgressBarStyle = progBarStyle };

                // Read the existing themes from the JSON file
                var themes = ThemesManager.Themes;

                // check here for duplicate themename
                foreach (Theme theme in themes!)
                {
                    if (String.Compare(theme.ThemeName, newTheme.ThemeName) == 0)
                    {
                        intThemeNameInUseMessageTimeShown = 0;
                        lblThemeNameInUse.Visible = true;
                        return;
                    }
                }

                // Add the new theme to the list
                themes.Add(newTheme);

                // Write the updated list of themes back to the JSON file
                WriteThemeToJsonFile(themes);

                SaveThemeAsDefault(textBoxThemeName.Text);
                currentlyActiveTheme = newTheme.ThemeName;
                PopulateThemeComboboxes();
                intThemeSavedMessageTimeShown = 0;
                lblThemeSaved.Visible = true;
                textBoxThemeName.Invoke((MethodInvoker)delegate
                {
                    textBoxThemeName.Text = "";
                });

            }
            catch (Exception ex)
            {
                HandleException(ex, "btnSaveTheme_Click");
            }
        }
        #endregion
        #region write theme to file
        private static void WriteThemeToJsonFile(List<Theme> themes)
        {
            string json = JsonConvert.SerializeObject(themes);

            string themesFileName = "SATSuma_themes.json";
            string appDataDirectory = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
            string applicationDirectory = Path.Combine(appDataDirectory, "SATSuma");
            // Create the application directory if it doesn't exist
            Directory.CreateDirectory(applicationDirectory);
            string themesFilePath = Path.Combine(applicationDirectory, themesFileName);
            string filePath = themesFilePath;

            // Write the JSON string to the themes.json file
            System.IO.File.WriteAllText(filePath, json);
            ThemesManager.Initialize(); // refresh the themes list 
        }
        #endregion
        #region select previously saved theme from list (doesn't apply to list embedded in main menu)
        private void BtnLoadTheme_Click(object sender, EventArgs e)
        {
            try
            {
                var themes = ThemesManager.Themes;
                foreach (Theme theme in themes!)
                {
                    if (String.Compare(theme.ThemeName, comboBoxCustomizeScreenThemeList.Texts) == 0)
                    {
                        if (String.Compare(comboBoxCustomizeScreenThemeList.Texts, "select theme") != 0)
                        {
                            try
                            {
                                if (String.Compare(theme.ThemeName, comboBoxCustomizeScreenThemeList.Texts) == 0)
                                {
                                    BtnMenuThemeGenesis.Enabled = true;
                                    btnMenuThemeFranklin.Enabled = true;
                                    btnMenuThemeSatsuma.Enabled = true;
                                    lblThemeMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                                    {
                                        lblThemeMenuHighlightedButtonText.Text = theme.ThemeName;
                                        lblThemeMenuHighlightedButtonText.Location = new Point(btnMenuApplyCustomTheme.Location.X + (int)(14 * UIScale), btnMenuApplyCustomTheme.Location.Y);
                                    });
                                    ClearThemeMenuMarkers();
                                    btnMenuApplyCustomTheme.Invoke((MethodInvoker)delegate
                                    {
                                        btnMenuApplyCustomTheme.BackgroundImage = Resources.marker;
                                    });
                                    btnMenuApplyCustomTheme.Invoke((MethodInvoker)delegate
                                    {
                                        btnMenuApplyCustomTheme.Text = theme.ThemeName;
                                    });
                                    comboBoxHeaderCustomThemes.Invoke((MethodInvoker)delegate
                                    {
                                        comboBoxHeaderCustomThemes.Texts = "   saved themes ▼";
                                    });
                                    comboBoxCustomizeScreenThemeList.Invoke((MethodInvoker)delegate
                                    {
                                        comboBoxCustomizeScreenThemeList.Texts = "select theme";
                                    });
                                    CloseThemeMenu();
                                    RestoreThemeWithLoadingScreenAsync(theme);
                                    SaveThemeAsDefault(theme.ThemeName!);
                                    // reload the listviews to apply the new color
                                    LookupBlockListAsync();
                                    LookupBlockAsync();
                                    SetupBookmarksScreen();
                                    intSavingSettingsTimeLightLit = 0;
                                    labelSettingsSaved.Invoke((MethodInvoker)delegate
                                    {
                                        labelSettingsSaved.Text = "Saving settings";
                                    });
                                    lblSaveSettingsLight.Invoke((MethodInvoker)delegate
                                    {
                                        lblSaveSettingsLight.ForeColor = Color.Lime;
                                    });
                                }
                            }
                            catch (Exception ex)
                            {
                                HandleException(ex, "btnLoadTheme_Click");
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnLoadTheme_Click");
            }
        }
        #endregion
        #region restore theme

        private void RestoreTheme(Theme theme)
        {
            try
            {
                if (fullSizeLoadingScreen!.Visible)
                {
                    fullSizeLoadingScreen.SetLoadingText("getting ready to apply theme...", "Applying theme...");
                }
                currentlyActiveTheme = theme.ThemeName!;
                if (theme.BackgroundGenesis)
                {
                    lblShowClock.Enabled = true;
                }
                else
                {
                    lblShowClock.Enabled = false;
                }

                if (theme.ThemeName!.Contains("(preset)"))
                {
                    btnMenuApplyCustomTheme.Text = "apply theme";
                    lblApplyThemeButtonDisabledMask.Visible = true;
                }
                else
                {
                    btnMenuApplyCustomTheme.Text = theme.ThemeName;
                    lblThemeMenuHighlightedButtonText.Text = theme.ThemeName;
                    lblThemeMenuHighlightedButtonText.Visible = true;
                    lblApplyThemeButtonDisabledMask.Visible = false;
                }
                try
                {
                    if (String.Compare(theme.ChartsDark, "D") == 0)
                    {
                        chartsBackgroundColor = Color.FromArgb(20, 20, 20);

                        panelLoadingAnimationContainer.BackColor = Color.FromArgb(20, 20, 20);
                        pictureBoxLoadingAnimation.Invoke((MethodInvoker)delegate
                        {
                            pictureBoxLoadingAnimation.Image = Properties.Resources.SatsumaAnimated;
                        });
                        lblChartsLightBackground.Invoke((MethodInvoker)delegate
                        {
                            lblChartsLightBackground.ForeColor = Color.IndianRed;
                            lblChartsLightBackground.Text = "❌";
                        });
                        lblChartsMediumBackground.Invoke((MethodInvoker)delegate
                        {
                            lblChartsMediumBackground.ForeColor = Color.IndianRed;
                            lblChartsMediumBackground.Text = "❌";
                        });
                        lblChartsDarkBackground.Invoke((MethodInvoker)delegate
                        {
                            lblChartsDarkBackground.ForeColor = Color.Green;
                            lblChartsDarkBackground.Text = "✔️";
                        });
                        panelCustomThemeMenuTitleBG.Invoke((MethodInvoker)delegate
                        {
                            panelCustomThemeMenuTitleBG.BackColor = Color.Black;
                        });
                        panelPresetThemeMenuTitleBG.Invoke((MethodInvoker)delegate
                        {
                            panelPresetThemeMenuTitleBG.BackColor = Color.Black;
                        });
                    }
                    else
                    {
                        if (String.Compare(theme.ChartsDark, "M") == 0)
                        {
                            chartsBackgroundColor = Color.FromArgb(40, 40, 40);
                            panelLoadingAnimationContainer.BackColor = Color.FromArgb(40, 40, 40);
                            pictureBoxLoadingAnimation.Invoke((MethodInvoker)delegate
                            {
                                pictureBoxLoadingAnimation.Image = Properties.Resources.SatsumaAnimated;
                            });
                            lblChartsLightBackground.Invoke((MethodInvoker)delegate
                            {
                                lblChartsLightBackground.ForeColor = Color.IndianRed;
                                lblChartsLightBackground.Text = "❌";
                            });
                            lblChartsMediumBackground.Invoke((MethodInvoker)delegate
                            {
                                lblChartsMediumBackground.ForeColor = Color.Green;
                                lblChartsMediumBackground.Text = "✔️";
                            });
                            lblChartsDarkBackground.Invoke((MethodInvoker)delegate
                            {
                                lblChartsDarkBackground.ForeColor = Color.IndianRed;
                                lblChartsDarkBackground.Text = "❌";
                            });
                            panelCustomThemeMenuTitleBG.Invoke((MethodInvoker)delegate
                            {
                                panelCustomThemeMenuTitleBG.BackColor = Color.Black;
                            });
                            panelPresetThemeMenuTitleBG.Invoke((MethodInvoker)delegate
                            {
                                panelPresetThemeMenuTitleBG.BackColor = Color.Black;
                            });
                        }
                        else
                        {
                            if (String.Compare(theme.ChartsDark, "L") == 0)
                            {
                                chartsBackgroundColor = Color.FromArgb(244, 244, 244);
                                panelLoadingAnimationContainer.BackColor = Color.FromArgb(244, 244, 244);
                                pictureBoxLoadingAnimation.Invoke((MethodInvoker)delegate
                                {
                                    pictureBoxLoadingAnimation.Image = Properties.Resources.SatsumaAnimatedWhite;
                                });
                                lblChartsLightBackground.Invoke((MethodInvoker)delegate
                                {
                                    lblChartsLightBackground.ForeColor = Color.Green;
                                    lblChartsLightBackground.Text = "✔️";
                                });
                                lblChartsMediumBackground.Invoke((MethodInvoker)delegate
                                {
                                    lblChartsMediumBackground.ForeColor = Color.IndianRed;
                                    lblChartsMediumBackground.Text = "❌";
                                });
                                lblChartsDarkBackground.Invoke((MethodInvoker)delegate
                                {
                                    lblChartsDarkBackground.ForeColor = Color.IndianRed;
                                    lblChartsDarkBackground.Text = "❌";
                                });
                                panelCustomThemeMenuTitleBG.Invoke((MethodInvoker)delegate
                                {
                                    panelCustomThemeMenuTitleBG.BackColor = Color.Gainsboro;
                                });
                                panelPresetThemeMenuTitleBG.Invoke((MethodInvoker)delegate
                                {
                                    panelPresetThemeMenuTitleBG.BackColor = Color.Gainsboro;
                                });
                            }
                        }
                    }

                    comboBoxTitlesBackgroundImage.SelectedIndex = (theme.TitlesBackgroundImage);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Colouring data fields...", "Applying theme...");
                    }
                    ColorDataFields(theme.DataFields);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Colouring labels...", "Applying theme...");
                    }
                    labelColor = theme.Labels; // (only used for poolranking chart title)
                    ColorLabels(theme.Labels);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Colouring charts...", "Applying theme...");
                    }
                    panelColour = theme.Panels; // used to colour chart backgrounds on the pools screens
                    CustomiseCharts(theme.PriceBlock);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Colouring fiat conversion fields...", "Applying theme...");
                    }
                    ColorFiatConversionText(theme.FiatConversionText);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Colouring headings...", "Applying theme...");
                    }
                    ColorHeadings(theme.Headings);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Colouring tables...", "Applying theme...");
                    }
                    ColorTables(theme.Tables);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Colouring table headings...", "Applying theme...");
                    }
                    ColorTableHeadings(theme.TableHeadings);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Colouring other text...", "Applying theme...");
                    }
                    ColorOtherText(theme.OtherText);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Colouring header data...", "Applying theme...");
                    }
                    ColorPriceBlock(theme.PriceBlock);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Colouring status messages...", "Applying theme...");
                    }
                    ColorStatusError(theme.StatusErrors);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Colouring buttons...", "Applying theme...");
                    }
                    ColorButtons(theme.Buttons);
                    ColorButtonText(theme.ButtonText);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Colouring lines...", "Applying theme...");
                    }
                    ColorLines(theme.Lines);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Colouring textboxes...", "Applying theme...");
                    }
                    ColorTextBoxes(theme.TextBoxes);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Colouring progress bars...", "Applying theme...");
                    }
                    ColorProgressBars(theme.ProgressBars);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Colouring table backgrounds...", "Applying theme...");
                    }
                    ColorTableBackgrounds(theme.TableBackgrounds);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Colouring table title bars...", "Applying theme...");
                    }
                    ColorTableTitleBars(theme.TableTitleBars);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Colouring panels...", "Applying theme...");
                    }
                    ColorPanels(theme.Panels);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Applying radius to controls...", "Applying theme...");
                    }
                    SetButtonAndPanelRadius(theme.BorderRadius);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Applying opacity...", "Applying theme...");
                    }
                    SetOpacity(theme.Opacity);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Styling progress bars...", "Applying theme...");
                    }
                    StyleProgressBars(theme.ProgressBarStyle!);

                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Setting heading backgrounds...", "Applying theme...");
                    }
                    if (theme.HeadingBGDefault == true)
                    {
                        lblTitleBackgroundCustom.Invoke((MethodInvoker)delegate
                        {
                            lblTitleBackgroundCustom.ForeColor = Color.IndianRed;
                            lblTitleBackgroundCustom.Text = "❌";
                        });
                        lblTitleBackgroundNone.Invoke((MethodInvoker)delegate
                        {
                            lblTitleBackgroundNone.ForeColor = Color.IndianRed;
                            lblTitleBackgroundNone.Text = "❌";
                        });
                        lblTitlesBackgroundImage.Invoke((MethodInvoker)delegate
                        {
                            lblTitlesBackgroundImage.ForeColor = Color.Green;
                            lblTitlesBackgroundImage.Text = "✔️";
                        });
                        comboBoxTitlesBackgroundImage.Enabled = true;
                        HeadingBackgroundsToImage();
                    }
                    if (theme.HeadingBGNone == true)
                    {
                        lblTitleBackgroundCustom.Invoke((MethodInvoker)delegate
                        {
                            lblTitleBackgroundCustom.ForeColor = Color.IndianRed;
                            lblTitleBackgroundCustom.Text = "❌";
                        });
                        lblTitleBackgroundNone.Invoke((MethodInvoker)delegate
                        {
                            lblTitleBackgroundNone.ForeColor = Color.Green;
                            lblTitleBackgroundNone.Text = "✔️";
                        });
                        lblTitlesBackgroundImage.Invoke((MethodInvoker)delegate
                        {
                            lblTitlesBackgroundImage.ForeColor = Color.IndianRed;
                            lblTitlesBackgroundImage.Text = "❌";
                        });
                        comboBoxTitlesBackgroundImage.Enabled = false;
                        HeadingBackgroundsToNone();
                    }
                    if (theme.HeadingBGCustom == true)
                    {
                        comboBoxTitlesBackgroundImage.Enabled = false;
                        lblTitleBackgroundCustom.Invoke((MethodInvoker)delegate
                        {
                            lblTitleBackgroundCustom.ForeColor = Color.Green;
                            lblTitleBackgroundCustom.Text = "✔️";
                        });
                        lblTitleBackgroundNone.Invoke((MethodInvoker)delegate
                        {
                            lblTitleBackgroundNone.ForeColor = Color.IndianRed;
                            lblTitleBackgroundNone.Text = "❌";
                        });
                        lblTitlesBackgroundImage.Invoke((MethodInvoker)delegate
                        {
                            lblTitlesBackgroundImage.ForeColor = Color.IndianRed;
                            lblTitlesBackgroundImage.Text = "❌";
                        });
                        titleBackgroundColor = theme.HeadingBackgrounds;
                        HeadingBackgroundsToCustomColor();
                    }
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Applying background image...", "Applying theme...");
                    }

                    if (theme.BackgroundFranklin == true)
                    {
                        lblBackgroundFranklinSelected.Visible = true;
                        Control[] controlsToHide = { lblBackgroundSatsumaSelected, lblBackgroundGenesisSelected, lblBackgroundSymbolSelected, lblBackgroundStackSatsSelected, lblBackgroundHoneyBadgerSelected, lblBackgroundCustomColorSelected, lblBackgroundCustomImageSelected };
                        foreach (Control control in controlsToHide)
                        {
                            control.Invoke((MethodInvoker)delegate
                            {
                                control.Visible = false;
                            });
                        }
                        this.BackgroundImage = Properties.Resources.Franklin;
                        lblThemeImage.Text = "no custom image selected";
                        pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                    }
                    if (theme.BackgroundGenesis == true)
                    {
                        Control[] controlsToHide = { lblBackgroundFranklinSelected, lblBackgroundSatsumaSelected, lblBackgroundHoneyBadgerSelected, lblBackgroundSymbolSelected, lblBackgroundStackSatsSelected, lblBackgroundCustomColorSelected, lblBackgroundCustomImageSelected };
                        foreach (Control control in controlsToHide)
                        {
                            control.Invoke((MethodInvoker)delegate
                            {
                                control.Visible = false;
                            });
                        }
                        lblBackgroundGenesisSelected.Visible = true;
                        this.BackgroundImage = Properties.Resources.Genesis;
                        lblThemeImage.Text = "no custom image selected";
                        pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                    }
                    if (theme.BackgroundSatsuma == true)
                    {
                        lblBackgroundSatsumaSelected.Visible = true;
                        Control[] controlsToHide = { lblBackgroundFranklinSelected, lblBackgroundGenesisSelected, lblBackgroundSymbolSelected, lblBackgroundStackSatsSelected, lblBackgroundHoneyBadgerSelected, lblBackgroundCustomColorSelected, lblBackgroundCustomImageSelected };
                        foreach (Control control in controlsToHide)
                        {
                            control.Invoke((MethodInvoker)delegate
                            {
                                control.Visible = false;
                            });
                        }
                        this.BackgroundImage = Properties.Resources.Satsuma;
                        lblThemeImage.Text = "no custom image selected";
                        pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                    }
                    if (theme.BackgroundHoneyBadger == true)
                    {
                        lblBackgroundHoneyBadgerSelected.Visible = true;
                        Control[] controlsToHide = { lblBackgroundSatsumaSelected, lblBackgroundFranklinSelected, lblBackgroundGenesisSelected, lblBackgroundSymbolSelected, lblBackgroundStackSatsSelected, lblBackgroundCustomColorSelected, lblBackgroundCustomImageSelected };
                        foreach (Control control in controlsToHide)
                        {
                            control.Invoke((MethodInvoker)delegate
                            {
                                control.Visible = false;
                            });
                        }

                        this.BackgroundImage = Properties.Resources.HoneyBadger;
                        lblThemeImage.Text = "no custom image selected";
                        pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                    }
                    if (theme.BackgroundSymbol == true)
                    {
                        lblBackgroundSymbolSelected.Visible = true;
                        Control[] controlsToHide = { lblBackgroundSatsumaSelected, lblBackgroundFranklinSelected, lblBackgroundGenesisSelected, lblBackgroundStackSatsSelected, lblBackgroundHoneyBadgerSelected, lblBackgroundCustomColorSelected, lblBackgroundCustomImageSelected };
                        foreach (Control control in controlsToHide)
                        {
                            control.Invoke((MethodInvoker)delegate
                            {
                                control.Visible = false;
                            });
                        }
                        this.BackgroundImage = Properties.Resources.Symbol;
                        lblThemeImage.Text = "no custom image selected";
                        pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                    }
                    if (theme.BackgroundStackSats == true)
                    {
                        lblBackgroundStackSatsSelected.Visible = true;
                        Control[] controlsToHide = { lblBackgroundSatsumaSelected, lblBackgroundFranklinSelected, lblBackgroundGenesisSelected, lblBackgroundSymbolSelected, lblBackgroundHoneyBadgerSelected, lblBackgroundCustomColorSelected, lblBackgroundCustomImageSelected };
                        foreach (Control control in controlsToHide)
                        {
                            control.Invoke((MethodInvoker)delegate
                            {
                                control.Visible = false;
                            });
                        }
                        this.BackgroundImage = Properties.Resources.StackSats;
                        lblThemeImage.Text = "no custom image selected";
                        pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                    }
                    if (theme.BackgroundCustomColor == true)
                    {
                        lblBackgroundCustomColorSelected.Visible = true;
                        Control[] controlsToHide = { lblBackgroundFranklinSelected, lblBackgroundSatsumaSelected, lblBackgroundGenesisSelected, lblBackgroundSymbolSelected, lblBackgroundStackSatsSelected, lblBackgroundHoneyBadgerSelected, lblBackgroundCustomImageSelected };
                        foreach (Control control in controlsToHide)
                        {
                            control.Invoke((MethodInvoker)delegate
                            {
                                control.Visible = false;
                            });
                        }
                        this.BackgroundImage = null;
                        this.BackColor = theme.WindowBackground;
                        lblThemeImage.Text = "no custom image selected";
                        pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                    }
                    if (theme.BackgroundCustomImage == true)
                    {
                        lblBackgroundCustomImageSelected.Visible = true;
                        Control[] controlsToHide = { lblBackgroundFranklinSelected, lblBackgroundSatsumaSelected, lblBackgroundGenesisSelected, lblBackgroundSymbolSelected, lblBackgroundStackSatsSelected, lblBackgroundHoneyBadgerSelected, lblBackgroundCustomColorSelected };
                        foreach (Control control in controlsToHide)
                        {
                            control.Invoke((MethodInvoker)delegate
                            {
                                control.Visible = false;
                            });
                        }
                        lblThemeImage.Text = theme.WindowImage;
                        this.BackgroundImage = System.Drawing.Image.FromFile(theme.WindowImage);
                    }

                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Applying loading animations...", "Applying theme...");
                    }
                    if (theme.OrangeInfinity == 1)
                    {
                        lblInfinity1.Invoke((MethodInvoker)delegate
                        {
                            lblInfinity1.ForeColor = Color.Green;
                            lblInfinity1.Text = "✔️";
                        });
                        lblInfinity2.Invoke((MethodInvoker)delegate
                        {
                            lblInfinity2.ForeColor = Color.IndianRed;
                            lblInfinity2.Text = "❌";
                        });
                        lblInfinity3.Invoke((MethodInvoker)delegate
                        {
                            lblInfinity3.ForeColor = Color.IndianRed;
                            lblInfinity3.Text = "❌";
                        });
                        pictureBoxChartLoadingAnimation.Invoke((MethodInvoker)delegate
                        {
                            pictureBoxChartLoadingAnimation.Image = Properties.Resources.InfinityTrans;
                        });
                        pictureBoxDCAChartLoadingAnimation.Invoke((MethodInvoker)delegate
                        {
                            pictureBoxDCAChartLoadingAnimation.Image = Properties.Resources.InfinityTrans;
                        });
                    }
                    if (theme.OrangeInfinity == 2)
                    {
                        lblInfinity1.Invoke((MethodInvoker)delegate
                        {
                            lblInfinity1.ForeColor = Color.IndianRed;
                            lblInfinity1.Text = "❌";
                        });
                        lblInfinity2.Invoke((MethodInvoker)delegate
                        {
                            lblInfinity2.ForeColor = Color.Green;
                            lblInfinity2.Text = "✔️";
                        });
                        lblInfinity3.Invoke((MethodInvoker)delegate
                        {
                            lblInfinity3.ForeColor = Color.IndianRed;
                            lblInfinity3.Text = "❌";
                        });
                        pictureBoxChartLoadingAnimation.Invoke((MethodInvoker)delegate
                        {
                            pictureBoxChartLoadingAnimation.Image = Properties.Resources.OrangeInfinity;
                        });
                        pictureBoxDCAChartLoadingAnimation.Invoke((MethodInvoker)delegate
                        {
                            pictureBoxDCAChartLoadingAnimation.Image = Properties.Resources.OrangeInfinity;
                        });
                    }
                    if (theme.OrangeInfinity == 3)
                    {
                        lblInfinity1.Invoke((MethodInvoker)delegate
                        {
                            lblInfinity1.ForeColor = Color.IndianRed;
                            lblInfinity1.Text = "❌";
                        });
                        lblInfinity2.Invoke((MethodInvoker)delegate
                        {
                            lblInfinity2.ForeColor = Color.IndianRed;
                            lblInfinity2.Text = "❌";
                        });
                        lblInfinity3.Invoke((MethodInvoker)delegate
                        {
                            lblInfinity3.ForeColor = Color.Green;
                            lblInfinity3.Text = "✔️";
                        });
                        pictureBoxChartLoadingAnimation.Invoke((MethodInvoker)delegate
                        {
                            pictureBoxChartLoadingAnimation.Image = Properties.Resources.infinityspectrum;
                        });
                        pictureBoxDCAChartLoadingAnimation.Invoke((MethodInvoker)delegate
                        {
                            pictureBoxDCAChartLoadingAnimation.Image = Properties.Resources.infinityspectrum;
                        });
                    }

                    if (theme.BackgroundCustomImage == true && theme.WindowImage!.Length > 0)
                    {
                        lblThemeImage.Text = theme.WindowImage;
                        pictureBoxCustomImage.Image = System.Drawing.Image.FromFile(theme.WindowImage);
                    }
                    else
                    {
                        lblThemeImage.Text = "no custom image selected";
                        pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                    }

                    ReloadScreensWithListviews();
                    if (!firstThemeChange)
                    {
                        RegenerateVisibleCharts();
                    }
                    firstThemeChange = false;
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Styling the directory...", "Applying theme...");
                    }
                    LoadAndStyleDirectoryBrowser();
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Regenerating charts...", "Applying theme...");
                    }
                    formsPlot1.Render();
                    if (theme.ShowTime == false)
                    {
                        lblShowClock.Invoke((MethodInvoker)delegate
                        {
                            lblShowClock.ForeColor = Color.IndianRed;
                            lblShowClock.Text = "❌";
                        });
                        lblTime.Visible = false;
                    }
                    else
                    {
                        lblShowClock.Invoke((MethodInvoker)delegate
                        {
                            lblShowClock.ForeColor = Color.Green;
                            lblShowClock.Text = "✔️";
                        });
                        if (theme.BackgroundGenesis == true)
                        {
                            lblTime.Font = new Font(lblTime.Font.FontFamily, (int)(14 * UIScale), lblTime.Font.Style);
                            lblTime.Location = new Point((int)(840 * UIScale), (int)(42 * UIScale));
                            lblTime.Visible = true;
                            lblTime.BringToFront();
                        }
                    }
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("please wait a moment...", "Applying theme...");
                    }
                }
                catch (Exception ex)
                {
                    HandleException(ex, "RestoreTheme");
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "RestoreTheme");
            }
        }

        private async void RestoreThemeWithLoadingScreenAsync(Theme theme)
        {
            try
            {
                #region display loading screen
                bool wasOnTop = false;
                fullSizeLoadingScreen = new FullSizeLoadingScreen(UIScale)
                {
                    Owner = this,
                    StartPosition = FormStartPosition.CenterParent,
                    FormBorderStyle = FormBorderStyle.None,
                    BackColor = panel84.BackColor, // Set the background color to match panel colours
                    Opacity = 1,
                    LabelColor = label77.ForeColor,
                    Version = $"v{CurrentVersion}",
                    OtherText = lblCurrentVersion.ForeColor
                };

                if (this.TopMost == true)
                {
                    wasOnTop = true;
                    this.TopMost = false;
                }
                if (!fullScreenLoadingScreenVisible)
                {
                    fullScreenLoadingScreenVisible = true;

                    fullSizeLoadingScreen.StartPosition = FormStartPosition.CenterParent;

                    // Calculate the overlay form's location to place it in the center of the parent form
                    fullSizeLoadingScreen.StartPosition = FormStartPosition.Manual;
                    int parentCenterX = this.Location.X + this.Width / 2;
                    int parentCenterY = this.Location.Y + this.Height / 2;
                    int overlayX = parentCenterX - fullSizeLoadingScreen.Width / 2;
                    int overlayY = parentCenterY - fullSizeLoadingScreen.Height / 2;
                    fullSizeLoadingScreen.Location = new Point(overlayX, overlayY);
                    fullSizeLoadingScreen.Show(this);
                }
                #endregion
                await BriefPauseAsync(100).ConfigureAwait(true); // this small pause gives time for the loading screen to appear before items are re-themed (the loading screen hides flicker that occurs when themes are applied)
                currentlyActiveTheme = theme.ThemeName!;
                if (theme.BackgroundGenesis)
                {
                    lblShowClock.Enabled = true;
                }
                else
                {
                    lblShowClock.Enabled = false;
                }

                if (theme.ThemeName!.Contains("(preset)"))
                {
                    btnMenuApplyCustomTheme.Text = "apply theme";
                    lblApplyThemeButtonDisabledMask.Visible = true;
                }
                else
                {
                    btnMenuApplyCustomTheme.Text = theme.ThemeName;
                    lblThemeMenuHighlightedButtonText.Text = theme.ThemeName;
                    lblThemeMenuHighlightedButtonText.Visible = true;
                    lblApplyThemeButtonDisabledMask.Visible = false;
                }
                try
                {
                    if (String.Compare(theme.ChartsDark, "D") == 0)
                    {
                        chartsBackgroundColor = Color.FromArgb(20, 20, 20);

                        panelLoadingAnimationContainer.BackColor = Color.FromArgb(20, 20, 20);
                        pictureBoxLoadingAnimation.Invoke((MethodInvoker)delegate
                        {
                            pictureBoxLoadingAnimation.Image = Properties.Resources.SatsumaAnimated;
                        });
                        lblChartsLightBackground.Invoke((MethodInvoker)delegate
                        {
                            lblChartsLightBackground.ForeColor = Color.IndianRed;
                            lblChartsLightBackground.Text = "❌";
                        });
                        lblChartsMediumBackground.Invoke((MethodInvoker)delegate
                        {
                            lblChartsMediumBackground.ForeColor = Color.IndianRed;
                            lblChartsMediumBackground.Text = "❌";
                        });
                        lblChartsDarkBackground.Invoke((MethodInvoker)delegate
                        {
                            lblChartsDarkBackground.ForeColor = Color.Green;
                            lblChartsDarkBackground.Text = "✔️";
                        });
                        panelCustomThemeMenuTitleBG.Invoke((MethodInvoker)delegate
                        {
                            panelCustomThemeMenuTitleBG.BackColor = Color.Black;
                        });
                        panelPresetThemeMenuTitleBG.Invoke((MethodInvoker)delegate
                        {
                            panelPresetThemeMenuTitleBG.BackColor = Color.Black;
                        });
                    }
                    else
                    {
                        if (String.Compare(theme.ChartsDark, "M") == 0)
                        {
                            chartsBackgroundColor = Color.FromArgb(40, 40, 40);
                            panelLoadingAnimationContainer.BackColor = Color.FromArgb(40, 40, 40);
                            pictureBoxLoadingAnimation.Invoke((MethodInvoker)delegate
                            {
                                pictureBoxLoadingAnimation.Image = Properties.Resources.SatsumaAnimated;
                            });
                            lblChartsLightBackground.Invoke((MethodInvoker)delegate
                            {
                                lblChartsLightBackground.ForeColor = Color.IndianRed;
                                lblChartsLightBackground.Text = "❌";
                            });
                            lblChartsMediumBackground.Invoke((MethodInvoker)delegate
                            {
                                lblChartsMediumBackground.ForeColor = Color.Green;
                                lblChartsMediumBackground.Text = "✔️";
                            });
                            lblChartsDarkBackground.Invoke((MethodInvoker)delegate
                            {
                                lblChartsDarkBackground.ForeColor = Color.IndianRed;
                                lblChartsDarkBackground.Text = "❌";
                            });
                            panelCustomThemeMenuTitleBG.Invoke((MethodInvoker)delegate
                            {
                                panelCustomThemeMenuTitleBG.BackColor = Color.Black;
                            });
                            panelPresetThemeMenuTitleBG.Invoke((MethodInvoker)delegate
                            {
                                panelPresetThemeMenuTitleBG.BackColor = Color.Black;
                            });
                        }
                        else
                        {
                            if (String.Compare(theme.ChartsDark, "L") == 0)
                            {
                                chartsBackgroundColor = Color.FromArgb(244, 244, 244);
                                panelLoadingAnimationContainer.BackColor = Color.FromArgb(244, 244, 244);
                                pictureBoxLoadingAnimation.Invoke((MethodInvoker)delegate
                                {
                                    pictureBoxLoadingAnimation.Image = Properties.Resources.SatsumaAnimatedWhite;
                                });
                                lblChartsLightBackground.Invoke((MethodInvoker)delegate
                                {
                                    lblChartsLightBackground.ForeColor = Color.Green;
                                    lblChartsLightBackground.Text = "✔️";
                                });
                                lblChartsMediumBackground.Invoke((MethodInvoker)delegate
                                {
                                    lblChartsMediumBackground.ForeColor = Color.IndianRed;
                                    lblChartsMediumBackground.Text = "❌";
                                });
                                lblChartsDarkBackground.Invoke((MethodInvoker)delegate
                                {
                                    lblChartsDarkBackground.ForeColor = Color.IndianRed;
                                    lblChartsDarkBackground.Text = "❌";
                                });
                                panelCustomThemeMenuTitleBG.Invoke((MethodInvoker)delegate
                                {
                                    panelCustomThemeMenuTitleBG.BackColor = Color.Gainsboro;
                                });
                                panelPresetThemeMenuTitleBG.Invoke((MethodInvoker)delegate
                                {
                                    panelPresetThemeMenuTitleBG.BackColor = Color.Gainsboro;
                                });
                            }
                        }
                    }

                    comboBoxTitlesBackgroundImage.SelectedIndex = (theme.TitlesBackgroundImage);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Colouring data fields...", "Applying theme...");
                    }
                    ColorDataFields(theme.DataFields);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Colouring labels...", "Applying theme...");
                    }
                    labelColor = theme.Labels; // (only used for poolranking chart title)
                    ColorLabels(theme.Labels);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Colouring charts...", "Applying theme...");
                    }
                    panelColour = theme.Panels; // used to colour chart backgrounds on the pools screens
                    CustomiseCharts(theme.PriceBlock);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Colouring fiat conversion fields...", "Applying theme...");
                    }
                    ColorFiatConversionText(theme.FiatConversionText);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Colouring headings...", "Applying theme...");
                    }
                    ColorHeadings(theme.Headings);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Colouring tables...", "Applying theme...");
                    }
                    ColorTables(theme.Tables);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Colouring table headings...", "Applying theme...");
                    }
                    ColorTableHeadings(theme.TableHeadings);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Colouring other text...", "Applying theme...");
                    }
                    ColorOtherText(theme.OtherText);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Colouring header data...", "Applying theme...");
                    }
                    ColorPriceBlock(theme.PriceBlock);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Colouring status messages...", "Applying theme...");
                    }
                    ColorStatusError(theme.StatusErrors);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Colouring buttons...", "Applying theme...");
                    }
                    ColorButtons(theme.Buttons);
                    ColorButtonText(theme.ButtonText);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Colouring lines...", "Applying theme...");
                    }
                    ColorLines(theme.Lines);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Colouring textboxes...", "Applying theme...");
                    }
                    ColorTextBoxes(theme.TextBoxes);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Colouring progress bars...", "Applying theme...");
                    }
                    ColorProgressBars(theme.ProgressBars);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Colouring table backgrounds...", "Applying theme...");
                    }
                    ColorTableBackgrounds(theme.TableBackgrounds);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Colouring table title bars...", "Applying theme...");
                    }
                    ColorTableTitleBars(theme.TableTitleBars);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Colouring panels...", "Applying theme...");
                    }
                    ColorPanels(theme.Panels);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Applying radius to controls...", "Applying theme...");
                    }
                    SetButtonAndPanelRadius(theme.BorderRadius);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Applying opacity...", "Applying theme...");
                    }
                    SetOpacity(theme.Opacity);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Styling progress bars...", "Applying theme...");
                    }
                    StyleProgressBars(theme.ProgressBarStyle!);
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Setting heading backgrounds...", "Applying theme...");
                    }
                    if (theme.HeadingBGDefault == true)
                    {
                        lblTitleBackgroundCustom.Invoke((MethodInvoker)delegate
                        {
                            lblTitleBackgroundCustom.ForeColor = Color.IndianRed;
                            lblTitleBackgroundCustom.Text = "❌";
                        });
                        lblTitleBackgroundNone.Invoke((MethodInvoker)delegate
                        {
                            lblTitleBackgroundNone.ForeColor = Color.IndianRed;
                            lblTitleBackgroundNone.Text = "❌";
                        });
                        lblTitlesBackgroundImage.Invoke((MethodInvoker)delegate
                        {
                            lblTitlesBackgroundImage.ForeColor = Color.Green;
                            lblTitlesBackgroundImage.Text = "✔️";
                        });
                        comboBoxTitlesBackgroundImage.Enabled = true;
                        HeadingBackgroundsToImage();
                    }
                    if (theme.HeadingBGNone == true)
                    {
                        lblTitleBackgroundCustom.Invoke((MethodInvoker)delegate
                        {
                            lblTitleBackgroundCustom.ForeColor = Color.IndianRed;
                            lblTitleBackgroundCustom.Text = "❌";
                        });
                        lblTitleBackgroundNone.Invoke((MethodInvoker)delegate
                        {
                            lblTitleBackgroundNone.ForeColor = Color.Green;
                            lblTitleBackgroundNone.Text = "✔️";
                        });
                        lblTitlesBackgroundImage.Invoke((MethodInvoker)delegate
                        {
                            lblTitlesBackgroundImage.ForeColor = Color.IndianRed;
                            lblTitlesBackgroundImage.Text = "❌";
                        });
                        comboBoxTitlesBackgroundImage.Enabled = false;
                        HeadingBackgroundsToNone();
                    }
                    if (theme.HeadingBGCustom == true)
                    {
                        comboBoxTitlesBackgroundImage.Enabled = false;
                        lblTitleBackgroundCustom.Invoke((MethodInvoker)delegate
                        {
                            lblTitleBackgroundCustom.ForeColor = Color.Green;
                            lblTitleBackgroundCustom.Text = "✔️";
                        });
                        lblTitleBackgroundNone.Invoke((MethodInvoker)delegate
                        {
                            lblTitleBackgroundNone.ForeColor = Color.IndianRed;
                            lblTitleBackgroundNone.Text = "❌";
                        });
                        lblTitlesBackgroundImage.Invoke((MethodInvoker)delegate
                        {
                            lblTitlesBackgroundImage.ForeColor = Color.IndianRed;
                            lblTitlesBackgroundImage.Text = "❌";
                        });
                        titleBackgroundColor = theme.HeadingBackgrounds;
                        HeadingBackgroundsToCustomColor();
                    }
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Applying window background...", "Applying theme...");
                    }
                    if (theme.BackgroundFranklin == true)
                    {
                        lblBackgroundFranklinSelected.Visible = true;
                        Control[] controlsToHide = { lblBackgroundSatsumaSelected, lblBackgroundGenesisSelected, lblBackgroundSymbolSelected, lblBackgroundStackSatsSelected, lblBackgroundHoneyBadgerSelected, lblBackgroundCustomColorSelected, lblBackgroundCustomImageSelected };
                        foreach (Control control in controlsToHide)
                        {
                            control.Invoke((MethodInvoker)delegate
                            {
                                control.Visible = false;
                            });
                        }
                        this.BackgroundImage = Properties.Resources.Franklin;
                        lblThemeImage.Text = "no custom image selected";
                        pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                    }
                    if (theme.BackgroundGenesis == true)
                    {
                        Control[] controlsToHide = { lblBackgroundFranklinSelected, lblBackgroundSatsumaSelected, lblBackgroundHoneyBadgerSelected, lblBackgroundSymbolSelected, lblBackgroundStackSatsSelected, lblBackgroundCustomColorSelected, lblBackgroundCustomImageSelected };
                        foreach (Control control in controlsToHide)
                        {
                            control.Invoke((MethodInvoker)delegate
                            {
                                control.Visible = false;
                            });
                        }
                        lblBackgroundGenesisSelected.Visible = true;
                        this.BackgroundImage = Properties.Resources.Genesis;
                        lblThemeImage.Text = "no custom image selected";
                        pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                    }
                    if (theme.BackgroundSatsuma == true)
                    {
                        lblBackgroundSatsumaSelected.Visible = true;
                        Control[] controlsToHide = { lblBackgroundFranklinSelected, lblBackgroundGenesisSelected, lblBackgroundSymbolSelected, lblBackgroundStackSatsSelected, lblBackgroundHoneyBadgerSelected, lblBackgroundCustomColorSelected, lblBackgroundCustomImageSelected };
                        foreach (Control control in controlsToHide)
                        {
                            control.Invoke((MethodInvoker)delegate
                            {
                                control.Visible = false;
                            });
                        }
                        this.BackgroundImage = Properties.Resources.Satsuma;
                        lblThemeImage.Text = "no custom image selected";
                        pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                    }
                    if (theme.BackgroundHoneyBadger == true)
                    {
                        lblBackgroundHoneyBadgerSelected.Visible = true;
                        Control[] controlsToHide = { lblBackgroundSatsumaSelected, lblBackgroundFranklinSelected, lblBackgroundGenesisSelected, lblBackgroundSymbolSelected, lblBackgroundStackSatsSelected, lblBackgroundCustomColorSelected, lblBackgroundCustomImageSelected };
                        foreach (Control control in controlsToHide)
                        {
                            control.Invoke((MethodInvoker)delegate
                            {
                                control.Visible = false;
                            });
                        }

                        this.BackgroundImage = Properties.Resources.HoneyBadger;
                        lblThemeImage.Text = "no custom image selected";
                        pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                    }
                    if (theme.BackgroundSymbol == true)
                    {
                        lblBackgroundSymbolSelected.Visible = true;
                        Control[] controlsToHide = { lblBackgroundSatsumaSelected, lblBackgroundFranklinSelected, lblBackgroundGenesisSelected, lblBackgroundStackSatsSelected, lblBackgroundHoneyBadgerSelected, lblBackgroundCustomColorSelected, lblBackgroundCustomImageSelected };
                        foreach (Control control in controlsToHide)
                        {
                            control.Invoke((MethodInvoker)delegate
                            {
                                control.Visible = false;
                            });
                        }
                        this.BackgroundImage = Properties.Resources.Symbol;
                        lblThemeImage.Text = "no custom image selected";
                        pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                    }
                    if (theme.BackgroundStackSats == true)
                    {
                        lblBackgroundStackSatsSelected.Visible = true;
                        Control[] controlsToHide = { lblBackgroundSatsumaSelected, lblBackgroundFranklinSelected, lblBackgroundGenesisSelected, lblBackgroundSymbolSelected, lblBackgroundHoneyBadgerSelected, lblBackgroundCustomColorSelected, lblBackgroundCustomImageSelected };
                        foreach (Control control in controlsToHide)
                        {
                            control.Invoke((MethodInvoker)delegate
                            {
                                control.Visible = false;
                            });
                        }
                        this.BackgroundImage = Properties.Resources.StackSats;
                        lblThemeImage.Text = "no custom image selected";
                        pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                    }
                    if (theme.BackgroundCustomColor == true)
                    {
                        lblBackgroundCustomColorSelected.Visible = true;
                        Control[] controlsToHide = { lblBackgroundFranklinSelected, lblBackgroundSatsumaSelected, lblBackgroundGenesisSelected, lblBackgroundSymbolSelected, lblBackgroundStackSatsSelected, lblBackgroundHoneyBadgerSelected, lblBackgroundCustomImageSelected };
                        foreach (Control control in controlsToHide)
                        {
                            control.Invoke((MethodInvoker)delegate
                            {
                                control.Visible = false;
                            });
                        }
                        this.BackgroundImage = null;
                        this.BackColor = theme.WindowBackground;
                        lblThemeImage.Text = "no custom image selected";
                        pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                    }
                    if (theme.BackgroundCustomImage == true)
                    {
                        lblBackgroundCustomImageSelected.Visible = true;
                        Control[] controlsToHide = { lblBackgroundFranklinSelected, lblBackgroundSatsumaSelected, lblBackgroundGenesisSelected, lblBackgroundSymbolSelected, lblBackgroundStackSatsSelected, lblBackgroundHoneyBadgerSelected, lblBackgroundCustomColorSelected };
                        foreach (Control control in controlsToHide)
                        {
                            control.Invoke((MethodInvoker)delegate
                            {
                                control.Visible = false;
                            });
                        }
                        lblThemeImage.Text = theme.WindowImage;
                        this.BackgroundImage = System.Drawing.Image.FromFile(theme.WindowImage);
                    }

                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Applying loading animations...", "Applying theme...");
                    }
                    if (theme.OrangeInfinity == 1)
                    {
                        lblInfinity1.Invoke((MethodInvoker)delegate
                        {
                            lblInfinity1.ForeColor = Color.Green;
                            lblInfinity1.Text = "✔️";
                        });
                        lblInfinity2.Invoke((MethodInvoker)delegate
                        {
                            lblInfinity2.ForeColor = Color.IndianRed;
                            lblInfinity2.Text = "❌";
                        });
                        lblInfinity3.Invoke((MethodInvoker)delegate
                        {
                            lblInfinity3.ForeColor = Color.IndianRed;
                            lblInfinity3.Text = "❌";
                        });
                        pictureBoxChartLoadingAnimation.Invoke((MethodInvoker)delegate
                        {
                            pictureBoxChartLoadingAnimation.Image = Properties.Resources.InfinityTrans;
                        });
                        pictureBoxDCAChartLoadingAnimation.Invoke((MethodInvoker)delegate
                        {
                            pictureBoxDCAChartLoadingAnimation.Image = Properties.Resources.InfinityTrans;
                        });
                    }
                    if (theme.OrangeInfinity == 2)
                    {
                        lblInfinity1.Invoke((MethodInvoker)delegate
                        {
                            lblInfinity1.ForeColor = Color.IndianRed;
                            lblInfinity1.Text = "❌";
                        });
                        lblInfinity2.Invoke((MethodInvoker)delegate
                        {
                            lblInfinity2.ForeColor = Color.Green;
                            lblInfinity2.Text = "✔️";
                        });
                        lblInfinity3.Invoke((MethodInvoker)delegate
                        {
                            lblInfinity3.ForeColor = Color.IndianRed;
                            lblInfinity3.Text = "❌";
                        });
                        pictureBoxChartLoadingAnimation.Invoke((MethodInvoker)delegate
                        {
                            pictureBoxChartLoadingAnimation.Image = Properties.Resources.OrangeInfinity;
                        });
                        pictureBoxDCAChartLoadingAnimation.Invoke((MethodInvoker)delegate
                        {
                            pictureBoxDCAChartLoadingAnimation.Image = Properties.Resources.OrangeInfinity;
                        });
                    }
                    if (theme.OrangeInfinity == 3)
                    {
                        lblInfinity1.Invoke((MethodInvoker)delegate
                        {
                            lblInfinity1.ForeColor = Color.IndianRed;
                            lblInfinity1.Text = "❌";
                        });
                        lblInfinity2.Invoke((MethodInvoker)delegate
                        {
                            lblInfinity2.ForeColor = Color.IndianRed;
                            lblInfinity2.Text = "❌";
                        });
                        lblInfinity3.Invoke((MethodInvoker)delegate
                        {
                            lblInfinity3.ForeColor = Color.Green;
                            lblInfinity3.Text = "✔️";
                        });
                        pictureBoxChartLoadingAnimation.Invoke((MethodInvoker)delegate
                        {
                            pictureBoxChartLoadingAnimation.Image = Properties.Resources.infinityspectrum;
                        });
                        pictureBoxDCAChartLoadingAnimation.Invoke((MethodInvoker)delegate
                        {
                            pictureBoxDCAChartLoadingAnimation.Image = Properties.Resources.infinityspectrum;
                        });
                    }

                    if (theme.BackgroundCustomImage == true && theme.WindowImage!.Length > 0)
                    {
                        lblThemeImage.Text = theme.WindowImage;
                        pictureBoxCustomImage.Image = System.Drawing.Image.FromFile(theme.WindowImage);
                    }
                    else
                    {
                        lblThemeImage.Text = "no custom image selected";
                        pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                    }

                    ReloadScreensWithListviews();
                    if (!firstThemeChange)
                    {
                        RegenerateVisibleCharts();
                    }
                    firstThemeChange = false;
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Styling the directory...", "Applying theme...");
                    }
                    LoadAndStyleDirectoryBrowser();
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("Regenerating charts...", "Applying theme...");
                    }
                    formsPlot1.Render();
                    if (theme.ShowTime == false)
                    {
                        lblShowClock.Invoke((MethodInvoker)delegate
                        {
                            lblShowClock.ForeColor = Color.IndianRed;
                            lblShowClock.Text = "❌";
                        });
                        lblTime.Visible = false;
                    }
                    else
                    {
                        lblShowClock.Invoke((MethodInvoker)delegate
                        {
                            lblShowClock.ForeColor = Color.Green;
                            lblShowClock.Text = "✔️";
                        });
                        if (theme.BackgroundGenesis == true)
                        {
                            lblTime.Font = new Font(lblTime.Font.FontFamily, (int)(14 * UIScale), lblTime.Font.Style);
                            lblTime.Location = new Point((int)(840 * UIScale), (int)(42 * UIScale));
                            lblTime.Visible = true;
                            lblTime.BringToFront();
                        }
                    }
                    if (fullSizeLoadingScreen.Visible)
                    {
                        fullSizeLoadingScreen.SetLoadingText("please wait a moment...", "Applying theme...");
                    }
                }
                catch (Exception ex)
                {
                    HandleException(ex, "RestoreTheme");
                }
                //wait 2 secs to give time for theme to be applied
                await Wait2SecsAsync().ConfigureAwait(true);

                //close the loading screen
                fullSizeLoadingScreen.Close();
                fullScreenLoadingScreenVisible = false;

                if (wasOnTop)
                {
                    this.TopMost = true;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "RestoreTheme");
            }
        }

        private void RegenerateVisibleCharts() // this is just to force theme changes to be reflected in the charts
        {
            // this always needs updating
            PopulateDCACalculatorAsync();

            // check the rest of the charts and refresh whichever is active (even if not visible at the time theme was changed)
            if (String.Compare(ActiveChart, "FeeRates") == 0)
            {
                formsPlot1.Plot.Clear();
                ChartFeeRatesAsync();
            }

            if (String.Compare(ActiveChart, "BlockFees") == 0)
            {
                formsPlot1.Plot.Clear();
                ChartBlockFeesAsync();
            }

            if (String.Compare(ActiveChart, "Reward") == 0)
            {
                formsPlot1.Plot.Clear();
                ChartRewardAsync();
            }

            if (String.Compare(ActiveChart, "BlockSize") == 0)
            {
                formsPlot1.Plot.Clear();
                ChartBlockSizeAsync();
            }

            if (String.Compare(ActiveChart, "Hashrate") == 0)
            {
                formsPlot1.Plot.Clear();
                ChartHashrateAsync();
            }

            if (String.Compare(ActiveChart, "HashrateLog") == 0)
            {
                formsPlot1.Plot.Clear();
                ChartHashrateAsync();
            }

            if (String.Compare(ActiveChart, "Difficulty") == 0)
            {
                formsPlot1.Plot.Clear();
                ChartDifficultyAsync();
            }

            if (String.Compare(ActiveChart, "DifficultyLog") == 0)
            {
                formsPlot1.Plot.Clear();
                ChartDifficultyAsync();
            }

            if (String.Compare(ActiveChart, "Circulation") == 0)
            {
                formsPlot1.Plot.Clear();
                ChartCirculationAsync();
            }

            if (String.Compare(ActiveChart, "UniqueAddresses") == 0)
            {
                formsPlot1.Plot.Clear();
                ChartUniqueAddressesAsync();
            }

            if (String.Compare(ActiveChart, "UniqueAddressesLog") == 0)
            {
                formsPlot1.Plot.Clear();
                ChartUniqueAddressesAsync();
            }

            if (String.Compare(ActiveChart, "UTXO") == 0)
            {
                formsPlot1.Plot.Clear();
                ChartUTXOAsync();
            }

            if (String.Compare(ActiveChart, "UTXOLog") == 0)
            {
                formsPlot1.Plot.Clear();
                ChartUTXOAsync();
            }

            if (String.Compare(ActiveChart, "PoolsRanking") == 0)
            {
                formsPlot2.Plot.Clear();
                ChartPoolsRankingAsync();
            }

            if (String.Compare(ActiveChart, "NodesByNetwork") == 0)
            {
                formsPlot1.Plot.Clear();
                ChartNodesByNetworkAsync();
            }

            if (String.Compare(ActiveChart, "NodesByCountry") == 0)
            {
                formsPlot3.Plot.Clear();
                ChartNodesByCountryAsync();
            }

            if (String.Compare(ActiveChart, "LightningCapacity") == 0)
            {
                formsPlot1.Plot.Clear();
                ChartLightningCapacityAsync();
            }

            if (String.Compare(ActiveChart, "LightningChannels") == 0)
            {
                formsPlot1.Plot.Clear();
                ChartLightningChannelsAsync();
            }

            if (String.Compare(ActiveChart, "Price") == 0)
            {
                formsPlot1.Plot.Clear();
                ChartPriceAsync();
            }

            if (String.Compare(ActiveChart, "PriceLog") == 0)
            {
                formsPlot1.Plot.Clear();
                ChartPriceAsync();
            }

            if (String.Compare(ActiveChart, "MarketCap") == 0)
            {
                formsPlot1.Plot.Clear();
                ChartMarketCapAsync();
            }

            if (String.Compare(ActiveChart, "MarketCapLog") == 0)
            {
                formsPlot1.Plot.Clear();
                ChartMarketCapAsync();
            }
        }

        private async Task Wait2SecsAsync()
        {
            if (firstTimeLoadingScreen)
            {
                firstTimeLoadingScreen = false;
                await Task.Delay(8000).ConfigureAwait(true);
                preventSavingSettings = false;
                SaveSettings();
            }
            else
            {
                await Task.Delay(3500).ConfigureAwait(true);
            }
        }

        #endregion
        #region apply changes to lists of controls
        private void SetButtonAndPanelRadius(int radius)
        {
            try
            {
                // main menu
                RJButton[] mainMenuButtonBorders = { btnMinimise, btnShowGlobalSearch, btnMoveWindow, btnExit, btnHelp, btnAddToBookmarks, btnUniversalSearch, btnShowGlobalSearch, btnHideErrorMessage };
                foreach (RJButton button in mainMenuButtonBorders)
                {
                    button.Invoke((MethodInvoker)delegate
                    {
                        button.BorderRadius = (int)(radius * UIScale);
                    });
                }

                //bitcoin dashboard
                btnDistributionLin.BorderRadius = (int)((radius - 4) * UIScale);
                btnDistributionLog.BorderRadius = (int)((radius - 4) * UIScale);

                // block
                RJButton[] blockButtonBorders = { btnLookUpBlock, btnPreviousBlockTransactions, btnNextBlockTransactions, btnNextBlock, btnPreviousBlock };
                foreach (RJButton button in blockButtonBorders)
                {
                    button.Invoke((MethodInvoker)delegate
                    {
                        button.BorderRadius = (int)(radius * UIScale);
                    });
                }
                btnViewTransactionFromBlock.BorderRadius = (int)((radius - 4) * UIScale);
                btnViewPoolFromBlockScreen.BorderRadius = (int)((radius - 4) * UIScale);
                btnNumericUpDownSubmittedBlockNumberUp.Invoke((MethodInvoker)delegate
                {
                    btnNumericUpDownSubmittedBlockNumberUp.BorderRadius = 0;
                });
                btnNumericUpDownSubmittedBlockNumberDown.Invoke((MethodInvoker)delegate
                {
                    btnNumericUpDownSubmittedBlockNumberDown.BorderRadius = 0;
                });

                // blocks
                RJButton[] blocksButtonBorders = { btnLookUpBlockList, btnNewer15Blocks, btnOlder15Blocks };
                foreach (RJButton button in blocksButtonBorders)
                {
                    button.Invoke((MethodInvoker)delegate
                    {
                        button.BorderRadius = (int)(radius * UIScale);
                    });
                }


                btnViewPoolFromBlockList.BorderRadius = (int)((radius - 4) * UIScale);
                btnViewBlockFromBlockList.BorderRadius = (int)((radius - 4) * UIScale);

                RJButton[] otherButtonBorders = { btnNumericUpDownBlockHeightToStartListFromUp, btnNumericUpDownBlockHeightToStartListFromDown, btnNonZeroBalancesUp, btnNonZeroBalancesDown, btnDerivationPathsUp, btnDerivationPathsDown, btnOpacityUp, btnOpacityDown, btnDataRefreshPeriodUp, btnDataRefreshPeriodDown, btnBiggerScale, btnSmallerScale, btnThemeMenu, btnCurrency, btnCopyErrorMessage };
                foreach (RJButton button in otherButtonBorders)
                {
                    button.Invoke((MethodInvoker)delegate
                    {
                        button.BorderRadius = 0;
                    });
                }

                // address
                RJButton[] addressButtonBorders = { btnShowAllTX, btnShowConfirmedTX, btnShowUnconfirmedTX, btnFirstAddressTransaction, btnNextAddressTransactions, btnViewUTXOsFromAddressTX };
                foreach (RJButton button in addressButtonBorders)
                {
                    button.Invoke((MethodInvoker)delegate
                    {
                        button.BorderRadius = (int)(radius * UIScale);
                    });
                }
                BtnViewTransactionFromAddress.BorderRadius = (int)((radius - 4) * UIScale);
                BtnViewBlockFromAddress.BorderRadius = (int)((radius - 4) * UIScale);

                // address UTXO
                RJButton[] addressUTXOButtonBorders = { btnViewAddressTXFromUTXO, btnAddressUTXOScrollUp, btnAddressUTXOScrollDown };
                foreach (RJButton button in addressUTXOButtonBorders)
                {
                    button.Invoke((MethodInvoker)delegate
                    {
                        button.BorderRadius = (int)(radius * UIScale);
                    });
                }
                btnViewTransactionFromAddressUTXO.BorderRadius = (int)((radius - 4) * UIScale);
                btnViewBlockFromAddressUTXO.BorderRadius = (int)((radius - 4) * UIScale);

                //mining pools - blocks, hashrate & list
                RJButton[] PoolsBlocksButtonBorders = { btnPoolsBlocksScrollDown, btnPoolsBlocksScrollUp, btnPoolsHashrateScrollDown, btnPoolsHashrateScrollUp, btnPoolsListScrollDown, btnPoolsListScrollUp, btnPoolsListScrollUp, btnPoolsListScrollDown };
                foreach (RJButton button in PoolsBlocksButtonBorders)
                {
                    button.Invoke((MethodInvoker)delegate
                    {
                        button.BorderRadius = (int)(radius * UIScale);
                    });
                }
                btnViewPoolFromMiningBlocks.BorderRadius = (int)((radius - 4) * UIScale);
                btnViewPoolFromPoolsHashrate.BorderRadius = (int)((radius - 4) * UIScale);
                btnViewBlockFromBlocksByPool.BorderRadius = (int)((radius - 4) * UIScale);

                // appearance & settings
                RJButton[] appearanceButtonBorders = { btnResetAll, button1, button2, btnLoadTheme, btnSaveTheme, btnDeleteTheme, btnSquareCorners, btnPartialCorners, btnRoundCorners, btnColorDataFields, btnColorLabels, btnColorHeadings, btnColorTableText, btnColorFiatConversionText, btnListViewHeadingColor, btnColorOtherText, btnColorPriceBlock, btnColorStatusError, btnColorButtonText, btnColorButtons, btnColorLines, btnColorTextBox, btnColorPanels, btnColorProgressBars, btnColorTableTitleBar, btnColorTableBackground, btnColorTitleBackgrounds, btnPreviewAnimations };
                foreach (RJButton button in appearanceButtonBorders)
                {
                    button.Invoke((MethodInvoker)delegate
                    {
                        button.BorderRadius = (int)(radius * UIScale);
                    });
                }

                if (radius == 1)
                {
                    btnSquareCorners.Enabled = false;
                    btnPartialCorners.Enabled = true;
                    btnRoundCorners.Enabled = true;
                }
                else
                {
                    if (radius == 6)
                    {
                        btnSquareCorners.Enabled = true;
                        btnPartialCorners.Enabled = false;
                        btnRoundCorners.Enabled = true;
                    }
                    else
                    {
                        if (radius == 12)
                        {
                            btnSquareCorners.Enabled = true;
                            btnPartialCorners.Enabled = true;
                            btnRoundCorners.Enabled = false;
                        }
                    }
                }

                // chart
                RJButton[] chartButtonBorders = { btnSaveChart, btnChartDifficultyLog, btnChartDifficultyLinear, btnHashrateScaleLog, btnHashrateScaleLinear, btnChartMarketCapScaleLog, btnChartMarketCapScaleLinear, btnPriceChartScaleLog, btnPriceChartScaleLinear, btnChartUTXOScaleLog, btnChartUTXOScaleLinear, btnChartAddressScaleLog, btnChartAddressScaleLinear };
                foreach (RJButton button in chartButtonBorders)
                {
                    button.Invoke((MethodInvoker)delegate
                    {
                        button.BorderRadius = (int)(radius * UIScale);
                    });
                }

                // bookmarks
                RJButton[] bookmarkButtonBorders = { btnBookmarkUnlock, btnDecryptBookmark, btnDeleteBookmark, btnViewBookmark, btnCommitToBookmarks, btnCancelAddToBookmarks, btnBookmarksListUp, btnBookmarksListDown };
                foreach (RJButton button in bookmarkButtonBorders)
                {
                    button.Invoke((MethodInvoker)delegate
                    {
                        button.BorderRadius = (int)(radius * UIScale);
                    });
                }

                // directory
                RJButton[] directoryButtonBorders = { btnDirectoryScrollDown, btnDirectoryScrollUp };
                foreach (RJButton button in directoryButtonBorders)
                {
                    button.Invoke((MethodInvoker)delegate
                    {
                        button.BorderRadius = (int)(radius * UIScale);
                    });
                }

                // transaction
                RJButton[] txButtonBorders = { btnTransactionInputDown, btnTransactionInputsUp, btnTransactionOutputsDown, btnTransactionOutputsUp };
                foreach (RJButton button in txButtonBorders)
                {
                    button.Invoke((MethodInvoker)delegate
                    {
                        button.BorderRadius = (int)(radius * UIScale);
                    });
                }
                btnViewAddressFromTXInput.BorderRadius = (int)((radius - 4) * UIScale);
                btnViewAddressFromTXOutput.BorderRadius = (int)((radius - 4) * UIScale);

                //dca calculator
                btnCalculateDCA.BorderRadius = (int)(radius * UIScale);

                //xpub
                btnViewAddressFromXpub.BorderRadius = (int)((radius - 4) * UIScale);
                btnXpubAddressesDown.BorderRadius = (int)(radius * UIScale);
                btnXpubAddressesUp.BorderRadius = (int)(radius * UIScale);
                // force refresh of panels
                PanelsRepaint();
            }
            catch (Exception ex)
            {
                HandleException(ex, "SetButtonAndPanelRadius");
            }
        }

        private void SetOpacity(decimal opacity)
        {
            try
            {
                if (opacity < 1 || opacity > 100)
                {
                    opacity = 100;
                }
                numericUpDownOpacity.Value = opacity;
                this.Opacity = Convert.ToDouble(numericUpDownOpacity.Value / 100);
            }
            catch (Exception ex)
            {
                HandleException(ex, "SetOpacity");
            }
        }

        private void PanelsRepaint()
        {
            try
            {
                #region rounded panels
                Control[] panelsToInvalidate = { panel194, panel198, panel192, panel193, panel7, panel109, panelXpubContainer, panelXpubScrollContainer, panel92, panel32, panel74, panel76, panel77, panel99, panel84, panel88, panel89, panel90, panel86, panel87, panel103, panel46, panel51, panel91, panel70, panel71, panel16, panel21, panel85, panel53, panel96, panel106, panel107, panelAddToBookmarks,
                    panelAddToBookmarksBorder, panelOwnNodeAddressTXInfo, panelOwnNodeBlockTXInfo, panelTransactionMiddle, panelErrorMessage, panelDCAMessages, panelDCASummary, panelDCAInputs, panel119, panelPriceConvert, panelDCAChartContainer, panel117, panel121, panel122, panel120, panelPoolsListScrollContainer,
                    panel101, panel132, panelPriceSourceIndicators, panelUTXOsContainer, panel137, panelAddressUTXOScrollContainer, panelBookmarksContainer, panelBookmarksScrollContainer, panelPoolsBlocksContainer, panelPoolsHashrateContainer, panelPoolsBlocksScrollContainer, panel147, panel80, panel153, panel158, panel160, panelUTXOError,
                panelTransactionInputs, panelTransactionOutputs, panelTXInScrollContainer, panelTXOutScrollContainer, panelAddressTxContainer, panel123, panel124, panelPriceSourceIndicatorsOuter, panelPoolsListScrollbarInner, panelBookmarksScrollbarInner, panelTXInScrollbarInner, panelTXOutScrollbarInner, panelAddressUTXOScrollbarInner, panelPoolsBlocksScrollbarInner, panelXpubScrollbarInner, panel133, panel134, panel188, panel189, panel190, panel191 };
                foreach (Control control in panelsToInvalidate)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.Invalidate();
                    });
                }
                #endregion
                #region panels (textbox containers)
                Control[] textboxPanelsToInvalidate = { panelThemeNameContainer, panelOptionalNotesContainer, panelEncryptionKeyContainer, panelSubmittedAddressContainer, panelBlockHeightToStartFromContainer, panelTransactionIDContainer, panelSubmittedXpubContainer, panelXpubScreenOwnNodeURLContainer,
                    panelBookmarkKeyContainer, panelConvertBTCToFiatContainer, panelConvertUSDToBTCContainer, panelConvertEURToBTCContainer, panelConvertGBPToBTCContainer, panelConvertXAUToBTCContainer, panelSettingsOwnNodeURLContainer, panelSettingsUIScaleContainer, panelAppearanceTextbox1Container,
                    panelComboBoxStartupScreenContainer, panelCustomizeThemeListContainer, panelHeadingBackgroundSelect, panelSelectBlockNumberContainer, panelUniversalSearchContainer, panel75, panel95, panel93, panel98, panel111, panel113, panel114, panel115, panel27, panelSubmittedAddressContainerUTXO, panelComboBoxChartSelectContainer, panel149, panel173, panel174, panel175, panel176 };
                foreach (Control control in textboxPanelsToInvalidate)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.Invalidate();
                    });
                }
                #endregion
                #region panels (heading containers)
                Control[] headingPanelsToInvalidate = { panel1, panel2, panel3, panel4, panel5, panel6, panel8, panel9, panel10, panel11, panel12, panel20, panel23, panel26, panel29, panel31, panel38, panel39, panel40, panel41, panel42, panel43, panel44, panel45, panel54, panel78, panel139,
                    panel82, panel83, panel94, panel22, panel34, panel37, panel97, panel98, panel108, panel141, panel136, panel138, panel145, panel81, panel146, panel24 };
                foreach (Control control in headingPanelsToInvalidate)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.Invalidate();
                    });
                }
                #endregion

                #region panel 'tabs'
                Control[] panelTabsToInvalidate = { panelBlockTransactionsTab, panelBlockListTab, panelAddressTXTab, panelAddressUTXOTab, panelTransactionInTab, panelTransactionOutTab };
                foreach (Control control in panelTabsToInvalidate)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.Invalidate();
                    });
                }
                #endregion
            }
            catch (Exception ex)
            {
                HandleException(ex, "PanelsRepaint");
            }
        }

        private void ColorButtonText(Color thiscolor)
        {
            try
            {
                Control[] listHeaderButtonTextToColor = { btnCurrency, btnAddToBookmarks, btnHelp, btnMinimise, btnShowGlobalSearch, btnMoveWindow, btnExit, btnCommitToBookmarks, btnCancelAddToBookmarks, btnMenuAddress, btnMenuAddressUTXO, btnMenuCreateTheme, btnMenuBitcoinDashboard, btnMenuBlock, btnMenuPriceConverter, btnMenuBlockList, btnMenuDirectory, btnMenuBookmarks, btnMenuCharts, btnMenuHelp, btnMenuLightningDashboard, btnMenuSettings, btnMenuSplash, btnMenuTransaction, btnMenuDCACalculator, btnMenuXpub, btnThemeMenu, btnMenuThemeFranklin, btnMenuThemeSatsuma, BtnMenuThemeGenesis, btnMenuThemeStackSats, btnMenuThemeSymbol, btnMenuThemeHoneyBadger, btnUSD, btnEUR, btnGBP, btnXAU, btnHideErrorMessage, btnCopyErrorMessage, btnMenuMiningPools, btnMenuPoolsByBlocks };
                if (String.Compare(lblChartsDarkBackground.Text, "✔️") == 0 || String.Compare(lblChartsMediumBackground.Text, "✔️") == 0)
                {
                    //header

                    foreach (Control control in listHeaderButtonTextToColor)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.ForeColor = Color.Silver;
                        });
                    }
                    comboBoxHeaderCustomThemes.ForeColor = Color.Silver;
                    comboBoxHeaderCustomThemes.ListTextColor = Color.Silver;
                    btnMenuApplyCustomTheme.ForeColor = Color.Silver;
                    lblCurrencyMenuHighlightedButtonText.ForeColor = Color.DimGray;
                    lblMenuHighlightedButtonText.ForeColor = Color.DimGray;
                    lblThemeMenuHighlightedButtonText.ForeColor = Color.DimGray;
                    lblApplyThemeButtonDisabledMask.ForeColor = Color.DimGray;
                }
                else
                {
                    //header
                    foreach (Control control in listHeaderButtonTextToColor)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.ForeColor = Color.DimGray;
                        });
                    }
                    comboBoxHeaderCustomThemes.ForeColor = Color.DimGray;
                    comboBoxHeaderCustomThemes.ListTextColor = Color.DimGray;
                    btnMenuApplyCustomTheme.ForeColor = Color.DimGray;
                    lblCurrencyMenuHighlightedButtonText.ForeColor = Color.Silver;
                    lblMenuHighlightedButtonText.ForeColor = Color.Silver;
                    lblThemeMenuHighlightedButtonText.ForeColor = Color.Silver;
                    lblApplyThemeButtonDisabledMask.ForeColor = Color.Silver;
                }
                btnUniversalSearch.ForeColor = thiscolor;

                //bitcoin dashboard
                Control[] listBitcoinDashboardButtonTextToColor = { btnDistributionLog, btnDistributionLin };
                foreach (Control control in listBitcoinDashboardButtonTextToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }

                //settings & appearance
                Control[] listSettingsButtonTextToColor = { btnResetAll, button1, button2, btnSaveTheme, btnLoadTheme, btnDeleteTheme, btnSquareCorners, btnPartialCorners, btnRoundCorners };
                foreach (Control control in listSettingsButtonTextToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //address
                Control[] listAddressButtonTextToColor = { btnShowAllTX, btnShowConfirmedTX, btnShowUnconfirmedTX, btnFirstAddressTransaction, btnNextAddressTransactions, BtnViewTransactionFromAddress, BtnViewBlockFromAddress, btnViewUTXOsFromAddressTX };
                foreach (Control control in listAddressButtonTextToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //address utxo
                Control[] listAddressUTXOButtonTextToColor = { btnViewTransactionFromAddressUTXO, btnViewBlockFromAddressUTXO, btnViewAddressTXFromUTXO };
                foreach (Control control in listAddressUTXOButtonTextToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //mining pools - blocks & hashrate & list
                Control[] listPoolsBlocksButtonTextToColor = { btnPoolsBlocksScrollDown, btnPoolsBlocksScrollUp, btnViewPoolFromMiningBlocks, btnPoolsHashrateScrollDown, btnPoolsHashrateScrollUp, btnViewPoolFromPoolsHashrate, btnPoolsListScrollUp, btnPoolsListScrollDown, btnViewBlockFromBlocksByPool, btnViewPoolFromBlockList, btnViewPoolFromBlockScreen };
                foreach (Control control in listPoolsBlocksButtonTextToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //block
                Control[] listBlockButtonTextToColor = { btnViewTransactionFromBlock, btnPreviousBlockTransactions, btnNextBlockTransactions, btnLookUpBlock, btnNextBlock, btnPreviousBlock };
                foreach (Control control in listBlockButtonTextToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //blocklist
                Control[] listBlockListButtonTextToColor = { btnLookUpBlockList, btnViewBlockFromBlockList, btnNewer15Blocks, btnOlder15Blocks };
                foreach (Control control in listBlockListButtonTextToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //transaction
                Control[] listTransactionButtonTextToColor = { btnViewAddressFromTXInput, btnViewAddressFromTXOutput, btnTransactionInputsUp, btnTransactionInputDown, btnTransactionOutputsUp, btnTransactionOutputsDown };
                foreach (Control control in listTransactionButtonTextToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //xpub
                Control[] listXpubButtonTextToColor = { btnViewAddressFromXpub, btnXpubAddressesUp, btnXpubAddressesDown };
                foreach (Control control in listXpubButtonTextToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //bookmarks
                Control[] listBookmarksButtonTextToColor = { btnBookmarksListUp, btnBookmarksListDown, btnBookmarkUnlock, btnDecryptBookmark, btnDeleteBookmark, btnViewBookmark, btnCommitToBookmarks, btnCancelAddToBookmarks, btnDeleteAllBookmarks, btnDeleteAllBookmarksNo, btnDeleteAllBookmarksYes };
                foreach (Control control in listBookmarksButtonTextToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //charts
                Control[] listChartsButtonsTextToColor = { btnPriceChartScaleLinear, btnPriceChartScaleLog, btnChartMarketCapScaleLinear, btnChartMarketCapScaleLog, btnChartUTXOScaleLinear, btnChartUTXOScaleLog, btnChartAddressScaleLinear, btnChartAddressScaleLog, btnSaveChart, btnChartDifficultyLinear, btnChartDifficultyLog, btnHashrateScaleLinear, btnHashrateScaleLog };
                foreach (Control control in listChartsButtonsTextToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //directory
                Control[] listDirectoryButtonsTextToColor = { btnDirectoryScrollDown, btnDirectoryScrollUp };
                foreach (Control control in listDirectoryButtonsTextToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //dca calculator
                Control[] listDCAButtonsTextToColor = { btnCalculateDCA };
                foreach (Control control in listDCAButtonsTextToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorButtonText");
            }
        }

        private void CustomiseCharts(Color thisColor)
        {
            try
            {
                Control[] labelsToColor = { label416, label415, label232, label233 };
                foreach (Control control in labelsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = btnMenuDirectory.ForeColor;
                    });
                }

                formsPlot1.Plot.Margins(x: .1, y: .1);
                formsPlot1.Plot.Style(ScottPlot.Style.Black);
                formsPlot1.RightClicked -= formsPlot1.DefaultRightClickEvent; // disable default right-click event
                formsPlot1.Configuration.DoubleClickBenchmark = false;
                formsPlot1.Plot.Palette = ScottPlot.Palette.Amber;
                formsPlot1.Plot.YAxis.AxisLabel.IsVisible = false;

                formsPlot2.Plot.Margins(x: .1, y: .1);
                formsPlot2.Plot.Style(ScottPlot.Style.Black);
                formsPlot2.RightClicked -= formsPlot2.DefaultRightClickEvent; // disable default right-click event
                formsPlot2.Configuration.DoubleClickBenchmark = false;
                formsPlot2.Configuration.Pan = false;
                formsPlot2.Configuration.RightClickDragZoom = false;
                formsPlot2.Configuration.LeftClickDragPan = false;
                formsPlot2.Configuration.Zoom = false;

                formsPlot3.Plot.Margins(x: .1, y: .1);
                formsPlot3.Plot.Style(ScottPlot.Style.Black);
                formsPlot3.RightClicked -= formsPlot3.DefaultRightClickEvent; // disable default right-click event
                formsPlot3.Configuration.DoubleClickBenchmark = false;
                formsPlot3.Plot.Palette = ScottPlot.Palette.Amber;
                formsPlot3.Plot.YAxis.AxisLabel.IsVisible = false;

                formsPlotDCA.Plot.Margins(x: .1, y: .1);
                formsPlotDCA.Plot.Style(ScottPlot.Style.Black);
                formsPlotDCA.RightClicked -= formsPlot1.DefaultRightClickEvent; // disable default right-click event
                formsPlotDCA.Configuration.DoubleClickBenchmark = false;
                formsPlotDCA.Plot.Palette = ScottPlot.Palette.Amber;
                formsPlotDCA.Plot.YAxis.AxisLabel.IsVisible = false;

                formsPlotPoolRankForPoolScreen.Plot.Margins(x: .1, y: .1);
                formsPlotPoolRankForPoolScreen.Plot.Style(ScottPlot.Style.Black);
                formsPlotPoolRankForPoolScreen.RightClicked -= formsPlot1.DefaultRightClickEvent; // disable default right-click event
                formsPlotPoolRankForPoolScreen.Configuration.DoubleClickBenchmark = false;
                formsPlotPoolRankForPoolScreen.Plot.Palette = ScottPlot.Palette.Amber;
                formsPlotPoolRankForPoolScreen.Plot.YAxis.AxisLabel.IsVisible = false;

                formsPlotHashrateForPoolsScreen.Plot.Margins(x: .1, y: .1);
                formsPlotHashrateForPoolsScreen.Plot.Style(ScottPlot.Style.Black);
                formsPlotHashrateForPoolsScreen.RightClicked -= formsPlot1.DefaultRightClickEvent; // disable default right-click event
                formsPlotHashrateForPoolsScreen.Configuration.DoubleClickBenchmark = false;
                formsPlotHashrateForPoolsScreen.Plot.Palette = ScottPlot.Palette.Amber;
                formsPlotHashrateForPoolsScreen.Plot.YAxis.AxisLabel.IsVisible = false;
                formsPlotHashrateForPoolsScreen.Plot.XAxis.AxisLabel.IsVisible = false;

                formsPlotPoolHashrate.Plot.Margins(x: .1, y: .1);
                formsPlotPoolHashrate.Plot.Style(ScottPlot.Style.Black);
                formsPlotPoolHashrate.RightClicked -= formsPlot1.DefaultRightClickEvent; // disable default right-click event
                formsPlotPoolHashrate.Configuration.DoubleClickBenchmark = false;
                formsPlotPoolHashrate.Plot.Palette = ScottPlot.Palette.Amber;
                formsPlotPoolHashrate.Plot.YAxis.AxisLabel.IsVisible = false;
                formsPlotPoolHashrate.Plot.XAxis.AxisLabel.IsVisible = false;

                formsPlot1.Plot.Style(
                    figureBackground: Color.Transparent,
                    dataBackground: chartsBackgroundColor,
                    titleLabel: thisColor,
                    axisLabel: label148.ForeColor); // using any random label to get the color from
                formsPlot2.Plot.Style(
                    figureBackground: Color.Transparent,
                    dataBackground: chartsBackgroundColor,
                    titleLabel: thisColor,
                    axisLabel: label148.ForeColor); // using any random label to get the color from
                formsPlot3.Plot.Style(
                    figureBackground: Color.Transparent,
                    dataBackground: chartsBackgroundColor,
                    titleLabel: thisColor,
                    axisLabel: label148.ForeColor); // using any random label to get the color from
                formsPlotDCA.Plot.Style(
                    figureBackground: Color.Transparent,
                    dataBackground: chartsBackgroundColor,
                    titleLabel: thisColor,
                    axisLabel: label148.ForeColor); // using any random label to get the color from
                formsPlotPoolRankForPoolScreen.Plot.Style(
                    figureBackground: Color.Transparent,
                    dataBackground: panelColour,
                    titleLabel: thisColor,
                    axisLabel: label148.ForeColor); // using any random label to get the color from
                formsPlotHashrateForPoolsScreen.Plot.Style(
                    figureBackground: Color.Transparent,
                    dataBackground: panelColour,
                    titleLabel: thisColor,
                    axisLabel: label148.ForeColor); // using any random label to get the color from
                formsPlotPoolHashrate.Plot.Style(
                    figureBackground: Color.Transparent,
                    dataBackground: panelColour,
                    titleLabel: thisColor,
                    axisLabel: label148.ForeColor); // using any random label to get the color from

                Control[] panelsToColor = { panelPriceScaleButtons, panelChartMarketCapScaleButtons, panelChartUTXOScaleButtons, panelChartDifficultyScaleButtons, panelHashrateScaleButtons, panelUniqueAddressesScaleButtons, panelCurrencyMenuFiller, panelThemeMenuFiller, panelDCAChartContainer };
                foreach (Control control in panelsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = chartsBackgroundColor;
                    });
                }

                Color newGridlineColor = Color.FromArgb(50, 50, 50);
                if (String.Compare(lblChartsLightBackground.Text, "✔️") == 0)
                {
                    newGridlineColor = Color.FromArgb(220, 220, 220);
                }
                // Update the Grid color
                formsPlot1.Plot.Style(grid: newGridlineColor);
                formsPlotDCA.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                formsPlotDCA.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                formsPlotDCA.Plot.YAxis2.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                formsPlot2.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                formsPlot2.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                formsPlot3.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                formsPlot3.Plot.YAxis2.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                formsPlotHashrateForPoolsScreen.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                formsPlotHashrateForPoolsScreen.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                formsPlotPoolHashrate.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                formsPlotPoolHashrate.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: btnMenuDirectory.ForeColor);
                formsPlot1.Refresh();
                formsPlot2.Refresh();
                formsPlot3.Refresh();
                formsPlotDCA.Refresh();
                formsPlotDCA.Render();
                formsPlotPoolRankForPoolScreen.Refresh();
                formsPlotPoolRankForPoolScreen.Render();
                formsPlotHashrateForPoolsScreen.Refresh();
                formsPlotHashrateForPoolsScreen.Render();
                formsPlotPoolHashrate.Refresh();
                formsPlotPoolHashrate.Render();
                formsPlot1.Render();
                formsPlot2.Render();
                formsPlot3.Render();
            }
            catch (Exception ex)
            {
                HandleException(ex, "CustomiseCharts");
            }
        }

        private void ColorDataFields(Color thisColor) // and numericupdown button text
        {
            try
            {
                //header
                Control[] listHeaderDataFieldsToColor = { lblHeaderMarketCap, lblHeaderMoscowTime, lblHeaderTransactions, lblHeaderBlockSize, lblHeaderPriceChange, lblHeaderTimestamp, lblHeaderNextBlockMinMaxFee, lblHeaderNextBlockTotalFees };
                foreach (Control control in listHeaderDataFieldsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thisColor;
                    });
                }
                //bitcoindashboard
                Control[] listBitcoinDashboardDataFieldsToColor = { lblUTXOMedAge, lblUTXOAvgAge, lblTotalAddresses, lblChangeSinceCycleLow, lblIssuance, lblTotalUTXOs, lblAddresses100kSats, lblAddresses1mSats, lblAddresses10mSats, lblAddresses1BTC, lblAddresses10BTC, lblAddresses100BTC, lblAddresses1000BTC, lblAddresses10000BTC, lblAddresses100kBTC, lblAddresses1mBTC, lblATH, lblATHPercentChange, lblATHDate, lblATHDaysElapsed, lbl24HoursHighestPrice, lbl24HoursLowestPrice, lblPrice14Days, lblPrice1Year, lblPrice200Days, lblPrice24Hours, lblPrice30Days, lblPrice60Days, lblPrice7Days, lblPrice, lblMoscowTime, lblMarketCapUSD, lblBTCInCirc, lblActiveAddresses, lblBlocksIn24Hours, lbl24HourTransCount, lbl24HourBTCSent, lblTXInMempool, lblNextBlockMinMaxFee, lblNextBlockTotalFees, lblTransInNextBlock, lblAvgTimeBetweenBlocks, lblEstHashrate, lblNextDiffAdjBlock, lblDifficultyAdjEst, lblBlockSubsidy, lblProgressNextDiffAdjPercentage, lblBlocksUntilDiffAdj, lblEstDiffAdjDate, lblProgressToHalving, lblEstimatedHalvingDate, lblHalvingSecondsRemaining, lblBlockSubsidyAfterHalving, lblBTCToBeIssued, lblPercentIssued, lblDifficultyEpoch, lblNetworkAge, lblSubsidyEpoch, lblPrevDiffAdjustment };
                foreach (Control control in listBitcoinDashboardDataFieldsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thisColor;
                    });
                }
                //lightningdashboard
                Control[] listLightningDashboardDataFieldsToColor = { lblTotalCapacity, lblClearnetCapacity, lblTorCapacity, lblUnknownCapacity, lblNodeCount, lblTorNodes, lblClearnetNodes, lblClearnetTorNodes, lblUnannouncedNodes, lblChannelCount, lblAverageCapacity, lblAverageFeeRate, lblAverageBaseFeeMtokens, lblMedCapacity, lblMedFeeRate, lblMedBaseFeeTokens, aliasLabel1, aliasLabel2, aliasLabel3, aliasLabel4, aliasLabel5, aliasLabel6, aliasLabel7, aliasLabel8, aliasLabel9, aliasLabel10, capacityLabel1, capacityLabel2, capacityLabel3, capacityLabel4, capacityLabel5, capacityLabel6, capacityLabel7, capacityLabel8, capacityLabel9, capacityLabel10, aliasConnLabel1, aliasConnLabel2, aliasConnLabel3, aliasConnLabel4, aliasConnLabel5, aliasConnLabel6, aliasConnLabel7, aliasConnLabel8, aliasConnLabel9, aliasConnLabel10, channelLabel1, channelLabel2, channelLabel3, channelLabel4, channelLabel5, channelLabel6, channelLabel7, channelLabel8, channelLabel9, channelLabel10 };
                foreach (Control control in listLightningDashboardDataFieldsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thisColor;
                    });
                }
                //address
                Control[] listAddressDataFieldsToColor = { lblAddressType, lblAddressConfirmedUnspent, lblAddressConfirmedUnspentOutputs, lblAddressConfirmedTransactionCount, lblAddressConfirmedReceived, lblAddressConfirmedReceivedOutputs, lblAddressConfirmedSpent, lblAddressConfirmedSpentOutputs };
                foreach (Control control in listAddressDataFieldsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thisColor;
                    });
                }
                //address utxo
                Control[] listAddressUTXODataFieldsToColor = { lblAddressTypeUTXO, lblAddressConfirmedUnspentUTXO, lblAddressConfirmedUnspentOutputsUTXO, lblAddressConfirmedSpentUTXO, lblAddressConfirmedSpentOutputsUTXO, lblLargestUTXO, lblSmallestUTXO };
                foreach (Control control in listAddressUTXODataFieldsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thisColor;
                    });
                }
                //block
                Control[] listBlockDataFieldsToColor = { btnNumericUpDownSubmittedBlockNumberUp, btnNumericUpDownSubmittedBlockNumberDown, btnOpacityUp, btnOpacityDown, lblBlockHash, lblBlockTime, lblNumberOfTXInBlock, lblSizeOfBlock, lblBlockWeight, lblTotalFees, lblReward, lblBlockFeeRangeAndMedianFee, lblBlockAverageFee, lblNonce, lblMiner, lblBlockBlockHeight };
                foreach (Control control in listBlockDataFieldsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thisColor;
                    });
                }
                //blocklist
                Control[] listBlocklistDataFieldsToColor = { btnNumericUpDownBlockHeightToStartListFromUp, btnNumericUpDownBlockHeightToStartListFromDown, lblBlockListTXInMempool, lblBlockListTXInNextBlock, lblBlockListMinMaxInFeeNextBlock, lblBlockListTotalFeesInNextBlock, lblBlockListNextDiffAdjBlock, lblBlockListAvgTimeBetweenBlocks, lblBlockListNextDifficultyAdjustment, lblBlockListProgressNextDiffAdjPercentage, lblBlockListEstHashRate, lblBlockListBlockSubsidy, lblBlockListHalvingBlockAndRemaining, lblBlockListBlockHash, lblBlockListBlockTime, lblBlockListBlockSize, lblBlockListBlockWeight, lblBlockListNonce, lblBlockListMiner, lblBlockListTransactionCount, lblBlockListVersion, lblBlockListTotalFees, lblBlockListReward, lblBlockListBlockFeeRangeAndMedianFee, lblBlockListAverageFee, lblBlockListTotalInputs, lblBlockListTotalOutputs, lblBlockListAverageTransactionSize };
                foreach (Control control in listBlocklistDataFieldsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thisColor;
                    });
                }
                //transaction
                Control[] listTransactionDataFieldsToColor = { lblTransactionBlockHeight, lblTransactionBlockTime, lblTransactionConfirmations, lblTransactionLockTime, lblTransactionVersion, lblTransactionInputCount, lblCoinbase, lblTransactionFee, lblTransactionOutputCount, lblTotalInputValue, lblTotalOutputValue, lblTransactionSize, lblTransactionWeight };
                foreach (Control control in listTransactionDataFieldsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thisColor;
                    });
                }
                //xpub
                Control[] listXpubDataFieldsToColor = { btnNonZeroBalancesUp, btnNonZeroBalancesDown, btnDerivationPathsDown, btnDerivationPathsUp, lblCheckEachAddressTypeCount, lblCheckAllAddressTypesCount, lblSegwitUsedAddresses, lblSegwitSummary, lblLegacyUsedAddresses, lblLegacySummary, lblSegwitP2SHUsedAddresses, lblSegwitP2SHSummary, lblP2SHUsedAddresses, lblP2SHSummary, lblXpubConfirmedReceived, lblXpubConfirmedSpent, lblXpubConfirmedUnspent };
                foreach (Control control in listXpubDataFieldsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thisColor;
                    });
                }

                //bookmarks
                Control[] listBookmarksDataFieldsToColor = { lblBookmarkTotalCount, lblBookmarkAddressCount, lblBookmarkBlocksCount, lblBookmarkTransactionsCount, lblBookmarkXpubsCount, lblBookmarkDataInFull, lblBookmarkNoteInFull, lblBookmarkProposalData };
                foreach (Control control in listBookmarksDataFieldsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thisColor;
                    });
                }
                //settings
                Control[] listSettingsDataFieldsToColor = { label154, btnDataRefreshPeriodDown, btnDataRefreshPeriodUp, btnBiggerScale, btnSmallerScale };
                foreach (Control control in listSettingsDataFieldsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thisColor;
                    });
                }

                //charts
                Control[] listChartsDataFieldsToColor = { labelPCUSD1, labelPCUSD2, labelPCUSD3, labelPCUSD4, labelPCUSD5, labelPCUSD6, labelPCUSD7, labelPCUSD8, labelPCUSD9, labelPCUSD10, labelPCUSD11, labelPCUSD12, labelPCUSD13, labelPCUSD14, labelPCUSD15, labelPCUSD16, labelPCUSD17, labelPCUSDcustom, labelPCEUR1, labelPCEUR2, labelPCEUR3, labelPCEUR4, labelPCEUR5, labelPCEUR6, labelPCEUR7, labelPCEUR8, labelPCEUR9, labelPCEUR10, labelPCEUR11, labelPCEUR12, labelPCEUR13, labelPCEUR14, labelPCEUR15, labelPCEUR16, labelPCEUR17, labelPCEURcustom, labelPCGBP1, labelPCGBP2, labelPCGBP3, labelPCGBP4, labelPCGBP5, labelPCGBP6, labelPCGBP7, labelPCGBP8, labelPCGBP9, labelPCGBP10, labelPCGBP11, labelPCGBP12, labelPCGBP13, labelPCGBP14, labelPCGBP15, labelPCGBP16, labelPCGBP17, labelPCGBPcustom, labelPCXAU1, labelPCXAU2, labelPCXAU3, labelPCXAU4, labelPCXAU5, labelPCXAU6, labelPCXAU7, labelPCXAU8, labelPCXAU9, labelPCXAU10, labelPCXAU11, labelPCXAU12, labelPCXAU13, labelPCXAU14, labelPCXAU15, labelPCXAU16, labelPCXAU17, labelPCXAUcustom, lblCalculatedUSDFromBTCAmount, lblCalculatedEURFromBTCAmount, lblCalculatedGBPFromBTCAmount, lblCalculatedXAUFromBTCAmount };
                foreach (Control control in listChartsDataFieldsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thisColor;
                    });
                }
                //dca calculator
                Control[] listDCADataFieldsToColor = { lblDCAAmountSpent, lblDCABTCPurchased, lblDCABTCPurchases, lblDCACurrentValue, lblDCAPercentageChange };
                foreach (Control control in listDCADataFieldsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thisColor;
                    });
                }
                //mining pool screen
                Control[] listPoolDataFieldsToColor = { lblMiningPoolBlocks1w, lblMiningPoolBlocks24h, lblMiningPoolBlocksAll, lblMiningPoolBlockShare1w, lblMiningPoolBlockShare24h, lblMiningPoolBlockShareAll, lblMiningPoolHashrate, lblMiningPoolLink, lblMiningPoolPool };
                foreach (Control control in listPoolDataFieldsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thisColor;
                    });
                }
                lblMiningPoolLink.Invoke((MethodInvoker)delegate
                {
                    lblMiningPoolLink.LinkColor = thisColor;
                });

            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorDataFields");
            }
        }

        private void ColorLabels(Color thiscolor)
        {
            try
            {
                //header
                Control[] listHeaderLabelsToColor = { label77, lblHeaderMoscowTimeLabel, label148, label149, label15, label25, label28, label29, lblSatsumaTitle, lblHeaderBlockAge, lblHeaderPriceChart, lblHeaderMarketCapChart, lblHeaderConverterChart, lblHeaderBlockSizeChart, lblHeaderFeeRatesChart, label107, label110, lblHeaderFeeRangeChart, label150, lblHeaderBlockFeesChart };
                foreach (Control control in listHeaderLabelsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //settings and appearance
                Control[] listSettingsLabelsToColor = { label236, label225, btnPreviewAnimations, label235, label221, label222, label219, label302, label171, label291, label298, label204, label289, lblThemeImage, label287, label290, label282, label243, label246, label242, label239, label240, label201, lblSettingsOwnNodeStatus, lblSettingsSelectedNodeStatus, label193, label194, label196, label73, label161, label168, label157, label172, label174, label4, lblWhatever, label152, label171, label167, label178, label177, label179, label180, label188, label187, label191, label197, lblScaleAmount };
                foreach (Control control in listSettingsLabelsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //bitcoindashboard
                Control[] listBitcoinDashboardLabelsToColor = { label33, label360, label32, label14, label338, label341, label345, label353, label354, label347, label351, label349, label355, label357, label359, label80, label333, label339, label229, lblPoolRankingChart, lblDifficultyChart, lblHashrateChart, lblFeeRangeChart, lblBlockFeesChart, lblUniqueAddressesChart, lblChartCirculation, lblMarketCapChart, lblConverterChart, label296, label297, label292, label294, lblPriceLabel, lblMoscowTimeLabel, lblMarketCapLabel, label7, label30, label31, label10, label12, label11, label21, label20, label17, label27, label13, label9, label3, label2, label23, label134, label137, label57, label19, label85, lblPriceChart, label340, label356, label346, label352, label358, label361, label342, label344, label348, label299, label366, label367, label368 };
                foreach (Control control in listBitcoinDashboardLabelsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //lightningdashboard
                Control[] listLightningDashboardLabelsToColor = { lblLightningChannelsChart, lblLightningNodesChart, lblLightningCapacityChart, label38, label47, label48, label49, label40, label36, label35, label45, label46, label34, label37, label39, label41, label42, label44, label43, label51, label52, label56, label55 };
                foreach (Control control in listLightningDashboardLabelsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //address
                Control[] listAddressLabelsToColor = { label58 };
                foreach (Control control in listAddressLabelsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //address utxo
                Control[] listAddressUTXOLabelsToColor = { label316, lblAddressUTXOPositionInList, label303, label308, label230, label313, label315 };
                foreach (Control control in listAddressUTXOLabelsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //block
                Control[] listBlockLabelsToColor = { label64, label145, label69, label68, label74, label72, label66, label70, label62, label65, label71, lblBlockScreenChartBlockSize, lblBlockFeeChart, lblBlockScreenChartReward, lblBlockScreenChartFeeRange };
                foreach (Control control in listBlockLabelsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //transaction
                Control[] listTransactionLabelsToColor = { label136, label113, label126, label125, label128, label98, label104, label130, label132 };
                foreach (Control control in listTransactionLabelsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //blocklist
                Control[] listBlockListLabelsToColor = { label87, label100, label106, label108, label112, label115, label116, label16, label118, label120, label122, label90, label91, label105, label103, label24, label95, label99, label96, label88, label101, label93, label97, label89, label94, label92, lblBlockListFeeRangeChart, lblBlockListRewardChart, lblBlockListFeeChart, lblBlockListBlockSizeChart, lblBlockListHashrateChart, lblBlockListFeeRangeChart2, lblBlockListFeeChart2, lblBlockListDifficultyChart };
                foreach (Control control in listBlockListLabelsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //xpub
                Control[] listXpubLabelsToColor = { label238, label139, label146, lblXpubScreenOwnNodeStatus, label140, label141, label123, label111, label119, label135, label133, label129, label121, lblXpubStatus };
                foreach (Control control in listXpubLabelsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //bookmarks
                Control[] listBookmarksLabelsToColor = { label144, label153, label151, label147, label142, lblSelectedBookmarkType, label138, lblBookmarkProposalType, label284, label285 };
                foreach (Control control in listBookmarksLabelsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //charts
                Control[] listChartsLabelsToColor = { label262, label263, label264, label265, label266, label245, label241, label189, label256, label255, label254, label253, label252, label251, label250, label249, label247, label261, label260, label259, label258, label257, label277, label278, label279, label280, label267, label270, label269, label268, label273, label274, label275, label276, label337 };
                foreach (Control control in listChartsLabelsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //directory
                Control[] listDirectoryLabelsToColor = { label286 };
                foreach (Control control in listDirectoryLabelsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //dca calculator
                Control[] listDCALabelsToColor = { label304, label305, label306, label307, lblDCAMessage, label202, label203, label205, label206, label207, labelDCADefinition, label212 };
                foreach (Control control in listDCALabelsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //mining pools screens
                Control[] listPoolsLabelsToColor = { label321, label322, label323, label324, label325, label326, label327, label328, label329 };
                foreach (Control control in listPoolsLabelsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                toolTipForLblHeaderPrice.ForeColor = thiscolor;
                toolTipGeneralUse.ForeColor = thiscolor;



            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorLabels");
            }
        }

        private void ColorFiatConversionText(Color thiscolor)
        {
            try
            {
                Control[] listFiatConversionsToColor = { label288, lblNextBlockTotalFeesFiat, lblBlockListTotalFeesInNextBlockFiat, lblBlockRewardFiat, lblBlockRewardAfterHalvingFiat, lblBlockListBlockRewardFiat, lbl24HourBTCSentFiat, lblAddressConfirmedReceivedFiat, lblAddressConfirmedSpentFiat, lblAddressConfirmedUnspentFiat, lblTotalFeesFiat, lblRewardFiat, lblTransactionFeeFiat, lblTotalInputValueFiat, lblTotalOutputValueFiat, lblXpubConfirmedReceivedFiat, lblXpubConfirmedSpentFiat, lblXpubConfirmedUnspentFiat,
                    lblTotalCapacityFiat, lblClearnetCapacityFiat, lblTorCapacityFiat, lblUnknownCapacityFiat, lblAverageCapacityFiat, lblAverageFeeRateFiat, lblAverageBaseFeeMtokensFiat, lblMedCapacityFiat, lblMedFeeRateFiat, lblMedBaseFeeTokensFiat, capacityLabelFiat1, capacityLabelFiat2, capacityLabelFiat3, capacityLabelFiat4, capacityLabelFiat5, capacityLabelFiat6, capacityLabelFiat7, capacityLabelFiat8, capacityLabelFiat9, capacityLabelFiat10, lblAddressConfirmedSpentUTXOFiat, lblAddressConfirmedUnspentUTXOFiat};
                foreach (Control control in listFiatConversionsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorFiatConversionText");
            }
        }

        private void ColorHeadings(Color thiscolor)
        {
            try
            {
                //header
                Control[] listHeaderHeadingsToColor = { label26, label22, label1, lblCurrentVersion, lblNowViewing };
                foreach (Control control in listHeaderHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //settings & appearance
                Control[] listSettingsHeadingsToColor = { label300, label200, label293, label295, label283, label248, label162, label163, label155, label5, label156, label166, label181, label182, label183, label184, label192, label195, label234, label237, label244, label169 };
                foreach (Control control in listSettingsHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //bitcoindashboard
                Control[] listBitcoinDashboardHeadingsToColor = { label343, label79, label84, label81, label83, label86, label82 };
                foreach (Control control in listBitcoinDashboardHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //lightningdashboard
                Control[] listLightningDashboardHeadingsToColor = { label76, label78, label75, label53, label54 };
                foreach (Control control in listLightningDashboardHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //mining pools - blocks & hashrate & list
                Control[] listPoolsBlocksHeadingsToColor = { label310, label311, label210, label312, label213, label318, label228, label231, label319, label320, label330 };
                foreach (Control control in listPoolsBlocksHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //address
                Control[] listAddressHeadingsToColor = { label61, label59, label67, label63 };
                foreach (Control control in listAddressHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //address utxo
                Control[] listAddressUTXOHeadingsToColor = { label314, label309 };
                foreach (Control control in listAddressUTXOHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //blocklist
                Control[] listBlockListHeadingsToColor = { label143, lblBlockListBlockHeight, label6, label109 };
                foreach (Control control in listBlockListHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //block
                Control[] listBlockHeadingsToColor = { lblBlockBlockHeight, label18 };
                foreach (Control control in listBlockHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //transaction
                Control[] listTransactionHeadingsToColor = { };
                foreach (Control control in listTransactionHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //xpub
                Control[] listXpubHeadingsToColor = { label124, label117, label127 };
                foreach (Control control in listXpubHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //bookmarks
                Control[] listBookmarksHeadingsToColor = { label131 };
                foreach (Control control in listBookmarksHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                //charts
                Control[] listChartsHeadingsToColor = { label217, label271, label272, label114, label336 };
                foreach (Control control in listChartsHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                // also use this colour to set the bordercolor of the top row of buttons (menus, exit, etc)
                RJButton[] mainMenuButtonBordersToColor = { btnMinimise, btnShowGlobalSearch, btnMoveWindow, btnExit, btnHelp, btnAddToBookmarks, btnAnimation, btnShowGlobalSearch, btnHideErrorMessage, btnCopyErrorMessage };
                foreach (RJButton button in mainMenuButtonBordersToColor)
                {
                    button.Invoke((MethodInvoker)delegate
                    {
                        button.BorderSize = 1;
                        button.BorderColor = thiscolor;
                    });
                }
                // dca
                Control[] listDCAHeadingsToColor = { label208, label209 };
                foreach (Control control in listDCAHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                // main menu
                Control[] listMenuHeadingsToColor = { lblOpenHelpAboutMenu, lblOpenPreferences, label214, label215, label218, label216 };
                foreach (Control control in listMenuHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorHeadings");
            }
        }

        private void ColorTables(Color thiscolor)
        {
            try
            {
                Control[] listTableTextToColor = { label170, listViewAddressTransactions, listViewBlockTransactions, listViewBlockList, listViewTransactionInputs, listViewTransactionOutputs, listViewXpubAddresses, listViewBookmarks, label186, listViewAddressUTXOs, listViewPoolsByBlock, listViewPoolsHashrate, panelPoolsListContainer, listViewBlocksByPool };
                foreach (Control control in listTableTextToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
                tableTextColor = thiscolor;
                #region force refresh listviews to update their text colours
                if (numericUpDownBlockHeightToStartListFrom != null)
                {
                    LookupBlockListAsync();
                }
                if (numericUpDownSubmittedBlockNumber != null)
                {
                    LookupBlockAsync();
                }
                if (String.Compare(lblInvalidTransaction.Text, "✔️ valid transaction ID") == 0)
                {
                    LookupTransactionAsync();
                }
                if (String.Compare(lblInvalidAddressIndicator.Text, "✔️ valid address") == 0)
                {
                    string addressString = textboxSubmittedAddress.Text;
                    textboxSubmittedAddress.Text = "";
                    textboxSubmittedAddress.Text = addressString;
                }
                if (String.Compare(lblInvalidAddressIndicatorUTXO.Text, "✔️ valid address") == 0)
                {
                    string addressString = textboxSubmittedAddressUTXO.Text;
                    textboxSubmittedAddressUTXO.Text = "";
                    textboxSubmittedAddressUTXO.Text = addressString;
                }
                SetupBookmarksScreen();
                #endregion
            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorTables");
            }
        }

        private void ColorTableHeadings(Color thiscolor)
        {
            try
            {
                listViewHeaderTextColor = thiscolor;
                label188.Invoke((MethodInvoker)delegate
                {
                    label188.ForeColor = thiscolor;
                });
                label190.Invoke((MethodInvoker)delegate
                {
                    label190.ForeColor = thiscolor;
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorTableHeadings");
            }
        }

        private void ColorOtherText(Color thiscolor)
        {
            try
            {
                Control[] listOtherTextToColor = { label371, label369, label199, label198, label223, label224, label220, lblTransasctionInCount, lblTransasctionOutCount, lblAddressTXPositionInList, lblBlockTXPositionInList, lblBlockListPositionInList, label317, label226, label362, label102, comboBoxTitlesBackgroundImage, comboBoxStartupScreen, comboBoxChartSelect, comboBoxCustomizeScreenThemeList, label185, numericUpDownOpacity, label160, label159, label158, label165, label173, label167, textBoxXpubScreenOwnNodeURL, textBoxSubmittedXpub, numberUpDownDerivationPathsToCheck, textboxSubmittedAddress, textboxSubmittedAddressUTXO, textBoxTransactionID, textBoxBookmarkEncryptionKey, textBoxBookmarkKey, textBoxBookmarkProposedNote, textBoxSettingsOwnNodeURL, numericUpDownDashboardRefresh, numericUpDownMaxNumberOfConsecutiveUnusedAddresses, textBoxThemeName, textBox1, lblCurrentVersion, textBoxUniversalSearch, textBoxDCAAmountInput, comboBoxDCAFrequency, label227, lblUTXOCount, label364 };
                foreach (Control control in listOtherTextToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }

                // use this colour for the divider lines on the settings screen too
                Control[] listOtherTextToColor2 = { panel128, panel25, panel33, panel105 };
                foreach (Control control in listOtherTextToColor2)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = thiscolor;
                    });
                }

                comboBoxCustomizeScreenThemeList.Invoke((MethodInvoker)delegate
                {
                    comboBoxCustomizeScreenThemeList.ListTextColor = thiscolor;
                });
                comboBoxCustomizeScreenThemeList.Invoke((MethodInvoker)delegate
                {
                    comboBoxCustomizeScreenThemeList.ListBackColor = chartsBackgroundColor;
                });
                comboBoxStartupScreen.Invoke((MethodInvoker)delegate
                {
                    comboBoxStartupScreen.ListTextColor = thiscolor;
                });
                comboBoxStartupScreen.Invoke((MethodInvoker)delegate
                {
                    comboBoxStartupScreen.ListBackColor = chartsBackgroundColor;
                });
                comboBoxTitlesBackgroundImage.Invoke((MethodInvoker)delegate
                {
                    comboBoxTitlesBackgroundImage.ListTextColor = thiscolor;
                });
                comboBoxTitlesBackgroundImage.Invoke((MethodInvoker)delegate
                {
                    comboBoxTitlesBackgroundImage.ListBackColor = chartsBackgroundColor;
                });
                rjDatePickerDCAStartDate.Invoke((MethodInvoker)delegate
                {
                    rjDatePickerDCAStartDate.TextColor = thiscolor;
                });
                rjDatePickerDCAEndDate.Invoke((MethodInvoker)delegate
                {
                    rjDatePickerDCAEndDate.TextColor = thiscolor;
                });
                comboBoxChartSelect.Invoke((MethodInvoker)delegate
                {
                    comboBoxChartSelect.ListTextColor = thiscolor;
                });
                comboBoxChartSelect.Invoke((MethodInvoker)delegate
                {
                    comboBoxChartSelect.ListBackColor = chartsBackgroundColor;
                });

                comboBoxDCAFrequency.Invoke((MethodInvoker)delegate
                {
                    comboBoxDCAFrequency.ListTextColor = thiscolor;
                });
                comboBoxDCAFrequency.Invoke((MethodInvoker)delegate
                {
                    comboBoxDCAFrequency.ListBackColor = chartsBackgroundColor;
                });
                comboBoxPoolsBlocksSelectSorting.Invoke((MethodInvoker)delegate
                {
                    comboBoxPoolsBlocksSelectSorting.ListTextColor = thiscolor;
                });
                comboBoxPoolsBlocksSelectSorting.Invoke((MethodInvoker)delegate
                {
                    comboBoxPoolsBlocksSelectSorting.ListBackColor = chartsBackgroundColor;
                });
                comboBoxPoolsBlocksTimePeriod.Invoke((MethodInvoker)delegate
                {
                    comboBoxPoolsBlocksTimePeriod.ListTextColor = thiscolor;
                });
                comboBoxPoolsBlocksTimePeriod.Invoke((MethodInvoker)delegate
                {
                    comboBoxPoolsBlocksTimePeriod.ListBackColor = chartsBackgroundColor;
                });
                comboBoxPoolsHashrateSortingSelect.Invoke((MethodInvoker)delegate
                {
                    comboBoxPoolsHashrateSortingSelect.ListTextColor = thiscolor;
                });
                comboBoxPoolsHashrateSortingSelect.Invoke((MethodInvoker)delegate
                {
                    comboBoxPoolsHashrateSortingSelect.ListBackColor = chartsBackgroundColor;
                });
                comboBoxPoolsHashrateTimePeriod.Invoke((MethodInvoker)delegate
                {
                    comboBoxPoolsHashrateTimePeriod.ListTextColor = thiscolor;
                });
                comboBoxPoolsHashrateTimePeriod.Invoke((MethodInvoker)delegate
                {
                    comboBoxPoolsHashrateTimePeriod.ListBackColor = chartsBackgroundColor;
                });
                comboBoxChartsTimePeriod.Invoke((MethodInvoker)delegate
                {
                    comboBoxChartsTimePeriod.ListTextColor = thiscolor;
                });
                comboBoxChartsTimePeriod.Invoke((MethodInvoker)delegate
                {
                    comboBoxChartsTimePeriod.ListBackColor = chartsBackgroundColor;
                });

            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorOtherText");
            }
        }

        private void ColorPriceBlock(Color thiscolor)
        {
            try
            {
                Control[] PriceBlockItemsToColor = { lblHeaderPrice, lblHeaderBlockNumber, label175, lblHeaderfeesHighPriority, lblHeaderFeesMediumPriority, lblHeaderFeesLowPriority, lblHeaderFeesNoPriority };
                foreach (Control control in PriceBlockItemsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorPriceBlock");
            }
        }

        private void ColorStatusError(Color thiscolor)
        {
            try
            {
                Control[] StatusErrorToColor = { labelSettingsSaved, lblErrorAlert, lblErrorMessage, label176, lblOfflineModeActive, lblElapsedSinceUpdate, headerSelectedNodeStatus };
                foreach (Control control in StatusErrorToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorStatusError");
            }
        }

        private void ColorButtons(Color thiscolor)
        {
            try
            {
                Color menuAndHeaderButtonsColour = Color.FromArgb(20, 20, 20);
                if (chartsBackgroundColor == Color.FromArgb(20, 20, 20) || chartsBackgroundColor == Color.FromArgb(40, 40, 40))
                {
                    menuAndHeaderButtonsColour = Color.FromArgb(20, 20, 20);
                }
                else
                {
                    menuAndHeaderButtonsColour = Color.FromArgb(244, 244, 244);
                }

                //header
                Control[] listHeaderButtonsToColor = { btnUniversalSearch, btnMenuApplyCustomTheme, comboBoxHeaderCustomThemes, lblApplyThemeButtonDisabledMask, lblThemeMenuHighlightedButtonText, lblCurrencyMenuHighlightedButtonText, btnAnimation, btnAddToBookmarks, btnHelp, btnMinimise, btnShowGlobalSearch, btnMoveWindow, btnExit, btnMenuCreateTheme, btnMenuThemeFranklin, btnMenuThemeSatsuma, btnMenuThemeHoneyBadger, btnMenuThemeStackSats, btnMenuThemeSymbol, BtnMenuThemeGenesis, btnUSD, btnEUR, btnGBP, btnXAU, btnHideErrorMessage, btnCopyErrorMessage, panelThemeMenuBackdrop, panelCurrencyBackdrop };
                foreach (Control control in listHeaderButtonsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = menuAndHeaderButtonsColour;
                    });
                }
                comboBoxHeaderCustomThemes.Invoke((MethodInvoker)delegate
                {
                    comboBoxHeaderCustomThemes.ListBackColor = menuAndHeaderButtonsColour;
                });
                btnMenuSplash.Invoke((MethodInvoker)delegate
                {
                    btnMenuSplash.FlatAppearance.BorderColor = menuAndHeaderButtonsColour;
                });
                btnMenuHelp.Invoke((MethodInvoker)delegate
                {
                    btnMenuHelp.FlatAppearance.BorderColor = menuAndHeaderButtonsColour;
                });
                panelThemeMenuBackdrop.Invoke((MethodInvoker)delegate
                {
                    panelThemeMenuBackdrop.Width = panelThemeMenu.Width - 2;
                });
                panelCurrencyBackdrop.Invoke((MethodInvoker)delegate
                {
                    panelCurrencyBackdrop.Width = panelCurrency.Width - 2;
                });

                //settings & appearance
                Control[] listSettingsButtonsToColor = { btnResetAll, button1, button2, btnSaveTheme, btnLoadTheme, btnDeleteTheme, btnSquareCorners, btnPartialCorners, btnRoundCorners };
                foreach (Control control in listSettingsButtonsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = thiscolor;
                    });
                }
                //bitcoin dashboard
                Control[] listBitcoinDashboardButtonsToColor = { btnDistributionLin, btnDistributionLog };
                foreach (Control control in listBitcoinDashboardButtonsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = thiscolor;
                    });
                }
                //address
                Control[] listAddressButtonsToColor = { btnShowAllTX, btnShowConfirmedTX, btnShowUnconfirmedTX, btnFirstAddressTransaction, btnNextAddressTransactions, BtnViewTransactionFromAddress, BtnViewBlockFromAddress, btnViewUTXOsFromAddressTX };
                foreach (Control control in listAddressButtonsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = thiscolor;
                    });
                }
                //address utxo
                Control[] listAddressUTXOButtonsToColor = { btnViewTransactionFromAddressUTXO, btnViewBlockFromAddressUTXO, btnViewAddressTXFromUTXO, btnAddressUTXOScrollUp, btnAddressUTXOScrollDown };
                foreach (Control control in listAddressUTXOButtonsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = thiscolor;
                    });
                }
                //block
                Control[] listBlockButtonsToColor = { btnViewTransactionFromBlock, btnPreviousBlockTransactions, btnNextBlockTransactions, btnLookUpBlock, btnNextBlock, btnPreviousBlock };
                foreach (Control control in listBlockButtonsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = thiscolor;
                    });
                }
                //blocklist
                Control[] listBlockListButtonsToColor = { btnLookUpBlockList, btnViewBlockFromBlockList, btnNewer15Blocks, btnOlder15Blocks };
                foreach (Control control in listBlockListButtonsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = thiscolor;
                    });
                }
                //mining pools - blocks & hashrate & list
                Control[] listPoolsBlocksButtonTextToColor = { btnPoolsBlocksScrollDown, btnPoolsBlocksScrollUp, btnViewPoolFromMiningBlocks, btnPoolsHashrateScrollDown, btnPoolsHashrateScrollUp, btnViewPoolFromPoolsHashrate, btnPoolsListScrollUp, btnPoolsListScrollDown, btnViewBlockFromBlocksByPool, btnViewPoolFromBlockList, btnViewPoolFromBlockScreen, panelPoolsListScrollbarInner };
                foreach (Control control in listPoolsBlocksButtonTextToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = thiscolor;
                    });
                }
                //transaction
                Control[] listTransactionButtonsToColor = { btnViewAddressFromTXInput, btnViewAddressFromTXOutput, btnTransactionInputsUp, btnTransactionInputDown, btnTransactionOutputsUp, btnTransactionOutputsDown };
                foreach (Control control in listTransactionButtonsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = thiscolor;
                    });
                }
                //xpub
                Control[] listXpubButtonsToColor = { btnViewAddressFromXpub, btnXpubAddressesUp, btnXpubAddressesDown };
                foreach (Control control in listXpubButtonsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = thiscolor;
                    });
                }
                //bookmarks
                Control[] listBookmarksButtonsToColor = { btnBookmarksListUp, btnBookmarksListDown, btnBookmarkUnlock, btnDecryptBookmark, btnDeleteBookmark, btnViewBookmark, btnCommitToBookmarks, btnCancelAddToBookmarks, btnDeleteAllBookmarks, btnDeleteAllBookmarksNo, btnDeleteAllBookmarksYes };
                foreach (Control control in listBookmarksButtonsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = thiscolor;
                    });
                }
                //charts
                Control[] listChartsButtonsToColor = { btnPriceChartScaleLinear, btnPriceChartScaleLog, btnChartMarketCapScaleLinear, btnChartMarketCapScaleLog, btnChartUTXOScaleLinear, btnChartUTXOScaleLog, btnChartAddressScaleLinear, btnChartAddressScaleLog, btnSaveChart, btnHashrateScaleLinear, btnHashrateScaleLog, btnChartDifficultyLinear, btnChartDifficultyLog };
                foreach (Control control in listChartsButtonsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = thiscolor;
                    });
                }
                //directory
                Control[] listDirectoryButtonsToColor = { btnDirectoryScrollUp, btnDirectoryScrollDown };
                foreach (Control control in listDirectoryButtonsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = thiscolor;
                    });
                }
                //dca calculator
                btnCalculateDCA.Invoke((MethodInvoker)delegate
                {
                    btnCalculateDCA.BackColor = thiscolor;
                });
                //add to bookmarks panel (uses button colour)
                panelAddToBookmarksBorder.Invoke((MethodInvoker)delegate
                {
                    panelAddToBookmarksBorder.BackColor = chartsBackgroundColor;
                });
                //main menu drop-down panels
                panelThemeMenu.Invoke((MethodInvoker)delegate
                {
                    panelThemeMenu.BackColor = thiscolor;
                });
                panelCurrency.Invoke((MethodInvoker)delegate
                {
                    panelCurrency.BackColor = thiscolor;
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorButtons");
            }
        }

        private void ColorLines(Color thiscolor)
        {
            try
            {
                Control[] listLinesToColor = { panel14, panel17, panel19, panel61, panel169, panel170, panel171, panel127 };
                foreach (Control control in listLinesToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = thiscolor;
                    });
                }
                Control[] lineAArrowsToColor = { label334, label335, label331, label332 };
                foreach (Control control in lineAArrowsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.ForeColor = thiscolor;
                    });
                }

                Control[] listDistributionPanelsToColor = { panelAddresses100kSats, panelAddresses1mSats, panelAddresses10mSats, panelAddresses1BTC, panelAddresses10BTC, panelAddresses100BTC, panelAddresses1000BTC, panelAddresses10000BTC, panelAddresses100kBTC, panelAddresses1mBTC };
                foreach (Control control in listDistributionPanelsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = thiscolor;
                    });
                }
                linesColor = thiscolor;
            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorLines");
            }
        }

        private void ColorTextBoxes(Color thiscolor) // and textbox panel containers
        {
            try
            {
                Control[] listTextBoxesToColor = { lblMempoolSpacePriceAPI, lblSolidProgressBars, lblDashedProgressBars, lblShowClock, btnDataRefreshPeriodDown, btnDataRefreshPeriodUp, btnBiggerScale, btnSmallerScale, btnNonZeroBalancesUp, btnNonZeroBalancesDown, btnDerivationPathsDown, btnDerivationPathsUp, panel93, panel95, panel98, numericUpDownOpacity, btnOpacityDown, btnOpacityUp, btnNumericUpDownSubmittedBlockNumberUp, btnNumericUpDownSubmittedBlockNumberDown, numericUpDownSubmittedBlockNumber, numericUpDownMaxNumberOfConsecutiveUnusedAddresses, panel75, textBox1, textBoxBookmarkProposedNote, textBoxBookmarkEncryptionKey, textboxSubmittedAddress, textboxSubmittedAddressUTXO, textBoxTransactionID, textBoxXpubScreenOwnNodeURL, numberUpDownDerivationPathsToCheck, textBoxSubmittedXpub, textBoxBookmarkKey, textBoxSettingsOwnNodeURL, numericUpDownDashboardRefresh, lblAlwaysOnTop, textBoxThemeName, lblTitleBackgroundCustom, lblTitlesBackgroundImage, lblTitleBackgroundNone, lblBackgroundFranklinSelected, lblBackgroundCustomColorSelected, lblBackgroundCustomImageSelected, lblBackgroundGenesisSelected, lblBackgroundSatsumaSelected, lblBackgroundHoneyBadgerSelected, lblBackgroundSymbolSelected, lblBackgroundStackSatsSelected, lblSettingsOwnNodeSelected, lblSettingsNodeMainnetSelected, lblSettingsNodeTestnetSelected, lblCoinbaseEndpoints, lblCoingeckoComJSON, lblBlockchainInfoEndpoints, lblMessariJSON, lblOfflineMode, lblConfirmReset, lblChartsDarkBackground, lblChartsLightBackground, lblChartsMediumBackground, textBoxConvertBTCtoFiat, textBoxConvertEURtoBTC, textBoxConvertGBPtoBTC, textBoxConvertUSDtoBTC, textBoxConvertXAUtoBTC, panelThemeNameContainer, panelOptionalNotesContainer, panelEncryptionKeyContainer, panelSubmittedAddressContainer, panelSubmittedAddressContainerUTXO, panelBlockHeightToStartFromContainer, panelTransactionIDContainer, panelSubmittedXpubContainer, panelXpubScreenOwnNodeURLContainer, panelBookmarkKeyContainer, panelConvertBTCToFiatContainer, panelConvertUSDToBTCContainer, panelConvertEURToBTCContainer, panelConvertGBPToBTCContainer, panelConvertXAUToBTCContainer, panelSettingsOwnNodeURLContainer, panelAppearanceTextbox1Container, panelComboBoxStartupScreenContainer, panelCustomizeThemeListContainer, panelHeadingBackgroundSelect, panelSelectBlockNumberContainer, lblInfinity1, lblInfinity2, lblInfinity3, lblEnableDirectory, numericUpDownBlockHeightToStartListFrom, btnNumericUpDownBlockHeightToStartListFromUp, btnNumericUpDownBlockHeightToStartListFromDown, panelUniversalSearchContainer, textBoxUniversalSearch, panelSettingsUIScaleContainer, textBoxDCAAmountInput, panel111, panel113, panel114, panel115, comboBoxChartSelect, panelComboBoxChartSelectContainer, panel149, panel173, comboBoxPoolsBlocksSelectSorting, comboBoxPoolsBlocksTimePeriod, panel174, panel175, comboBoxPoolsHashrateSortingSelect, comboBoxPoolsHashrateTimePeriod, panel176, comboBoxChartsTimePeriod };
                foreach (Control control in listTextBoxesToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = thiscolor;
                    });
                }
                rjDatePickerDCAStartDate.Invoke((MethodInvoker)delegate
                {
                    rjDatePickerDCAStartDate.SkinColor = thiscolor;
                });
                rjDatePickerDCAEndDate.Invoke((MethodInvoker)delegate
                {
                    rjDatePickerDCAEndDate.SkinColor = thiscolor;
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorTextBoxes");
            }
        }

        private void ColorProgressBars(Color thiscolor)
        {
            try
            {
                //header
                progressBarRefreshData.Invoke((MethodInvoker)delegate
                {
                    progressBarRefreshData.BarColor = thiscolor;
                });
                //themes
                colorProgressBar1.Invoke((MethodInvoker)delegate
                {
                    colorProgressBar1.BarColor = thiscolor;
                });
                //bitcoindashboard
                progressBarNextDiffAdj.Invoke((MethodInvoker)delegate
                {
                    progressBarNextDiffAdj.BarColor = thiscolor;
                });
                progressBarProgressToHalving.Invoke((MethodInvoker)delegate
                {
                    progressBarProgressToHalving.BarColor = thiscolor;
                });
                progressBarPercentIssued.Invoke((MethodInvoker)delegate
                {
                    progressBarPercentIssued.BarColor = thiscolor;
                });
                //blocklist
                progressBarBlockListNextDiffAdj.Invoke((MethodInvoker)delegate
                {
                    progressBarBlockListNextDiffAdj.BarColor = thiscolor;
                });
                progressBarBlockListHalvingProgress.Invoke((MethodInvoker)delegate
                {
                    progressBarBlockListHalvingProgress.BarColor = thiscolor;
                });
                //xpub
                progressBarCheckEachAddressType.Invoke((MethodInvoker)delegate
                {
                    progressBarCheckEachAddressType.BarColor = thiscolor;
                });
                progressBarCheckAllAddressTypes.Invoke((MethodInvoker)delegate
                {
                    progressBarCheckAllAddressTypes.BarColor = thiscolor;
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorProgressBars");
            }
        }

        private void ColorTableBackgrounds(Color thiscolor)
        {
            try
            {
                Control[] listListViewBackgroundsToColor = { panel120, panel123, panelAddressTxContainer, panelAddressUTXOScrollContainer, panelPoolsBlocksScrollContainer, panelPoolsListScrollContainer, panel147, panelUTXOsContainer, panelPoolsBlocksContainer, panelPoolsHashrateContainer, panelUTXOError, panel137, panel122, panel56, panel27, panelTransactionOutputs, panelTransactionInputs, listViewBlockList, listViewTransactionInputs, listViewTransactionOutputs, listViewXpubAddresses, listViewBookmarks, listViewAddressTransactions, listViewAddressUTXOs, listViewPoolsByBlock, listViewPoolsHashrate, listViewBlockTransactions, panel66, panelTXInScrollContainer, panelTXOutScrollContainer, panelXpubScrollContainer, panelBookmarksScrollContainer, panel101, panelXpubContainer, panelPoolsListContainer, panelBlocksByPoolContainer, listViewPoolsList, listViewBlocksByPool, panelPoolsListScrollContainer, panelBlockTransactionsTab, panelBlockListTab, panelAddressTXTab, panelAddressUTXOTab, panelTransactionInTab, panelTransactionOutTab };
                foreach (Control control in listListViewBackgroundsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = thiscolor;
                    });
                }
                subItemBackColor = MakeColorLighter(thiscolor, -10);
            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorTableBackgrounds");
            }
        }

        private void ColorTableTitleBars(Color thiscolor)
        {
            try
            {
                listViewHeaderColor = thiscolor;
                Control[] tableTitleBarsToColor = { panel126, panel143, panel67, panel68, panel117, panel121, panel100, panel144, panel150, panel160, panel162, panel165, panel167, panel172 };
                foreach (Control control in tableTitleBarsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = thiscolor;
                    });
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorTableTitleBars");
            }
        }

        private void HeadingBackgroundsToImage()
        {
            try
            {
                // Declare ImageFile variable
                System.Drawing.Image ImageFile = Properties.Resources.titleBGLongerOrange;
                if (comboBoxTitlesBackgroundImage.SelectedIndex == 0)
                {
                    ImageFile = Properties.Resources.titleBGLongerOrange;
                }
                if (comboBoxTitlesBackgroundImage.SelectedIndex == 1)
                {
                    ImageFile = Properties.Resources.OrangePaler;
                }
                if (comboBoxTitlesBackgroundImage.SelectedIndex == 2)
                {
                    ImageFile = Properties.Resources.OrangeFade; // it's kind of brown really!
                }
                if (comboBoxTitlesBackgroundImage.SelectedIndex == 3)
                {
                    ImageFile = Properties.Resources.BlueFade;
                }
                if (comboBoxTitlesBackgroundImage.SelectedIndex == 4)
                {
                    ImageFile = Properties.Resources.GreenFade;
                }
                if (comboBoxTitlesBackgroundImage.SelectedIndex == 5)
                {
                    ImageFile = Properties.Resources.PurpleFade;
                }
                if (comboBoxTitlesBackgroundImage.SelectedIndex == 6)
                {
                    ImageFile = Properties.Resources.RedFade;
                }
                if (comboBoxTitlesBackgroundImage.SelectedIndex == 7)
                {
                    ImageFile = Properties.Resources.YellowFade;
                }
                if (comboBoxTitlesBackgroundImage.SelectedIndex == 8)
                {
                    ImageFile = Properties.Resources.BlackFade;
                }
                if (comboBoxTitlesBackgroundImage.SelectedIndex == 9)
                {
                    ImageFile = Properties.Resources.WhiteFade;
                }
                if (comboBoxTitlesBackgroundImage.SelectedIndex == 10)
                {
                    ImageFile = Properties.Resources.transpTitle;
                }
                if (comboBoxTitlesBackgroundImage.SelectedIndex == 11)
                {
                    ImageFile = Properties.Resources.Polygons;
                }
                if (comboBoxTitlesBackgroundImage.SelectedIndex == 12)
                {
                    ImageFile = Properties.Resources.marbled;
                }
                if (comboBoxTitlesBackgroundImage.SelectedIndex == 13)
                {
                    ImageFile = Properties.Resources.squares;
                }
                //header
                Control[] listHeaderHeadingsToColor = { panel38, panel39, panel40 };
                foreach (Control control in listHeaderHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = Color.Transparent;
                        control.BackgroundImage = ImageFile;
                    });
                }
                //settings & appearance
                Control[] listSettingsHeadingsToColor = { panel110, panel97, panel108, panel54, panel52, panel47, panel58, panel59, panel60, panel62, panel63, panel64, panel22, panel34, panel37, panel65, panel69, panel72, panel82, panel83, panel104, panel112 };
                foreach (Control control in listSettingsHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = Color.Transparent;
                        control.BackgroundImage = ImageFile;
                    });
                }
                //bitcoindashboard
                Control[] listBitcoinDashboardHeadingsToColor = { panel6, panel11, panel8, panel10, panel12, panel9, panel187 };
                foreach (Control control in listBitcoinDashboardHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = Color.Transparent;
                        control.BackgroundImage = ImageFile;
                    });
                }
                //lightningdashboard
                Control[] listLightningDashboardHeadingsToColor = { panel4, panel5, panel1, panel2, panel3 };
                foreach (Control control in listLightningDashboardHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = Color.Transparent;
                        control.BackgroundImage = ImageFile;
                    });
                }
                //address
                Control[] listAddressHeadingsToColor = { panel41, panel42, panel43, panel44 };
                foreach (Control control in listAddressHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = Color.Transparent;
                        control.BackgroundImage = ImageFile;
                    });
                }
                //address utxo
                Control[] listAddressUTXOHeadingsToColor = { panel141, panel136 };
                foreach (Control control in listAddressUTXOHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = Color.Transparent;
                        control.BackgroundImage = ImageFile;
                    });
                }
                //mining pools - blocks & hashrate & list
                Control[] listPoolsBlocksHeadingsToColor = { panel138, panel145, panel81, panel146, panel152, panel154, panel155, panel159, panel164, panel156, panel102 };
                foreach (Control control in listPoolsBlocksHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = Color.Transparent;
                        control.BackgroundImage = ImageFile;
                    });
                }
                //block
                Control[] listBlockHeadingsToColor = { panel55 };
                foreach (Control control in listBlockHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = Color.Transparent;
                        control.BackgroundImage = ImageFile;
                    });
                }
                //blocklist
                Control[] listBlockListHeadingsToColor = { panel45, panel13, panel15, panel28 };
                foreach (Control control in listBlockListHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = Color.Transparent;
                        control.BackgroundImage = ImageFile;
                    });
                }
                //transaction
                Control[] listTransactionHeadingsToColor = { };
                foreach (Control control in listTransactionHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = Color.Transparent;
                        control.BackgroundImage = ImageFile;
                    });
                }
                //xpub
                Control[] listXpubHeadingsToColor = { panel23, panel26, panel29 };
                foreach (Control control in listXpubHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = Color.Transparent;
                        control.BackgroundImage = ImageFile;
                    });
                }
                //charts
                Control[] listChartsHeadingsToColor = { panel78, panel139, panel49, panel50, panel24 };
                foreach (Control control in listChartsHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = Color.Transparent;
                        control.BackgroundImage = ImageFile;
                    });
                }
                //dca
                Control[] listDCAHeadingsToColor = { panel116, panel118 };
                foreach (Control control in listDCAHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = Color.Transparent;
                        control.BackgroundImage = ImageFile;
                    });
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "HeadingBackgroundsToDefault");
            }
        }

        private void HeadingBackgroundsToNone()
        {
            try
            {
                lblTitleBackgroundNone.Invoke((MethodInvoker)delegate
                {
                    lblTitleBackgroundNone.ForeColor = Color.Green;
                    lblTitleBackgroundNone.Text = "✔️";
                });
                lblTitlesBackgroundImage.Invoke((MethodInvoker)delegate
                {
                    lblTitlesBackgroundImage.ForeColor = Color.IndianRed;
                    lblTitlesBackgroundImage.Text = "❌";
                });
                lblTitleBackgroundCustom.Invoke((MethodInvoker)delegate
                {
                    lblTitleBackgroundCustom.ForeColor = Color.IndianRed;
                    lblTitleBackgroundCustom.Text = "❌";
                });

                //header
                Control[] listHeaderHeadingsToColor = { panel38, panel39, panel40 };
                foreach (Control control in listHeaderHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = Color.Transparent;
                        control.BackgroundImage = null;
                    });
                }
                //settings & appearance
                Control[] listSettingsHeadingsToColor = { panel110, panel97, panel108, panel54, panel52, panel47, panel58, panel59, panel60, panel62, panel63, panel64, panel22, panel34, panel37, panel65, panel69, panel72, panel82, panel83, panel104, panel112 };
                foreach (Control control in listSettingsHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = Color.Transparent;
                        control.BackgroundImage = null;
                    });
                }
                //bitcoindashboard
                Control[] listBitcoinDashboardHeadingsToColor = { panel6, panel11, panel8, panel10, panel12, panel9, panel187 };
                foreach (Control control in listBitcoinDashboardHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = Color.Transparent;
                        control.BackgroundImage = null;
                    });
                }
                //lightningdashboard
                Control[] listLightningDashboardHeadingsToColor = { panel4, panel5, panel1, panel2, panel3 };
                foreach (Control control in listLightningDashboardHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = Color.Transparent;
                        control.BackgroundImage = null;
                    });
                }
                //address
                Control[] listAddressHeadingsToColor = { panel41, panel42, panel43, panel44 };
                foreach (Control control in listAddressHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = Color.Transparent;
                        control.BackgroundImage = null;
                    });
                }
                //mining pools - blocks & hashrate & list
                Control[] listPoolsBlocksHeadingsToColor = { panel138, panel145, panel81, panel146, panel152, panel154, panel155, panel159, panel164, panel156, panel102 };
                foreach (Control control in listPoolsBlocksHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = Color.Transparent;
                        control.BackgroundImage = null;
                    });
                }
                //address utxo
                Control[] listAddressUTXOHeadingsToColor = { panel141, panel136 };
                foreach (Control control in listAddressUTXOHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = Color.Transparent;
                        control.BackgroundImage = null;
                    });
                }
                //block
                Control[] listBlockHeadingsToColor = { panel55 };
                foreach (Control control in listBlockHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = Color.Transparent;
                        control.BackgroundImage = null;
                    });
                }
                //blocklist
                Control[] listBlockListHeadingsToColor = { panel45, panel13, panel15, panel28 };
                foreach (Control control in listBlockListHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = Color.Transparent;
                        control.BackgroundImage = null;
                    });
                }
                //transaction
                Control[] listTransactionHeadingsToColor = { };
                foreach (Control control in listTransactionHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = Color.Transparent;
                        control.BackgroundImage = null;
                    });
                }
                //xpub
                Control[] listXpubHeadingsToColor = { panel23, panel26, panel29 };
                foreach (Control control in listXpubHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = Color.Transparent;
                        control.BackgroundImage = null;
                    });
                }
                //charts
                Control[] listChartsHeadingsToColor = { panel78, panel49, panel50, panel139, panel24 };
                foreach (Control control in listChartsHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = Color.Transparent;
                        control.BackgroundImage = null;
                    });
                }
                //dca
                Control[] listDCAHeadingsToColor = { panel116, panel118 };
                foreach (Control control in listDCAHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackColor = Color.Transparent;
                        control.BackgroundImage = null;
                    });
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "HeadingBackgroundsToNone");
            }
        }

        private void HeadingBackgroundsToCustomColor()
        {
            try
            {
                //header
                Control[] listHeaderHeadingsToColor = { panel38, panel39, panel40 };
                foreach (Control control in listHeaderHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackgroundImage = null;
                        control.BackColor = titleBackgroundColor;
                    });
                }
                //settings & appearance
                Control[] listSettingsHeadingsToColor = { panel110, panel97, panel54, panel108, panel52, panel47, panel58, panel59, panel60, panel62, panel63, panel64, panel22, panel34, panel37, panel65, panel69, panel72, panel82, panel83, panel104, panel112 };
                foreach (Control control in listSettingsHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackgroundImage = null;
                        control.BackColor = titleBackgroundColor;
                    });
                }
                //bitcoindashboard
                Control[] listBitcoinDashboardHeadingsToColor = { panel6, panel11, panel8, panel10, panel12, panel9, panel187 };
                foreach (Control control in listBitcoinDashboardHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackgroundImage = null;
                        control.BackColor = titleBackgroundColor;
                    });
                }
                //lightningdashboard
                Control[] listLightningDashboardHeadingsToColor = { panel4, panel5, panel1, panel2, panel3 };
                foreach (Control control in listLightningDashboardHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackgroundImage = null;
                        control.BackColor = titleBackgroundColor;
                    });
                }
                //address
                Control[] listAddressHeadingsToColor = { panel41, panel42, panel43, panel44 };
                foreach (Control control in listAddressHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackgroundImage = null;
                        control.BackColor = titleBackgroundColor;
                    });
                }
                //mining pools - blocks & hashrate & list
                Control[] listPoolsBlocksHeadingsToColor = { panel138, panel145, panel81, panel146, panel152, panel154, panel155, panel159, panel164, panel156, panel102 };
                foreach (Control control in listPoolsBlocksHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackgroundImage = null;
                        control.BackColor = titleBackgroundColor;
                    });
                }
                //address utxo
                Control[] listAddressUTXOHeadingsToColor = { panel141, panel136 };
                foreach (Control control in listAddressUTXOHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackgroundImage = null;
                        control.BackColor = titleBackgroundColor;
                    });
                }
                //block
                Control[] listBlockHeadingsToColor = { panel55 };
                foreach (Control control in listBlockHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackgroundImage = null;
                        control.BackColor = titleBackgroundColor;
                    });
                }
                //blocklist
                Control[] listBlockListHeadingsToColor = { panel45, panel13, panel15, panel28 };
                foreach (Control control in listBlockListHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackgroundImage = null;
                        control.BackColor = titleBackgroundColor;
                    });
                }
                //transaction
                Control[] listTransactionHeadingsToColor = { };
                foreach (Control control in listTransactionHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackgroundImage = null;
                        control.BackColor = titleBackgroundColor;
                    });
                }
                //xpub
                Control[] listXpubHeadingsToColor = { panel23, panel26, panel29 };
                foreach (Control control in listXpubHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackgroundImage = null;
                        control.BackColor = titleBackgroundColor;
                    });
                }
                //charts
                Control[] listChartsHeadingsToColor = { panel78, panel49, panel50, panel139, panel24 };
                foreach (Control control in listChartsHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackgroundImage = null;
                        control.BackColor = titleBackgroundColor;
                    });
                }
                //dca
                Control[] listDCAHeadingsToColor = { panel116, panel118 };
                foreach (Control control in listDCAHeadingsToColor)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackgroundImage = null;
                        control.BackColor = titleBackgroundColor;
                    });
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "HeadingBackgroundsToCustomColor");
            }
        }

        private void ColorPanels(Color thiscolor)
        {
            try
            {
                Control[] listPanelsToColor = { panel7, panel109, panel123, panel120, panel30, panel125, panel132, panel92, panelAddToBookmarks, panelBookmarksContainer, panel46, panel103, panelOwnNodeBlockTXInfo, panel119, panelPriceConvert, panel106, panel107, panel53, panel96, panel70, panel71, panel73, panel20, panel32, panel74, panel76, panel77, panel88, panel89, panel90, panel86, panel87, panel91, panel84, panel85, panel99, panel94, panelTransactionMiddle, panelOwnNodeAddressTXInfo, panel51, panel16, panel21, panelSettingsUIScale, panelDCAMessages, panelDCASummary, panelDCAInputs, panelRefreshChart, panel80, panel153, panel158, panel124, label334 };
                foreach (Control control in listPanelsToColor)
                {
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.BackColor = thiscolor;
                        });
                    }
                }
                toolTipForLblHeaderPrice.BackColor = thiscolor;
                toolTipGeneralUse.BackColor = thiscolor;

                panelPoolsListScrollbarInner.BackColor = MakeColorLighter(thiscolor, 10);
                panelBookmarksScrollbarInner.BackColor = MakeColorLighter(thiscolor, 10);
                panelTXInScrollbarInner.BackColor = MakeColorLighter(thiscolor, 10);
                panelTXOutScrollbarInner.BackColor = MakeColorLighter(thiscolor, 10);
                panelAddressUTXOScrollbarInner.BackColor = MakeColorLighter(thiscolor, 10);
                panelPoolsBlocksScrollbarInner.BackColor = MakeColorLighter(thiscolor, 10);
                panelXpubScrollbarInner.BackColor = MakeColorLighter(thiscolor, 10);
                // price sources indicators.
                panelPriceSourceIndicatorsOuter.BackColor = MakeColorLighter(thiscolor, 25);
                panelPriceSourceIndicatorsOuter.Width = panelPriceSourceIndicators.Width + 2;
                panelPriceSourceIndicatorsOuter.Height = panelPriceSourceIndicators.Height + 2;
                panelPriceSourceIndicators.Location = new Point(1, 1);
                panelPriceSourceIndicators.BackColor = MakeColorLighter(thiscolor, -5);
                //settings info box
                panel133.BackColor = MakeColorLighter(thiscolor, 25);
                panel133.Width = panel134.Width + 2;
                panel133.Height = panel134.Height + 2;
                panel134.Location = new Point(1, 1);
                panel134.BackColor = MakeColorLighter(thiscolor, -5);
                //charts controls info
                panel188.BackColor = MakeColorLighter(thiscolor, 25);
                panel188.Width = panel189.Width + 2;
                panel188.Height = panel189.Height + 2;
                panel189.Location = new Point(1, 1);
                panel189.BackColor = MakeColorLighter(thiscolor, -5);
                //dca chart controls info
                panel190.BackColor = MakeColorLighter(thiscolor, 25);
                panel190.Width = panel191.Width + 2;
                panel190.Height = panel191.Height + 2;
                panel191.Location = new Point(1, 1);
                panel191.BackColor = MakeColorLighter(thiscolor, -5);
                //mining pools chart control info
                panel192.BackColor = MakeColorLighter(thiscolor, 25);
                panel192.Width = panel193.Width + 2;
                panel192.Height = panel193.Height + 2;
                panel193.Location = new Point(1, 1);
                panel193.BackColor = MakeColorLighter(thiscolor, -5);
                //pools blocks/hashrate charts controls info
                panel194.BackColor = MakeColorLighter(thiscolor, 25);
                panel194.Width = panel198.Width + 2;
                panel194.Height = panel198.Height + 2;
                panel198.Location = new Point(1, 1);
                panel198.BackColor = MakeColorLighter(thiscolor, -5);

                panel148.BackColor = MakeColorLighter(thiscolor, -20);
                panel148.Height = 1;
                panel157.BackColor = MakeColorLighter(thiscolor, -20);
                panel157.Height = 1;
                panel177.BackColor = MakeColorLighter(thiscolor, -20);
                panel177.Height = 1;
                panel178.BackColor = MakeColorLighter(thiscolor, -20);
                panel178.Height = 1;
                panel179.BackColor = MakeColorLighter(thiscolor, -20);
                panel179.Height = 1;
                panel180.BackColor = MakeColorLighter(thiscolor, -20);
                panel180.Height = 1;
                panel57.BackColor = MakeColorLighter(thiscolor, -20);
                panel57.Width = 1;

                panel181.BackColor = MakeColorLighter(thiscolor, -20);
                panel181.Height = 1;
                panel182.BackColor = MakeColorLighter(thiscolor, -20);
                panel182.Height = 1;
                panel183.BackColor = MakeColorLighter(thiscolor, -20);
                panel183.Height = 1;
                panel184.BackColor = MakeColorLighter(thiscolor, -20);
                panel184.Height = 1;
                panel185.BackColor = MakeColorLighter(thiscolor, -20);
                panel185.Height = 1;
                panel186.BackColor = MakeColorLighter(thiscolor, -20);
                panel186.Height = 1;
                panel197.BackColor = MakeColorLighter(thiscolor, -20);
                panel197.Height = 1;
                panel196.BackColor = MakeColorLighter(thiscolor, -20);
                panel196.Height = 1;
                panel195.BackColor = MakeColorLighter(thiscolor, -20);
                panel195.Height = 1;
            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorPanels");
            }
        }

        private void StyleProgressBars(String style)
        {
            try
            {
                if (String.Compare(style, "solid") == 0)
                {
                    //header
                    progressBarRefreshData.Invoke((MethodInvoker)delegate
                    {
                        progressBarRefreshData.FillStyle = ColorProgressBar.ColorProgressBar.FillStyles.Solid;
                    });
                    //themes
                    colorProgressBar1.Invoke((MethodInvoker)delegate
                    {
                        colorProgressBar1.FillStyle = ColorProgressBar.ColorProgressBar.FillStyles.Solid;
                    });
                    //bitcoindashboard
                    progressBarNextDiffAdj.Invoke((MethodInvoker)delegate
                    {
                        progressBarNextDiffAdj.FillStyle = ColorProgressBar.ColorProgressBar.FillStyles.Solid;
                    });
                    progressBarProgressToHalving.Invoke((MethodInvoker)delegate
                    {
                        progressBarProgressToHalving.FillStyle = ColorProgressBar.ColorProgressBar.FillStyles.Solid;
                    });
                    progressBarPercentIssued.Invoke((MethodInvoker)delegate
                    {
                        progressBarPercentIssued.FillStyle = ColorProgressBar.ColorProgressBar.FillStyles.Solid;
                    });
                    //blocklist
                    progressBarBlockListNextDiffAdj.Invoke((MethodInvoker)delegate
                    {
                        progressBarBlockListNextDiffAdj.FillStyle = ColorProgressBar.ColorProgressBar.FillStyles.Solid;
                    });
                    progressBarBlockListHalvingProgress.Invoke((MethodInvoker)delegate
                    {
                        progressBarBlockListHalvingProgress.FillStyle = ColorProgressBar.ColorProgressBar.FillStyles.Solid;
                    });
                    //xpub
                    progressBarCheckEachAddressType.Invoke((MethodInvoker)delegate
                    {
                        progressBarCheckEachAddressType.FillStyle = ColorProgressBar.ColorProgressBar.FillStyles.Solid;
                    });
                    progressBarCheckAllAddressTypes.Invoke((MethodInvoker)delegate
                    {
                        progressBarCheckAllAddressTypes.FillStyle = ColorProgressBar.ColorProgressBar.FillStyles.Solid;
                    });
                }
                else
                {
                    //header
                    progressBarRefreshData.Invoke((MethodInvoker)delegate
                    {
                        progressBarRefreshData.FillStyle = ColorProgressBar.ColorProgressBar.FillStyles.Dashed;
                    });
                    //themes
                    colorProgressBar1.Invoke((MethodInvoker)delegate
                    {
                        colorProgressBar1.FillStyle = ColorProgressBar.ColorProgressBar.FillStyles.Dashed;
                    });
                    //bitcoindashboard
                    progressBarNextDiffAdj.Invoke((MethodInvoker)delegate
                    {
                        progressBarNextDiffAdj.FillStyle = ColorProgressBar.ColorProgressBar.FillStyles.Dashed;
                    });
                    progressBarProgressToHalving.Invoke((MethodInvoker)delegate
                    {
                        progressBarProgressToHalving.FillStyle = ColorProgressBar.ColorProgressBar.FillStyles.Dashed;
                    });
                    progressBarPercentIssued.Invoke((MethodInvoker)delegate
                    {
                        progressBarPercentIssued.FillStyle = ColorProgressBar.ColorProgressBar.FillStyles.Dashed;
                    });
                    //blocklist
                    progressBarBlockListNextDiffAdj.Invoke((MethodInvoker)delegate
                    {
                        progressBarBlockListNextDiffAdj.FillStyle = ColorProgressBar.ColorProgressBar.FillStyles.Dashed;
                    });
                    progressBarBlockListHalvingProgress.Invoke((MethodInvoker)delegate
                    {
                        progressBarBlockListHalvingProgress.FillStyle = ColorProgressBar.ColorProgressBar.FillStyles.Dashed;
                    });
                    //xpub
                    progressBarCheckEachAddressType.Invoke((MethodInvoker)delegate
                    {
                        progressBarCheckEachAddressType.FillStyle = ColorProgressBar.ColorProgressBar.FillStyles.Dashed;
                    });
                    progressBarCheckAllAddressTypes.Invoke((MethodInvoker)delegate
                    {
                        progressBarCheckAllAddressTypes.FillStyle = ColorProgressBar.ColorProgressBar.FillStyles.Dashed;
                    });
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "StyleProgressBars");
            }
        }

        // all menu buttons derive their colour from chartbackgroundcolor
        private void BtnMenuButtons_MouseEnter(object sender, EventArgs e)
        {
            try
            {
                System.Windows.Forms.Button[] buttonsToUpdateBackColor =
                {
                    btnMenuApplyCustomTheme, btnMenuBitcoinDashboard, btnThemeMenu, btnMenuAddress, btnMenuAddressUTXO,
                    btnMenuCreateTheme, btnMenuBlock, btnMenuBlockList, btnMenuBookmarks, btnMenuCharts,
                    btnMenuDirectory, btnMenuHelp, btnMenuLightningDashboard, btnMenuSettings,
                    btnMenuTransaction, btnMenuDCACalculator, btnMenuPriceConverter, btnMenuXpub, btnMenuSplash, btnMenuThemeFranklin,
                    BtnMenuThemeGenesis, btnMenuThemeSatsuma, btnMenuThemeHoneyBadger,
                    btnMenuThemeStackSats, btnMenuThemeSymbol, btnUSD, btnEUR, btnGBP,
                    btnXAU, btnCurrency, btnHelp, btnMinimise, btnShowGlobalSearch,
                    btnMoveWindow, btnExit, btnAddToBookmarks, btnHideErrorMessage,
                    btnCopyErrorMessage, btnMenuMiningPools, btnMenuPoolsByBlocks
                };
                if (buttonsToUpdateBackColor.Contains((System.Windows.Forms.Button)sender))
                {
                    ((Button)sender).Invoke((MethodInvoker)delegate
                    {
                        ((Button)sender).BackColor = btnDeleteTheme.BackColor;
                        ((Button)sender).FlatAppearance.BorderColor = btnDeleteTheme.BackColor;
                    });
                }

                if (sender == comboBoxHeaderCustomThemes)
                {
                    comboBoxHeaderCustomThemes.Invoke((MethodInvoker)delegate
                    {
                        comboBoxHeaderCustomThemes.BackColor = btnDeleteTheme.BackColor;
                    });
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuButtons_MouseEnter");
            }
        }

        private void BtnMenuButtons_MouseLeave(object sender, EventArgs e)
        {
            try
            {
                Color menuAndHeaderButtonsColour = Color.FromArgb(20, 20, 20);
                if (chartsBackgroundColor == Color.FromArgb(20, 20, 20) || chartsBackgroundColor == Color.FromArgb(40, 40, 40))
                {
                    menuAndHeaderButtonsColour = Color.FromArgb(20, 20, 20);
                }
                else
                {
                    menuAndHeaderButtonsColour = Color.FromArgb(244, 244, 244);
                }

                System.Windows.Forms.Button[] buttonsToMatchChartsBackgroundColor =
                {
                    btnMenuApplyCustomTheme, btnMenuCreateTheme, btnMenuThemeFranklin, BtnMenuThemeGenesis, btnMenuThemeSatsuma, btnMenuThemeHoneyBadger, btnMenuThemeStackSats, btnMenuThemeSymbol, btnShowGlobalSearch, btnUSD, btnEUR, btnGBP, btnXAU, btnHelp, btnMinimise, btnShowGlobalSearch, btnMoveWindow, btnExit, btnAddToBookmarks, btnHideErrorMessage, btnCopyErrorMessage
                };
                if (buttonsToMatchChartsBackgroundColor.Contains((System.Windows.Forms.Button)sender))
                {
                    ((Button)sender).Invoke((MethodInvoker)delegate
                    {
                        ((Button)sender).BackColor = menuAndHeaderButtonsColour;
                        ((Button)sender).FlatAppearance.BorderColor = menuAndHeaderButtonsColour;
                    });
                }

                System.Windows.Forms.Button[] buttonstoMakeTransparent =
                {
                    btnMenuBitcoinDashboard, btnMenuAddress, btnMenuBlock, btnMenuBlockList, btnMenuBookmarks, btnMenuDirectory, btnMenuPriceConverter, btnMenuCharts, btnMenuHelp, btnMenuLightningDashboard, btnMenuSettings, btnMenuTransaction, btnMenuDCACalculator, btnMenuXpub, btnMenuSplash, btnMenuAddressUTXO, btnMenuMiningPools, btnMenuPoolsByBlocks
                };
                if (buttonstoMakeTransparent.Contains((System.Windows.Forms.Button)sender))
                {
                    ((Button)sender).Invoke((MethodInvoker)delegate
                    {
                        ((System.Windows.Forms.Button)sender).BackColor = Color.Transparent;
                        ((Button)sender).FlatAppearance.BorderColor = menuAndHeaderButtonsColour;
                    });
                }

                if (sender == btnThemeMenu)
                {
                    if (panelThemeMenu.Height == 0)
                    {
                        btnThemeMenu.Invoke((MethodInvoker)delegate
                        {
                            btnThemeMenu.BackColor = Color.Transparent;
                        });
                    }
                }
                if (sender == btnCurrency)
                {
                    if (panelCurrency.Height == 0)
                    {
                        btnCurrency.Invoke((MethodInvoker)delegate
                        {
                            btnCurrency.BackColor = Color.Transparent;
                        });
                    }
                }
                if (sender == comboBoxHeaderCustomThemes)
                {
                    comboBoxHeaderCustomThemes.Invoke((MethodInvoker)delegate
                    {
                        comboBoxHeaderCustomThemes.BackColor = menuAndHeaderButtonsColour;
                    });
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuButtons_MouseLeave");
            }
        }

        private void ComboBoxHeaderCustomThemes_MouseEnter(object sender, EventArgs e)
        {
            comboBoxHeaderCustomThemes.Invoke((MethodInvoker)delegate
            {
                comboBoxHeaderCustomThemes.BackColor = btnDeleteTheme.BackColor;
            });
        }

        private void ComboBoxHeaderCustomThemes_MouseLeave(object sender, EventArgs e)
        {
            Color menuAndHeaderButtonsColour;
            if (chartsBackgroundColor == Color.FromArgb(20, 20, 20) || chartsBackgroundColor == Color.FromArgb(40, 40, 40))
            {
                menuAndHeaderButtonsColour = Color.FromArgb(20, 20, 20);
            }
            else
            {
                menuAndHeaderButtonsColour = Color.FromArgb(244, 244, 244);
            }
            comboBoxHeaderCustomThemes.Invoke((MethodInvoker)delegate
            {
                comboBoxHeaderCustomThemes.BackColor = menuAndHeaderButtonsColour;
            });
        }

        private void ComboBoxHeaderCustomThemes_Paint(object sender, PaintEventArgs e)
        {
            //force combobox to show correct colour after a new custom theme is selected
            comboBoxHeaderCustomThemes.Invoke((MethodInvoker)delegate
            {
                comboBoxHeaderCustomThemes.BackColor = BtnMenuThemeGenesis.BackColor;
                comboBoxHeaderCustomThemes.ForeColor = BtnMenuThemeGenesis.ForeColor;
            });
        }

        #endregion
        #region save theme as default
        private void TextBoxThemeName_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Return)
            {
                BtnSaveTheme_Click(sender, e);
            }
        }
        private void SaveThemeAsDefault(string themename)
        {
            try
            {
                defaultTheme = themename;
                SaveSettings();
            }
            catch (Exception ex)
            {
                HandleException(ex, "SaveThemeAsDefault");
            }
        }
        #endregion
        #region delete theme

        private void BtnDeleteTheme_Click(object sender, EventArgs e)
        {
            try
            {
                if (String.Compare(comboBoxCustomizeScreenThemeList.Texts, currentlyActiveTheme) == 0)
                {
                    lblThemeDeleted.Text = "unable to delete active theme   ";
                    intThemeDeletedMessageTimeShown = 0;
                    lblThemeDeleted.Invoke((MethodInvoker)delegate
                    {
                        lblThemeDeleted.Location = new Point(panel72.Width - lblThemeDeleted.Width, 0);
                    });
                    lblThemeDeleted.Visible = true;
                    return;
                }
                // Read the existing thenes from the JSON file
                var themes = ThemesManager.Themes;

                // Find the index of the theme with the specified data
                int index = themes!.FindIndex(theme =>
                    String.Equals(theme.ThemeName, comboBoxCustomizeScreenThemeList.Texts, StringComparison.OrdinalIgnoreCase));


                // If a matching theme was found, remove it from the list
                if (index >= 0)
                {
                    themes.RemoveAt(index);

                    // Write the updated list of themes back to the JSON file
                    WriteThemeToJsonFile(themes);
                    PopulateThemeComboboxes();
                    lblThemeDeleted.Text = "theme deleted   ";
                    intThemeDeletedMessageTimeShown = 0;
                    lblThemeDeleted.Invoke((MethodInvoker)delegate
                    {
                        lblThemeDeleted.Location = new Point(panel72.Width - lblThemeDeleted.Width, 0);
                    });
                    lblThemeDeleted.Visible = true;
                }
                else
                {
                    lblThemeDeleted.Text = "no theme selected   ";
                    intThemeDeletedMessageTimeShown = 0;
                    lblThemeDeleted.Invoke((MethodInvoker)delegate
                    {
                        lblThemeDeleted.Location = new Point(panel72.Width - lblThemeDeleted.Width, 0);
                    });
                    lblThemeDeleted.Visible = true;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDeleteTheme_Click");
            }
        }
        #endregion region
        #endregion
        //![](resources\tinylogo1.png;;;0.04706,0.04877)
        #region ⚡⚡⚡ COMMON CODE

        #region get market data
        private void GetMarketData()
        {
            string sourceOfCurrentPrice = "";

            try
            {
                if (!offlineMode && !testNet)
                {
                    string BitExPriceUSD = "0";
                    string BitExPriceGBP = "0";
                    string BitExPriceEUR = "0";
                    string BitExPriceXAU = "0";
                    string GeckoPriceUSD = "0";
                    string GeckoPriceGBP = "0";
                    string GeckoPriceEUR = "0";
                    string GeckoPriceXAU = "0";
                    string mempoPriceUSD = "0";
                    string mempoPriceGBP = "0";
                    string mempoPriceEUR = "0";
                    string mempoPriceXAU = "0";
                    decimal priceUSDTotalForAverageCalculation = 0;
                    decimal priceGBPTotalForAverageCalculation = 0;
                    decimal priceEURTotalForAverageCalculation = 0;
                    decimal priceXAUTotalForAverageCalculation = 0;
                    decimal denominatorUSDForAverageCalculation = 0;
                    decimal denominatorGBPForAverageCalculation = 0;
                    decimal denominatorEURForAverageCalculation = 0;
                    decimal denominatorXAUForAverageCalculation = 0;
                    string coinbaseTooltipForSelectedCurrency = "GREY coinbase.com: disabled";
                    string geckoTooltipForSelectedCurrency = "GREY coingecko.com: disabled";
                    string mempoTooltipForSelectedCurrency = "GREY mempool.space: disabled";

                    #region get price from coinbase.com
                    if (RunCoinbaseAPI)
                    {
                        var (bePriceUSD, bePriceGBP, bePriceEUR, bePriceXAU) = CoinbaseGetPrice();
                        BitExPriceUSD = bePriceUSD;
                        BitExPriceEUR = bePriceEUR;
                        BitExPriceGBP = bePriceGBP;
                        BitExPriceXAU = bePriceXAU;

                        //USD
                        if (Convert.ToDecimal(BitExPriceUSD) > 0)
                        {
                            // update values to calculate average
                            priceUSDTotalForAverageCalculation += Convert.ToDecimal(BitExPriceUSD);
                            denominatorUSDForAverageCalculation++;
                            if (!btnUSD.Enabled) // if default currency is USD
                            {
                                coinbaseTooltipForSelectedCurrency = $"GREEN coinbase.com: ${BitExPriceUSD}";
                                CoinbasePriceIndicator.Invoke((MethodInvoker)delegate
                                {
                                    CoinbasePriceIndicator.ForeColor = Color.Lime;
                                });
                                intCoinbaseTimeLightLit = 0;
                            }
                        }
                        else
                        {
                            // update tooltip message and colour indicator
                            if (!btnUSD.Enabled) // if default currency is USD
                            {
                                coinbaseTooltipForSelectedCurrency = "RED coinbase.com: no USD price returned";
                                CoinbasePriceIndicator.Invoke((MethodInvoker)delegate
                                {
                                    CoinbasePriceIndicator.ForeColor = Color.Red;
                                });
                                intCoinbaseTimeLightLit = 0;
                            }

                        }

                        //GBP
                        if (Convert.ToDecimal(BitExPriceGBP) > 0)
                        {
                            // update values to calculate average
                            priceGBPTotalForAverageCalculation += Convert.ToDecimal(BitExPriceGBP);
                            denominatorGBPForAverageCalculation++;

                            // update tooltip message and colour indicator
                            if (!btnGBP.Enabled) // if default currency is GBP
                            {
                                coinbaseTooltipForSelectedCurrency = $"GREEN coinbase.com: £{BitExPriceGBP}";
                                CoinbasePriceIndicator.Invoke((MethodInvoker)delegate
                                {
                                    CoinbasePriceIndicator.ForeColor = Color.Lime;
                                });
                                intCoinbaseTimeLightLit = 0;
                            }
                        }
                        else
                        {
                            // update tooltip message and colour indicator
                            if (!btnGBP.Enabled) // if default currency is GBP
                            {
                                coinbaseTooltipForSelectedCurrency = "RED coinbase.com: no GBP price returned";
                                CoinbasePriceIndicator.Invoke((MethodInvoker)delegate
                                {
                                    CoinbasePriceIndicator.ForeColor = Color.Red;
                                });
                                intCoinbaseTimeLightLit = 0;
                            }

                        }

                        //EUR
                        if (Convert.ToDecimal(BitExPriceEUR) > 0)
                        {
                            // update values to calculate average
                            priceEURTotalForAverageCalculation += Convert.ToDecimal(BitExPriceEUR);
                            denominatorEURForAverageCalculation++;

                            // update tooltip message and colour indicator
                            if (!btnEUR.Enabled) // if default currency is EUR
                            {
                                coinbaseTooltipForSelectedCurrency = $"GREEN coinbase.com: €{BitExPriceEUR}";
                                CoinbasePriceIndicator.Invoke((MethodInvoker)delegate
                                {
                                    CoinbasePriceIndicator.ForeColor = Color.Lime;
                                });
                                intCoinbaseTimeLightLit = 0;
                            }
                        }
                        else
                        {
                            // update tooltip message and colour indicator
                            if (!btnEUR.Enabled) // if default currency is EUR
                            {
                                coinbaseTooltipForSelectedCurrency = "RED coinbase.com: no EUR price returned";
                                CoinbasePriceIndicator.Invoke((MethodInvoker)delegate
                                {
                                    CoinbasePriceIndicator.ForeColor = Color.Red;
                                });
                                intCoinbaseTimeLightLit = 0;
                            }

                        }

                        //XAU
                        if (Convert.ToDecimal(BitExPriceXAU) > 0)
                        {
                            // update values to calculate average
                            priceXAUTotalForAverageCalculation += Convert.ToDecimal(BitExPriceXAU);
                            denominatorXAUForAverageCalculation++;

                            // update tooltip message and colour indicator
                            if (!btnXAU.Enabled) // if default currency is XAU
                            {
                                coinbaseTooltipForSelectedCurrency = $"GREEN coinbase.com: 🪙{BitExPriceXAU}";
                                CoinbasePriceIndicator.Invoke((MethodInvoker)delegate
                                {
                                    CoinbasePriceIndicator.ForeColor = Color.Lime;
                                });
                                intCoinbaseTimeLightLit = 0;
                            }
                        }
                        else
                        {
                            // update tooltip message and colour indicator
                            if (!btnXAU.Enabled) // if default currency is XAU
                            {
                                coinbaseTooltipForSelectedCurrency = "RED coinbase.com: no XAU price returned";
                                CoinbasePriceIndicator.Invoke((MethodInvoker)delegate
                                {
                                    CoinbasePriceIndicator.ForeColor = Color.Red;
                                });
                                intCoinbaseTimeLightLit = 0;
                            }
                        }
                    }
                    else
                    {
                        CoinbasePriceIndicator.Invoke((MethodInvoker)delegate
                        {
                            CoinbasePriceIndicator.ForeColor = Color.LightGray;
                        });
                    }
                    #endregion

                    #region get price from coingecko.com
                    if (RunCoingeckoAPI)
                    {
                        var (cgPriceUSD, cgPriceGBP, cgPriceEUR, cgPriceXAU) = CoingeckoGetPrice();
                        GeckoPriceUSD = cgPriceUSD;
                        GeckoPriceEUR = cgPriceEUR;
                        GeckoPriceGBP = cgPriceGBP;
                        GeckoPriceXAU = cgPriceXAU;

                        //USD
                        if (Convert.ToDecimal(GeckoPriceUSD) > 0)
                        {
                            // update values to calculate average
                            priceUSDTotalForAverageCalculation += Convert.ToDecimal(GeckoPriceUSD);
                            denominatorUSDForAverageCalculation++;

                            // update tooltip message and colour indicator
                            if (!btnUSD.Enabled) // if default currency is USD
                            {
                                geckoTooltipForSelectedCurrency = $"GREEN coingecko.com: ${GeckoPriceUSD}";
                                lblCoingeckoPriceIndicator.Invoke((MethodInvoker)delegate
                                {
                                    lblCoingeckoPriceIndicator.ForeColor = Color.Lime;
                                });
                                intCoingeckoTimeLightLit = 0;
                            }
                        }
                        else
                        {
                            // update tooltip message and colour indicator
                            if (!btnUSD.Enabled) // if default currency is USD
                            {
                                geckoTooltipForSelectedCurrency = "RED coingecko.com: no USD price returned";
                                lblCoingeckoPriceIndicator.Invoke((MethodInvoker)delegate
                                {
                                    lblCoingeckoPriceIndicator.ForeColor = Color.Red;
                                });
                                intCoingeckoTimeLightLit = 0;
                            }

                        }

                        //GBP
                        if (Convert.ToDecimal(GeckoPriceGBP) > 0)
                        {
                            // update values to calculate average
                            priceGBPTotalForAverageCalculation += Convert.ToDecimal(GeckoPriceGBP);
                            denominatorGBPForAverageCalculation++;

                            // update tooltip message and colour indicator
                            if (!btnGBP.Enabled) // if default currency is GBP
                            {
                                geckoTooltipForSelectedCurrency = $"GREEN coingecko.com: £{GeckoPriceGBP}";
                                lblCoingeckoPriceIndicator.Invoke((MethodInvoker)delegate
                                {
                                    lblCoingeckoPriceIndicator.ForeColor = Color.Lime;
                                });
                                intCoingeckoTimeLightLit = 0;
                            }

                        }
                        else
                        {
                            // update tooltip message and colour indicator
                            if (!btnGBP.Enabled) // if default currency is GBP
                            {
                                geckoTooltipForSelectedCurrency = "RED coingecko.com: no GBP price returned";
                                lblCoingeckoPriceIndicator.Invoke((MethodInvoker)delegate
                                {
                                    lblCoingeckoPriceIndicator.ForeColor = Color.Red;
                                });
                                intCoingeckoTimeLightLit = 0;
                            }

                        }

                        //EUR
                        if (Convert.ToDecimal(GeckoPriceEUR) > 0)
                        {
                            // update values to calculate average
                            priceEURTotalForAverageCalculation += Convert.ToDecimal(GeckoPriceEUR);
                            denominatorEURForAverageCalculation++;

                            // update tooltip message and colour indicator
                            if (!btnEUR.Enabled) // if default currency is EUR
                            {
                                geckoTooltipForSelectedCurrency = $"GREEN coingecko.com: €{GeckoPriceEUR}";
                                lblCoingeckoPriceIndicator.Invoke((MethodInvoker)delegate
                                {
                                    lblCoingeckoPriceIndicator.ForeColor = Color.Lime;
                                });
                                intCoingeckoTimeLightLit = 0;
                            }

                        }
                        else
                        {
                            // update tooltip message and colour indicator
                            if (!btnEUR.Enabled) // if default currency is EUR
                            {
                                geckoTooltipForSelectedCurrency = "RED coingecko.com: no EUR price returned";
                                lblCoingeckoPriceIndicator.Invoke((MethodInvoker)delegate
                                {
                                    lblCoingeckoPriceIndicator.ForeColor = Color.Red;
                                });
                                intCoingeckoTimeLightLit = 0;
                            }

                        }

                        //XAU
                        if (Convert.ToDecimal(GeckoPriceXAU) > 0)
                        {
                            // update values to calculate average
                            priceXAUTotalForAverageCalculation += Convert.ToDecimal(GeckoPriceXAU);
                            denominatorXAUForAverageCalculation++;

                            // update tooltip message and colour indicator
                            if (!btnXAU.Enabled) // if default currency is XAU
                            {
                                geckoTooltipForSelectedCurrency = $"GREEN coingecko.com: 🪙{GeckoPriceXAU}";
                                lblCoingeckoPriceIndicator.Invoke((MethodInvoker)delegate
                                {
                                    lblCoingeckoPriceIndicator.ForeColor = Color.Lime;
                                });
                                intCoingeckoTimeLightLit = 0;
                            }
                        }
                        else
                        {
                            // update tooltip message and colour indicator
                            if (!btnXAU.Enabled) // if default currency is XAU
                            {
                                geckoTooltipForSelectedCurrency = "RED coingecko.com: no XAU price returned";
                                lblCoingeckoPriceIndicator.Invoke((MethodInvoker)delegate
                                {
                                    lblCoingeckoPriceIndicator.ForeColor = Color.Red;
                                });
                                intCoingeckoTimeLightLit = 0;
                            }

                        }
                    }
                    else
                    {
                        lblCoingeckoPriceIndicator.Invoke((MethodInvoker)delegate
                        {
                            lblCoingeckoPriceIndicator.ForeColor = Color.LightGray;
                        });
                    }
                    #endregion

                    #region get price from mempool.space
                    if (RunMempoolSpacePriceAPI)
                    {
                        var (mpPriceUSD, mpPriceGBP, mpPriceEUR, mpPriceXAU) = MempoolSpaceGetPrice();
                        mempoPriceUSD = mpPriceUSD;
                        mempoPriceEUR = mpPriceEUR;
                        mempoPriceGBP = mpPriceGBP;
                        mempoPriceXAU = mpPriceXAU;

                        //USD
                        if (Convert.ToDecimal(mempoPriceUSD) > 0)
                        {
                            // update values to calculate average
                            priceUSDTotalForAverageCalculation += Convert.ToDecimal(mempoPriceUSD);
                            denominatorUSDForAverageCalculation++;

                            // update tooltip message and colour indicator
                            if (!btnUSD.Enabled) // if default currency is USD
                            {
                                mempoTooltipForSelectedCurrency = $"GREEN mempool.space: ${mempoPriceUSD}";
                                lblMempoolSpacePriceIndicator.Invoke((MethodInvoker)delegate
                                {
                                    lblMempoolSpacePriceIndicator.ForeColor = Color.Lime;
                                });
                                intMempoolspaceTimeLightLit = 0;
                            }
                        }
                        else
                        {
                            // update tooltip message and colour indicator
                            if (!btnUSD.Enabled) // if default currency is USD
                            {
                                mempoTooltipForSelectedCurrency = "RED mempool.space: no USD price returned";
                                lblMempoolSpacePriceIndicator.Invoke((MethodInvoker)delegate
                                {
                                    lblMempoolSpacePriceIndicator.ForeColor = Color.Red;
                                });
                                intMempoolspaceTimeLightLit = 0;
                            }

                        }

                        //GBP
                        if (Convert.ToDecimal(mempoPriceGBP) > 0)
                        {
                            // update values to calculate average
                            priceGBPTotalForAverageCalculation += Convert.ToDecimal(mempoPriceGBP);
                            denominatorGBPForAverageCalculation++;

                            // update tooltip message and colour indicator
                            if (!btnGBP.Enabled) // if default currency is GBP
                            {
                                mempoTooltipForSelectedCurrency = $"GREEN mempool.space: £{mempoPriceGBP}";
                                lblMempoolSpacePriceIndicator.Invoke((MethodInvoker)delegate
                                {
                                    lblMempoolSpacePriceIndicator.ForeColor = Color.Lime;
                                });
                                intMempoolspaceTimeLightLit = 0;
                            }
                        }
                        else
                        {
                            // update tooltip message and colour indicator
                            if (!btnGBP.Enabled) // if default currency is GBP
                            {
                                mempoTooltipForSelectedCurrency = "RED mempool.space: no GBP price returned";
                                lblMempoolSpacePriceIndicator.Invoke((MethodInvoker)delegate
                                {
                                    lblMempoolSpacePriceIndicator.ForeColor = Color.Red;
                                });
                                intMempoolspaceTimeLightLit = 0;
                            }

                        }

                        //EUR
                        if (Convert.ToDecimal(mempoPriceEUR) > 0)
                        {
                            // update values to calculate average
                            priceEURTotalForAverageCalculation += Convert.ToDecimal(mempoPriceEUR);
                            denominatorEURForAverageCalculation++;

                            // update tooltip message and colour indicator
                            if (!btnEUR.Enabled) // if default currency is EUR
                            {
                                mempoTooltipForSelectedCurrency = $"GREEN mempool.space: €{mempoPriceEUR}";
                                lblMempoolSpacePriceIndicator.Invoke((MethodInvoker)delegate
                                {
                                    lblMempoolSpacePriceIndicator.ForeColor = Color.Lime;
                                });
                                intMempoolspaceTimeLightLit = 0;
                            }
                        }
                        else
                        {
                            // update tooltip message and colour indicator
                            if (!btnEUR.Enabled) // if default currency is EUR
                            {
                                mempoTooltipForSelectedCurrency = "RED mempool.space: no EUR price returned";
                                lblMempoolSpacePriceIndicator.Invoke((MethodInvoker)delegate
                                {
                                    lblMempoolSpacePriceIndicator.ForeColor = Color.Red;
                                });
                                intMempoolspaceTimeLightLit = 0;
                            }

                        }

                        //XAU
                        if (Convert.ToDecimal(mempoPriceXAU) > 0)
                        {
                            // update values to calculate average
                            priceXAUTotalForAverageCalculation += Convert.ToDecimal(mempoPriceXAU);
                            denominatorXAUForAverageCalculation++;

                            // update tooltip message and colour indicator
                            if (!btnXAU.Enabled) // if default currency is XAU
                            {
                                mempoTooltipForSelectedCurrency = $"GREEN mempool.space: 🪙{mempoPriceXAU}";
                                lblMempoolSpacePriceIndicator.Invoke((MethodInvoker)delegate
                                {
                                    lblMempoolSpacePriceIndicator.ForeColor = Color.Lime;
                                });
                                intMempoolspaceTimeLightLit = 0;
                            }
                        }
                        else
                        {
                            // update tooltip message and colour indicator
                            if (!btnXAU.Enabled) // if default currency is XAU
                            {
                                mempoTooltipForSelectedCurrency = "RED mempool.space: no XAU price returned";
                                lblMempoolSpacePriceIndicator.Invoke((MethodInvoker)delegate
                                {
                                    lblMempoolSpacePriceIndicator.ForeColor = Color.Red;
                                });
                                intMempoolspaceTimeLightLit = 0;
                            }
                        }
                    }
                    else
                    {
                        lblMempoolSpacePriceIndicator.Invoke((MethodInvoker)delegate
                        {
                            lblMempoolSpacePriceIndicator.ForeColor = Color.LightGray;
                        });
                    }
                    #endregion

                    #region calculate average current price for each currency
                    string PriceUSD = "0";
                    string PriceEUR = "0";
                    string PriceGBP = "0";
                    string PriceXAU = "0";

                    //calculate average current price for each currency
                    if (denominatorUSDForAverageCalculation > 0)
                    {
                        PriceUSD = (priceUSDTotalForAverageCalculation / denominatorUSDForAverageCalculation).ToString("0.00");
                    }
                    if (denominatorGBPForAverageCalculation > 0)
                    {
                        PriceGBP = (priceGBPTotalForAverageCalculation / denominatorGBPForAverageCalculation).ToString("0.00");
                    }
                    if (denominatorEURForAverageCalculation > 0)
                    {
                        PriceEUR = (priceEURTotalForAverageCalculation / denominatorEURForAverageCalculation).ToString("0.00");
                    }
                    if (denominatorXAUForAverageCalculation > 0)
                    {
                        PriceXAU = (priceXAUTotalForAverageCalculation / denominatorXAUForAverageCalculation).ToString("0.00");
                    }
                    #endregion

                    #region construct tooltip text according to selected currency and selected price sources
                    if (!RunCoinbaseAPI && !RunCoingeckoAPI && !RunMempoolSpacePriceAPI)
                    {
                        sourceOfCurrentPrice = $"Price source(s):\nEnable/disable sources in settings\n{geckoTooltipForSelectedCurrency}\n{coinbaseTooltipForSelectedCurrency}\n{mempoTooltipForSelectedCurrency}\nAverage current price: disabled";
                    }
                    else
                    {
                        if (!btnUSD.Enabled)
                        {
                            sourceOfCurrentPrice = $"Price source(s):\nEnable/disable sources in settings\n{geckoTooltipForSelectedCurrency}\n{coinbaseTooltipForSelectedCurrency}\n{mempoTooltipForSelectedCurrency}\nAverage current price = ${PriceUSD}";
                        }
                        if (!btnGBP.Enabled)
                        {
                            sourceOfCurrentPrice = $"Price source(s):\nEnable/disable sources in settings\n{geckoTooltipForSelectedCurrency}\n{coinbaseTooltipForSelectedCurrency}\n{mempoTooltipForSelectedCurrency}\nAverage current price = £{PriceGBP}";
                        }
                        if (!btnEUR.Enabled)
                        {
                            sourceOfCurrentPrice = $"Price source(s):\nEnable/disable sources in settings\n{geckoTooltipForSelectedCurrency}\n{coinbaseTooltipForSelectedCurrency}\n{mempoTooltipForSelectedCurrency}\nAverage current price = €{PriceEUR}";
                        }
                        if (!btnXAU.Enabled)
                        {
                            sourceOfCurrentPrice = $"Price source(s):\nEnable/disable sources in settings\n{geckoTooltipForSelectedCurrency}\n{coinbaseTooltipForSelectedCurrency}\n{mempoTooltipForSelectedCurrency}\nAverage current price = 🪙{PriceXAU}";
                        }
                    }

                    #endregion

                    #region assign tooltip to controls
                    if (lblHeaderPrice.InvokeRequired)
                    {
                        // Invoke the method on the UI thread
                        lblHeaderPrice.Invoke(new Action(() => toolTipForLblHeaderPrice.SetToolTip(lblHeaderPrice, sourceOfCurrentPrice)));
                    }
                    else
                    {
                        // Set the tooltip directly (already on the UI thread)
                        toolTipForLblHeaderPrice.SetToolTip(lblHeaderPrice, sourceOfCurrentPrice);
                    }

                    if (panelPriceSourceIndicators.InvokeRequired)
                    {
                        // Invoke the method on the UI thread
                        panelPriceSourceIndicators.Invoke(new Action(() => toolTipForLblHeaderPrice.SetToolTip(panelPriceSourceIndicators, sourceOfCurrentPrice)));
                    }
                    else
                    {
                        // Set the tooltip directly (already on the UI thread)
                        toolTipForLblHeaderPrice.SetToolTip(panelPriceSourceIndicators, sourceOfCurrentPrice);
                    }

                    if (label226.InvokeRequired)
                    {
                        // Invoke the method on the UI thread
                        label226.Invoke(new Action(() => toolTipForLblHeaderPrice.SetToolTip(label226, sourceOfCurrentPrice)));
                    }
                    else
                    {
                        // Set the tooltip directly (already on the UI thread)
                        toolTipForLblHeaderPrice.SetToolTip(label226, sourceOfCurrentPrice);
                    }

                    if (CoinbasePriceIndicator.InvokeRequired)
                    {
                        // Invoke the method on the UI thread
                        CoinbasePriceIndicator.Invoke(new Action(() => toolTipForLblHeaderPrice.SetToolTip(CoinbasePriceIndicator, sourceOfCurrentPrice)));
                    }
                    else
                    {
                        // Set the tooltip directly (already on the UI thread)
                        toolTipForLblHeaderPrice.SetToolTip(CoinbasePriceIndicator, sourceOfCurrentPrice);
                    }

                    if (lblCoingeckoPriceIndicator.InvokeRequired)
                    {
                        // Invoke the method on the UI thread
                        lblCoingeckoPriceIndicator.Invoke(new Action(() => toolTipForLblHeaderPrice.SetToolTip(lblCoingeckoPriceIndicator, sourceOfCurrentPrice)));
                    }
                    else
                    {
                        // Set the tooltip directly (already on the UI thread)
                        toolTipForLblHeaderPrice.SetToolTip(lblCoingeckoPriceIndicator, sourceOfCurrentPrice);
                    }

                    if (lblMempoolSpacePriceIndicator.InvokeRequired)
                    {
                        // Invoke the method on the UI thread
                        lblMempoolSpacePriceIndicator.Invoke(new Action(() => toolTipForLblHeaderPrice.SetToolTip(lblMempoolSpacePriceIndicator, sourceOfCurrentPrice)));
                    }
                    else
                    {
                        // Set the tooltip directly (already on the UI thread)
                        toolTipForLblHeaderPrice.SetToolTip(lblMempoolSpacePriceIndicator, sourceOfCurrentPrice);
                    }
                    #endregion

                    if (!RunCoinbaseAPI && !RunCoingeckoAPI && !RunMempoolSpacePriceAPI)
                    {
                        OneBTCInUSD = "disabled";
                        OneBTCInEUR = "disabled";
                        OneBTCInGBP = "disabled";
                        OneBTCInXAU = "disabled";
                    }
                    else
                    {
                        OneBTCInUSD = PriceUSD;
                        OneBTCInEUR = PriceEUR;
                        OneBTCInGBP = PriceGBP;
                        OneBTCInXAU = PriceXAU;
                    }

                    #region calculate market cap
                    string mCapUSD;
                    string mCapEUR;
                    string mCapGBP;
                    string mCapXAU;
                    if (!RunCoinbaseAPI && !RunCoingeckoAPI && !RunMempoolSpacePriceAPI)
                    {
                        mCapUSD = "disabled";
                        mCapEUR = "disabled";
                        mCapGBP = "disabled";
                        mCapXAU = "disabled";
                    }
                    else
                    {
                        mCapUSD = Convert.ToString(calculatedBTCInCirculation * Convert.ToDecimal(OneBTCInUSD));
                        mCapEUR = Convert.ToString(calculatedBTCInCirculation * Convert.ToDecimal(OneBTCInEUR));
                        mCapGBP = Convert.ToString(calculatedBTCInCirculation * Convert.ToDecimal(OneBTCInGBP));
                        mCapXAU = Convert.ToString(calculatedBTCInCirculation * Convert.ToDecimal(OneBTCInXAU));
                    }
                    #endregion

                    #region calculate 1 unit of fiat / sats (moscow time)
                    string satsUSD = "";
                    string satsEUR = "";
                    string satsGBP = "";
                    string satsXAU = "";

                    if (RunCoinbaseAPI || RunCoingeckoAPI || RunMempoolSpacePriceAPI)
                    {
                        decimal unitOfFiat = 1;
                        decimal priceToCalculateFrom = 0;
                        priceToCalculateFrom = Convert.ToDecimal(OneBTCInUSD);
                        if (priceToCalculateFrom > 0)
                        {
                            satsUSD = Convert.ToString(((int)((unitOfFiat / priceToCalculateFrom) * 100000000)));
                        }
                        priceToCalculateFrom = Convert.ToDecimal(OneBTCInEUR);
                        if (priceToCalculateFrom > 0)
                        {
                            satsEUR = Convert.ToString(((int)((unitOfFiat / priceToCalculateFrom) * 100000000)));
                        }
                        priceToCalculateFrom = Convert.ToDecimal(OneBTCInGBP);
                        if (priceToCalculateFrom > 0)
                        {
                            satsGBP = Convert.ToString(((int)((unitOfFiat / priceToCalculateFrom) * 100000000)));
                        }
                        priceToCalculateFrom = Convert.ToDecimal(OneBTCInXAU);
                        if (priceToCalculateFrom > 0)
                        {
                            satsXAU = Convert.ToString(((int)((unitOfFiat / priceToCalculateFrom) * 100000000)));
                        }
                    }
                    #endregion

                    #region setup price, market cap and moscow time descriptive labels and prepare field values for display, according to selected currency
                    string price = "";
                    string mCap = "";
                    string satsPerUnit = "";
                    if (!btnUSD.Enabled)
                    {
                        if (RunCoinbaseAPI || RunCoingeckoAPI || RunMempoolSpacePriceAPI)
                        {
                            OneBTCinSelectedCurrency = Convert.ToDecimal(PriceUSD);
                            if (decimal.TryParse(mCapUSD, out decimal mCapUSDDecimal))
                            {
                                mCap = $"${mCapUSDDecimal:N2}";
                            }
                            price = $"${PriceUSD}";
                            satsPerUnit = satsUSD;
                        }
                        else
                        {
                            OneBTCinSelectedCurrency = 0;
                            mCap = "disabled";
                            price = "disabled";
                            satsPerUnit = "disabled";
                        }

                        lblHeaderMoscowTimeLabel.Invoke((MethodInvoker)delegate
                        {
                            lblHeaderMoscowTimeLabel.Text = "1$ (USD) / sats";
                        });
                        lblMoscowTimeLabel.Invoke((MethodInvoker)delegate
                        {
                            lblMoscowTimeLabel.Text = "1 USD / sats";
                        });
                        lblPriceLabel.Invoke((MethodInvoker)delegate
                        {
                            lblPriceLabel.Text = "1 BTC / USD";
                        });
                    }
                    if (!btnEUR.Enabled)
                    {
                        if (RunCoinbaseAPI || RunCoingeckoAPI || RunMempoolSpacePriceAPI)
                        {
                            OneBTCinSelectedCurrency = Convert.ToDecimal(PriceEUR);
                            if (decimal.TryParse(mCapEUR, out decimal mCapEURDecimal))
                            {
                                mCap = $"€{mCapEURDecimal:N2}";
                            }
                            price = $"€{PriceEUR}";
                            satsPerUnit = satsEUR;
                        }
                        else
                        {
                            OneBTCinSelectedCurrency = 0;
                            mCap = "disabled";
                            price = "disabled";
                            satsPerUnit = "disabled";
                        }
                        lblHeaderMoscowTimeLabel.Invoke((MethodInvoker)delegate
                        {
                            lblHeaderMoscowTimeLabel.Text = "1€ (EUR) / sats";
                        });
                        lblMoscowTimeLabel.Invoke((MethodInvoker)delegate
                        {
                            lblMoscowTimeLabel.Text = "1 EUR / sats";
                        });
                        lblPriceLabel.Invoke((MethodInvoker)delegate
                        {
                            lblPriceLabel.Text = "1 BTC / EUR";
                        });

                    }
                    if (!btnGBP.Enabled)
                    {
                        if (RunCoinbaseAPI || RunCoingeckoAPI || RunMempoolSpacePriceAPI)
                        {
                            OneBTCinSelectedCurrency = Convert.ToDecimal(PriceGBP);
                            if (decimal.TryParse(mCapGBP, out decimal mCapGBPDecimal))
                            {
                                mCap = $"£{mCapGBPDecimal:N2}";
                            }
                            price = $"£{PriceGBP}";
                            satsPerUnit = satsGBP;
                        }
                        else
                        {
                            OneBTCinSelectedCurrency = 0;
                            mCap = "disabled";
                            price = "disabled";
                            satsPerUnit = "disabled";
                        }
                        lblHeaderMoscowTimeLabel.Invoke((MethodInvoker)delegate
                        {
                            lblHeaderMoscowTimeLabel.Text = "1£ (GBP) / sats";
                        });
                        lblMoscowTimeLabel.Invoke((MethodInvoker)delegate
                        {
                            lblMoscowTimeLabel.Text = "1 GBP / sats";
                        });
                        lblPriceLabel.Invoke((MethodInvoker)delegate
                        {
                            lblPriceLabel.Text = "1 BTC / GBP";
                        });
                    }
                    if (!btnXAU.Enabled)
                    {
                        OneBTCinSelectedCurrency = Convert.ToDecimal(PriceXAU);
                        price = $"🪙{PriceXAU}";
                        if (decimal.TryParse(mCapXAU, out decimal mCapXAUDecimal))
                        {
                            mCap = $"🪙{mCapXAUDecimal:N2}";
                        }
                        satsPerUnit = satsXAU;
                        lblHeaderMoscowTimeLabel.Invoke((MethodInvoker)delegate
                        {
                            lblHeaderMoscowTimeLabel.Text = "1🪙 (XAU) / sats";
                        });
                        lblMoscowTimeLabel.Invoke((MethodInvoker)delegate
                        {
                            lblMoscowTimeLabel.Text = "1 XAU / sats";
                        });
                        lblPriceLabel.Invoke((MethodInvoker)delegate
                        {
                            lblPriceLabel.Text = "1 BTC / XAU";
                        });
                    }

                    lblHeaderMoscowTime.Invoke((MethodInvoker)delegate
                    {
                        lblHeaderMoscowTime.Location = new Point(lblHeaderMoscowTimeLabel.Location.X + lblHeaderMoscowTimeLabel.Width, lblHeaderMoscowTimeLabel.Location.Y);
                    });
                    #endregion

                    #region display change in price since last update
                    if (readyToShowPriceChangeLabelYet)
                    {
                        // calculate and assign difference here.
                        if (decimal.TryParse(lblHeaderPrice.Text.Substring(1), out decimal oldPrice))
                        {
                            if (decimal.TryParse(price.Substring(1), out decimal newPrice))
                            {
                                decimal priceChange = newPrice - oldPrice;
                                string priceChangeDisp = Convert.ToString(priceChange);
                                if (priceChange == newPrice) // first time getting price
                                {
                                    lblHeaderPriceChange.Invoke((MethodInvoker)delegate
                                    {
                                        lblHeaderPriceChange.Visible = false;
                                    });
                                    UpdateLabelValueAsync(lblHeaderPriceChange, $"+{fiatSymbol}0"); // don't show a value for price change
                                }
                                else
                                {
                                    UpdateHeaderPriceChangeValueAsync(lblHeaderPriceChange, priceChangeDisp);
                                    lblHeaderPriceChange.Invoke((MethodInvoker)delegate
                                    {
                                        lblHeaderPriceChange.Visible = true;
                                    });
                                }
                            }
                            else
                            {
                                lblHeaderPriceChange.Invoke((MethodInvoker)delegate
                                {
                                    lblHeaderPriceChange.Visible = false;
                                });
                                UpdateLabelValueAsync(lblHeaderPriceChange, $"+{fiatSymbol}0"); // don't show a value for price change
                            }
                        }
                        else
                        {
                            lblHeaderPriceChange.Invoke((MethodInvoker)delegate
                            {
                                lblHeaderPriceChange.Visible = false;
                            });
                            UpdateLabelValueAsync(lblHeaderPriceChange, $"+{fiatSymbol}0"); // don't show a value for price change
                        }
                    }
                    #endregion

                    #region display market data
                    UpdateLabelValueAsync(lblPrice, price);
                    if (OneBTCinSelectedCurrency > 0)
                    {
                        UpdateLabelValueAsync(lblHeaderPrice, price);
                    }
                    panelPriceSourceIndicatorsOuter.Invoke((MethodInvoker)delegate
                    {
                        panelPriceSourceIndicatorsOuter.Location = new Point((lblHeaderPrice.Location.X + lblHeaderPrice.Width) - (int)(8 * UIScale), panelPriceSourceIndicatorsOuter.Location.Y);
                    });

                    UpdateLabelValueAsync(lblMarketCapUSD, mCap);
                    UpdateLabelValueAsync(lblHeaderMarketCap, mCap);
                    lblHeaderMarketCapChart.Invoke((MethodInvoker)delegate
                    {
                        lblHeaderMarketCapChart.Location = new Point(lblHeaderMarketCap.Location.X + lblHeaderMarketCap.Width, lblHeaderMarketCapChart.Location.Y);
                    });
                    UpdateLabelValueAsync(lblMoscowTime, satsPerUnit);
                    UpdateLabelValueAsync(lblHeaderMoscowTime, satsPerUnit);
                    lblHeaderConverterChart.Invoke((MethodInvoker)delegate
                    {
                        lblHeaderConverterChart.Location = new Point(lblHeaderMoscowTime.Location.X + lblHeaderMoscowTime.Width, lblHeaderConverterChart.Location.Y);
                    });
                    RefreshFiatValuesEverywhere();
                    #endregion
                }
                if (offlineMode || testNet)
                {
                    OneBTCinSelectedCurrency = 0;
                    string coinbaseTooltipForSelectedCurrency;
                    string geckoTooltipForSelectedCurrency;
                    string mempoTooltipForSelectedCurrency;
                    if (offlineMode)
                    {
                        coinbaseTooltipForSelectedCurrency = "GREY coinbase.com: disabled (offline mode)";
                        geckoTooltipForSelectedCurrency = "GREY coingecko.com: disabled (offline mode)";
                        mempoTooltipForSelectedCurrency = "GREY mempool.space: disabled (offline mode)";
                    }
                    else
                    {
                        coinbaseTooltipForSelectedCurrency = "GREY coinbase.com: disabled (testnet)";
                        geckoTooltipForSelectedCurrency = "GREY coingecko.com: disabled (testnet)";
                        mempoTooltipForSelectedCurrency = "GREY mempool.space: disabled (testnet)";
                    }
                    sourceOfCurrentPrice = $"Price data is unavailable in offline mode\nand on TestNet (TestNet coins have no value)\n{geckoTooltipForSelectedCurrency}\n{coinbaseTooltipForSelectedCurrency}\n{mempoTooltipForSelectedCurrency}\nAverage current price: disabled";
                    # region assign tooltip to controls
                    if (lblHeaderPrice.InvokeRequired)
                    {
                        // Invoke the method on the UI thread
                        lblHeaderPrice.Invoke(new Action(() => toolTipForLblHeaderPrice.SetToolTip(lblHeaderPrice, sourceOfCurrentPrice)));
                    }
                    else
                    {
                        // Set the tooltip directly (already on the UI thread)
                        toolTipForLblHeaderPrice.SetToolTip(lblHeaderPrice, sourceOfCurrentPrice);
                    }

                    if (panelPriceSourceIndicators.InvokeRequired)
                    {
                        // Invoke the method on the UI thread
                        panelPriceSourceIndicators.Invoke(new Action(() => toolTipForLblHeaderPrice.SetToolTip(panelPriceSourceIndicators, sourceOfCurrentPrice)));
                    }
                    else
                    {
                        // Set the tooltip directly (already on the UI thread)
                        toolTipForLblHeaderPrice.SetToolTip(panelPriceSourceIndicators, sourceOfCurrentPrice);
                    }

                    if (label226.InvokeRequired)
                    {
                        // Invoke the method on the UI thread
                        label226.Invoke(new Action(() => toolTipForLblHeaderPrice.SetToolTip(label226, sourceOfCurrentPrice)));
                    }
                    else
                    {
                        // Set the tooltip directly (already on the UI thread)
                        toolTipForLblHeaderPrice.SetToolTip(label226, sourceOfCurrentPrice);
                    }

                    if (CoinbasePriceIndicator.InvokeRequired)
                    {
                        // Invoke the method on the UI thread
                        CoinbasePriceIndicator.Invoke(new Action(() => toolTipForLblHeaderPrice.SetToolTip(CoinbasePriceIndicator, sourceOfCurrentPrice)));
                    }
                    else
                    {
                        // Set the tooltip directly (already on the UI thread)
                        toolTipForLblHeaderPrice.SetToolTip(CoinbasePriceIndicator, sourceOfCurrentPrice);
                    }

                    if (lblCoingeckoPriceIndicator.InvokeRequired)
                    {
                        // Invoke the method on the UI thread
                        lblCoingeckoPriceIndicator.Invoke(new Action(() => toolTipForLblHeaderPrice.SetToolTip(lblCoingeckoPriceIndicator, sourceOfCurrentPrice)));
                    }
                    else
                    {
                        // Set the tooltip directly (already on the UI thread)
                        toolTipForLblHeaderPrice.SetToolTip(lblCoingeckoPriceIndicator, sourceOfCurrentPrice);
                    }

                    if (lblMempoolSpacePriceIndicator.InvokeRequired)
                    {
                        // Invoke the method on the UI thread
                        lblMempoolSpacePriceIndicator.Invoke(new Action(() => toolTipForLblHeaderPrice.SetToolTip(lblMempoolSpacePriceIndicator, sourceOfCurrentPrice)));
                    }
                    else
                    {
                        // Set the tooltip directly (already on the UI thread)
                        toolTipForLblHeaderPrice.SetToolTip(lblMempoolSpacePriceIndicator, sourceOfCurrentPrice);
                    }
                    #endregion
                    #region setup price, market cap and moscow time descriptive labels and prepare field values for display, according to selected currency
                    if (!btnUSD.Enabled)
                    {
                        lblHeaderMoscowTimeLabel.Invoke((MethodInvoker)delegate
                        {
                            lblHeaderMoscowTimeLabel.Text = "1$ (USD) / sats";
                        });
                        lblMoscowTimeLabel.Invoke((MethodInvoker)delegate
                        {
                            lblMoscowTimeLabel.Text = "1 USD / sats";
                        });
                        lblPriceLabel.Invoke((MethodInvoker)delegate
                        {
                            lblPriceLabel.Text = "1 BTC / USD";
                        });
                        lblMarketCapLabel.Invoke((MethodInvoker)delegate
                        {
                            lblMarketCapLabel.Text = "Market cap (USD)";
                        });
                    }
                    if (!btnEUR.Enabled)
                    {
                        lblHeaderMoscowTimeLabel.Invoke((MethodInvoker)delegate
                        {
                            lblHeaderMoscowTimeLabel.Text = "1€ (EUR) / sats";
                        });
                        lblMoscowTimeLabel.Invoke((MethodInvoker)delegate
                        {
                            lblMoscowTimeLabel.Text = "1 EUR / sats";
                        });
                        lblPriceLabel.Invoke((MethodInvoker)delegate
                        {
                            lblPriceLabel.Text = "1 BTC / EUR";
                        });
                        lblMarketCapLabel.Invoke((MethodInvoker)delegate
                        {
                            lblMarketCapLabel.Text = "Market cap (EUR)";
                        });
                    }
                    if (!btnGBP.Enabled)
                    {
                        lblHeaderMoscowTimeLabel.Invoke((MethodInvoker)delegate
                        {
                            lblHeaderMoscowTimeLabel.Text = "1£ (GBP) / sats";
                        });
                        lblMoscowTimeLabel.Invoke((MethodInvoker)delegate
                        {
                            lblMoscowTimeLabel.Text = "1 GBP / sats";
                        });
                        lblPriceLabel.Invoke((MethodInvoker)delegate
                        {
                            lblPriceLabel.Text = "1 BTC / GBP";
                        });
                        lblMarketCapLabel.Invoke((MethodInvoker)delegate
                        {
                            lblMarketCapLabel.Text = "Market cap (GBP)";
                        });
                    }
                    if (!btnXAU.Enabled)
                    {
                        lblHeaderMoscowTimeLabel.Invoke((MethodInvoker)delegate
                        {
                            lblHeaderMoscowTimeLabel.Text = "1🪙 (XAU) / sats";
                        });
                        lblMoscowTimeLabel.Invoke((MethodInvoker)delegate
                        {
                            lblMoscowTimeLabel.Text = "1 XAU / sats";
                        });
                        lblPriceLabel.Invoke((MethodInvoker)delegate
                        {
                            lblPriceLabel.Text = "1 BTC / XAU";
                        });
                        lblMarketCapLabel.Invoke((MethodInvoker)delegate
                        {
                            lblMarketCapLabel.Text = "Market cap (XAU)";
                        });
                    }

                    lblHeaderMoscowTime.Invoke((MethodInvoker)delegate
                    {
                        lblHeaderMoscowTime.Location = new Point(lblHeaderMoscowTimeLabel.Location.X + lblHeaderMoscowTimeLabel.Width, lblHeaderMoscowTimeLabel.Location.Y);
                    });
                    #endregion
                    lblHeaderPriceChange.Invoke((MethodInvoker)delegate
                    {
                        lblHeaderPriceChange.Visible = false;
                    });
                    UpdateLabelValueAsync(lblHeaderPriceChange, $"+{fiatSymbol}0"); // don't show a value for price change
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "getting market data");
            }
        }
        #endregion
        #region update loading status messages on loading screen
        private void UpdateLoadingScreenMessage(string statusMessage, string headlineStatusMessage)
        {
            if (fullSizeLoadingScreen!.Visible)
            {
                fullSizeLoadingScreen.SetLoadingText(statusMessage, headlineStatusMessage);
            }
            else
            {
                if (partialLoadingScreenVisible)
                {
                    loadingScreen!.SetLoadingText(statusMessage, headlineStatusMessage);
                }
            }
        }
        #endregion
        #region colour change data if it's gone up or down since previous change
        /*
        private async void UpdateLabelValueAsync(Label label, string newValue)
        {
            try
            {
                if (readyToShowRedAndGreenLabelsYet == true)
                {
                    double currentValueDouble;
                    double newValueDouble = 0;
                    // get the normal state colour. Will revert to this after making red or green
                    Color currentColor;
                    if (label == lblHeaderPrice || label == lblHeaderBlockNumber)
                    {
                        currentColor = label175.ForeColor;
                    }
                    else
                    {
                        if (label.Name.Contains("Fiat"))
                        {
                            currentColor = label288.ForeColor;
                        }
                        else
                        {
                            currentColor = label154.ForeColor;
                        }
                    }

                    // Get the current value from the label so we know if it's gone up or down
                    if (String.Compare(label.Text, "no data") == 0
                    || String.Compare(label.Text, "disabled") == 0
                    || String.Compare(label.Text, "0 (TestNet)") == 0
                    || String.Compare(label.Text, "") == 0)
                    {
                        currentValueDouble = 0;
                    }
                    else
                    {
                        // Remove non-numeric characters except decimal point
                        string cleanedText = Regex.Replace(label.Text, @"[^0-9.]", "");

                        // Parse the cleaned text to double
                        currentValueDouble = double.Parse(cleanedText);
                    }

                    string cleanedNewValue = Regex.Replace(newValue, @"[^0-9.]", "");

                    if (cleanedNewValue != "")
                    {
                        newValueDouble = double.Parse(cleanedNewValue);
                    }

                    // Update the label text
                    label.Invoke((MethodInvoker)delegate
                    {
                        label.Text = newValue.ToString();
                    });

                    // Change label color based on the comparison between old and new values
                    if (newValueDouble > currentValueDouble)
                    {
                        label.ForeColor = Color.OliveDrab;
                    }
                    if (newValueDouble < currentValueDouble)
                    {
                        label.ForeColor = Color.IndianRed;
                    }

                    // Wait a moment
                    await Task.Delay(5000).ConfigureAwait(true);

                    // Restore original color (set currentColor again in case a theme change has occurred during the red/green value change)

                    if (label == lblHeaderPrice || label == lblHeaderBlockNumber)
                    {
                        currentColor = label175.ForeColor;
                    }
                    else
                    {
                        if (label.Name.Contains("Fiat"))
                        {
                            currentColor = label288.ForeColor;
                        }
                        else
                        {
                            currentColor = label154.ForeColor;
                        }
                    }

                    label.ForeColor = currentColor;
                }
                else
                {
                    label.Invoke((MethodInvoker)delegate
                    {
                        label.Text = newValue.ToString();
                    });
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "UpdateLabelValueAsync");
            }
        }
        */
        private async void UpdateLabelValueAsync(Label label, string newValue)
        {
            try
            {
                if (readyToShowRedAndGreenLabelsYet == true)
                {
                    double currentValueDouble = 0;
                    double newValueDouble = 0;
                    // get the normal state colour. Will revert to this after making red or green
                    Color currentColor;
                    if (label == lblHeaderPrice || label == lblHeaderBlockNumber)
                    {
                        currentColor = label175.ForeColor;
                    }
                    else
                    {
                        if (label.Name.Contains("Fiat"))
                        {
                            currentColor = label288.ForeColor;
                        }
                        else
                        {
                            currentColor = label154.ForeColor;
                        }
                    }

                    // Get the current value from the label so we know if it's gone up or down
                    if (String.Compare(label.Text, "no data") == 0
                    || String.Compare(label.Text, "disabled") == 0
                    || String.Compare(label.Text, "0 (TestNet)") == 0
                    || String.Compare(label.Text, "") == 0)
                    {
                        currentValueDouble = 0;
                    }
                    else
                    {
                        // Remove non-numeric characters except decimal point
                        string cleanedText = Regex.Replace(label.Text, @"[^0-9.]", "");

                        // Validate and parse the cleaned text to double
                        if (double.TryParse(cleanedText, out double parsedCurrentValue))
                        {
                            currentValueDouble = parsedCurrentValue;
                        }
                        else
                        {
                            throw new InvalidOperationException("Invalid current label text value.");
                        }
                    }

                    // Clean and validate the new value
                    string cleanedNewValue = Regex.Replace(newValue, @"[^0-9.]", "");

                    if (!string.IsNullOrEmpty(cleanedNewValue) && double.TryParse(cleanedNewValue, out double parsedNewValue))
                    {
                        newValueDouble = parsedNewValue;
                    }
                    else if (!string.IsNullOrEmpty(cleanedNewValue))
                    {
                        throw new InvalidOperationException("Invalid new label text value.");
                    }

                    // Update the label text safely
                    label.Invoke((MethodInvoker)delegate
                    {
                        label.Text = newValue;
                    });

                    // Change label color based on the comparison between old and new values
                    if (newValueDouble > currentValueDouble)
                    {
                        label.ForeColor = Color.OliveDrab;
                    }
                    else if (newValueDouble < currentValueDouble)
                    {
                        label.ForeColor = Color.IndianRed;
                    }

                    // Wait a moment
                    await Task.Delay(5000).ConfigureAwait(true);

                    // Restore original color (set currentColor again in case a theme change has occurred during the red/green value change)
                    if (label == lblHeaderPrice || label == lblHeaderBlockNumber)
                    {
                        currentColor = label175.ForeColor;
                    }
                    else
                    {
                        if (label.Name.Contains("Fiat"))
                        {
                            currentColor = label288.ForeColor;
                        }
                        else
                        {
                            currentColor = label154.ForeColor;
                        }
                    }

                    label.ForeColor = currentColor;
                }
                else
                {
                    // Update the label text safely
                    label.Invoke((MethodInvoker)delegate
                    {
                        label.Text = newValue;
                    });
                }
            }
            catch (Exception ex)
            {
                // Handle any exceptions that occur
                HandleException(ex, "UpdateLabelValueAsync");
            }
        }


        private async void UpdateHeaderPriceChangeValueAsync(Label label, string priceChange)
        {
            try
            {
                if (readyToShowPriceChangeLabelYet == true)
                {
                    // get the normal state colour. Will revert to this after making red or green
                    Color currentColor = label154.ForeColor;

                    if (decimal.TryParse(priceChange, out decimal priceChangeDecimal))
                    {
                        if (priceChangeDecimal > 0)
                        {
                            label.Invoke((MethodInvoker)delegate
                            {
                                label.ForeColor = Color.OliveDrab;
                                label.Text = $"+{fiatSymbol}{priceChange}";
                            });
                        }
                        else
                        {
                            if (priceChangeDecimal < 0)
                            {
                                label.Invoke((MethodInvoker)delegate
                                {
                                    string cleanedPriceChange = Regex.Replace(priceChange, @"[^0-9.]", "");
                                    label.ForeColor = Color.IndianRed;
                                    label.Text = $"-{fiatSymbol}{cleanedPriceChange}";
                                });
                            }
                            else
                            {
                                label.Invoke((MethodInvoker)delegate
                                {
                                    label.ForeColor = currentColor;
                                });
                            }
                        }
                    }
                    lblHeaderPriceChange.Invoke((MethodInvoker)delegate
                    {
                        lblHeaderPriceChange.Visible = true;
                        lblHeaderPriceChange.Location = new Point((lblHeaderPrice.Location.X + lblHeaderPrice.Width) - (int)(7 * UIScale), lblHeaderPriceChange.Location.Y);
                    });
                    // Wait a moment
                    await Task.Delay(5000).ConfigureAwait(true);

                    // Restore original color
                    label.ForeColor = currentColor;
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "UpdateHeaderPriceChangeValueAsync");
            }
        }
        #endregion
        #region expanding panels (vert)

        private void StartExpandingPanelVert(Panel panel)
        {
            panelToExpandVert = panel;
            ExpandPanelTimerVert.Start();
        }

        private void ExpandPanelTimerVert_Tick(object sender, EventArgs e)
        {
            currentHeightExpandingPanel += (int)(16 * UIScale);

            if (panelToExpandVert == panelCurrency)
            {
                panelMaxHeight = (int)(82 * UIScale);
            }
            if (panelToExpandVert == panelThemeMenu)
            {
                panelMaxHeight = (int)(207 * UIScale);
            }
            if (panelToExpandVert == panelHelpAboutMenu)
            {
                panelMaxHeight = (int)(45 * UIScale);
            }
            if (currentHeightExpandingPanel >= panelMaxHeight) // expanding is complete
            {
                panelToExpandVert.Invoke((MethodInvoker)delegate
                {
                    panelToExpandVert.Height = panelMaxHeight;
                });
                panelThemeMenuBackdrop.Invoke((MethodInvoker)delegate
                {
                    panelThemeMenuBackdrop.Height = panelThemeMenu.Height - 1;
                });
                panelCurrencyBackdrop.Invoke((MethodInvoker)delegate
                {
                    panelCurrencyBackdrop.Height = panelCurrency.Height - 1;
                });
                ExpandPanelTimerVert.Stop();
            }
            else // expand further
            {
                panelToExpandVert.Invoke((MethodInvoker)delegate
                {
                    panelToExpandVert.Height = currentHeightExpandingPanel;
                    panelToExpandVert.Invalidate();
                });
                panelThemeMenuBackdrop.Invoke((MethodInvoker)delegate
                {
                    panelThemeMenuBackdrop.Height = panelThemeMenu.Height - 1;
                });
                panelCurrencyBackdrop.Invoke((MethodInvoker)delegate
                {
                    panelCurrencyBackdrop.Height = panelCurrency.Height - 1;
                });
            }
        }
        #endregion
        #region expanding panels (horiz)

        private void StartExpandingPanelHoriz(Panel panel)
        {
            panelToExpand = panel;
            panelToExpand.Invoke((MethodInvoker)delegate
            {
                panelToExpand.Width = 0;
            });
            currentWidthExpandingPanel = 0;
            ExpandPanelTimerHoriz.Start();
        }

        private void StartShrinkingPanel(Panel panel)
        {
            panelToShrink = panel;
            ShrinkPanelTimerHoriz.Start();
        }

        private void ShrinkPanelTimerHoriz_Tick(object sender, EventArgs e)
        {
            currentWidthShrinkingPanel -= (int)(12 * UIScale);
            if (panelToShrink == panel107)
            {
                panelMinWidth = 0;
            }

            if (panelToShrink == panelErrorMessage)
            {
                panelMinWidth = 0;
            }

            if (currentWidthShrinkingPanel <= panelMinWidth) // shrinking is complete
            {
                panelToShrink.Invoke((MethodInvoker)delegate
                {
                    panelToShrink.Width = panelMinWidth;
                });
                if (panelToShrink == panel107)
                {
                    panel107.Invoke((MethodInvoker)delegate
                    {
                        panel107.Location = new Point((int)(774 * UIScale), panel107.Location.Y);
                    });
                }
                panelToShrink.Invalidate();

                ShrinkPanelTimerHoriz.Stop();
            }
            else // shrink further
            {
                panelToShrink.Invoke((MethodInvoker)delegate
                {
                    panelToShrink.Width = currentWidthShrinkingPanel;
                });
                if (panelToExpand == panel107)
                {
                    panel107.Invoke((MethodInvoker)delegate
                    {
                        panel107.Location = new Point(panel107.Location.X + (int)(12 * UIScale), panel107.Location.Y);
                    });
                }
                panelToShrink.Invalidate();
            }
        }

        private void ExpandPanelTimerHoriz_Tick(object sender, EventArgs e)
        {
            currentWidthExpandingPanel += (int)(12 * UIScale);
            if (panelToExpand == panel107)
            {
                panelMaxWidth = (int)(394 * UIScale);
            }

            if (panelToExpand == panelErrorMessage)
            {
                panelMaxWidth = (int)(604 * UIScale);
            }

            if (currentWidthExpandingPanel >= panelMaxWidth) // expanding is complete
            {

                panelToExpand.Invoke((MethodInvoker)delegate
                {
                    panelToExpand.Width = panelMaxWidth;
                });
                if (panelToExpand == panel107)
                {
                    panel107.Invoke((MethodInvoker)delegate
                    {
                        panel107.Location = new Point((int)(378 * UIScale), panel107.Location.Y);
                    });
                }
                ExpandPanelTimerHoriz.Stop();
            }
            else // expand further
            {
                panelToExpand.Invoke((MethodInvoker)delegate
                {
                    panelToExpand.Width = currentWidthExpandingPanel;
                });
                if (panelToExpand == panel107)
                {
                    panel107.Invoke((MethodInvoker)delegate
                    {
                        panel107.Location = new Point(panel107.Location.X - (int)(12 * UIScale), panel107.Location.Y);
                    });
                }
                panelToExpand.Invalidate();
            }
        }

        #endregion
        #region hide/show all fiat conversion fields
        private void HideAllFiatConversionFields()
        {
            try
            {
                Control[] listFiatConversionsToHide = { lblAddressConfirmedUnspentUTXOFiat, lblAddressConfirmedSpentUTXOFiat, lblNextBlockTotalFeesFiat, lblBlockListTotalFeesInNextBlockFiat, lblBlockRewardFiat, lblBlockRewardAfterHalvingFiat, lblBlockListBlockRewardFiat, lbl24HourBTCSentFiat, lblAddressConfirmedReceivedFiat, lblAddressConfirmedSpentFiat, lblAddressConfirmedUnspentFiat, lblTotalFeesFiat, lblRewardFiat, lblTransactionFeeFiat, lblTotalInputValueFiat, lblTotalOutputValueFiat, lblXpubConfirmedReceivedFiat, lblXpubConfirmedSpentFiat, lblXpubConfirmedUnspentFiat,
                    lblTotalCapacityFiat, lblClearnetCapacityFiat, lblTorCapacityFiat, lblUnknownCapacityFiat, lblAverageCapacityFiat, lblAverageFeeRateFiat, lblAverageBaseFeeMtokensFiat, lblMedCapacityFiat, lblMedFeeRateFiat, lblMedBaseFeeTokensFiat, capacityLabelFiat1, capacityLabelFiat2, capacityLabelFiat3, capacityLabelFiat4, capacityLabelFiat5, capacityLabelFiat6, capacityLabelFiat7, capacityLabelFiat8, capacityLabelFiat9, capacityLabelFiat10};
                foreach (Control control in listFiatConversionsToHide)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.Visible = false;
                    });
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "HideAllFiatConversionFields");
            }
        }
        private void ShowAllFiatConversionFields()
        {
            try
            {
                if (!testNet && !offlineMode)
                {
                    if (RunCoinbaseAPI || RunCoingeckoAPI || RunMempoolSpacePriceAPI)
                    {
                        Control[] listFiatConversionsToShow = { lblNextBlockTotalFeesFiat, lblBlockListTotalFeesInNextBlockFiat, lblBlockRewardFiat, lblBlockRewardAfterHalvingFiat, lblBlockListBlockRewardFiat, lbl24HourBTCSentFiat, lblTotalFeesFiat, lblRewardFiat, lblTransactionFeeFiat, lblTotalInputValueFiat, lblTotalOutputValueFiat, lblXpubConfirmedReceivedFiat, lblXpubConfirmedSpentFiat, lblXpubConfirmedUnspentFiat,
                        lblTotalCapacityFiat, lblClearnetCapacityFiat, lblTorCapacityFiat, lblUnknownCapacityFiat, lblAverageCapacityFiat, lblAverageFeeRateFiat, lblAverageBaseFeeMtokensFiat, lblMedCapacityFiat, lblMedFeeRateFiat, lblMedBaseFeeTokensFiat, capacityLabelFiat1, capacityLabelFiat2, capacityLabelFiat3, capacityLabelFiat4, capacityLabelFiat5, capacityLabelFiat6, capacityLabelFiat7, capacityLabelFiat8, capacityLabelFiat9, capacityLabelFiat10};
                        foreach (Control control in listFiatConversionsToShow)
                        {
                            control.Invoke((MethodInvoker)delegate
                            {
                                control.Visible = true;
                            });
                        }
                        if (panel41.Visible) // address transactions screen
                        {
                            lblAddressConfirmedUnspentFiat.Invoke((MethodInvoker)delegate
                            {
                                lblAddressConfirmedUnspentFiat.Visible = true;
                            });
                            lblAddressConfirmedReceivedFiat.Invoke((MethodInvoker)delegate
                            {
                                lblAddressConfirmedReceivedFiat.Visible = true;
                            });
                            lblAddressConfirmedSpentFiat.Invoke((MethodInvoker)delegate
                            {
                                lblAddressConfirmedSpentFiat.Visible = true;
                            });
                        }
                        if (panel141.Visible) // address utxo screen
                        {
                            lblAddressConfirmedUnspentUTXOFiat.Invoke((MethodInvoker)delegate
                            {
                                lblAddressConfirmedUnspentUTXOFiat.Visible = true;
                            });
                            lblAddressConfirmedSpentUTXOFiat.Invoke((MethodInvoker)delegate
                            {
                                lblAddressConfirmedSpentUTXOFiat.Visible = true;
                            });
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ShowAllFiatConversionFields");
            }
        }
        #endregion
        #region populate the theme list comboboxes
        private void PopulateThemeComboboxes()
        {
            try
            {
                var themes = ThemesManager.Themes;
                List<string> themeNames = themes.Select(t => t.ThemeName).ToList()!;
                themeNames.RemoveAll(theme => theme.Contains("(preset)")); // exclude the preset themes
                comboBoxCustomizeScreenThemeList.DataSource = themeNames; // show all the themes in the combobox on customize screen
                comboBoxCustomizeScreenThemeList.Texts = "select theme";

                List<string> themeNamesWithSpaces = themes
    .Select(t => t.ThemeName)
    .Where(theme => !theme!.Contains("(preset)"))
    .Select(theme => $"   {theme}") // Add 3 preceding spaces to align the combobox text with the rest of the menu
    .ToList();

                comboBoxHeaderCustomThemes.DataSource = themeNamesWithSpaces;
                comboBoxHeaderCustomThemes.Texts = "   saved themes ▼";
            }
            catch (Exception ex)
            {
                HandleException(ex, "PopulateThemeComboboxes");
            }
        }
        #endregion
        #region clear all button markers on theme menu
        private void ClearThemeMenuMarkers()
        {
            try
            {
                Control[] markersToClear = { btnMenuApplyCustomTheme, BtnMenuThemeGenesis, btnMenuThemeFranklin, btnMenuThemeSatsuma, btnMenuThemeHoneyBadger, btnMenuThemeStackSats, btnMenuThemeSymbol };
                foreach (Control control in markersToClear)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackgroundImage = null;
                    });
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ClearThemeMenuMarkers");
            }
        }
        #endregion
        #region clear all button markers on currency menu
        private void ClearCurrencyMenuMarkers()
        {
            try
            {
                Control[] markersToClear = { btnUSD, btnEUR, btnGBP, btnXAU };
                foreach (Control control in markersToClear)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.BackgroundImage = null;
                    });
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ClearCurrencyMenuMarkers");
            }
        }
        #endregion
        #region check for updates
        private void CheckForUpdates()
        {
            try
            {
                if (!offlineMode)
                {
                    using WebClient client = new WebClient();
                    string VersionURL = "https://satsuma.btcdir.org/SATSumaVersion.txt";
                    string LatestVersion = client.DownloadString(VersionURL);
                    if (String.Compare(LatestVersion, CurrentVersion) != 0)
                    {
                        lblUpdaterLight.Invoke((MethodInvoker)delegate
                        {
                            lblUpdaterLight.Visible = true;
                        });
                    }
                    else
                    {
                        lblUpdaterLight.Invoke((MethodInvoker)delegate
                        {
                            lblUpdaterLight.Visible = false;
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "CheckForUpdates");
            }
        }
        #endregion
        #region refresh screens with listviews to ensure new theme colours are applied to lists
        private void ReloadScreensWithListviews()
        {
            try
            {
                Control[] buttonsToEnable = { numericUpDownBlockHeightToStartListFrom, btnNumericUpDownBlockHeightToStartListFromDown, btnNumericUpDownBlockHeightToStartListFromUp, btnLookUpBlockList, numericUpDownSubmittedBlockNumber, btnNumericUpDownSubmittedBlockNumberDown, btnNumericUpDownSubmittedBlockNumberUp, btnLookUpBlock };
                foreach (Control control in buttonsToEnable)
                {
                    control.Invoke((MethodInvoker)delegate
                    {
                        control.Enabled = true;
                    });
                }

                #region hacky way of overcoming titlebar of listviews getting color artefacts when changing themes.
                listViewBlockList.Visible = false;
                listViewBlockList.Visible = true;
                listViewBlockTransactions.Visible = false;
                listViewBlockTransactions.Visible = true;
                listViewBookmarks.Visible = false;
                listViewBookmarks.Visible = true;
                if (listViewTransactionInputs.Visible)
                {
                    if (listViewTransactionInputs.SelectedItems.Count > 0)
                    {
                        int selectedIndex = listViewTransactionInputs.SelectedIndices[0];
                        listViewTransactionInputs.SelectedItems.Clear();
                        listViewTransactionInputs.Items[selectedIndex].Selected = true;
                        listViewTransactionInputs.Items[selectedIndex].Focused = true;
                        listViewTransactionInputs.EnsureVisible(selectedIndex);
                    }
                }
                if (listViewTransactionOutputs.Visible)
                {
                    if (listViewTransactionOutputs.SelectedItems.Count > 0)
                    {
                        int selectedIndex = listViewTransactionOutputs.SelectedIndices[0];
                        listViewTransactionOutputs.SelectedItems.Clear();
                        listViewTransactionOutputs.Items[selectedIndex].Selected = true;
                        listViewTransactionOutputs.Items[selectedIndex].Focused = true;
                        listViewTransactionOutputs.EnsureVisible(selectedIndex);
                    }
                }
                if (listViewAddressTransactions.Visible)
                {
                    if (listViewAddressTransactions.SelectedItems.Count > 0)
                    {
                        int selectedIndex = listViewAddressTransactions.SelectedIndices[0];
                        listViewAddressTransactions.SelectedItems.Clear();
                        listViewAddressTransactions.Items[selectedIndex].Selected = true;
                        listViewAddressTransactions.Items[selectedIndex].Focused = true;
                        listViewAddressTransactions.EnsureVisible(selectedIndex);
                    }
                }
                if (listViewXpubAddresses.Visible)
                {
                    if (listViewXpubAddresses.SelectedItems.Count > 0)
                    {
                        int selectedIndex = listViewXpubAddresses.SelectedIndices[0];
                        listViewXpubAddresses.SelectedItems.Clear();
                        listViewXpubAddresses.Items[selectedIndex].Selected = true;
                        listViewXpubAddresses.Items[selectedIndex].Focused = true;
                        listViewXpubAddresses.EnsureVisible(selectedIndex);
                    }
                }
                if (listViewPoolsList.Visible)
                {
                    if (listViewPoolsList.SelectedItems.Count > 0)
                    {
                        int selectedIndex = listViewPoolsList.SelectedIndices[0];
                        listViewPoolsList.SelectedItems.Clear();
                        listViewPoolsList.Items[selectedIndex].Selected = true;
                        listViewPoolsList.Items[selectedIndex].Focused = true;
                        listViewPoolsList.EnsureVisible(selectedIndex);
                    }
                }
                if (listViewPoolsByBlock.Visible)
                {
                    if (listViewPoolsByBlock.SelectedItems.Count > 0)
                    {
                        int selectedIndex = listViewPoolsByBlock.SelectedIndices[0];
                        listViewPoolsByBlock.SelectedItems.Clear();
                        listViewPoolsByBlock.Items[selectedIndex].Selected = true;
                        listViewPoolsByBlock.Items[selectedIndex].Focused = true;
                        listViewPoolsByBlock.EnsureVisible(selectedIndex);
                    }
                }
                if (listViewPoolsHashrate.Visible)
                {
                    if (listViewPoolsHashrate.SelectedItems.Count > 0)
                    {
                        int selectedIndex = listViewPoolsHashrate.SelectedIndices[0];
                        listViewPoolsHashrate.SelectedItems.Clear();
                        listViewPoolsHashrate.Items[selectedIndex].Selected = true;
                        listViewPoolsHashrate.Items[selectedIndex].Focused = true;
                        listViewPoolsHashrate.EnsureVisible(selectedIndex);
                    }
                }
                if (panelPoolsListScrollContainer.Visible)
                {
                    panelPoolsListScrollContainer.Visible = false;
                    panelPoolsListScrollContainer.Visible = true;
                }
                if (panel160.Visible)
                {
                    panel160.Visible = false;
                    panel160.Visible = true;
                }
                #endregion
            }
            catch (Exception ex)
            {
                HandleException(ex, "ReloadScreensWithListviews");
            }
        }
        #endregion
        #region lighten a colour by n percent
        public Color MakeColorLighter(Color originalColor, int increment)
        {
            int r = originalColor.R + increment;
            int g = originalColor.G + increment;
            int b = originalColor.B + increment;

            // stay within valid range (0 to 255)
            r = Math.Min(255, Math.Max(0, r));
            g = Math.Min(255, Math.Max(0, g));
            b = Math.Min(255, Math.Max(0, b));

            return Color.FromArgb(r, g, b);
        }
        #endregion
        #region form paint - border round window, relocate objects, set window title, bookmark button state
        private void SATSuma_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                #region smooth buttons a bit if using a background image
                if (this.BackgroundImage != null)
                {
                    this.BackColor = chartsBackgroundColor; //if using a theme with a background image, this makes the rounded buttons look smoother
                }
                #endregion
                #region rounded border around rounded form
                if (BtnMenuThemeGenesis.Enabled == false || btnMenuThemeFranklin.Enabled == false || btnMenuThemeSatsuma.Enabled == false)
                {
                    // Paint the border with a 1-pixel width
                    using var pen = new Pen(Color.DimGray, 1);
                    var rect = ClientRectangle;
                    rect.Inflate(-1, -1);
                    e.Graphics.DrawPath(pen, GetRoundedRect(rect, 30));
                }
                #endregion
                #region 'Now Viewing' title text and set state of 'add bookmark' button
                if (panelAddress.Visible || panelAddressUTXO.Visible || panelBlock.Visible || panelTransaction.Visible || panelXpub.Visible)
                {
                    if (panelAddress.Visible && String.Compare(lblAddressType.Text, "Invalid address format") != 0 && String.Compare(lblAddressType.Text, "no data") != 0)
                    {
                        btnAddToBookmarks.Invoke((MethodInvoker)delegate
                        {
                            btnAddToBookmarks.Enabled = true;
                            btnAddToBookmarks.Text = "🖤";
                        });
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Address - transactions";
                        });
                    }
                    if (panelAddress.Visible && (String.Compare(lblAddressType.Text, "Invalid address format") == 0 || String.Compare(lblAddressType.Text, "no data") == 0))
                    {
                        btnAddToBookmarks.Invoke((MethodInvoker)delegate
                        {
                            btnAddToBookmarks.Enabled = false;
                            //btnAddToBookmarks.Text = "🤍";
                        });
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Address - transactions";
                        });
                    }
                    if (panelAddressUTXO.Visible && String.Compare(lblAddressTypeUTXO.Text, "Invalid address format") != 0 && String.Compare(lblAddressTypeUTXO.Text, "no data") != 0)
                    {
                        btnAddToBookmarks.Invoke((MethodInvoker)delegate
                        {
                            btnAddToBookmarks.Enabled = true;
                            btnAddToBookmarks.Text = "🖤";
                        });
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Address - UTXO's";
                        });
                    }
                    if (panelAddressUTXO.Visible && (String.Compare(lblAddressTypeUTXO.Text, "Invalid address format") == 0 || String.Compare(lblAddressTypeUTXO.Text, "no data") == 0))
                    {
                        btnAddToBookmarks.Invoke((MethodInvoker)delegate
                        {
                            btnAddToBookmarks.Enabled = false;
                            //btnAddToBookmarks.Text = "🤍";
                        });
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Address - UTXO's";
                        });
                    }
                    if (panelBlock.Visible && lblBlockHash.Text != "")
                    {
                        btnAddToBookmarks.Invoke((MethodInvoker)delegate
                        {
                            btnAddToBookmarks.Enabled = true;
                            btnAddToBookmarks.Text = "🖤";
                        });
                        TextInfo textInfo = CultureInfo.CurrentCulture.TextInfo;
                        string blockNowViewingText = textInfo.ToTitleCase(lblBlockBlockHeight.Text.ToLower());
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = blockNowViewingText;
                        });
                    }
                    if (panelBlock.Visible && lblBlockHash.Text == "")
                    {
                        btnAddToBookmarks.Invoke((MethodInvoker)delegate
                        {
                            btnAddToBookmarks.Enabled = false;
                            //btnAddToBookmarks.Text = "🤍";
                        });
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Block";
                        });
                    }
                    if (panelTransaction.Visible && String.Compare(lblInvalidTransaction.Text, "✔️ valid transaction ID") == 0)
                    {
                        btnAddToBookmarks.Invoke((MethodInvoker)delegate
                        {
                            btnAddToBookmarks.Enabled = true;
                            btnAddToBookmarks.Text = "🖤";
                        });
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Transaction";
                        });
                    }
                    if (panelTransaction.Visible && String.Compare(lblInvalidTransaction.Text, "✔️ valid transaction ID") != 0)
                    {
                        btnAddToBookmarks.Invoke((MethodInvoker)delegate
                        {
                            btnAddToBookmarks.Enabled = false;
                            //btnAddToBookmarks.Text = "🤍";
                        });
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Transaction";
                        });
                    }
                    if (panelXpub.Visible && String.Compare(lblValidXpubIndicator.Text, "✔️ valid Xpub") == 0)
                    {
                        btnAddToBookmarks.Invoke((MethodInvoker)delegate
                        {
                            btnAddToBookmarks.Enabled = false;
                            //btnAddToBookmarks.Text = "🤍";
                        });
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Xpub";
                        });
                    }
                    if (panelXpub.Visible && String.Compare(lblValidXpubIndicator.Text, "✔️ valid Xpub") == 0)
                    {
                        btnAddToBookmarks.Invoke((MethodInvoker)delegate
                        {
                            btnAddToBookmarks.Enabled = true;
                            btnAddToBookmarks.Text = "🖤";
                        });
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Xpub";
                        });
                    }
                }
                else
                {
                    if (panelBitcoinDashboard.Visible)
                    {
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Bitcoin dashboard";
                        });
                    }
                    if (panelLightningDashboard.Visible)
                    {
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Lightning dashboard";
                        });
                    }
                    if (panelDirectory.Visible)
                    {
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Directory";
                        });
                    }
                    if (panelBlockList.Visible)
                    {
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Blocks";
                        });
                    }
                    if (panelBookmarks.Visible)
                    {
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Bookmarks";
                        });
                    }
                    if (panelMiningPools.Visible)
                    {
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Mining pools";
                        });
                    }
                    if (panelMiningBlocks.Visible)
                    {
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Mining pools ranked by blocks mined";
                        });
                    }
                    if (panelMiningHashrate.Visible)
                    {
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Mining pools ranked by estimated hashrate";
                        });
                    }
                    if (panelSettings.Visible)
                    {
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Settings";
                        });
                    }
                    if (panelAppearance.Visible)
                    {
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Create custom theme";
                        });
                    }
                    if (panelCharts.Visible)
                    {
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Charts";
                        });
                    }
                    if (panelDCACalculator.Visible)
                    {
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "DCA calculator";
                        });
                    }
                    if (panelPriceConverter.Visible)
                    {
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "BTC/Fiat converter";
                        });
                    }
                    btnAddToBookmarks.Invoke((MethodInvoker)delegate
                    {
                        btnAddToBookmarks.Enabled = false;
                        //btnAddToBookmarks.Text = "🤍";
                    });
                }
                #endregion
            }
            catch (Exception ex)
            {
                HandleException(ex, "SATSuma_Paint");
            }
        }

        private GraphicsPath GetRoundedRect(Rectangle rectangle, int radius)
        {
            GraphicsPath path = new GraphicsPath();
            path.AddArc(rectangle.X, rectangle.Y, radius, radius, 180, 90);
            path.AddArc(rectangle.Width - radius, rectangle.Y, radius, radius, 270, 90);
            path.AddArc(rectangle.Width - radius, rectangle.Height - radius, radius, radius, 0, 90);
            path.AddArc(rectangle.X, rectangle.Height - radius, radius, radius, 90, 90);
            path.CloseFigure();
            return path;
        }
        #endregion
        #region panels paint - rounded corners

        private void Panel_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                Panel panel = (Panel)sender;

                if (panelDCAChartContainer.InvokeRequired)
                {
                    panelDCAChartContainer.Invoke((MethodInvoker)(() => Panel_Paint(sender, e)));
                    return;
                }

                // Create a GraphicsPath object with rounded corners
                System.Drawing.Drawing2D.GraphicsPath path = new System.Drawing.Drawing2D.GraphicsPath();
                int cornerRadius = (int)(12 * UIScale);
                if (btnSquareCorners.Enabled == false)
                {
                    cornerRadius = 1;
                }
                else
                {
                    if (btnPartialCorners.Enabled == false)
                    {
                        cornerRadius = (int)(6 * UIScale);
                    }
                    else
                    {
                        switch (panel.Name)
                        {
                            case "panelPriceSourceIndicatorsOuter":
                            case "panelPriceSourceIndicators":
                            case "panel134":
                            case "panel133":
                            case "panelXpubScrollbarInner":
                            case "panelMiningBlocksScrollInner":
                            case "panelAddressUTXOScrollbarInner":
                            case "panelTXOutScrollbarInner":
                            case "panelTXInScrollbarInner":
                            case "panelBookmarksScrollbarInner":
                            case "panelPoolsListScrollbarInner":
                            case "panel177":
                                cornerRadius = (int)(6 * UIScale);
                                break;
                            default:
                                cornerRadius = (int)(12 * UIScale);
                                break;
                        }
                    }
                }

                cornerRadius *= 2;
                path.AddArc(0, 0, cornerRadius, cornerRadius, 180, 90);
                path.AddArc(panel.Width - cornerRadius, 0, cornerRadius, cornerRadius, 270, 90);
                path.AddArc(panel.Width - cornerRadius, panel.Height - cornerRadius, cornerRadius, cornerRadius, 0, 90);
                path.AddArc(0, panel.Height - cornerRadius, cornerRadius, cornerRadius, 90, 90);
                path.CloseFigure();

                // Set the panel's region to the rounded path
                panel.Region = new Region(path);
            }
            catch (Exception ex)
            {
                HandleException(ex, "Panel_Paint");
            }
        }

        #endregion
        #region panels paint - tabs
        private void PanelTab_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                Panel panel = (Panel)sender;

                if (panelDCAChartContainer.InvokeRequired)
                {
                    panelDCAChartContainer.Invoke((MethodInvoker)(() => Panel_Paint(sender, e)));
                    return;
                }

                // Create a GraphicsPath object with rounded corners
                System.Drawing.Drawing2D.GraphicsPath path = new System.Drawing.Drawing2D.GraphicsPath();
                int cornerRadius = (int)(12 * UIScale);
                int tabExtension = (int)(20 * UIScale); // Amount to extend the top side
                if (btnSquareCorners.Enabled == false)
                {
                    cornerRadius = 1;
                }
                else
                {
                    if (btnPartialCorners.Enabled == false)
                    {
                        cornerRadius = (int)(6 * UIScale);
                    }
                    else
                    {
                        if (btnRoundCorners.Enabled == false)
                        {
                            cornerRadius = (int)(12 * UIScale);
                        }
                    }
                }
                if (String.Compare(panel.Name, "panelLoadingAnimationContainer") == 0)
                {
                    cornerRadius = (int)(12 * UIScale);
                }
                if (String.Compare(panel.Name, "panelLeftPanel") == 0)
                {
                    cornerRadius = 12;
                }
                if (String.Compare(panel.Name, "panelPriceSourceIndicators") == 0)
                {
                    cornerRadius = (int)(6 * UIScale);
                }
                if (String.Compare(panel.Name, "panel177") == 0)
                {
                    cornerRadius = (int)(6 * UIScale);
                }
                if (String.Compare(panel.Name, "panelPoolsListScrollbarInner") == 0)
                {
                    cornerRadius = (int)(6 * UIScale);
                }
                if (String.Compare(panel.Name, "panelBookmarksScrollbarInner") == 0)
                {
                    cornerRadius = (int)(6 * UIScale);
                }
                if (String.Compare(panel.Name, "panelTXInScrollbarInner") == 0)
                {
                    cornerRadius = (int)(6 * UIScale);
                }
                if (String.Compare(panel.Name, "panelTXOutScrollbarInner") == 0)
                {
                    cornerRadius = (int)(6 * UIScale);
                }
                if (String.Compare(panel.Name, "panelAddressUTXOScrollbarInner") == 0)
                {
                    cornerRadius = (int)(6 * UIScale);
                }
                if (String.Compare(panel.Name, "panelMiningBlocksScrollInner") == 0)
                {
                    cornerRadius = (int)(6 * UIScale);
                }
                if (String.Compare(panel.Name, "panelXpubScrollbarInner") == 0)
                {
                    cornerRadius = (int)(6 * UIScale);
                }

                cornerRadius *= 2;
                // Upper-left corner
                //path.AddArc(0, 0, cornerRadius, cornerRadius, 180, 90);

                // Top side (extended)
                path.AddLine(0, 0, panel.Width, 0);

                // Upper-right corner
                //path.AddArc(panel.Width - cornerRadius, 0, cornerRadius, cornerRadius, 270, 90);

                // Slanted line to the lower-right corner
                path.AddLine(panel.Width, 0, panel.Width - tabExtension, panel.Height);

                // Lower-right corner
                //path.AddArc(panel.Width - tabExtension - cornerRadius, panel.Height - cornerRadius, cornerRadius, cornerRadius, 0, 90);

                // Bottom side
                path.AddLine(panel.Width - tabExtension - cornerRadius, panel.Height, cornerRadius, panel.Height);

                // Lower-left corner
                path.AddArc(0, panel.Height - cornerRadius, cornerRadius, cornerRadius, 90, 90);
                path.CloseFigure();

                // Set the panel's region to the rounded path
                panel.Region = new Region(path);
            }
            catch (Exception ex)
            {
                HandleException(ex, "Panel_Paint");
            }
        }
        #endregion
        #region refresh screens/status message/alert at bottom of window

        private void ShowAlertSymbol()
        {
            try
            {
                lblAlert.Invoke((MethodInvoker)delegate
                {
                    lblAlert.Visible = true;
                });
                lblErrorAlert.Invoke((MethodInvoker)delegate
                {
                    lblErrorAlert.Visible = true;
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "ShowAlertSymbol");
            }
        }

        private void ToggleLoadingAnimation(string enableOrDisableAnimation)
        {
            try
            {
                if (String.Compare(enableOrDisableAnimation, "enable") == 0)
                {
                    //start the loading animation
                    pictureBoxLoadingAnimation.Invoke((MethodInvoker)delegate
                    {
                        pictureBoxLoadingAnimation.Enabled = true;
                    });
                }
                else
                {
                    //stop the animation
                    pictureBoxLoadingAnimation.Invoke((MethodInvoker)delegate
                    {
                        pictureBoxLoadingAnimation.Enabled = false;
                    });
                    //reset the image to return to the original frame in the animation
                    if (btnExit.BackColor == Color.FromArgb(20, 20, 20) || btnExit.BackColor == Color.FromArgb(40, 40, 40))
                    {
                        pictureBoxLoadingAnimation.Invoke((MethodInvoker)delegate
                        {
                            pictureBoxLoadingAnimation.Image = Properties.Resources.SatsumaAnimated;
                        });
                    }
                    else
                    {
                        pictureBoxLoadingAnimation.Invoke((MethodInvoker)delegate
                        {
                            pictureBoxLoadingAnimation.Image = Properties.Resources.SatsumaAnimatedWhite;
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "DisableEnableLoadingAnimation");
            }
        }

        private void UpdateOnScreenCountdownFlashLightsRefreshData()
        {
            try
            {
                lblElapsedSinceUpdate.Invoke((MethodInvoker)delegate
                {
                    lblElapsedSinceUpdate.Text = $"Refreshing data in {Convert.ToString(intDisplayCountdownToRefresh)}";
                });
                intDisplayCountdownToRefresh--; // reduce the countdown of the 1 minute timer by 1 second




                if (intDisplayCountdownToRefresh < 0) // if the 1 minute timer countdown has reached zero...
                {
                    intDisplayCountdownToRefresh = APIGroup1DisplayTimerIntervalSecsConstant; // reset it
                    RefreshScreensAsync();
                }
                if (intDisplayCountdownToRefresh < (APIGroup1DisplayTimerIntervalSecsConstant - 1)) // if more than a second has expired since the data from the blocktimer was refreshed...
                {
                    ChangeStatusLights();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "UpdateOnScreenCountdownAndFlashLights");
            }
        }

        private async void RefreshScreensAsync()
        {
            try
            {
                ClearAlertAndErrorMessage(); // wipe anything that may be showing in the error area (it should be empty anyway)
                await CheckNetworkStatusAsync().ConfigureAwait(true);
                using (WebClient client = new WebClient())
                {
                    try
                    {
                        string BlockTipURL = $"{NodeURL}blocks/tip/height";
                        string BlockTip = client.DownloadString(BlockTipURL); // get current block tip
                        if (decimal.TryParse(BlockTip, out decimal blockTipValue))
                        {
                            numericUpDownSubmittedBlockNumber.Maximum = blockTipValue;
                            numericUpDownBlockHeightToStartListFrom.Maximum = blockTipValue;
                        }
                    }
                    catch (Exception ex)
                    {
                        HandleException(ex, "RefreshScreens");
                    }
                }
                await UpdateBitcoinAndLightningDashboardsAsync().ConfigureAwait(true); // fetch data and populate fields for dashboards (+ a few for block list screen)

                if (!testNet)
                {
                    PopulateConverterScreen(); // refresh amounts on BTC/fiat converter screen
                }
                // block screen fiat values
                if (decimal.TryParse(lblTotalFees.Text, out decimal totalBlockFeesDec))
                {
                    UpdateLabelValueAsync(lblTotalFeesFiat, $"{fiatSymbol}{(totalBlockFeesDec * OneBTCinSelectedCurrency):N2}");
                }

                if (decimal.TryParse(lblReward.Text, out decimal RewardDec))
                {
                    UpdateLabelValueAsync(lblRewardFiat, $"{fiatSymbol}{(RewardDec * OneBTCinSelectedCurrency):N2}");
                }

                // address screen
                if (listViewAddressTransactions.Visible) // only do this stuff if there's actually a valid address on the address screen
                {
                    if (decimal.TryParse(lblAddressConfirmedUnspent.Text, out decimal confirmedUnspent))
                    {
                        UpdateLabelValueAsync(lblAddressConfirmedUnspentFiat, $"{fiatSymbol}{(confirmedUnspent * OneBTCinSelectedCurrency):N2}");
                    }
                    if (decimal.TryParse(lblAddressConfirmedReceived.Text, out decimal confirmedReceived))
                    {
                        UpdateLabelValueAsync(lblAddressConfirmedReceivedFiat, $"{fiatSymbol}{(confirmedReceived * OneBTCinSelectedCurrency):N2}");
                    }
                    if (decimal.TryParse(lblAddressConfirmedSpent.Text, out decimal confirmedSpent))
                    {
                        UpdateLabelValueAsync(lblAddressConfirmedSpentFiat, $"{fiatSymbol}{(confirmedSpent * OneBTCinSelectedCurrency):N2}");
                    }
                }

                // address utxo screen
                if (listViewAddressUTXOs.Visible) // only do this stuff if there's actually a valid address on the address screen
                {
                    if (decimal.TryParse(lblAddressConfirmedUnspentUTXO.Text, out decimal confirmedUnspent))
                    {
                        UpdateLabelValueAsync(lblAddressConfirmedUnspentUTXOFiat, $"{fiatSymbol}{(confirmedUnspent * OneBTCinSelectedCurrency):N2}");
                    }
                    if (decimal.TryParse(lblAddressConfirmedSpentUTXO.Text, out decimal confirmedSpent))
                    {
                        UpdateLabelValueAsync(lblAddressConfirmedSpentUTXOFiat, $"{fiatSymbol}{(confirmedSpent * OneBTCinSelectedCurrency):N2}");
                    }
                }

                // transaction screen
                if (panelTransactionDiagram.Visible) // only do this stuff in there's a valid tx on the tx screen
                {
                    if (decimal.TryParse(lblTotalOutputValue.Text, out decimal outputValue))
                    {
                        UpdateLabelValueAsync(lblTotalOutputValueFiat, $"{fiatSymbol}{(outputValue * OneBTCinSelectedCurrency):N2}");
                    }
                    if (decimal.TryParse(lblTotalInputValue.Text, out decimal inputValue))
                    {
                        UpdateLabelValueAsync(lblTotalInputValueFiat, $"{fiatSymbol}{(inputValue * OneBTCinSelectedCurrency):N2}");
                    }
                    if (decimal.TryParse(lblTransactionFee.Text, out decimal TXFeeValue))
                    {
                        UpdateLabelValueAsync(lblTransactionFeeFiat, $"{fiatSymbol}{(TXFeeValue * OneBTCinSelectedCurrency):N2}");
                    }
                }

                // xpub screen
                if (panel101.Visible) // only if an xpub scan has taken place
                {
                    if (decimal.TryParse(lblXpubConfirmedReceived.Text, out decimal xpubConfReceived))
                    {
                        UpdateLabelValueAsync(lblXpubConfirmedReceivedFiat, $"{fiatSymbol}{(xpubConfReceived * OneBTCinSelectedCurrency):N2}");
                    }
                    if (decimal.TryParse(lblXpubConfirmedSpent.Text, out decimal xpubConfSpent))
                    {
                        UpdateLabelValueAsync(lblXpubConfirmedSpentFiat, $"{fiatSymbol}{(xpubConfSpent * OneBTCinSelectedCurrency):N2}");
                    }
                    if (decimal.TryParse(lblXpubConfirmedUnspent.Text, out decimal xpubConfUnspent))
                    {
                        UpdateLabelValueAsync(lblXpubConfirmedUnspentFiat, $"{fiatSymbol}{(xpubConfUnspent * OneBTCinSelectedCurrency):N2}");
                    }
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "RefreshScreens");
            }
        }

        private void ChangeStatusLights()
        {
            try
            {
                if (lblStatusLight.ForeColor != Color.IndianRed && lblStatusLight.ForeColor != Color.OliveDrab) // check whether a data refresh has just occured to see if a status light flash needs dimming
                {
                    if (lblStatusLight.ForeColor == Color.Lime) // successful data refresh has occured
                    {
                        lblStatusLight.Invoke((MethodInvoker)delegate
                        {
                            lblStatusLight.ForeColor = Color.OliveDrab; // reset the colours to a duller version to give appearance of a flash
                        });
                    }
                    else // an error must have just occured
                    {
                        lblStatusLight.Invoke((MethodInvoker)delegate
                        {
                            lblStatusLight.ForeColor = Color.IndianRed; // reset the colours to a duller version to give appearance of a flash
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ChangeStatusLights");
            }
        }

        private void ClearAlertAndErrorMessage()
        {
            try
            {
                lblAlert.Invoke((MethodInvoker)delegate
                {
                    lblAlert.Visible = false;
                });
                lblErrorAlert.Invoke((MethodInvoker)delegate
                {
                    lblErrorAlert.Visible = false;
                });
                currentWidthShrinkingPanel = panelErrorMessage.Width;
                StartShrinkingPanel(panelErrorMessage);
                lblErrorMessage.Invoke((MethodInvoker)delegate
                {
                    lblErrorMessage.Text = ""; // clear any error message
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "ClearAlertAndErrorMessage");
            }
        }

        private void SetLightsMessagesAndResetTimers()
        {
            try
            {
                // set successful lights and messages on the form
                lblStatusLight.Invoke((MethodInvoker)delegate
                {
                    lblStatusLight.ForeColor = Color.Lime; // for a bright green flash
                });
                lblStatusLight.Invoke((MethodInvoker)delegate
                {
                    lblStatusLight.Text = "🟢"; // circle/light
                });
                intDisplayCountdownToRefresh = APIGroup1DisplayTimerIntervalSecsConstant; // reset the timer
            }
            catch (Exception ex)
            {
                HandleException(ex, "SetLightsMessagesAndResetTimers");
            }
        }
        #endregion
        #region error alerts and messages
        private void LblErrorAlert_Click(object sender, EventArgs e)
        {
            try
            {
                if (panelErrorMessage.Width == 0)
                {
                    currentWidthExpandingPanel = 0;
                    StartExpandingPanelHoriz(panelErrorMessage);

                }
                else
                {
                    currentWidthShrinkingPanel = panelErrorMessage.Width;
                    StartShrinkingPanel(panelErrorMessage);

                }

            }
            catch (WebException ex)
            {
                HandleException(ex, "lblErrorAlert_Click");
            }
        }

        private void HideErrorMessage_Click(object sender, EventArgs e)
        {
            StartShrinkingPanel(panelErrorMessage);
            currentWidthShrinkingPanel = panelErrorMessage.Width;
        }

        private void BtnCopyErrorMessage_Click(object sender, EventArgs e)
        {
            Clipboard.SetText(lblErrorMessage.Text);
        }

        private void LightUpNodeLight()
        {
            headerSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
            {
                headerSelectedNodeStatusLight.ForeColor = Color.Lime;
            });
            intNodeStatusLightTimeLightLit = 0;
        }

        #endregion
        #region create data services
        private void CreateDataServices()
        {
            try
            {
                _UTXOsForAddressService = new UTXOsForAddressService(NodeURL);
                _PoolsByBlockService = new PoolsByBlockService(NodeURL);
                _PoolsByHashrateService = new PoolsByHashrateService(NodeURL);
                _transactionsForAddressService = new TransactionsForAddressService(NodeURL);
                _blockService = new BlockDataService(NodeURL);
                _transactionsForBlockService = new TransactionsForBlockService(NodeURL);
                _transactionService = new TransactionService(NodeURL);
                _hashrateAndDifficultyService = new HashrateAndDifficultyService(NodeURL);
                _historicPriceDataService = new HistoricPriceDataService();
                _bitcoinsInCirculationDataService = new BitcoinsInCirculationDataService();
                _blockSizeAndWeightService = new BlockSizeAndWeightService(NodeURL);
                _uniqueAddressesDataService = new UniqueAddressesDataService();
                _utxoDataService = new UTXODataService();
                _poolsRankingDataService = new PoolsRankingDataService(NodeURL);
                _marketCapDataService = new MarketCapDataService();
                _miningPoolsListService = new MiningPoolsListService(NodeURL);
                _blocksByPoolService = new BlocksByPoolService(NodeURL);
                _poolHashrateService = new PoolHashrateService(NodeURL);
                _poolDataService = new PoolDataService(NodeURL);
                _coinGeckoMarketDataService = new CoinGeckoMarketDataService();
                _MessariMarketDataService = new MessariMarketDataService();
            }
            catch (Exception ex)
            {
                HandleException(ex, "CreateDataServices");
            }
        }
        #endregion
        #region get block tip

        private async Task GetBlockTipAndCirculationAsync()
        {
            try
            {
                using HttpClient client = new HttpClient();
                string BlockTipURL = $"{NodeURL}blocks/tip/height";
                string BlockTip = await client.GetStringAsync(BlockTipURL).ConfigureAwait(true);

                lblHeaderBlockNumber.Invoke((MethodInvoker)delegate
                {
                    lblHeaderBlockNumber.Text = BlockTip;
                });

                lblHeaderBlockAge.Invoke((MethodInvoker)delegate
                {
                    lblHeaderBlockAge.Location = new Point(lblHeaderBlockNumber.Location.X + lblHeaderBlockNumber.Width - (int)(6 * UIScale), lblHeaderBlockAge.Location.Y);
                });
                lblHeaderTimestamp.Invoke((MethodInvoker)delegate
                {
                    lblHeaderTimestamp.Location = new Point(lblHeaderBlockNumber.Location.X + lblHeaderBlockNumber.Width - (int)(6 * UIScale), lblHeaderTimestamp.Location.Y);
                });
                label107.Invoke((MethodInvoker)delegate
                {
                    label107.Location = new Point(lblHeaderTimestamp.Location.X + lblHeaderTimestamp.Width - (int)(4 * UIScale), label107.Location.Y);
                });
                numericUpDownBlockHeightToStartListFrom.Invoke((MethodInvoker)delegate
                {
                    numericUpDownBlockHeightToStartListFrom.Text = BlockTip;
                });

                numericUpDownSubmittedBlockNumber.Invoke((MethodInvoker)delegate
                {
                    numericUpDownSubmittedBlockNumber.Maximum = Convert.ToDecimal(BlockTip);
                });
                numericUpDownBlockHeightToStartListFrom.Invoke((MethodInvoker)delegate
                {
                    numericUpDownBlockHeightToStartListFrom.Maximum = Convert.ToDecimal(BlockTip);
                });

                // calculate amount of btc issued
                int blockHeight = Convert.ToInt32(BlockTip);
                decimal totalBitcoinsIssued = CirculationCalculator.CalculateTotalBitcoinsIssued(blockHeight);
                calculatedBTCInCirculation = totalBitcoinsIssued;

                UpdateLabelValueAsync(lblBTCInCirc, $"{calculatedBTCInCirculation:N2} / 21,000,000");
                if (calculatedBTCInCirculation > 0)
                {
                    UpdateLabelValueAsync(lblBTCToBeIssued, Convert.ToString(21000000 - calculatedBTCInCirculation));
                }
                else
                {
                    lblBTCToBeIssued.Invoke((MethodInvoker)delegate
                    {
                        lblBTCToBeIssued.Text = "0";
                    });
                }
                lblChartCirculation.Invoke((MethodInvoker)delegate
                {
                    lblChartCirculation.Location = new Point(lblBTCInCirc.Location.X + lblBTCInCirc.Width, lblChartCirculation.Location.Y);
                });
                decimal percentIssued = Math.Round((100m / 21000000) * calculatedBTCInCirculation, 2);
                UpdateLabelValueAsync(lblPercentIssued, $"{percentIssued}%");

                progressBarPercentIssued.Invoke((MethodInvoker)delegate
                {
                    progressBarPercentIssued.Value = Convert.ToInt16(percentIssued);
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "GetBlockTipAndCirculation");
            }
        }
        #endregion
        #region is string numeric
        static bool IsNumeric(string input)
        {
            return int.TryParse(input, out _);
        }
        #endregion
        #region encrypt/decrypt string using SHA-256
        private string Encrypt(string input, string key) // encrypt a string using SHA-256
        {
            byte[] keyBytes = Encoding.UTF8.GetBytes(key);
            byte[] inputBytes = Encoding.UTF8.GetBytes(input);
            using var sha256 = new SHA256Managed();
            byte[] hashedBytes = sha256.ComputeHash(keyBytes);
            byte[] encryptedBytes = new byte[inputBytes.Length];
            for (int i = 0; i < inputBytes.Length; i++)
            {
                encryptedBytes[i] = (byte)(inputBytes[i] ^ hashedBytes[i % hashedBytes.Length]);
            }
            return Convert.ToBase64String(encryptedBytes);
        }

        private string Decrypt(string input, string key) // decrypt a string using SHA-256
        {
            byte[] keyBytes = Encoding.UTF8.GetBytes(key);
            byte[] inputBytes = Convert.FromBase64String(input);
            using var sha256 = new SHA256Managed();
            byte[] hashedBytes = sha256.ComputeHash(keyBytes);
            byte[] decryptedBytes = new byte[inputBytes.Length];
            for (int i = 0; i < inputBytes.Length; i++)
            {
                decryptedBytes[i] = (byte)(inputBytes[i] ^ hashedBytes[i % hashedBytes.Length]);
            }
            return Encoding.UTF8.GetString(decryptedBytes);
        }
        #endregion
        #region error handler
        private void HandleException(Exception ex, string methodName)
        {
            string errorMessage;
            if (ex is WebException)
            {
                errorMessage = $"Web exception - {methodName}: {ex.Message}";
            }
            else if (ex is HttpRequestException)
            {
                errorMessage = $"HTTP Request error - {methodName}: {ex.Message}";
            }
            else if (ex is JsonException)
            {
                errorMessage = $"JSON parsing error in - {methodName}: {ex.Message}";
            }
            else
            {
                errorMessage = $"Error in {methodName}: {ex.Message}";
            }

            const int MaxErrorMessageLength = 130;

            if (errorMessage.Length > MaxErrorMessageLength)
            {
                errorMessage = $"{errorMessage.Substring(0, MaxErrorMessageLength)}...";
            }

            lblErrorMessage.Invoke((MethodInvoker)delegate
            {
                lblErrorMessage.Text = errorMessage;
            });
            ShowAlertSymbol();
        }
        #endregion
        #region override colours for listview headings
        private void AllListViews_DrawColumnHeader(object sender, DrawListViewColumnHeaderEventArgs e)
        {
            try
            {
                SolidBrush brush = new SolidBrush(listViewHeaderColor);
                e.Graphics.FillRectangle(brush, e.Bounds);
                // Change text color and alignment
                SolidBrush textBrush = new SolidBrush(listViewHeaderTextColor);
                StringFormat format = new StringFormat
                {
                    Alignment = StringAlignment.Near,
                    LineAlignment = StringAlignment.Center
                };
                e.Graphics.DrawString(e.Header.Text, e.Font, textBrush, e.Bounds, format);
            }
            catch (Exception ex)
            {
                HandleException(ex, "AllListViews_DrawColumnHeader");
            }
        }
        #endregion
        #region convert sats to bitcoin
        private decimal ConvertSatsToBitcoin(string numerics)
        {
            decimal number = decimal.Parse(numerics);
            decimal result = number / 100000000;
            return result;
        }
        #endregion
        #region check network status
        private async Task CheckNetworkStatusAsync()
        {
            try
            {
                ToggleLoadingAnimation("enable");
                string hostnameForDisplay = "";
                #region if we're looking at the xpub screen
                if (panelXpub.Visible)
                {
                    if (xpubNodeURL != "")
                    {
                        CheckOwnNodeIsOnlineAsync();
                        Uri uri = new Uri(xpubNodeURL);
                        hostnameForDisplay = uri.Host;
                    }
                    else
                    {
                        hostnameForDisplay = "invalid node";
                    }
                    if (lblXpubScreenOwnNodeStatusLight.ForeColor == Color.OliveDrab)
                    {
                        headerSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                        {
                            headerSelectedNodeStatusLight.ForeColor = Color.OliveDrab;
                        });
                        headerSelectedNodeStatus.Invoke((MethodInvoker)delegate
                        {
                            headerSelectedNodeStatus.Text = $"{hostnameForDisplay} (Xpub query)";
                        });
                        lblSettingsOwnNodeSelected.Enabled = true;
                        lblSettingsOwnNodeStatus.Invoke((MethodInvoker)delegate
                        {
                            lblSettingsOwnNodeStatus.Text = hostnameForDisplay;
                            lblSettingsOwnNodeStatus.Location = new Point((int)(750 * UIScale) - lblSettingsOwnNodeStatus.Width, lblSettingsOwnNodeStatus.Location.Y);
                        });
                        lblSettingsOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                        {
                            lblSettingsOwnNodeStatusLight.ForeColor = Color.OliveDrab;
                            lblSettingsOwnNodeStatusLight.Location = new Point(lblSettingsOwnNodeStatus.Location.X - lblSettingsOwnNodeStatusLight.Width, lblSettingsOwnNodeStatusLight.Location.Y);
                        });

                        lblXpubScreenOwnNodeStatus.Invoke((MethodInvoker)delegate
                        {
                            lblXpubScreenOwnNodeStatus.Text = hostnameForDisplay;
                        });
                        label174.Invoke((MethodInvoker)delegate
                        {
                            label174.Text = $"your node ({hostnameForDisplay})";
                        });
                        MoveNodeSelections();
                        lblXpubScreenOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                        {
                            lblXpubScreenOwnNodeStatusLight.ForeColor = Color.OliveDrab;
                        });
                    }
                    else
                    {
                        headerSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                        {
                            headerSelectedNodeStatusLight.ForeColor = Color.IndianRed;
                        });
                        headerSelectedNodeStatus.Invoke((MethodInvoker)delegate
                        {
                            headerSelectedNodeStatus.Text = $"{hostnameForDisplay} (Xpub query)";
                        });
                        label174.Invoke((MethodInvoker)delegate
                        {
                            label174.Text = "your node (not connected)";
                        });
                        MoveNodeSelections();
                        lblSettingsOwnNodeSelected.Enabled = false;
                        lblSettingsOwnNodeStatus.Invoke((MethodInvoker)delegate
                        {
                            lblSettingsOwnNodeStatus.Text = hostnameForDisplay;
                            lblSettingsOwnNodeStatus.Location = new Point((int)(750 * UIScale) - lblSettingsOwnNodeStatus.Width, lblSettingsOwnNodeStatus.Location.Y);
                        });
                        lblSettingsOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                        {
                            lblSettingsOwnNodeStatusLight.ForeColor = Color.IndianRed;
                            lblSettingsOwnNodeStatusLight.Location = new Point(lblSettingsOwnNodeStatus.Location.X - lblSettingsOwnNodeStatusLight.Width, lblSettingsOwnNodeStatusLight.Location.Y);
                        });

                        lblXpubScreenOwnNodeStatus.Invoke((MethodInvoker)delegate
                        {
                            lblXpubScreenOwnNodeStatus.Text = hostnameForDisplay;
                        });
                        lblXpubScreenOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                        {
                            lblXpubScreenOwnNodeStatusLight.ForeColor = Color.IndianRed;
                        });
                    }
                }
                #endregion
                #region if we're looking at any other screen
                if (!panelXpub.Visible)
                {
                    try
                    {
                        Ping pingSender = new Ping();
                        string? pingAddress = null;
                        if (String.Compare(NodeURL, "https://mempool.space/api/") == 0)
                        {
                            pingAddress = "mempool.space";
                        }
                        else
                        {
                            if (String.Compare(NodeURL, "https://mempool.space/testnet/api/") == 0)
                            {
                                pingAddress = "mempool.space";
                            }
                            else
                            {
                                if (NodeURL == null)
                                {
                                    pingAddress = "mempool.space";
                                    NodeURL = "https://mempool.space/api/";
                                }
                                else
                                {
                                    if (textBoxSettingsOwnNodeURL.Text != "")
                                    {
                                        // get the contents of the textbox
                                        string url = textBoxSettingsOwnNodeURL.Text;

                                        // create a regex pattern to match URLs
                                        string pattern = @"^(http|https):\/\/.*\/api\/$";

                                        // create a regex object
                                        Regex regex = new Regex(pattern);

                                        // use the regex object to match the contents of the textbox
                                        if (regex.IsMatch(url)) // (at least partially) valid url
                                        {
                                            try
                                            {
                                                NodeURL = textBoxSettingsOwnNodeURL.Text;
                                                // parse the URL to extract the hostname
                                                Uri uri = new Uri(NodeURL);
                                                string hostname = uri.Host;
                                                hostnameForDisplay = hostname;
                                                // resolve the hostname to an IP address
                                                IPHostEntry hostEntry = Dns.GetHostEntry(hostname);
                                                IPAddress ipAddress = hostEntry.AddressList[0];
                                                pingAddress = ipAddress.ToString();
                                            }
                                            catch
                                            {
                                                lblSettingsSelectedNodeStatus.Invoke((MethodInvoker)delegate
                                                {
                                                    lblSettingsSelectedNodeStatus.Text = "node offline";
                                                    lblSettingsSelectedNodeStatus.Location = new Point((int)(750 * UIScale) - lblSettingsSelectedNodeStatus.Width, lblSettingsSelectedNodeStatus.Location.Y);
                                                });
                                                lblSettingsSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                                                {
                                                    lblSettingsSelectedNodeStatusLight.ForeColor = Color.IndianRed;
                                                    lblSettingsSelectedNodeStatusLight.Location = new Point(lblSettingsSelectedNodeStatus.Location.X - lblSettingsSelectedNodeStatusLight.Width, lblSettingsSelectedNodeStatusLight.Location.Y);
                                                });
                                                return;
                                            }
                                        }
                                        else
                                        {
                                            lblSettingsSelectedNodeStatus.Invoke((MethodInvoker)delegate
                                            {
                                                lblSettingsSelectedNodeStatus.Text = "node offline";
                                                lblSettingsSelectedNodeStatus.Location = new Point((int)(750 * UIScale) - lblSettingsSelectedNodeStatus.Width, lblSettingsSelectedNodeStatus.Location.Y);
                                            });
                                            lblSettingsSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                                            {
                                                lblSettingsSelectedNodeStatusLight.ForeColor = Color.IndianRed;
                                                lblSettingsSelectedNodeStatusLight.Location = new Point(lblSettingsSelectedNodeStatus.Location.X - lblSettingsSelectedNodeStatusLight.Width, lblSettingsSelectedNodeStatusLight.Location.Y);
                                            });
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                        PingReply reply = await pingSender.SendPingAsync(pingAddress).ConfigureAwait(true);
                        if (reply.Status == IPStatus.Success)
                        {
                            headerSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                            {
                                headerSelectedNodeStatusLight.ForeColor = Color.OliveDrab;
                            });
                            var displayNodeName = "";
                            if (String.Compare(NodeURL, "https://mempool.space/api/") == 0)
                            {
                                displayNodeName = "mempool.space (mainnet)";
                            }
                            else
                            {
                                if (String.Compare(NodeURL, "https://mempool.space/testnet/api/") == 0)
                                {
                                    displayNodeName = "mempool.space (testnet)";
                                }
                                else
                                {
                                    displayNodeName = hostnameForDisplay;
                                }
                            }
                            lblSettingsSelectedNodeStatus.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsSelectedNodeStatus.Text = displayNodeName;
                                lblSettingsSelectedNodeStatus.Location = new Point((int)(750 * UIScale) - lblSettingsSelectedNodeStatus.Width, lblSettingsSelectedNodeStatus.Location.Y);
                            });
                            lblSettingsSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsSelectedNodeStatusLight.ForeColor = Color.OliveDrab;
                                lblSettingsSelectedNodeStatusLight.Location = new Point(lblSettingsSelectedNodeStatus.Location.X - lblSettingsSelectedNodeStatusLight.Width, lblSettingsSelectedNodeStatusLight.Location.Y);
                            });
                            headerSelectedNodeStatus.Invoke((MethodInvoker)delegate
                            {
                                headerSelectedNodeStatus.Text = displayNodeName;
                            });

                            if (String.Compare(lblErrorMessage.Text, "Node disconnected/offline") == 0)
                            {
                                ClearAlertAndErrorMessage();
                            }
                        }
                        else
                        {
                            // API is not online
                            headerSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                            {
                                headerSelectedNodeStatusLight.ForeColor = Color.IndianRed;
                            });
                            var displayNodeName = "";
                            if (String.Compare(NodeURL, "https://mempool.space/api/") == 0)
                            {
                                displayNodeName = "mempool.space (mainnet)";
                            }
                            else
                            {
                                if (String.Compare(NodeURL, "https://mempool.space/testnet/api/") == 0)
                                {
                                    displayNodeName = "mempool.space (testnet)";
                                }
                                else
                                {
                                    displayNodeName = hostnameForDisplay;
                                }
                            }
                            lblSettingsSelectedNodeStatus.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsSelectedNodeStatus.Text = displayNodeName;
                                lblSettingsSelectedNodeStatus.Location = new Point((int)(750 * UIScale) - lblSettingsSelectedNodeStatus.Width, lblSettingsSelectedNodeStatus.Location.Y);
                            });
                            lblSettingsSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsSelectedNodeStatusLight.ForeColor = Color.IndianRed;
                                lblSettingsSelectedNodeStatusLight.Location = new Point(lblSettingsSelectedNodeStatus.Location.X - lblSettingsSelectedNodeStatusLight.Width, lblSettingsSelectedNodeStatusLight.Location.Y);
                            });
                            headerSelectedNodeStatus.Invoke((MethodInvoker)delegate
                            {
                                headerSelectedNodeStatus.Text = displayNodeName;
                            });
                            ShowAlertSymbol();
                            lblErrorMessage.Invoke((MethodInvoker)delegate
                            {
                                lblErrorMessage.Text = "Node disconnected/offline";
                            });
                        }
                    }
                    catch (HttpRequestException)
                    {
                        // API is not online
                        var displayNodeName = "";
                        if (String.Compare(NodeURL, "https://mempool.space/api/") == 0)
                        {
                            displayNodeName = "mempool.space (mainnet)";
                        }
                        else
                        {
                            if (String.Compare(NodeURL, "https://mempool.space/testnet/api/") == 0)
                            {
                                displayNodeName = "mempool.space (testnet)";
                            }
                            else
                            {
                                displayNodeName = hostnameForDisplay;
                            }
                        }
                        lblSettingsSelectedNodeStatus.Invoke((MethodInvoker)delegate
                        {
                            lblSettingsSelectedNodeStatus.Text = displayNodeName;
                            lblSettingsSelectedNodeStatus.Location = new Point((int)(750 * UIScale) - lblSettingsSelectedNodeStatus.Width, lblSettingsSelectedNodeStatus.Location.Y);
                        });
                        lblSettingsSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                        {
                            lblSettingsSelectedNodeStatusLight.ForeColor = Color.IndianRed;
                            lblSettingsSelectedNodeStatusLight.Location = new Point(lblSettingsSelectedNodeStatus.Location.X - lblSettingsSelectedNodeStatusLight.Width, lblSettingsSelectedNodeStatusLight.Location.Y);
                        });
                        headerSelectedNodeStatus.Invoke((MethodInvoker)delegate
                        {
                            headerSelectedNodeStatus.Text = displayNodeName;
                        });
                        ShowAlertSymbol();
                        lblErrorMessage.Invoke((MethodInvoker)delegate
                        {
                            lblErrorMessage.Text = "Node disconnected/offline";
                        });
                    }
                    catch (Exception ex)
                    {
                        lblErrorMessage.Invoke((MethodInvoker)delegate
                        {
                            lblErrorMessage.Text = $"CheckNetworkStatus: {ex.Message}";
                        });
                    }
                }
                #endregion
                ToggleLoadingAnimation("disable");
            }
            catch (Exception ex)
            {
                HandleException(ex, "CheckNetworkStatus");
            }
        }
        #endregion
        #region update genesis background clock
        private void UpdateOnScreenClock()
        {
            try
            {
                lblTime.Invoke((MethodInvoker)delegate
                {
                    lblTime.Text = DateTime.Now.ToString("HH:mm:ss");
                });

            }
            catch (Exception ex)
            {
                HandleException(ex, "UpdateOnScreenClock");
            }
        }
        #endregion
        #region continuous increment/decrement of numericupdown controls
        private void TimerNumUpDownContinuous_Tick(object sender, EventArgs e)
        {
            try
            {
                #region block screen
                if (isSubmittedBlockNumberUpHeldDown)
                {
                    if (numericUpDownSubmittedBlockNumber.Value < Convert.ToInt64(lblHeaderBlockNumber.Text))
                    {
                        numericUpDownSubmittedBlockNumber.Value++;
                    }
                }
                if (isSubmittedBlockNumberDownHeldDown)
                {
                    if (numericUpDownSubmittedBlockNumber.Value > 0)
                    {
                        numericUpDownSubmittedBlockNumber.Value--;
                    }
                }
                #endregion
                #region block list screen
                if (isBlockHeightToStartFromUpHeldDown)
                {
                    if (numericUpDownBlockHeightToStartListFrom.Value < Convert.ToInt64(lblHeaderBlockNumber.Text))
                    {
                        numericUpDownBlockHeightToStartListFrom.Value++;
                    }
                }
                if (isBlockHeightToStartFromDownHeldDown)
                {
                    if (numericUpDownBlockHeightToStartListFrom.Value > 0)
                    {
                        numericUpDownBlockHeightToStartListFrom.Value--;
                    }
                }
                #endregion
                #region settings screen
                if (isDataRefreshPeriodUpHeldDown)
                {
                    if (numericUpDownDashboardRefresh.Value < 1440)
                    {
                        numericUpDownDashboardRefresh.Value++;
                    }
                }
                if (isDataRefreshPeriodDownHeldDown)
                {
                    if (numericUpDownDashboardRefresh.Value > 1)
                    {
                        numericUpDownDashboardRefresh.Value--;
                    }
                }
                #endregion
                #region xpub screen
                if (isDerivationPathsUpHeldDown)
                {
                    if (numberUpDownDerivationPathsToCheck.Value < 99)
                    {
                        numberUpDownDerivationPathsToCheck.Value++;
                    }
                }
                if (isDerivationPathsDownHeldDown)
                {
                    if (numberUpDownDerivationPathsToCheck.Value > 1)
                    {
                        numberUpDownDerivationPathsToCheck.Value--;
                    }
                }
                if (isZeroBalanceAdddressUpHeldDown)
                {
                    if (numericUpDownMaxNumberOfConsecutiveUnusedAddresses.Value < 99)
                    {
                        numericUpDownMaxNumberOfConsecutiveUnusedAddresses.Value++;
                    }
                }
                if (isZeroBalanceAdddressDownHeldDown)
                {
                    if (numericUpDownMaxNumberOfConsecutiveUnusedAddresses.Value > 1)
                    {
                        numericUpDownMaxNumberOfConsecutiveUnusedAddresses.Value--;
                    }
                }
                #endregion
                #region create theme screen
                if (isOpacityUpHeldDown)
                {
                    if (numericUpDownOpacity.Value < 100)
                    {
                        numericUpDownOpacity.Value++;
                    }
                }
                if (isOpacityDownHeldDown)
                {
                    if (numericUpDownOpacity.Value > 10)
                    {
                        numericUpDownOpacity.Value--;
                    }
                }
                #endregion
            }
            catch (Exception ex)
            {
                HandleException(ex, "TimerNumUpDownContinuous_Tick");
            }
        }
        #endregion
        #region force a pause
        private async Task BriefPauseAsync(int pauselength)
        {
            await Task.Delay(pauselength).ConfigureAwait(true);
        }
        #endregion
        #region disable, hide, reset, etc stuff based on time
        private void TurnOffCoingeckoPriceIndicator()
        {
            try
            {
                if (RunCoingeckoAPI)
                {
                    if (lblCoingeckoPriceIndicator.ForeColor != Color.IndianRed && lblCoingeckoPriceIndicator.ForeColor != Color.OliveDrab && lblCoingeckoPriceIndicator.ForeColor != Color.LightGray) // check whether a data refresh has just occured to see if a status light flash needs dimming
                    {
                        if (lblCoingeckoPriceIndicator.ForeColor == Color.Lime) // successful data refresh has occured
                        {
                            lblCoingeckoPriceIndicator.Invoke((MethodInvoker)delegate
                            {
                                lblCoingeckoPriceIndicator.ForeColor = Color.OliveDrab; // reset the colours to a duller version to give appearance of a flash
                            });
                        }
                        else // an error must have just occured
                        {
                            lblCoingeckoPriceIndicator.Invoke((MethodInvoker)delegate
                            {
                                lblCoingeckoPriceIndicator.ForeColor = Color.IndianRed; // reset the colours to a duller version to give appearance of a flash
                            });
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ResetPriceAPIIndicators");
            }
        }

        private void TurnOffMempoolspacePriceIndicator()
        {
            try
            {
                if (lblMempoolSpacePriceIndicator.ForeColor != Color.IndianRed && lblMempoolSpacePriceIndicator.ForeColor != Color.OliveDrab && lblMempoolSpacePriceIndicator.ForeColor != Color.LightGray) // check whether a data refresh has just occured to see if a status light flash needs dimming
                {
                    if (lblMempoolSpacePriceIndicator.ForeColor == Color.Lime) // successful data refresh has occured
                    {
                        lblMempoolSpacePriceIndicator.Invoke((MethodInvoker)delegate
                        {
                            lblMempoolSpacePriceIndicator.ForeColor = Color.OliveDrab; // reset the colours to a duller version to give appearance of a flash
                        });
                    }
                    else // an error must have just occured
                    {
                        lblMempoolSpacePriceIndicator.Invoke((MethodInvoker)delegate
                        {
                            lblMempoolSpacePriceIndicator.ForeColor = Color.IndianRed; // reset the colours to a duller version to give appearance of a flash
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ResetPriceAPIIndicators");
            }
        }

        private void TurnOffCoinbasePriceIndicator()
        {
            try
            {
                if (RunCoinbaseAPI)
                {
                    if (CoinbasePriceIndicator.ForeColor != Color.IndianRed && CoinbasePriceIndicator.ForeColor != Color.OliveDrab && CoinbasePriceIndicator.ForeColor != Color.LightGray) // check whether a data refresh has just occured to see if a status light flash needs dimming
                    {
                        if (CoinbasePriceIndicator.ForeColor == Color.Lime) // successful data refresh has occured
                        {
                            CoinbasePriceIndicator.Invoke((MethodInvoker)delegate
                            {
                                CoinbasePriceIndicator.ForeColor = Color.OliveDrab; // reset the colours to a duller version to give appearance of a flash
                            });
                        }
                        else // an error must have just occured
                        {
                            CoinbasePriceIndicator.Invoke((MethodInvoker)delegate
                            {
                                CoinbasePriceIndicator.ForeColor = Color.IndianRed; // reset the colours to a duller version to give appearance of a flash
                            });
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ResetPriceAPIIndicators");
            }
        }

        private async void DoTimerBasedStuffAsync()
        {
            try
            {
                if (panelSettings.Visible && String.Compare(lblSettingsOwnNodeSelected.Text, "✔️") == 0)
                {
                    if (intDisplayCountdownToRefresh % 5 == 0)
                    {
                        await CheckNetworkStatusAsync().ConfigureAwait(true);
                    }
                }

                if (intDisplayCountdownToRefresh <= 56)
                {
                    gotMarketDataInLastFewSecs = false; // this flag prevented getting market data twice in quick succession during startup. Once false (after initial few secs), it stays false.
                }

                //increment timers for status lights and messages
                intMempoolspaceTimeLightLit++;
                intCoinbaseTimeLightLit++;
                intCoingeckoTimeLightLit++;
                intNodeStatusLightTimeLightLit++;
                intSavingSettingsTimeLightLit++;
                intThemeNameInUseMessageTimeShown++;
                intThemeDeletedMessageTimeShown++;
                intThemeSavedMessageTimeShown++;
                intAddToBookmarksMessageTimeLightLit++;
                if (bookmarkHasBeenAdded)
                {
                    intHideAddToBookmarksTimeShown++;
                }
                if (xpubScanComplete)
                {
                    intTimeUntilXpubProgressBarsHidden++;
                }
                intExternalLinkClickedFlagToFalse++;

                // check whether price API indicators need turning off
                if (intMempoolspaceTimeLightLit >= 2)
                {
                    intMempoolspaceTimeLightLit = 0;
                    TurnOffMempoolspacePriceIndicator();
                }
                if (intCoinbaseTimeLightLit >= 2)
                {
                    intCoinbaseTimeLightLit = 0;
                    TurnOffCoinbasePriceIndicator();
                }
                if (intCoingeckoTimeLightLit >= 2)
                {
                    intCoingeckoTimeLightLit = 0;
                    TurnOffCoingeckoPriceIndicator();
                }

                //check whether node status light needs turning off
                if (intNodeStatusLightTimeLightLit >= 2)
                {
                    intNodeStatusLightTimeLightLit = 0;
                    headerSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                    {
                        headerSelectedNodeStatusLight.ForeColor = Color.OliveDrab;
                    });
                }

                //check whether 'saving settings' light needs turning off
                if (intSavingSettingsTimeLightLit >= 2)
                {
                    intSavingSettingsTimeLightLit = 0;
                    labelSettingsSaved.Invoke((MethodInvoker)delegate
                    {
                        labelSettingsSaved.Text = "Settings saved";
                    });
                    lblSaveSettingsLight.Invoke((MethodInvoker)delegate
                    {
                        lblSaveSettingsLight.ForeColor = Color.OliveDrab;
                    });
                }

                //check whether 'theme name in use' message needs removing
                if (intThemeNameInUseMessageTimeShown >= 5)
                {
                    intThemeNameInUseMessageTimeShown = 0;
                    lblThemeNameInUse.Invoke((MethodInvoker)delegate
                    {
                        lblThemeNameInUse.Visible = false;
                    });
                }

                //check whether 'theme deleted' message needs removing
                if (intThemeDeletedMessageTimeShown >= 5)
                {
                    intThemeDeletedMessageTimeShown = 0;
                    lblThemeDeleted.Invoke((MethodInvoker)delegate
                    {
                        lblThemeDeleted.Visible = false;
                    });
                }

                //check whether 'theme saved' message needs removing
                if (intThemeSavedMessageTimeShown >= 5)
                {
                    intThemeSavedMessageTimeShown = 0;
                    lblThemeSaved.Invoke((MethodInvoker)delegate
                    {
                        lblThemeSaved.Visible = false;
                    });
                }

                //check whether bookmark message needs removing
                if (intAddToBookmarksMessageTimeLightLit >= 5)
                {
                    intAddToBookmarksMessageTimeLightLit = 0;
                    lblBookmarkStatusMessage.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkStatusMessage.Visible = false;
                    });
                }

                //check whether 'add to bookmarks' panel needs hiding
                if (intHideAddToBookmarksTimeShown >= 5)
                {
                    panelAddToBookmarks.Invoke((MethodInvoker)delegate
                    {
                        panelAddToBookmarks.Visible = false;

                    });
                    panelAddToBookmarksBorder.Invoke((MethodInvoker)delegate
                    {
                        panelAddToBookmarksBorder.Visible = false;
                    });
                    intHideAddToBookmarksTimeShown = 0;
                    bookmarkHasBeenAdded = false;
                }

                //check whether xpub progrss bars need hiding
                if (intTimeUntilXpubProgressBarsHidden >= 8)
                {
                    intTimeUntilXpubProgressBarsHidden = 0;
                    if (xpubScanComplete)
                    {
                        Control[] controlsToHide = { progressBarCheckAllAddressTypes, progressBarCheckEachAddressType, lblCheckAllAddressTypesCount, lblCheckEachAddressTypeCount, label140, label141 };
                        foreach (Control control in controlsToHide)
                        {
                            control.Invoke((MethodInvoker)delegate
                            {
                                control.Visible = false;
                            });
                        }
                    }
                }

                //check whether external link clicked flag needs resetting to false
                if (intExternalLinkClickedFlagToFalse >= 1)
                {
                    linkClicked = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "DoTimerBasedStuffAsync");
            }
        }
        #endregion
        #region style tooltips
        private void ToolTip_Draw(object sender, DrawToolTipEventArgs e) => DrawToolTip(e);

        private void DrawToolTip(DrawToolTipEventArgs e)
        {
            //background
            //using (var linearGradientBrush = new LinearGradientBrush(e.Bounds, btnExit.BackColor, btnExit.BackColor, 45f))
            using (var linearGradientBrush = new LinearGradientBrush(e.Bounds, MakeColorLighter(panel73.BackColor, -25), MakeColorLighter(panel73.BackColor, -25), 45f))
            {
                e.Graphics.FillRectangle(linearGradientBrush, e.Bounds);
            }

            //border
            using (var borderPen = new Pen(MakeColorLighter(panel73.BackColor, -70), 1))
            {
                Rectangle borderRect = new Rectangle(e.Bounds.Location, new Size(e.Bounds.Width - 1, e.Bounds.Height - 1));
                e.Graphics.DrawRectangle(borderPen, borderRect);
            }

            var r = e.Bounds;
            // icon
            e.Graphics.DrawImage(Resources.tinylogo1, new Rectangle(r.X + 6, r.Y + 4, 20, 21));

            // Modify the tooltip text
            string tipToShow = e.ToolTipText;
            string[] lines = tipToShow.Split('\n');

            int yOffset = 0; // Offset to keep track of vertical position
            foreach (string line in lines)
            {
                // Handle GREEN
                int index = line.IndexOf("GREEN");
                if (index >= 0)
                {
                    // Get the bounds of the text before "GREEN" in this line
                    string textBeforeGreen = line.Substring(0, index);
                    Size textSize = TextRenderer.MeasureText(e.Graphics, textBeforeGreen, toolTipFont);

                    // Determine the position to draw the green circle in this line
                    int circleX = e.Bounds.Left + textSize.Width + 6; // Add 6 for padding
                    int circleY = e.Bounds.Top + 8 + yOffset; // Add yOffset for multiline

                    // Draw the green circle in olive drab color
                    Rectangle circleRect = new Rectangle(circleX, circleY, 14, 14);
                    using var greenBrush = new SolidBrush(Color.OliveDrab);
                    e.Graphics.FillEllipse(greenBrush, circleRect);
                }

                // Handle RED
                index = line.IndexOf("RED");
                if (index >= 0)
                {
                    // Get the bounds of the text before "RED" in this line
                    string textBeforeRed = line.Substring(0, index);
                    Size textSize = TextRenderer.MeasureText(e.Graphics, textBeforeRed, toolTipFont);

                    // Determine the position to draw the red circle in this line
                    int circleX = e.Bounds.Left + textSize.Width + 6; // Add 6 for padding
                    int circleY = e.Bounds.Top + 8 + yOffset; // Add yOffset for multiline

                    // Draw the red circle in red color
                    Rectangle circleRect = new Rectangle(circleX, circleY, 14, 14);
                    using var redBrush = new SolidBrush(Color.IndianRed);
                    e.Graphics.FillEllipse(redBrush, circleRect);
                }

                // Handle GRAY
                index = line.IndexOf("GREY");
                if (index >= 0)
                {
                    // Get the bounds of the text before "GRAY" in this line
                    string textBeforeGray = line.Substring(0, index);
                    Size textSize = TextRenderer.MeasureText(e.Graphics, textBeforeGray, toolTipFont);

                    // Determine the position to draw the gray circle in this line
                    int circleX = e.Bounds.Left + textSize.Width + 6; // Add 6 for padding
                    int circleY = e.Bounds.Top + 8 + yOffset; // Add yOffset for multiline

                    // Draw the gray circle in gray color
                    Rectangle circleRect = new Rectangle(circleX, circleY, 14, 14);
                    using var grayBrush = new SolidBrush(Color.LightGray);
                    e.Graphics.FillEllipse(grayBrush, circleRect);
                }

                // Increment yOffset for the next line
                yOffset += TextRenderer.MeasureText(e.Graphics, line, toolTipFont).Height;
            }

            // Draw the modified tooltip text
            // add some space before the text to make way for the icon
            tipToShow = $"       {tipToShow}";

            // Remove the color keywords from the tooltip text
            tipToShow = tipToShow.Replace("GREEN", "     ").Replace("RED", "     ").Replace("GREY", "     ").Replace("XX", "       ");

            TextRenderer.DrawText(e.Graphics, tipToShow, toolTipFont, e.Bounds, btnExit.ForeColor, toolTipFlags);
        }

        readonly TextFormatFlags toolTipFlags = TextFormatFlags.VerticalCenter |
        TextFormatFlags.LeftAndRightPadding | TextFormatFlags.Left | TextFormatFlags.NoClipping;
        readonly Font toolTipFont = new Font("Century Gothic", 11.0f, FontStyle.Regular);

        private void ToolTip_Popup(object sender, PopupEventArgs e) // size the tooltip
        {
            // add some space before the text to make way for the icon
            string toolTipText = $"       {((ToolTip)sender).GetToolTip(e.AssociatedControl)}";
            using var g = e.AssociatedControl.CreateGraphics();
            var textSize = Size.Add(TextRenderer.MeasureText(
                g, toolTipText, toolTipFont, Size.Empty, toolTipFlags), new Size(5, 10));
            e.ToolTipSize = textSize;
        }
        #endregion

        #endregion
        //![](resources\tinylogo1.png;;;0.04706,0.04877)
        #region ⚡⚡⚡ GENERAL FORM NAVIGATION AND CONTROLS
        #region main menu

        private void EnableAllMenuButtons()
        {
            btnMenuCreateTheme.Invoke((MethodInvoker)delegate
            {
                btnMenuCreateTheme.BackgroundImage = null;
            });
            Control[] buttonsToEnable = { btnMenuSettings, btnMenuXpub, btnMenuAddress, btnMenuAddressUTXO, btnMenuTransaction, btnMenuBookmarks, btnMenuCreateTheme, btnMenuDirectory, btnMenuBitcoinDashboard, btnMenuBlockList, btnMenuLightningDashboard, btnMenuBlock, btnMenuMiningPools, btnMenuPoolsByBlocks };
            foreach (Control control in buttonsToEnable)
            {
                control.Invoke((MethodInvoker)delegate
                {
                    control.Enabled = true;
                });
            }

            if (!testNet)
            {
                btnMenuCharts.Enabled = true;
                if (!offlineMode)
                {
                    if (RunBlockchainInfoAPI && (RunCoinbaseAPI || RunCoingeckoAPI || RunMempoolSpacePriceAPI))
                    {
                        btnMenuDCACalculator.Enabled = true;
                    }
                    if (RunCoinbaseAPI || RunCoingeckoAPI || RunMempoolSpacePriceAPI)
                    {
                        btnMenuPriceConverter.Enabled = true;
                    }
                }
            }
        }

        private async Task HideAllScreensAsync()
        {
            await HideScreensAsync().ConfigureAwait(true);
        }

        private async Task HideScreensAsync()
        {
            Control[] screensToHide =
            {
                panelBookmarks,
                panelBlockList,
                panelLightningDashboard,
                panelDirectory,
                panelCharts,
                panelAddress,
                panelBlock,
                panelTransaction,
                panelSettings,
                panelAppearance,
                panelXpub,
                panelDCACalculator,
                panelPriceConverter,
                panelBitcoinDashboard,
                panelAddressUTXO,
                panelMiningBlocks,
                panelMiningHashrate,
                panelMiningPools,
                panelChartsForPoolsScreen
            };

            await Task.Run(() =>
            {
                foreach (Control control in screensToHide)
                {
                    if (control.InvokeRequired)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.Visible = false;
                        });
                    }
                    else
                    {
                        control.Visible = false;
                    }
                }
            }).ConfigureAwait(true);
        }

        private async void BtnMenuBitcoinDashboard_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                #region display loading screen
                //
                bool wasOnTop = false;
                if (!fullScreenLoadingScreenVisible)
                {
                    if (this.TopMost == true)
                    {
                        wasOnTop = true;
                        this.TopMost = false;
                    }
                    // work out the position to place the loading form
                    Point panelScreenLocation = lblNowViewing.PointToScreen(Point.Empty);
                    panelScreenLocation.Y -= (int)(160 * UIScale);
                    panelScreenLocation.X -= (int)(13 * UIScale);

                    loadingScreen = new LoadingScreen(UIScale)
                    {
                        Owner = this,
                        StartPosition = FormStartPosition.Manual, // Set the start position manually
                        FormBorderStyle = FormBorderStyle.None,
                        BackColor = panel84.BackColor, // Set the background color to match panel colours
                        Opacity = 1, // Set the opacity to 100%
                        LabelColor = label77.ForeColor,
                        Location = panelScreenLocation // Set the location of the loadingScreen form
                    };
                    loadingScreen.Show(this);
                    partialLoadingScreenVisible = true;
                    await BriefPauseAsync(100).ConfigureAwait(true);
                }
                #endregion
                UpdateLoadingScreenMessage("please wait...", "Preparing bitcoin dashboard...");
                SuspendLayout();
                lblMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblMenuHighlightedButtonText.Visible = true;
                    lblMenuHighlightedButtonText.Text = "₿ dashboard";
                    lblMenuHighlightedButtonText.Location = new Point(lblMenuHighlightedButtonText.Location.X, btnMenuBitcoinDashboard.Location.Y);
                });
                lblMenuArrow.Invoke((MethodInvoker)delegate
                {
                    lblMenuArrow.Height = (int)(18 * UIScale);
                    lblMenuArrow.Location = new Point(lblMenuArrow.Location.X, btnMenuBitcoinDashboard.Location.Y);
                    lblMenuArrow.Visible = true;
                });

                await HideAllScreensAsync().ConfigureAwait(true);
                CloseCurrencyMenu();
                CloseThemeMenu();
                EnableAllMenuButtons();
                btnMenuBitcoinDashboard.Enabled = false;
                ResumeLayout(false);
                ToggleLoadingAnimation("enable");
                SuspendLayout();
                panelBitcoinDashboard.Invoke((MethodInvoker)delegate
                {
                    panelBitcoinDashboard.Visible = true;
                    panelBitcoinDashboard.Refresh();
                });
                if (!fullScreenLoadingScreenVisible && loadingScreen != null)
                {
                    #region close loading screen
                    //wait a moment to give time for screen to paint
                    await BriefPauseAsync(400).ConfigureAwait(true);
                    partialLoadingScreenVisible = false;
                    //close the loading screen
                    loadingScreen.Close();
                    if (wasOnTop)
                    {
                        this.TopMost = true;
                    }
                    #endregion
                }

                ResumeLayout(false);
                ToggleLoadingAnimation("disable");
                await CheckNetworkStatusAsync().ConfigureAwait(true);
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuBitcoinDashboard_Click");
            }
        }

        private async void BtnMenuLightningDashboard_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                #region display loading screen
                bool wasOnTop = false;
                
                if (!fullScreenLoadingScreenVisible)
                {
                    if (this.TopMost == true)
                    {
                        wasOnTop = true;
                        this.TopMost = false;
                    }

                    // work out the position to place the loading form
                    Point panelScreenLocation = lblNowViewing.PointToScreen(Point.Empty);
                    panelScreenLocation.Y -= (int)(160 * UIScale);
                    panelScreenLocation.X -= (int)(13 * UIScale);

                    loadingScreen = new LoadingScreen(UIScale)
                    {
                        Owner = this,
                        StartPosition = FormStartPosition.Manual, // Set the start position manually
                        FormBorderStyle = FormBorderStyle.None,
                        BackColor = panel84.BackColor, // Set the background color to match panel colours
                        Opacity = 1, // Set the opacity to 100%
                        LabelColor = label77.ForeColor,
                        Location = panelScreenLocation // Set the location of the loadingScreen form
                    };
                    loadingScreen.Show(this);
                    partialLoadingScreenVisible = true;
                    await BriefPauseAsync(100).ConfigureAwait(true);
                }
                #endregion
                UpdateLoadingScreenMessage("please wait...", "Preparing lightning dashboard...");
                SuspendLayout();
                lblMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblMenuHighlightedButtonText.Visible = true;
                    lblMenuHighlightedButtonText.Text = "⚡dashboard";
                    lblMenuHighlightedButtonText.Location = new Point(lblMenuHighlightedButtonText.Location.X, btnMenuLightningDashboard.Location.Y);
                });
                lblMenuArrow.Invoke((MethodInvoker)delegate
                {
                    lblMenuArrow.Height = (int)(18 * UIScale);
                    lblMenuArrow.Location = new Point(lblMenuArrow.Location.X, btnMenuLightningDashboard.Location.Y);
                    lblMenuArrow.Visible = true;
                });
                await HideAllScreensAsync().ConfigureAwait(true);
                CloseCurrencyMenu();
                CloseThemeMenu();

                EnableAllMenuButtons();
                btnMenuLightningDashboard.Enabled = false;
                ResumeLayout(false);
                ToggleLoadingAnimation("enable");
                SuspendLayout();
                panelLightningDashboard.Invoke((MethodInvoker)delegate
                {
                    panelLightningDashboard.Visible = true;
                    panelLightningDashboard.Refresh();
                });
                if (!fullScreenLoadingScreenVisible && loadingScreen != null)
                {
                    #region close loading screen
                    //wait a moment to give time for screen to paint
                    await BriefPauseAsync(400).ConfigureAwait(true);
                    //close the loading screen
                    partialLoadingScreenVisible = false;
                    loadingScreen.Close();

                    if (wasOnTop)
                    {
                        this.TopMost = true;
                    }
                    #endregion
                }
                ResumeLayout(false);
                ToggleLoadingAnimation("disable");
                await CheckNetworkStatusAsync().ConfigureAwait(true);
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuLightningDashboard_Click");
            }
        }

        private async void BtnMenuCharts_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                #region display loading screen
                bool wasOnTop = false;
                
                if (!fullScreenLoadingScreenVisible)
                {
                    if (this.TopMost == true)
                    {
                        wasOnTop = true;
                        this.TopMost = false;
                    }

                    // work out the position to place the loading form
                    Point panelScreenLocation = lblNowViewing.PointToScreen(Point.Empty);
                    panelScreenLocation.Y -= (int)(160 * UIScale);
                    panelScreenLocation.X -= (int)(13 * UIScale);

                    loadingScreen = new LoadingScreen(UIScale)
                    {
                        Owner = this,
                        StartPosition = FormStartPosition.Manual, // Set the start position manually
                        FormBorderStyle = FormBorderStyle.None,
                        BackColor = panel84.BackColor, // Set the background color to match panel colours
                        Opacity = 1, // Set the opacity to 100%
                        LabelColor = label77.ForeColor,
                        Location = panelScreenLocation // Set the location of the loadingScreen form
                    };
                    loadingScreen.Show(this);
                    partialLoadingScreenVisible = true;
                    await BriefPauseAsync(100).ConfigureAwait(true);
                }
                #endregion
                UpdateLoadingScreenMessage("please wait...", "Preparing charts...");
                SuspendLayout();

                lblMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblMenuHighlightedButtonText.Visible = true;
                    lblMenuHighlightedButtonText.Text = "charts";
                    lblMenuHighlightedButtonText.Location = new Point(lblMenuHighlightedButtonText.Location.X, btnMenuCharts.Location.Y);
                });
                lblMenuArrow.Invoke((MethodInvoker)delegate
                {
                    lblMenuArrow.Height = (int)(18 * UIScale);
                    lblMenuArrow.Location = new Point(lblMenuArrow.Location.X, btnMenuCharts.Location.Y);
                    lblMenuArrow.Visible = true;
                });
                await HideAllScreensAsync().ConfigureAwait(true);
                CloseCurrencyMenu();
                CloseThemeMenu();

                EnableAllMenuButtons();
                btnMenuCharts.Enabled = false;
                ResumeLayout(false);
                ToggleLoadingAnimation("enable");
                SuspendLayout();
                if (!chartRendered)
                {
                    ChartFeeRatesAsync();
                    previouslyShownChart = 0;
                }
                panelCharts.Invoke((MethodInvoker)delegate
                {
                    panelCharts.Visible = true;
                    panelCharts.Refresh();
                });
                if (!fullScreenLoadingScreenVisible && loadingScreen != null)
                {
                    #region close loading screen
                    //wait a moment to give time for screen to paint
                    await BriefPauseAsync(2000).ConfigureAwait(true);
                    //close the loading screen
                    partialLoadingScreenVisible = false;
                    loadingScreen.Close();
                    if (wasOnTop)
                    {
                        this.TopMost = true;
                    }
                    #endregion
                }
                ResumeLayout(false);
                ToggleLoadingAnimation("disable");
                await CheckNetworkStatusAsync().ConfigureAwait(true);
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnMenuGraphs_Click");
            }
        }

        private async void BtnMenuAddress_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                #region display loading screen
                bool wasOnTop = false;
                
                if (!fullScreenLoadingScreenVisible)
                {
                    if (this.TopMost == true)
                    {
                        wasOnTop = true;
                        this.TopMost = false;
                    }

                    // work out the position to place the loading form
                    Point panelScreenLocation = lblNowViewing.PointToScreen(Point.Empty);
                    panelScreenLocation.Y -= (int)(160 * UIScale);
                    panelScreenLocation.X -= (int)(13 * UIScale);

                    loadingScreen = new LoadingScreen(UIScale)
                    {
                        Owner = this,
                        StartPosition = FormStartPosition.Manual, // Set the start position manually
                        FormBorderStyle = FormBorderStyle.None,
                        BackColor = panel84.BackColor, // Set the background color to match panel colours
                        Opacity = 1, // Set the opacity to 100%
                        LabelColor = label77.ForeColor,
                        Location = panelScreenLocation // Set the location of the loadingScreen form
                    };
                    loadingScreen.Show(this);
                    partialLoadingScreenVisible = true;
                    await BriefPauseAsync(100).ConfigureAwait(true);
                }
                #endregion
                UpdateLoadingScreenMessage("please wait...", "Preparing address (transactions)...");
                SuspendLayout();
                lblMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblMenuHighlightedButtonText.Visible = true;
                    lblMenuHighlightedButtonText.Text = "address - tx's";
                    lblMenuHighlightedButtonText.Location = new Point(lblMenuHighlightedButtonText.Location.X, btnMenuAddress.Location.Y);
                });
                lblMenuArrow.Invoke((MethodInvoker)delegate
                {
                    lblMenuArrow.Height = (int)(18 * UIScale);
                    lblMenuArrow.Location = new Point(lblMenuArrow.Location.X, btnMenuAddress.Location.Y);
                    lblMenuArrow.Visible = true;
                });
                await HideAllScreensAsync().ConfigureAwait(true);
                CloseCurrencyMenu();
                CloseThemeMenu();

                EnableAllMenuButtons();
                btnMenuAddress.Enabled = false;
                ResumeLayout(false);
                ToggleLoadingAnimation("enable");
                SuspendLayout();
                panelAddress.Invoke((MethodInvoker)delegate
                {
                    panelAddress.Visible = true;
                });

                Control[] controlsToRefresh = { panelAddress, panelAddressTxContainer, panel132, panelSubmittedAddressContainer, panelAddressResults };
                foreach (Control control in controlsToRefresh)
                {
                    if (control.InvokeRequired)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.Refresh();
                        });
                    }
                    else
                    {
                        control.Refresh();
                    }
                }

                if (String.Compare(NodeURL, "https://mempool.space/api/") == 0 || String.Compare(NodeURL, "https://mempool.space/testnet/api/") == 0)
                {
                    rowsReturnedByAddressTransactionsAPI = 25;
                    panelOwnNodeAddressTXInfo.Visible = false;
                }
                else
                {
                    if (AddressQRCodePicturebox.Visible)
                    {
                        rowsReturnedByAddressTransactionsAPI = 10;
                        panelOwnNodeAddressTXInfo.Visible = true;
                    }
                }
                if (!fullScreenLoadingScreenVisible && loadingScreen != null)
                {
                    #region close loading screen
                    //wait a moment to give time for screen to paint
                    await BriefPauseAsync(400).ConfigureAwait(true);
                    //close the loading screen
                    partialLoadingScreenVisible = false;
                    loadingScreen.Close();
                    if (wasOnTop)
                    {
                        this.TopMost = true;
                    }
                    #endregion
                }
                ResumeLayout(false);
                ToggleLoadingAnimation("disable");
                await CheckNetworkStatusAsync().ConfigureAwait(true);
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuAddress_Click");
            }
        }

        private async void BtnMenuAddressUTXO_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                #region display loading screen
                bool wasOnTop = false;
                
                if (!fullScreenLoadingScreenVisible)
                {
                    if (this.TopMost == true)
                    {
                        wasOnTop = true;
                        this.TopMost = false;
                    }

                    // work out the position to place the loading form
                    Point panelScreenLocation = lblNowViewing.PointToScreen(Point.Empty);
                    panelScreenLocation.Y -= (int)(160 * UIScale);
                    panelScreenLocation.X -= (int)(13 * UIScale);

                    loadingScreen = new LoadingScreen(UIScale)
                    {
                        Owner = this,
                        StartPosition = FormStartPosition.Manual, // Set the start position manually
                        FormBorderStyle = FormBorderStyle.None,
                        BackColor = panel84.BackColor, // Set the background color to match panel colours
                        Opacity = 1, // Set the opacity to 100%
                        LabelColor = label77.ForeColor,
                        Location = panelScreenLocation // Set the location of the loadingScreen form
                    };
                    loadingScreen.Show(this);
                    partialLoadingScreenVisible = true;
                    await BriefPauseAsync(100).ConfigureAwait(true);
                }
                #endregion
                UpdateLoadingScreenMessage("please wait...", "Preparing address (UTXO's)...");
                SuspendLayout();
                lblMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblMenuHighlightedButtonText.Visible = true;
                    lblMenuHighlightedButtonText.Text = "address utxo's";
                    lblMenuHighlightedButtonText.Location = new Point(lblMenuHighlightedButtonText.Location.X, btnMenuAddressUTXO.Location.Y);
                });
                lblMenuArrow.Invoke((MethodInvoker)delegate
                {
                    lblMenuArrow.Height = (int)(18 * UIScale);
                    lblMenuArrow.Location = new Point(lblMenuArrow.Location.X, btnMenuAddressUTXO.Location.Y);
                    lblMenuArrow.Visible = true;
                });
                await HideAllScreensAsync().ConfigureAwait(true);
                CloseCurrencyMenu();
                CloseThemeMenu();

                EnableAllMenuButtons();
                btnMenuAddressUTXO.Enabled = false;
                ResumeLayout();
                ToggleLoadingAnimation("enable");
                SuspendLayout();
                panelAddressUTXO.Invoke((MethodInvoker)delegate
                {
                    panelAddressUTXO.Visible = true;
                });

                Control[] controlsToRefresh = { panelAddressUTXO, panelSubmittedAddressContainerUTXO, panelAddressUTXOScrollContainer, panelUTXOsContainer, panel135, panelAddressUTXOScrollbarInner, panelAddressUTXOResults };
                foreach (Control control in controlsToRefresh)
                {
                    if (control.InvokeRequired)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.Refresh();
                        });
                    }
                    else
                    {
                        control.Refresh();
                    }
                }

                if (textboxSubmittedAddressUTXO.Text == "" || textboxSubmittedAddress.Text == null)
                {
                    AddressValidShowControlsUTXO();
                    AddressInvalidHideControlsUTXO();
                }
                if (!fullScreenLoadingScreenVisible && loadingScreen != null)
                {
                    #region close loading screen
                    //wait a moment to give time for screen to paint
                    await BriefPauseAsync(400).ConfigureAwait(true);
                    //close the loading screen
                    partialLoadingScreenVisible = false;
                    loadingScreen.Close();
                    if (wasOnTop)
                    {
                        this.TopMost = true;
                    }
                    #endregion
                }
                ResumeLayout(false);

                ToggleLoadingAnimation("disable");
                await CheckNetworkStatusAsync().ConfigureAwait(true);
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuAddressUTXO_Click");
            }
        }

        private async void BtnMenuBlock_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                #region display loading screen
                bool wasOnTop = false;
                
                if (!fullScreenLoadingScreenVisible)
                {
                    if (this.TopMost == true)
                    {
                        wasOnTop = true;
                        this.TopMost = false;
                    }

                    // work out the position to place the loading form
                    Point panelScreenLocation = lblNowViewing.PointToScreen(Point.Empty);
                    panelScreenLocation.Y -= (int)(160 * UIScale);
                    panelScreenLocation.X -= (int)(13 * UIScale);

                    loadingScreen = new LoadingScreen(UIScale)
                    {
                        Owner = this,
                        StartPosition = FormStartPosition.Manual, // Set the start position manually
                        FormBorderStyle = FormBorderStyle.None,
                        BackColor = panel84.BackColor, // Set the background color to match panel colours
                        Opacity = 1, // Set the opacity to 100%
                        LabelColor = label77.ForeColor,
                        Location = panelScreenLocation // Set the location of the loadingScreen form
                    };
                    loadingScreen.Show(this);
                    partialLoadingScreenVisible = true;
                    await BriefPauseAsync(100).ConfigureAwait(true);
                }
                #endregion
                UpdateLoadingScreenMessage("please wait...", "Preparing block view...");
                SuspendLayout();
                lblMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblMenuHighlightedButtonText.Visible = true;
                    lblMenuHighlightedButtonText.Text = "block";
                    lblMenuHighlightedButtonText.Location = new Point(lblMenuHighlightedButtonText.Location.X, btnMenuBlock.Location.Y);
                });
                lblMenuArrow.Invoke((MethodInvoker)delegate
                {
                    lblMenuArrow.Height = (int)(18 * UIScale);
                    lblMenuArrow.Location = new Point(lblMenuArrow.Location.X, btnMenuBlock.Location.Y);
                    lblMenuArrow.Visible = true;
                });
                await HideAllScreensAsync().ConfigureAwait(true);
                CloseCurrencyMenu();
                CloseThemeMenu();

                EnableAllMenuButtons();
                btnMenuBlock.Enabled = false;
                ResumeLayout(false);
                ToggleLoadingAnimation("enable");
                SuspendLayout();
                if (String.Compare(numericUpDownSubmittedBlockNumber.Text, "673298") == 0)
                {
                    numericUpDownSubmittedBlockNumber.Invoke((MethodInvoker)delegate
                    {
                        numericUpDownSubmittedBlockNumber.Text = lblHeaderBlockNumber.Text; // pre-populate the block field on the Block screen)
                    });
                    LookupBlockAsync(); // fetch all the block data automatically for the initial view. 
                }
                panelBlock.Invoke((MethodInvoker)delegate
                {
                    panelBlock.Visible = true;
                });

                Control[] controlsToRefresh = { panelBlock, panel53, panel56, panel121, panel122 };
                foreach (Control control in controlsToRefresh)
                {
                    if (control.InvokeRequired)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.Refresh();
                        });
                    }
                    else
                    {
                        control.Refresh();
                    }
                }

                if (String.Compare(NodeURL, "https://mempool.space/api/") == 0 || String.Compare(NodeURL, "https://mempool.space/testnet/api/") == 0)
                {
                    rowsReturnedByBlockTransactionsAPI = 25;
                    panelOwnNodeBlockTXInfo.Visible = false;
                }
                else
                {
                    rowsReturnedByBlockTransactionsAPI = 10;
                    panelOwnNodeBlockTXInfo.Visible = true;
                }
                ResumeLayout(false);
                await CheckNetworkStatusAsync().ConfigureAwait(true);
                if (!fullScreenLoadingScreenVisible && loadingScreen != null)
                {
                    #region close loading screen
                    //wait a moment to give time for screen to paint
                    await BriefPauseAsync(400).ConfigureAwait(true);
                    //close the loading screen
                    partialLoadingScreenVisible = false;
                    loadingScreen.Close();
                    if (wasOnTop)
                    {
                        this.TopMost = true;
                    }
                    #endregion
                }
                ToggleLoadingAnimation("disable");
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuBlock_Click");
            }
        }

        private async void BtnMenuXpub_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                #region display loading screen
                bool wasOnTop = false;
                
                if (!fullScreenLoadingScreenVisible)
                {
                    if (this.TopMost == true)
                    {
                        wasOnTop = true;
                        this.TopMost = false;
                    }

                    // work out the position to place the loading form
                    Point panelScreenLocation = lblNowViewing.PointToScreen(Point.Empty);
                    panelScreenLocation.Y -= (int)(160 * UIScale);
                    panelScreenLocation.X -= (int)(13 * UIScale);

                    loadingScreen = new LoadingScreen(UIScale)
                    {
                        Owner = this,
                        StartPosition = FormStartPosition.Manual, // Set the start position manually
                        FormBorderStyle = FormBorderStyle.None,
                        BackColor = panel84.BackColor, // Set the background color to match panel colours
                        Opacity = 1, // Set the opacity to 100%
                        LabelColor = label77.ForeColor,
                        Location = panelScreenLocation // Set the location of the loadingScreen form
                    };
                    loadingScreen.Show(this);
                    partialLoadingScreenVisible = true;
                    await BriefPauseAsync(100).ConfigureAwait(true);
                }
                #endregion
                UpdateLoadingScreenMessage("please wait...", "Preparing xpub view...");
                SuspendLayout();
                lblMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblMenuHighlightedButtonText.Visible = true;
                    lblMenuHighlightedButtonText.Text = "xpub";
                    lblMenuHighlightedButtonText.Location = new Point(lblMenuHighlightedButtonText.Location.X, btnMenuXpub.Location.Y);
                });
                lblMenuArrow.Invoke((MethodInvoker)delegate
                {
                    lblMenuArrow.Height = (int)(18 * UIScale);
                    lblMenuArrow.Location = new Point(lblMenuArrow.Location.X, btnMenuXpub.Location.Y);
                    lblMenuArrow.Visible = true;
                });
                await HideAllScreensAsync().ConfigureAwait(true);

                CloseCurrencyMenu();
                CloseThemeMenu();
                EnableAllMenuButtons();
                btnMenuXpub.Enabled = false;
                ResumeLayout(false);
                ToggleLoadingAnimation("enable");
                SuspendLayout();
                panelXpub.Invoke((MethodInvoker)delegate
                {
                    panelXpub.Visible = true;
                });

                Control[] controlsToRefresh = { panelXpub, panel99, panel101, panelXpubContainer, panelXpubScrollbarInner, panelXpubResults, panelXpubScrollContainer, panelXpubAllResults };
                foreach (Control control in controlsToRefresh)
                {
                    if (control.InvokeRequired)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.Refresh();
                        });
                    }
                    else
                    {
                        control.Refresh();
                    }
                }

                if (!fullScreenLoadingScreenVisible && loadingScreen != null)
                {
                    #region close loading screen
                    //wait a moment to give time for screen to paint
                    await BriefPauseAsync(400).ConfigureAwait(true);
                    //close the loading screen
                    partialLoadingScreenVisible = false;
                    loadingScreen.Close();
                    if (wasOnTop)
                    {
                        this.TopMost = true;
                    }
                    #endregion
                }
                ResumeLayout(false);
                ToggleLoadingAnimation("disable");
                await CheckNetworkStatusAsync().ConfigureAwait(true);
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuXpub_Click");
            }
        }

        private async void BtnMenuBlockList_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                #region display loading screen
                bool wasOnTop = false;
                if (!fullScreenLoadingScreenVisible)
                {
                    if (this.TopMost == true)
                    {
                        wasOnTop = true;
                        this.TopMost = false;
                    }

                    // work out the position to place the loading form
                    Point panelScreenLocation = lblNowViewing.PointToScreen(Point.Empty);
                    panelScreenLocation.Y -= (int)(160 * UIScale);
                    panelScreenLocation.X -= (int)(13 * UIScale);

                    loadingScreen = new LoadingScreen(UIScale)
                    {
                        Owner = this,
                        StartPosition = FormStartPosition.Manual, // Set the start position manually
                        FormBorderStyle = FormBorderStyle.None,
                        BackColor = panel84.BackColor, // Set the background color to match panel colours
                        Opacity = 1, // Set the opacity to 100%
                        LabelColor = label77.ForeColor,
                        Location = panelScreenLocation // Set the location of the loadingScreen form
                    };
                    loadingScreen.Show(this);
                    partialLoadingScreenVisible = true;
                    await BriefPauseAsync(100).ConfigureAwait(true);
                }
                #endregion
                UpdateLoadingScreenMessage("please wait...", "Preparing block list view...");
                SuspendLayout();
                lblMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblMenuHighlightedButtonText.Visible = true;
                    lblMenuHighlightedButtonText.Text = "blocks";
                    lblMenuHighlightedButtonText.Location = new Point(lblMenuHighlightedButtonText.Location.X, btnMenuBlockList.Location.Y);
                });
                lblMenuArrow.Invoke((MethodInvoker)delegate
                {
                    lblMenuArrow.Height = (int)(18 * UIScale);
                    lblMenuArrow.Location = new Point(lblMenuArrow.Location.X, btnMenuBlockList.Location.Y);
                    lblMenuArrow.Visible = true;
                });
                await HideAllScreensAsync().ConfigureAwait(true);
                CloseCurrencyMenu();
                CloseThemeMenu();

                btnMenuBlockList.Enabled = false;
                EnableAllMenuButtons();
                btnMenuBlockList.Enabled = false;
                ResumeLayout(false);
                ToggleLoadingAnimation("enable");
                SuspendLayout();
                if (String.Compare(numericUpDownBlockHeightToStartListFrom.Text, "673298") == 0)
                {
                    numericUpDownBlockHeightToStartListFrom.Invoke((MethodInvoker)delegate
                    {
                        numericUpDownBlockHeightToStartListFrom.Text = lblHeaderBlockNumber.Text; // pre-populate the block field on the Block screen)
                    });
                    LookupBlockListAsync(); // fetch the first 15 blocks automatically for the initial view.
                }
                panelBlockList.Invoke((MethodInvoker)delegate
                {
                    panelBlockList.Visible = true;
                });

                Control[] controlsToRefresh = { panelBlockList, panel94, panel117, panel20 };
                foreach (Control control in controlsToRefresh)
                {
                    if (control.InvokeRequired)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.Refresh();
                        });
                    }
                    else
                    {
                        control.Refresh();
                    }
                }

                await CheckNetworkStatusAsync().ConfigureAwait(true);
                if (!fullScreenLoadingScreenVisible && loadingScreen != null)
                {
                    #region close loading screen
                    //wait a moment to give time for screen to paint
                    await BriefPauseAsync(400).ConfigureAwait(true);
                    //close the loading screen
                    partialLoadingScreenVisible = false;
                    loadingScreen.Close();
                    if (wasOnTop)
                    {
                        this.TopMost = true;
                    }
                    #endregion
                }
                ResumeLayout(false);
                ToggleLoadingAnimation("disable");
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuBlockList_Click");
            }
        }

        private async void BtnMenuPoolsByBlocks_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                #region display loading screen
                bool wasOnTop = false;
                
                if (!fullScreenLoadingScreenVisible)
                {
                    if (this.TopMost == true)
                    {
                        wasOnTop = true;
                        this.TopMost = false;
                    }

                    // work out the position to place the loading form
                    Point panelScreenLocation = lblNowViewing.PointToScreen(Point.Empty);
                    panelScreenLocation.Y -= (int)(160 * UIScale);
                    panelScreenLocation.X -= (int)(13 * UIScale);

                    loadingScreen = new LoadingScreen(UIScale)
                    {
                        Owner = this,
                        StartPosition = FormStartPosition.Manual, // Set the start position manually
                        FormBorderStyle = FormBorderStyle.None,
                        BackColor = panel84.BackColor, // Set the background color to match panel colours
                        Opacity = 1, // Set the opacity to 100%
                        LabelColor = label77.ForeColor,
                        Location = panelScreenLocation // Set the location of the loadingScreen form
                    };
                    loadingScreen.Show(this);
                    partialLoadingScreenVisible = true;
                    await BriefPauseAsync(100).ConfigureAwait(true);
                }
                #endregion
                UpdateLoadingScreenMessage("please wait...", "Preparing pool rankings (by blocks mined)...");
                lblMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblMenuHighlightedButtonText.Visible = true;
                    lblMenuHighlightedButtonText.Text = "pools - blocks";
                    lblMenuHighlightedButtonText.Location = new Point(lblMenuHighlightedButtonText.Location.X, btnMenuPoolsByBlocks.Location.Y);
                });
                lblMenuArrow.Invoke((MethodInvoker)delegate
                {
                    lblMenuArrow.Height = (int)(18 * UIScale);
                    lblMenuArrow.Location = new Point(lblMenuArrow.Location.X, btnMenuPoolsByBlocks.Location.Y);
                    lblMenuArrow.Visible = true;
                });
                await HideAllScreensAsync().ConfigureAwait(true);
                CloseCurrencyMenu();
                CloseThemeMenu();

                EnableAllMenuButtons();
                btnMenuPoolsByBlocks.Enabled = false;
                ToggleLoadingAnimation("enable");
                SuspendLayout();

                SetupPoolsByBlocksScreenAsync();

                panelMiningBlocks.Invoke((MethodInvoker)delegate
                {
                    panelMiningBlocks.Visible = true;
                });
                panelChartsForPoolsScreen.Invoke((MethodInvoker)delegate
                {
                    panelChartsForPoolsScreen.Visible = true;
                    panelChartsForPoolsScreen.BringToFront();
                });

                Control[] controlsToRefresh = { panelMiningBlocks, panelPoolsBlocksContainer, panelPoolsBlocksScrollContainer, panelPoolsBlocksScrollbarInner, panelChartsForPoolsScreen, panel80, panel153 };
                foreach (Control control in controlsToRefresh)
                {
                    if (control.InvokeRequired)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.Refresh();
                        });
                    }
                    else
                    {
                        control.Refresh();
                    }
                }

                await CheckNetworkStatusAsync().ConfigureAwait(true);
                if (!fullScreenLoadingScreenVisible && loadingScreen != null)
                {
                    #region close loading screen
                    //wait a moment to give time for screen to paint
                    await BriefPauseAsync(400).ConfigureAwait(true);
                    //close the loading screen
                    partialLoadingScreenVisible = false;
                    loadingScreen.Close();
                    if (wasOnTop)
                    {
                        this.TopMost = true;
                    }
                    #endregion
                }
                ResumeLayout(false);
                ToggleLoadingAnimation("disable");
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuPoolsByBlocks_Click");
            }
        }

        private async void BtnMenuPoolsByHashrate_ClickAsync()
        {
            try
            {
                #region display loading screen
                bool wasOnTop = false;
                
                if (!fullScreenLoadingScreenVisible)
                {
                    if (this.TopMost == true)
                    {
                        wasOnTop = true;
                        this.TopMost = false;
                    }

                    // work out the position to place the loading form
                    Point panelScreenLocation = lblNowViewing.PointToScreen(Point.Empty);
                    panelScreenLocation.Y -= (int)(160 * UIScale);
                    panelScreenLocation.X -= (int)(13 * UIScale);

                    loadingScreen = new LoadingScreen(UIScale)
                    {
                        Owner = this,
                        StartPosition = FormStartPosition.Manual, // Set the start position manually
                        FormBorderStyle = FormBorderStyle.None,
                        BackColor = panel84.BackColor, // Set the background color to match panel colours
                        Opacity = 1, // Set the opacity to 100%
                        LabelColor = label77.ForeColor,
                        Location = panelScreenLocation // Set the location of the loadingScreen form
                    };
                    loadingScreen.Show(this);
                    partialLoadingScreenVisible = true;
                    await BriefPauseAsync(100).ConfigureAwait(true);
                }
                #endregion
                UpdateLoadingScreenMessage("please wait...", "Preparing pool rankings (by hashrate)...");
                lblMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblMenuHighlightedButtonText.Visible = true;
                    lblMenuHighlightedButtonText.Text = "pools - hashrate";
                    lblMenuHighlightedButtonText.Location = new Point(lblMenuHighlightedButtonText.Location.X, btnMenuPoolsByBlocks.Location.Y);
                });
                lblMenuArrow.Invoke((MethodInvoker)delegate
                {
                    lblMenuArrow.Height = (int)(18 * UIScale);
                    lblMenuArrow.Location = new Point(lblMenuArrow.Location.X, btnMenuPoolsByBlocks.Location.Y);
                    lblMenuArrow.Visible = true;
                });
                await HideAllScreensAsync().ConfigureAwait(true);

                CloseCurrencyMenu();
                CloseThemeMenu();
                EnableAllMenuButtons();
                btnMenuPoolsByBlocks.Enabled = false;
                ToggleLoadingAnimation("enable");
                SuspendLayout();
                SetupPoolsByHashrateScreenAsync();
                panelMiningHashrate.Invoke((MethodInvoker)delegate
                {
                    panelMiningHashrate.Visible = true;
                });
                panelChartsForPoolsScreen.Invoke((MethodInvoker)delegate
                {
                    panelChartsForPoolsScreen.Visible = true;
                    panelChartsForPoolsScreen.BringToFront();
                });

                Control[] controlsToRefresh = { panelMiningHashrate, panelPoolsHashrateContainer, panel147, panelChartsForPoolsScreen, panel80, panel153 };
                foreach (Control control in controlsToRefresh)
                {
                    if (control.InvokeRequired)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.Refresh();
                        });
                    }
                    else
                    {
                        control.Refresh();
                    }
                }

                await CheckNetworkStatusAsync().ConfigureAwait(true);
                if (!fullScreenLoadingScreenVisible && loadingScreen != null)
                {
                    #region close loading screen
                    //wait a moment to give time for screen to paint
                    await BriefPauseAsync(400).ConfigureAwait(true);
                    //close the loading screen
                    partialLoadingScreenVisible = false;
                    loadingScreen.Close();
                    if (wasOnTop)
                    {
                        this.TopMost = true;
                    }
                    #endregion
                }
                ResumeLayout(false);
                ToggleLoadingAnimation("disable");
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuPoolsByHashrate_Click");
            }
        }

        private async void BtnMenuMiningPools_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                #region display loading screen
                bool wasOnTop = false;
                
                if (!fullScreenLoadingScreenVisible)
                {
                    if (this.TopMost == true)
                    {
                        wasOnTop = true;
                        this.TopMost = false;
                    }

                    // work out the position to place the loading form
                    Point panelScreenLocation = lblNowViewing.PointToScreen(Point.Empty);
                    panelScreenLocation.Y -= (int)(160 * UIScale);
                    panelScreenLocation.X -= (int)(13 * UIScale);

                    loadingScreen = new LoadingScreen(UIScale)
                    {
                        Owner = this,
                        StartPosition = FormStartPosition.Manual, // Set the start position manually
                        FormBorderStyle = FormBorderStyle.None,
                        BackColor = panel84.BackColor, // Set the background color to match panel colours
                        Opacity = 1, // Set the opacity to 100%
                        LabelColor = label77.ForeColor,
                        Location = panelScreenLocation // Set the location of the loadingScreen form
                    };
                    loadingScreen.Show(this);
                    partialLoadingScreenVisible = true;
                    await BriefPauseAsync(100).ConfigureAwait(true);
                }
                #endregion
                UpdateLoadingScreenMessage("please wait...", "Preparing mining pools list...");
                lblMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblMenuHighlightedButtonText.Visible = true;
                    lblMenuHighlightedButtonText.Text = "mining pools";
                    lblMenuHighlightedButtonText.Location = new Point(lblMenuHighlightedButtonText.Location.X, btnMenuMiningPools.Location.Y);
                });
                lblMenuArrow.Invoke((MethodInvoker)delegate
                {
                    lblMenuArrow.Height = (int)(18 * UIScale);
                    lblMenuArrow.Location = new Point(lblMenuArrow.Location.X, btnMenuMiningPools.Location.Y);
                    lblMenuArrow.Visible = true;
                });
                await HideAllScreensAsync().ConfigureAwait(true);
                CloseCurrencyMenu();
                CloseThemeMenu();

                EnableAllMenuButtons();
                btnMenuMiningPools.Enabled = false;
                ToggleLoadingAnimation("enable");
                SuspendLayout();
                panelMiningPools.Invoke((MethodInvoker)delegate
                {
                    panelMiningPools.Visible = true;
                    panelMiningPools.Refresh();
                    panelMiningPools.BringToFront();
                });

                SetupPoolScreenAsync();

                Control[] controlsToRefresh = { panelPoolsListContainer, panelPoolsListScrollbarInner, panelPoolsListScrollbarOuter, panelPoolsListScrollContainer, panel124, panelBlocksByPoolContainer, panel158 };
                foreach (Control control in controlsToRefresh)
                {
                    if (control.InvokeRequired)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.Refresh();
                        });
                    }
                    else
                    {
                        control.Refresh();
                    }
                }

                await CheckNetworkStatusAsync().ConfigureAwait(true);
                if (!fullScreenLoadingScreenVisible && loadingScreen != null)
                {
                    #region close loading screen
                    //wait a moment to give time for screen to paint
                    await BriefPauseAsync(400).ConfigureAwait(true);
                    //close the loading screen
                    partialLoadingScreenVisible = false;
                    loadingScreen.Close();
                    if (wasOnTop)
                    {
                        this.TopMost = true;
                    }
                    #endregion
                }
                ResumeLayout(false);
                ToggleLoadingAnimation("disable");
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuMiningPools_Click");
            }
        }

        private async void BtnMenuTransaction_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                #region display loading screen
                bool wasOnTop = false;
                
                if (!fullScreenLoadingScreenVisible)
                {
                    if (this.TopMost == true)
                    {
                        wasOnTop = true;
                        this.TopMost = false;
                    }

                    // work out the position to place the loading form
                    Point panelScreenLocation = lblNowViewing.PointToScreen(Point.Empty);
                    panelScreenLocation.Y -= (int)(160 * UIScale);
                    panelScreenLocation.X -= (int)(13 * UIScale);

                    loadingScreen = new LoadingScreen(UIScale)
                    {
                        Owner = this,
                        StartPosition = FormStartPosition.Manual, // Set the start position manually
                        FormBorderStyle = FormBorderStyle.None,
                        BackColor = panel84.BackColor, // Set the background color to match panel colours
                        Opacity = 1, // Set the opacity to 100%
                        LabelColor = label77.ForeColor,
                        Location = panelScreenLocation // Set the location of the loadingScreen form
                    };
                    loadingScreen.Show(this);
                    partialLoadingScreenVisible = true;
                    await BriefPauseAsync(100).ConfigureAwait(true);
                }
                #endregion
                UpdateLoadingScreenMessage("please wait...", "Preparing transaction view...");
                SuspendLayout();
                lblMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblMenuHighlightedButtonText.Visible = true;
                    lblMenuHighlightedButtonText.Text = "transaction";
                    lblMenuHighlightedButtonText.Location = new Point(lblMenuHighlightedButtonText.Location.X, btnMenuTransaction.Location.Y);
                });
                lblMenuArrow.Invoke((MethodInvoker)delegate
                {
                    lblMenuArrow.Height = (int)(18 * UIScale);
                    lblMenuArrow.Location = new Point(lblMenuArrow.Location.X, btnMenuTransaction.Location.Y);
                    lblMenuArrow.Visible = true;
                });
                await HideAllScreensAsync().ConfigureAwait(true);
                CloseCurrencyMenu();
                CloseThemeMenu();

                EnableAllMenuButtons();
                btnMenuTransaction.Enabled = false;
                ResumeLayout(false);
                ToggleLoadingAnimation("enable");
                SuspendLayout();

                panelTransaction.Invoke((MethodInvoker)delegate
                {
                    panelTransaction.Visible = true;
                });

                ResumeLayout(false);





                Control[] controlsToRefresh = { panelTransactionMiddle, panelTransactionInputs, panelTransactionOutputs, panelTransactionInTab, panelTransactionOutTab, panelTXOutScrollContainer, panelTransactionIDContainer, panelTXInScrollContainer, panelTransactionResults, panelTransaction };
                foreach (Control control in controlsToRefresh)
                {
                    if (control.InvokeRequired)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.Refresh();
                        });
                    }
                    else
                    {
                        control.Refresh();
                    }
                }
                panelTransaction.Refresh();

                if (!fullScreenLoadingScreenVisible && loadingScreen != null)
                {
                    #region close loading screen
                    //wait a moment to give time for screen to paint
                    await BriefPauseAsync(1500).ConfigureAwait(true);
                    //close the loading screen
                    partialLoadingScreenVisible = false;
                    loadingScreen.Close();
                    if (wasOnTop)
                    {
                        this.TopMost = true;
                    }
                    #endregion
                }

                //ResumeLayout(false);
                ToggleLoadingAnimation("disable");
                await CheckNetworkStatusAsync().ConfigureAwait(true);
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuTransaction_Click");
            }
        }

        private async void BtnMenuBookmarks_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                #region display loading screen
                bool wasOnTop = false;
                
                if (!fullScreenLoadingScreenVisible)
                {
                    if (this.TopMost == true)
                    {
                        wasOnTop = true;
                        this.TopMost = false;
                    }

                    // work out the position to place the loading form
                    Point panelScreenLocation = lblNowViewing.PointToScreen(Point.Empty);
                    panelScreenLocation.Y -= (int)(160 * UIScale);
                    panelScreenLocation.X -= (int)(13 * UIScale);

                    loadingScreen = new LoadingScreen(UIScale)
                    {
                        Owner = this,
                        StartPosition = FormStartPosition.Manual, // Set the start position manually
                        FormBorderStyle = FormBorderStyle.None,
                        BackColor = panel84.BackColor, // Set the background color to match panel colours
                        Opacity = 1, // Set the opacity to 100%
                        LabelColor = label77.ForeColor,
                        Location = panelScreenLocation // Set the location of the loadingScreen form
                    };
                    loadingScreen.Show(this);
                    partialLoadingScreenVisible = true;
                    await BriefPauseAsync(100).ConfigureAwait(true);
                }
                #endregion
                UpdateLoadingScreenMessage("please wait...", "Preparing bookmarks...");
                SuspendLayout();
                lblMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblMenuHighlightedButtonText.Visible = true;
                    lblMenuHighlightedButtonText.Text = "bookmarks";
                    lblMenuHighlightedButtonText.Location = new Point(lblMenuHighlightedButtonText.Location.X, btnMenuBookmarks.Location.Y);
                });
                lblMenuArrow.Invoke((MethodInvoker)delegate
                {
                    lblMenuArrow.Height = (int)(18 * UIScale);
                    lblMenuArrow.Location = new Point(lblMenuArrow.Location.X, btnMenuBookmarks.Location.Y);
                    lblMenuArrow.Visible = true;
                });
                await HideAllScreensAsync().ConfigureAwait(true);
                CloseCurrencyMenu();
                CloseThemeMenu();

                EnableAllMenuButtons();
                btnMenuBookmarks.Enabled = false;
                ResumeLayout(false);
                ToggleLoadingAnimation("enable");
                SuspendLayout();
                SetupBookmarksScreen();
                panelBookmarks.Invoke((MethodInvoker)delegate
                {
                    panelBookmarks.Visible = true;
                });

                Control[] controlsToRefresh = { panelBookmarks, panel32, panelBookmarksScrollContainer, panelBookmarksContainer, panelBookmarksScrollbarInner };
                foreach (Control control in controlsToRefresh)
                {
                    if (control.InvokeRequired)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.Refresh();
                        });
                    }
                    else
                    {
                        control.Refresh();
                    }
                }

                if (!fullScreenLoadingScreenVisible && loadingScreen != null)
                {
                    #region close loading screen
                    //wait a moment to give time for screen to paint
                    await BriefPauseAsync(700).ConfigureAwait(true);
                    //close the loading screen
                    partialLoadingScreenVisible = false;
                    loadingScreen.Close();
                    if (wasOnTop)
                    {
                        this.TopMost = true;
                    }
                    #endregion
                }
                ResumeLayout(false);
                ToggleLoadingAnimation("disable");
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnMenuBookmarks_Click");
            }
        }

        private async void BtnMenuPriceConverter_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                #region display loading screen
                bool wasOnTop = false;
                
                if (!fullScreenLoadingScreenVisible)
                {
                    if (this.TopMost == true)
                    {
                        wasOnTop = true;
                        this.TopMost = false;
                    }

                    // work out the position to place the loading form
                    Point panelScreenLocation = lblNowViewing.PointToScreen(Point.Empty);
                    panelScreenLocation.Y -= (int)(160 * UIScale);
                    panelScreenLocation.X -= (int)(13 * UIScale);

                    loadingScreen = new LoadingScreen(UIScale)
                    {
                        Owner = this,
                        StartPosition = FormStartPosition.Manual, // Set the start position manually
                        FormBorderStyle = FormBorderStyle.None,
                        BackColor = panel84.BackColor, // Set the background color to match panel colours
                        Opacity = 1, // Set the opacity to 100%
                        LabelColor = label77.ForeColor,
                        Location = panelScreenLocation // Set the location of the loadingScreen form
                    };
                    loadingScreen.Show(this);
                    partialLoadingScreenVisible = true;
                    await BriefPauseAsync(100).ConfigureAwait(true);
                }
                #endregion
                UpdateLoadingScreenMessage("please wait...", "Preparing btc/fiat converter...");
                SuspendLayout();
                lblMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblMenuHighlightedButtonText.Visible = true;
                    lblMenuHighlightedButtonText.Text = "convert fiat/btc";
                    lblMenuHighlightedButtonText.Location = new Point(lblMenuHighlightedButtonText.Location.X, btnMenuPriceConverter.Location.Y);
                });
                lblMenuArrow.Invoke((MethodInvoker)delegate
                {
                    lblMenuArrow.Height = (int)(18 * UIScale);
                    lblMenuArrow.Location = new Point(lblMenuArrow.Location.X, btnMenuPriceConverter.Location.Y);
                    lblMenuArrow.Visible = true;
                });
                await HideAllScreensAsync().ConfigureAwait(true);
                CloseCurrencyMenu();
                CloseThemeMenu();

                EnableAllMenuButtons();
                btnMenuPriceConverter.Enabled = false;
                ResumeLayout(false);
                ToggleLoadingAnimation("enable");
                SuspendLayout();
                await CheckNetworkStatusAsync().ConfigureAwait(true);
                PopulateConverterScreen();
                panelPriceConverter.Invoke((MethodInvoker)delegate
                {
                    panelPriceConverter.Visible = true;
                });

                Control[] controlsToRefresh = { panelPriceConverter, panelPriceConvert, panel119 };
                foreach (Control control in controlsToRefresh)
                {
                    if (control.InvokeRequired)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.Refresh();
                        });
                    }
                    else
                    {
                        control.Refresh();
                    }
                }

                if (!fullScreenLoadingScreenVisible && loadingScreen != null)
                {
                    #region close loading screen
                    //wait a moment to give time for screen to paint
                    await BriefPauseAsync(700).ConfigureAwait(true);
                    //close the loading screen
                    partialLoadingScreenVisible = false;
                    loadingScreen.Close();
                    if (wasOnTop)
                    {
                        this.TopMost = true;
                    }
                    #endregion
                }
                ResumeLayout(false);
                ToggleLoadingAnimation("disable");
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuPriceConverter_Click");
            }
        }

        private async void BtnMenuDCACalculator_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                #region display loading screen
                bool wasOnTop = false;
                
                if (!fullScreenLoadingScreenVisible)
                {
                    if (this.TopMost == true)
                    {
                        wasOnTop = true;
                        this.TopMost = false;
                    }

                    // work out the position to place the loading form
                    Point panelScreenLocation = lblNowViewing.PointToScreen(Point.Empty);
                    panelScreenLocation.Y -= (int)(160 * UIScale);
                    panelScreenLocation.X -= (int)(13 * UIScale);

                    loadingScreen = new LoadingScreen(UIScale)
                    {
                        Owner = this,
                        StartPosition = FormStartPosition.Manual, // Set the start position manually
                        FormBorderStyle = FormBorderStyle.None,
                        BackColor = panel84.BackColor, // Set the background color to match panel colours
                        Opacity = 1, // Set the opacity to 100%
                        LabelColor = label77.ForeColor,
                        Location = panelScreenLocation // Set the location of the loadingScreen form
                    };
                    loadingScreen.Show(this);
                    partialLoadingScreenVisible = true;
                    await BriefPauseAsync(100).ConfigureAwait(true);
                }
                #endregion
                UpdateLoadingScreenMessage("please wait...", "Preparing DCA calculator...");
                SuspendLayout();
                lblMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblMenuHighlightedButtonText.Visible = true;
                    lblMenuHighlightedButtonText.Text = "dca calculator";
                    lblMenuHighlightedButtonText.Location = new Point(lblMenuHighlightedButtonText.Location.X, btnMenuDCACalculator.Location.Y);
                });
                lblMenuArrow.Invoke((MethodInvoker)delegate
                {
                    lblMenuArrow.Height = (int)(18 * UIScale);
                    lblMenuArrow.Location = new Point(lblMenuArrow.Location.X, btnMenuDCACalculator.Location.Y);
                    lblMenuArrow.Visible = true;
                });
                await HideAllScreensAsync().ConfigureAwait(true);
                CloseCurrencyMenu();
                CloseThemeMenu();

                EnableAllMenuButtons();
                btnMenuDCACalculator.Enabled = false;
                ResumeLayout(false);
                ToggleLoadingAnimation("enable");
                SuspendLayout();

                if (!DCAChartRendered)
                {
                    // populate dca chart if the api is enabled
                    if (OneBTCinSelectedCurrency > 0)
                    {
                        PopulateDCACalculatorAsync();
                    }
                }

                panelDCACalculator.Invoke((MethodInvoker)delegate
                {
                    panelDCACalculator.Visible = true;
                });

                Control[] controlsToRefresh = { panelDCACalculator, panelDCAInputs, panelDCASummary, panelDCAChartContainer };
                foreach (Control control in controlsToRefresh)
                {
                    if (control.InvokeRequired)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.Refresh();
                        });
                    }
                    else
                    {
                        control.Refresh();
                    }
                }

                if (!fullScreenLoadingScreenVisible && loadingScreen != null)
                {
                    #region close loading screen
                    //wait a moment to give time for screen to paint
                    await BriefPauseAsync(2000).ConfigureAwait(true);
                    //close the loading screen
                    partialLoadingScreenVisible = false;
                    loadingScreen.Close();
                    if (wasOnTop)
                    {
                        this.TopMost = true;
                    }
                    #endregion
                }
                ResumeLayout(false);
                ToggleLoadingAnimation("disable");
                await CheckNetworkStatusAsync().ConfigureAwait(true);
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnMenuDCACalculator_Click");
            }
        }

        private async void BtnMenuDirectory_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                #region display loading screen
                bool wasOnTop = false;
                
                if (!fullScreenLoadingScreenVisible)
                {
                    if (this.TopMost == true)
                    {
                        wasOnTop = true;
                        this.TopMost = false;
                    }

                    // work out the position to place the loading form
                    Point panelScreenLocation = lblNowViewing.PointToScreen(Point.Empty);
                    panelScreenLocation.Y -= (int)(160 * UIScale);
                    panelScreenLocation.X -= (int)(13 * UIScale);

                    loadingScreen = new LoadingScreen(UIScale)
                    {
                        Owner = this,
                        StartPosition = FormStartPosition.Manual, // Set the start position manually
                        FormBorderStyle = FormBorderStyle.None,
                        BackColor = panel84.BackColor, // Set the background color to match panel colours
                        Opacity = 1, // Set the opacity to 100%
                        LabelColor = label77.ForeColor,
                        Location = panelScreenLocation // Set the location of the loadingScreen form
                    };
                    loadingScreen.Show(this);
                    partialLoadingScreenVisible = true;
                    await BriefPauseAsync(100).ConfigureAwait(true);
                }
                #endregion
                UpdateLoadingScreenMessage("please wait...", "Preparing directory...");
                await HideAllScreensAsync().ConfigureAwait(true);
                SuspendLayout();
                lblMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblMenuHighlightedButtonText.Visible = true;
                    lblMenuHighlightedButtonText.Text = "directory";
                    lblMenuHighlightedButtonText.Location = new Point(lblMenuHighlightedButtonText.Location.X, btnMenuDirectory.Location.Y);
                });
                lblMenuArrow.Invoke((MethodInvoker)delegate
                {
                    lblMenuArrow.Height = (int)(18 * UIScale);
                    lblMenuArrow.Location = new Point(lblMenuArrow.Location.X, btnMenuDirectory.Location.Y);
                    lblMenuArrow.Visible = true;
                });

                CloseCurrencyMenu();
                CloseThemeMenu();

                EnableAllMenuButtons();
                this.DoubleBuffered = true;
                btnMenuDirectory.Enabled = false;
                ResumeLayout(false);
                ToggleLoadingAnimation("enable");
                SuspendLayout();
                panelDirectory.Invoke((MethodInvoker)delegate
                {
                    panelDirectory.Visible = true;
                });

                Control[] controlsToRefresh = { panelDirectory, panel16, panel18 };
                foreach (Control control in controlsToRefresh)
                {
                    if (control.InvokeRequired)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.Refresh();
                        });
                    }
                    else
                    {
                        control.Refresh();
                    }
                }


                if (!fullScreenLoadingScreenVisible && loadingScreen != null)
                {
                    #region close loading screen
                    //wait a moment to give time for screen to paint
                    await BriefPauseAsync(700).ConfigureAwait(true);
                    //close the loading screen
                    partialLoadingScreenVisible = false;
                    loadingScreen.Close();
                    if (wasOnTop)
                    {
                        this.TopMost = true;
                    }
                    #endregion
                }
                ResumeLayout(false);
                ToggleLoadingAnimation("disable");
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnMenuDirectory_Click");
            }
        }

        private async void BtnMenuSettings_ClickAsync(object sender, EventArgs e)
        {
            try
            {
                #region display loading screen
                bool wasOnTop = false;
                
                if (!fullScreenLoadingScreenVisible)
                {
                    if (this.TopMost == true)
                    {
                        wasOnTop = true;
                        this.TopMost = false;
                    }

                    // work out the position to place the loading form
                    Point panelScreenLocation = lblNowViewing.PointToScreen(Point.Empty);
                    panelScreenLocation.Y -= (int)(160 * UIScale);
                    panelScreenLocation.X -= (int)(13 * UIScale);

                    loadingScreen = new LoadingScreen(UIScale)
                    {
                        Owner = this,
                        StartPosition = FormStartPosition.Manual, // Set the start position manually
                        FormBorderStyle = FormBorderStyle.None,
                        BackColor = panel84.BackColor, // Set the background color to match panel colours
                        Opacity = 1, // Set the opacity to 100%
                        LabelColor = label77.ForeColor,
                        Location = panelScreenLocation // Set the location of the loadingScreen form
                    };
                    loadingScreen.Show(this);
                    partialLoadingScreenVisible = true;
                    await BriefPauseAsync(100).ConfigureAwait(true);
                }
                #endregion
                UpdateLoadingScreenMessage("please wait...", "Preparing settings screen...");
                await HideAllScreensAsync().ConfigureAwait(true);
                SuspendLayout();
                lblMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblMenuHighlightedButtonText.Visible = true;
                    lblMenuHighlightedButtonText.Text = "settings";
                    lblMenuHighlightedButtonText.Location = new Point(lblMenuHighlightedButtonText.Location.X, btnMenuSettings.Location.Y);
                });
                lblMenuArrow.Invoke((MethodInvoker)delegate
                {
                    lblMenuArrow.Height = (int)(18 * UIScale);
                    lblMenuArrow.Location = new Point(lblMenuArrow.Location.X, btnMenuSettings.Location.Y);
                    lblMenuArrow.Visible = true;
                });

                CloseCurrencyMenu();
                CloseThemeMenu();

                EnableAllMenuButtons();
                btnMenuSettings.Enabled = false;
                ResumeLayout(false);
                ToggleLoadingAnimation("enable");
                SuspendLayout();
                panelSettings.Invoke((MethodInvoker)delegate
                {
                    panelSettings.Visible = true;
                });

                Control[] controlsToRefresh = { panelSettings, panel74, panel76, panel77, panel21, panel85, panel106, panelSettingsUIScale, panel84, panel92 };
                foreach (Control control in controlsToRefresh)
                {
                    if (control.InvokeRequired)
                    {
                        control.Invoke((MethodInvoker)delegate
                        {
                            control.Refresh();
                        });
                    }
                    else
                    {
                        control.Refresh();
                    }
                }

                if (!fullScreenLoadingScreenVisible && loadingScreen != null)
                {
                    #region close loading screen
                    //wait a moment to give time for screen to paint
                    await BriefPauseAsync(400).ConfigureAwait(true);
                    //close the loading screen
                    partialLoadingScreenVisible = false;
                    loadingScreen.Close();
                    if (wasOnTop)
                    {
                        this.TopMost = true;
                    }
                    #endregion
                }
                ResumeLayout(false);
                ToggleLoadingAnimation("disable");
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuSettings2_Click");
            }
        }

        private void LblOpenPreferences_Click(object sender, EventArgs e)
        {
            if (String.Compare(lblOpenPreferences.Text, "PREFERENCES ▼") == 0)
            {
                lblOpenPreferences.Invoke((MethodInvoker)delegate
                {
                    lblOpenPreferences.Text = "PREFERENCES ▲";
                });
                CloseCurrencyMenu();
                CloseThemeMenu();
                CloseHelpAboutMenu();
                panelOpenHelpAboutMenu.Invoke((MethodInvoker)delegate
                {
                    panelOpenHelpAboutMenu.Location = new Point(panelOpenHelpAboutMenu.Location.X, panelOpenHelpAboutMenu.Location.Y + (int)(54 * UIScale));
                });
                panelHelpAboutMenu.Invoke((MethodInvoker)delegate
                {
                    panelHelpAboutMenu.Location = new Point(panelHelpAboutMenu.Location.X, panelHelpAboutMenu.Location.Y + (int)(54 * UIScale));
                });
                btnMenuSettings.Visible = true;
                btnThemeMenu.Visible = true;
                btnCurrency.Visible = true;
            }
            else
            {
                ClosePreferencesMenu();
            }
        }

        private void LblOpenHelpAboutMenu_Click(object sender, EventArgs e)
        {
            CloseThemeMenu();
            CloseCurrencyMenu();
            ClosePreferencesMenu();

            if (panelHelpAboutMenu.Height == 0)
            {
                lblOpenHelpAboutMenu.Invoke((MethodInvoker)delegate
                {
                    lblOpenHelpAboutMenu.Text = "HELP, UPDATE ▲";
                });
                //expand the panel
                currentHeightExpandingPanel = panelHelpAboutMenu.Height;
                StartExpandingPanelVert(panelHelpAboutMenu);
            }
            else
            {
                CloseHelpAboutMenu();
            }
        }
        #endregion
        #region show help screen
        private void BtnMenuHelp_Click(object sender, EventArgs e)
        {
            try
            {
                OpenHelpScreen();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuHelp_Click");
            }
        }

        private void BtnHelp_Click(object sender, EventArgs e) // help screen
        {
            try
            {
                OpenHelpScreen();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnHelp_Click");
            }
        }

        private void OpenHelpScreen()
        {
            try
            {
                // display semi-transparent overlay form
                Form overlay = new overlayForm(UIScale)
                {
                    Owner = this,
                    StartPosition = FormStartPosition.CenterParent,
                    FormBorderStyle = FormBorderStyle.None,
                    BackColor = Color.Black,
                    Opacity = 0.5,
                };
                overlay.StartPosition = FormStartPosition.CenterParent;
                // Calculate the overlay form's location to place it in the center of the parent form
                overlay.StartPosition = FormStartPosition.Manual;
                int parentCenterX = this.Location.X + this.Width / 2;
                int parentCenterY = this.Location.Y + this.Height / 2;
                int overlayX = parentCenterX - overlay.Width / 2;
                int overlayY = parentCenterY - overlay.Height / 2;
                overlay.Location = new Point(overlayX, overlayY);

                overlay.Show(this);

                Form frm = new HelpScreen(UIScale)
                {
                    Owner = this,
                    StartPosition = FormStartPosition.CenterParent,
                    TextColor = label77.ForeColor, // random label color to pass to the help screen
                    HeadingTextColor = label26.ForeColor, // random heading color to pass to the help screen
                    ButtonTextColor = btnExit.ForeColor,
                    ButtonBackColor = btnExit.BackColor,
                    ButtonTextColor2 = btnPreviousBlock.ForeColor,
                    ButtonBackColor2 = btnPreviousBlock.BackColor,
                    TextBoxBackColor = chartsBackgroundColor,
                    TextBoxForeColor = numericUpDownBlockHeightToStartListFrom.ForeColor,
                    WindowBackgroundColor = panel76.BackColor,
                    ButtonRadius = btnExit.BorderRadius,
                    ButtonBorderColor = btnExit.BorderColor,
                    ButtonBorderSize = btnExit.BorderSize,
                    DataFieldColor = lblHeaderMarketCap.ForeColor
                };
                frm.StartPosition = FormStartPosition.CenterParent;
                frm.ShowDialog(this);
                overlay.Close();
                this.Focus();
                this.BringToFront();
            }
            catch (Exception ex)
            {
                HandleException(ex, "OpenHelpScreen");
            }
        }
        #endregion
        #region show about screen
        private void BtnMenuSplash_Click(object sender, EventArgs e)
        {
            try
            {
                // display semi-transparent overlay form
                Form overlay = new overlayForm(UIScale)
                {
                    Owner = this,
                    StartPosition = FormStartPosition.CenterParent,
                    FormBorderStyle = FormBorderStyle.None,
                    BackColor = Color.Black,
                    Opacity = 0.5,
                };
                overlay.StartPosition = FormStartPosition.CenterParent;
                // Calculate the overlay form's location to place it in the center of the parent form
                overlay.StartPosition = FormStartPosition.Manual;
                int parentCenterX = this.Location.X + this.Width / 2;
                int parentCenterY = this.Location.Y + this.Height / 2;
                int overlayX = parentCenterX - overlay.Width / 2;
                int overlayY = parentCenterY - overlay.Height / 2;
                overlay.Location = new Point(overlayX, overlayY);
                overlay.Show(this);

                // display about screen on top of the overlay
                Form frm = new Splash(UIScale)
                {
                    Owner = this,
                    StartPosition = FormStartPosition.CenterParent,
                    WindowBackgroundColor = panel88.BackColor,
                    LabelColor = label77.ForeColor,
                    LinksColor = lblHeaderMarketCap.ForeColor,
                    ButtonTextColor = btnExit.ForeColor,
                    ButtonBackColor = btnExit.BackColor,
                    CurrentVersion = CurrentVersion,
                    OfflineMode = offlineMode,
                    ButtonRadius = btnExit.BorderRadius,
                    ButtonBorderColor = btnExit.BorderColor,
                    ButtonBorderSize = btnExit.BorderSize
                };
                frm.StartPosition = FormStartPosition.CenterParent;
                //                    frm.FormClosed += ModalForm_FormClosed;
                frm.ShowDialog(this);

                overlay.Close();
                this.Focus();
                this.BringToFront();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuSplash_Click");
            }
        }

        #endregion
        #region currency menu
        private void BtnCurrency_Click(object sender, EventArgs e)
        {
            try
            {
                CloseThemeMenu();
                CloseHelpAboutMenu();
                btnCurrency.BringToFront();
                if (panelCurrency.Height == 0)
                {
                    //expand the panel
                    currentHeightExpandingPanel = panelCurrency.Height;
                    StartExpandingPanelVert(panelCurrency);
                }
                else
                {
                    CloseCurrencyMenu();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnCurrency_Click");
            }
        }

        private void BtnUSD_Click(object sender, EventArgs e)
        {
            try
            {
                btnUSD.Enabled = false;
                btnEUR.Enabled = true;
                btnGBP.Enabled = true;
                btnXAU.Enabled = true;
                fiatSymbol = "$";
                btnCurrency.Invoke((MethodInvoker)delegate
                {
                    btnCurrency.Text = "   currency (USD) ▼";
                });
                CloseCurrencyMenuGetMarketDataSaveCurrency();
                lblCurrencyMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblCurrencyMenuHighlightedButtonText.Text = "USD $";
                    lblCurrencyMenuHighlightedButtonText.Location = new Point(btnUSD.Location.X + (int)(10 * UIScale), btnUSD.Location.Y);
                });
                ClearCurrencyMenuMarkers();
                btnUSD.Invoke((MethodInvoker)delegate
                {
                    btnUSD.BackgroundImage = Resources.marker;
                });
                #region update the market charts
                //if either the price or marketcap charts were active, refresh them with the new currency, just in case they were visible at the time
                if (String.Compare(comboBoxChartSelect.Texts, "💲 price") == 0)
                {
                    if (!btnPriceChartScaleLog.Enabled)
                    {
                        ChartPriceLogAsync();
                    }
                    else
                    {
                        ChartPriceAsync();
                    }
                    return;
                }
                if (String.Compare(comboBoxChartSelect.Texts, "💲 market cap.") == 0)
                {
                    if (!btnChartMarketCapScaleLog.Enabled)
                    {
                        ChartMarketCapLogAsync();
                    }
                    else
                    {
                        ChartMarketCapAsync();
                    }
                    return;
                }
                #endregion
                RefreshFiatValuesEverywhere();
                lblHeaderPriceChange.Invoke((MethodInvoker)delegate
                {
                    lblHeaderPriceChange.Text = $"+{fiatSymbol}0";
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnUSD_Click");
            }
        }

        private void BtnEUR_Click(object sender, EventArgs e)
        {
            try
            {
                btnUSD.Enabled = true;
                btnEUR.Enabled = false;
                btnGBP.Enabled = true;
                btnXAU.Enabled = true;
                fiatSymbol = "€";
                btnCurrency.Invoke((MethodInvoker)delegate
                {
                    btnCurrency.Text = "   currency (EUR) ▼";
                });
                CloseCurrencyMenuGetMarketDataSaveCurrency();
                lblCurrencyMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblCurrencyMenuHighlightedButtonText.Text = "EUR €";
                    lblCurrencyMenuHighlightedButtonText.Location = new Point(btnEUR.Location.X + (int)(10 * UIScale), btnEUR.Location.Y);
                });
                ClearCurrencyMenuMarkers();
                btnEUR.Invoke((MethodInvoker)delegate
                {
                    btnEUR.BackgroundImage = Resources.marker;
                });
                #region update the market charts
                //if either the price or marketcap charts were active, refresh them with the new currency, just in case they were visible at the time
                if (String.Compare(comboBoxChartSelect.Texts, "💲 price") == 0)
                {
                    if (!btnPriceChartScaleLog.Enabled)
                    {
                        ChartPriceLogAsync();
                    }
                    else
                    {
                        ChartPriceAsync();
                    }
                    return;
                }
                if (String.Compare(comboBoxChartSelect.Texts, "💲 market cap.") == 0)
                {
                    if (!btnChartMarketCapScaleLog.Enabled)
                    {
                        ChartMarketCapLogAsync();
                    }
                    else
                    {
                        ChartMarketCapAsync();
                    }
                    return;
                }
                #endregion
                RefreshFiatValuesEverywhere();
                lblHeaderPriceChange.Invoke((MethodInvoker)delegate
                {
                    lblHeaderPriceChange.Text = $"+{fiatSymbol}0";
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnEUR_Click");
            }
        }

        private void BtnGBP_Click(object sender, EventArgs e)
        {
            try
            {
                btnUSD.Enabled = true;
                btnEUR.Enabled = true;
                btnGBP.Enabled = false;
                btnXAU.Enabled = true;
                fiatSymbol = "£";
                btnCurrency.Invoke((MethodInvoker)delegate
                {
                    btnCurrency.Text = "   currency (GBP) ▼";
                });
                CloseCurrencyMenuGetMarketDataSaveCurrency();
                lblCurrencyMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblCurrencyMenuHighlightedButtonText.Text = "GBP £";
                    lblCurrencyMenuHighlightedButtonText.Location = new Point(btnGBP.Location.X + (int)(10 * UIScale), btnGBP.Location.Y);
                });
                ClearCurrencyMenuMarkers();
                btnGBP.Invoke((MethodInvoker)delegate
                {
                    btnGBP.BackgroundImage = Resources.marker;
                });
                #region update the market charts
                //if either the price or marketcap charts were active, refresh them with the new currency, just in case they were visible at the time
                if (String.Compare(comboBoxChartSelect.Texts, "💲 price") == 0)
                {
                    if (!btnPriceChartScaleLog.Enabled)
                    {
                        ChartPriceLogAsync();
                    }
                    else
                    {
                        ChartPriceAsync();
                    }
                    return;
                }
                if (String.Compare(comboBoxChartSelect.Texts, "💲 market cap.") == 0)
                {
                    if (!btnChartMarketCapScaleLog.Enabled)
                    {
                        ChartMarketCapLogAsync();
                    }
                    else
                    {
                        ChartMarketCapAsync();
                    }
                    return;
                }
                #endregion
                RefreshFiatValuesEverywhere();
                lblHeaderPriceChange.Invoke((MethodInvoker)delegate
                {
                    lblHeaderPriceChange.Text = $"+{fiatSymbol}0";
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnGBP_Click");
            }
        }

        private void BtnXAU_Click(object sender, EventArgs e)
        {
            try
            {
                btnUSD.Enabled = true;
                btnEUR.Enabled = true;
                btnGBP.Enabled = true;
                btnXAU.Enabled = false;
                fiatSymbol = "\U0001fa99";
                btnCurrency.Invoke((MethodInvoker)delegate
                {
                    btnCurrency.Text = "   currency (XAU) ▼";
                });
                CloseCurrencyMenuGetMarketDataSaveCurrency();
                lblCurrencyMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblCurrencyMenuHighlightedButtonText.Text = "XAU 🪙";
                    lblCurrencyMenuHighlightedButtonText.Location = new Point(btnXAU.Location.X + (int)(10 * UIScale), btnXAU.Location.Y);
                });
                ClearCurrencyMenuMarkers();
                btnXAU.Invoke((MethodInvoker)delegate
                {
                    btnXAU.BackgroundImage = Resources.marker;
                });
                #region update the market charts
                //if either the price or marketcap charts were active, refresh them with the new currency, just in case they were visible at the time
                if (String.Compare(comboBoxChartSelect.Texts, "💲 price") == 0)
                {
                    if (!btnPriceChartScaleLog.Enabled)
                    {
                        ChartPriceLogAsync();
                    }
                    else
                    {
                        ChartPriceAsync();
                    }
                    return;
                }

                if (String.Compare(comboBoxChartSelect.Texts, "💲 market cap.") == 0)
                {
                    if (!btnChartMarketCapScaleLog.Enabled)
                    {
                        ChartMarketCapLogAsync();
                    }
                    else
                    {
                        ChartMarketCapAsync();
                    }
                    return;
                }
                #endregion
                RefreshFiatValuesEverywhere();
                lblHeaderPriceChange.Invoke((MethodInvoker)delegate
                {
                    lblHeaderPriceChange.Text = $"+{fiatSymbol}0";
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnXAU_Click");
            }
        }

        private void RefreshFiatValuesEverywhere()
        {
            try
            {
                if (!offlineMode && !testNet && (RunCoinbaseAPI || RunCoingeckoAPI || RunMempoolSpacePriceAPI))
                {
                    #region recalculate fiat values on bitcoin dashboard

                    if (String.Compare(lblBlockSubsidyAfterHalving.Text, "no data") != 0 && String.Compare(lblBlockSubsidyAfterHalving.Text, "") != 0)
                    {
                        lblBlockRewardAfterHalvingFiat.Invoke((MethodInvoker)delegate
                            {
                                lblBlockRewardAfterHalvingFiat.Text = $"{fiatSymbol}{(Convert.ToDecimal(lblBlockSubsidyAfterHalving.Text) * OneBTCinSelectedCurrency):N2}";
                            });
                    }
                    if (String.Compare(lblBlockSubsidy.Text, "no data") != 0 && String.Compare(lblBlockSubsidy.Text, "") != 0)
                    {
                        lblBlockRewardFiat.Invoke((MethodInvoker)delegate
                        {
                            lblBlockRewardFiat.Text = $"{fiatSymbol}{(Convert.ToDecimal(lblBlockSubsidy.Text) * OneBTCinSelectedCurrency):N2}";
                        });
                    }
                    if (String.Compare(lbl24HourBTCSent.Text, "disabled") != 0 && String.Compare(lbl24HourBTCSent.Text, "unavailable on TestNet") != 0 && String.Compare(lbl24HourBTCSent.Text, "") != 0)
                    {
                        lbl24HourBTCSentFiat.Invoke((MethodInvoker)delegate
                        {
                            lbl24HourBTCSentFiat.Text = $"{fiatSymbol}{(Convert.ToDecimal(lbl24HourBTCSent.Text) * OneBTCinSelectedCurrency):N2}";
                        });
                    }
                    if (String.Compare(lblNextBlockTotalFees.Text, "disabled") != 0 && String.Compare(lblNextBlockTotalFees.Text, "unavailable on TestNet") != 0 && String.Compare(lblNextBlockTotalFees.Text, "") != 0)
                    {
                        lblNextBlockTotalFeesFiat.Invoke((MethodInvoker)delegate
                        {
                            lblNextBlockTotalFeesFiat.Text = $"{fiatSymbol}{(Convert.ToDecimal(lblNextBlockTotalFees.Text) * OneBTCinSelectedCurrency):N2}";
                        });
                    }

                    #endregion
                    #region recalculate fiat values on xpub screen 
                    lblXpubConfirmedReceivedFiat.Invoke((MethodInvoker)delegate
                    {
                        lblXpubConfirmedReceivedFiat.Text = $"{fiatSymbol}{(Convert.ToDecimal(lblXpubConfirmedReceived.Text) * OneBTCinSelectedCurrency):N2}";
                    });
                    lblXpubConfirmedSpentFiat.Invoke((MethodInvoker)delegate
                    {
                        lblXpubConfirmedSpentFiat.Text = $"{fiatSymbol}{(Convert.ToDecimal(lblXpubConfirmedSpent.Text) * OneBTCinSelectedCurrency):N2}";
                    });
                    lblXpubConfirmedUnspentFiat.Invoke((MethodInvoker)delegate
                    {
                        lblXpubConfirmedUnspentFiat.Text = $"{fiatSymbol}{(Convert.ToDecimal(lblXpubConfirmedUnspent.Text) * OneBTCinSelectedCurrency):N2}";
                    });
                    #endregion
                    #region recalculate fiat values on blocks screen 
                    if (String.Compare(lblBlockListTotalFeesInNextBlock.Text, "unavailable") != 0 && String.Compare(lblBlockListTotalFeesInNextBlock.Text, "unavailable on TestNet") != 0 && String.Compare(lblBlockListTotalFeesInNextBlock.Text, "") != 0)
                    {
                        lblBlockListTotalFeesInNextBlockFiat.Invoke((MethodInvoker)delegate
                        {
                            lblBlockListTotalFeesInNextBlockFiat.Text = $"{fiatSymbol}{(Convert.ToDecimal(lblBlockListTotalFeesInNextBlock.Text) * OneBTCinSelectedCurrency):N2}";
                        });
                    }
                    if (String.Compare(lblBlockListBlockSubsidy.Text, "") != 0 && String.Compare(lblBlockListBlockSubsidy.Text, "no data") != 0)
                    {
                        lblBlockListBlockRewardFiat.Invoke((MethodInvoker)delegate
                        {
                            lblBlockListBlockRewardFiat.Text = $"{fiatSymbol}{(Convert.ToDecimal(lblBlockListBlockSubsidy.Text) * OneBTCinSelectedCurrency):N2}";
                        });
                    }
                    #endregion
                    #region recalculate values on transaction screen
                    if (String.Compare(lblTotalOutputValue.Text, "totalOutputValue") != 0 && String.Compare(lblTotalOutputValue.Text, "") != 0)
                    {
                        lblTotalOutputValueFiat.Invoke((MethodInvoker)delegate
                        {
                            lblTotalOutputValueFiat.Text = $"{fiatSymbol}{(Convert.ToDecimal(lblTotalOutputValue.Text) * OneBTCinSelectedCurrency):N2}";
                        });
                    }
                    if (String.Compare(lblTotalInputValue.Text, "totalInputValue") != 0 && String.Compare(lblTotalInputValue.Text, "") != 0)
                    {
                        lblTotalInputValueFiat.Invoke((MethodInvoker)delegate
                        {
                            lblTotalInputValueFiat.Text = $"{fiatSymbol}{(Convert.ToDecimal(lblTotalInputValue.Text) * OneBTCinSelectedCurrency):N2}";
                        });
                    }
                    if (String.Compare(lblTransactionFee.Text, "no data") != 0 && String.Compare(lblTransactionFee.Text, "") != 0)
                    {
                        lblTransactionFeeFiat.Invoke((MethodInvoker)delegate
                        {
                            lblTransactionFeeFiat.Text = $"{fiatSymbol}{(Convert.ToDecimal(lblTransactionFee.Text) * OneBTCinSelectedCurrency):N2}";
                        });
                    }
                    #endregion
                    #region recalculate fiat values on address tx screen
                    if (String.Compare(lblAddressConfirmedUnspent.Text, "no data") != 0 && String.Compare(lblAddressConfirmedUnspent.Text, "") != 0)
                    {
                        lblAddressConfirmedUnspentFiat.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedUnspentFiat.Text = $"{fiatSymbol}{(Convert.ToDecimal(lblAddressConfirmedUnspent.Text) * OneBTCinSelectedCurrency):N2}";
                        });
                    }
                    if (String.Compare(lblAddressConfirmedSpent.Text, "no data") != 0 && String.Compare(lblAddressConfirmedSpent.Text, "") != 0)
                    {
                        lblAddressConfirmedSpentFiat.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedSpentFiat.Text = $"{fiatSymbol}{(Convert.ToDecimal(lblAddressConfirmedSpent.Text) * OneBTCinSelectedCurrency):N2}";
                        });
                    }
                    if (String.Compare(lblAddressConfirmedReceived.Text, "no data") != 0 && String.Compare(lblAddressConfirmedReceived.Text, "") != 0)
                    {
                        lblAddressConfirmedReceivedFiat.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedReceivedFiat.Text = $"{fiatSymbol}{(Convert.ToDecimal(lblAddressConfirmedReceived.Text) * OneBTCinSelectedCurrency):N2}";
                        });
                    }
                    if (AddressQRCodePicturebox.Visible)
                    {
                        if (String.Compare(lblHeaderPrice.Text, "disabled") != 0)
                        {
                            lblAddressConfirmedReceivedFiat.Invoke((MethodInvoker)delegate
                            {
                                lblAddressConfirmedReceivedFiat.Visible = true;
                            });
                            lblAddressConfirmedSpentFiat.Invoke((MethodInvoker)delegate
                            {
                                lblAddressConfirmedSpentFiat.Visible = true;
                            });
                            lblAddressConfirmedUnspentFiat.Invoke((MethodInvoker)delegate
                            {
                                lblAddressConfirmedUnspentFiat.Visible = true;
                            });
                        }
                        else
                        {
                            lblAddressConfirmedReceivedFiat.Invoke((MethodInvoker)delegate
                            {
                                lblAddressConfirmedReceivedFiat.Visible = false;
                            });
                            lblAddressConfirmedSpentFiat.Invoke((MethodInvoker)delegate
                            {
                                lblAddressConfirmedSpentFiat.Visible = false;
                            });
                            lblAddressConfirmedUnspentFiat.Invoke((MethodInvoker)delegate
                            {
                                lblAddressConfirmedUnspentFiat.Visible = false;
                            });
                        }
                    }
                    #endregion
                    #region recalculate fiat values on address utxo screen
                    if (String.Compare(lblAddressConfirmedUnspentUTXO.Text, "no data") != 0 && String.Compare(lblAddressConfirmedUnspentUTXO.Text, "") != 0)
                    {
                        lblAddressConfirmedUnspentUTXOFiat.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedUnspentUTXOFiat.Text = $"{fiatSymbol}{(Convert.ToDecimal(lblAddressConfirmedUnspentUTXO.Text) * OneBTCinSelectedCurrency):N2}";
                        });
                    }
                    if (String.Compare(lblAddressConfirmedSpentUTXO.Text, "no data") != 0 && String.Compare(lblAddressConfirmedSpentUTXO.Text, "") != 0)
                    {
                        lblAddressConfirmedSpentUTXOFiat.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedSpentUTXOFiat.Text = $"{fiatSymbol}{(Convert.ToDecimal(lblAddressConfirmedSpentUTXO.Text) * OneBTCinSelectedCurrency):N2}";
                        });
                    }
                    if (AddressQRCodePictureboxUTXO.Visible)
                    {
                        if (String.Compare(lblHeaderPrice.Text, "disabled") != 0)
                        {
                            lblAddressConfirmedSpentUTXOFiat.Invoke((MethodInvoker)delegate
                            {
                                lblAddressConfirmedSpentUTXOFiat.Visible = true;
                            });
                            lblAddressConfirmedUnspentUTXOFiat.Invoke((MethodInvoker)delegate
                            {
                                lblAddressConfirmedUnspentUTXOFiat.Visible = true;
                            });
                        }
                        else
                        {
                            lblAddressConfirmedSpentUTXOFiat.Invoke((MethodInvoker)delegate
                            {
                                lblAddressConfirmedSpentUTXOFiat.Visible = false;
                            });
                            lblAddressConfirmedUnspentUTXOFiat.Invoke((MethodInvoker)delegate
                            {
                                lblAddressConfirmedUnspentUTXOFiat.Visible = false;
                            });
                        }
                    }
                    #endregion
                    #region recalculate fiat values on block screen
                    if (String.Compare(lblReward.Text, "no data") != 0 && String.Compare(lblReward.Text, "") != 0)
                    {
                        lblRewardFiat.Invoke((MethodInvoker)delegate
                        {
                            lblRewardFiat.Text = $"{fiatSymbol}{(Convert.ToDecimal(lblReward.Text) * OneBTCinSelectedCurrency):N2}";
                        });
                    }
                    if (String.Compare(lblTotalFees.Text, "no data") != 0 && String.Compare(lblTotalFees.Text, "") != 0)
                    {
                        lblTotalFeesFiat.Invoke((MethodInvoker)delegate
                        {
                            lblTotalFeesFiat.Text = $"{fiatSymbol}{(Convert.ToDecimal(lblTotalFees.Text) * OneBTCinSelectedCurrency):N2}";
                        });
                    }
                    #endregion
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "RefreshFiatValuesEverywhere");
            }
        }

        private void CloseCurrencyMenuGetMarketDataSaveCurrency()
        {
            try
            {
                CloseCurrencyMenu();
                _ = UpdateBitcoinAndLightningDashboardsAsync();
                SaveSettings();
            }
            catch (Exception ex)
            {
                HandleException(ex, "CloseCurrencyMenuGetMarketDataSaveCurrency");
            }
        }

        #endregion
        #region minimise/exit window
        private async void BtnExit_ClickAsync(object sender, EventArgs e) // exit
        {
            try
            {
                #region display loading screen
                bool wasOnTop = false;
                if (this.TopMost == true)
                {
                    wasOnTop = true;
                    this.TopMost = false;
                }
                fullSizeLoadingScreen = new FullSizeLoadingScreen(UIScale)
                {
                    Owner = this,
                    StartPosition = FormStartPosition.CenterParent,
                    FormBorderStyle = FormBorderStyle.None,
                    BackColor = panel84.BackColor, // Set the background color to match panel colours
                    Opacity = 1,
                    LabelColor = label77.ForeColor,
                    Version = $"v{CurrentVersion}",
                    OtherText = lblCurrentVersion.ForeColor
                };
                fullSizeLoadingScreen.StartPosition = FormStartPosition.CenterParent;

                // Calculate the overlay form's location to place it in the center of the parent form
                fullSizeLoadingScreen.StartPosition = FormStartPosition.Manual;
                int parentCenterX = this.Location.X + this.Width / 2;
                int parentCenterY = this.Location.Y + this.Height / 2;
                int overlayX = parentCenterX - fullSizeLoadingScreen.Width / 2;
                int overlayY = parentCenterY - fullSizeLoadingScreen.Height / 2;
                fullSizeLoadingScreen.Location = new Point(overlayX, overlayY);
                fullSizeLoadingScreen.Show(this);
                #endregion
                fullSizeLoadingScreen.SetLoadingText($"...at block height {lblHeaderBlockNumber.Text}", "Closing down...");

                // the closing screen exists only to hide the messy removal of all screen elements when closing the form
                await BriefPauseAsync(2000).ConfigureAwait(true);

                this.Close();
                fullSizeLoadingScreen.Close();
                if (wasOnTop)
                {
                    this.TopMost = true;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnExit_ClickAsync");
            }
        }

        private void BtnMinimise_Click(object sender, EventArgs e) // minimise the form
        {
            this.WindowState = FormWindowState.Minimized;
        }
        #endregion
        #region move window
        private void BtnMoveWindow_MouseDown(object sender, MouseEventArgs e) // move the form when the move control is used
        {
            try
            {
                CloseCurrencyMenu();
                CloseThemeMenu();
                ReleaseCapture();
                SendMessage(this.Handle, 0x112, 0xf012, 0);
            }
            catch (WebException ex)
            {
                HandleException(ex, "BtnMoveWindow_MouseDown");
            }
        }

        private void BtnMoveWindow_MouseUp(object sender, MouseEventArgs e) // reset colour of the move form control
        {
            try
            {
                var args = e as MouseEventArgs;
                if (args.Button == MouseButtons.Right)
                {
                    return;
                }
                btnMoveWindow.BackColor = System.Drawing.ColorTranslator.FromHtml("#1D1D1D");
            }
            catch (WebException ex)
            {
                HandleException(ex, "BtnMoveWindow_MouseUp");
            }
        }

        private void BtnMoveWindow_Click(object sender, EventArgs e)
        {
            try
            {
                var args = e as MouseEventArgs;
                if (args!.Button == MouseButtons.Right)
                {
                    return;
                }
                CloseCurrencyMenu();
                CloseThemeMenu();
            }
            catch (WebException ex)
            {
                HandleException(ex, "BtnMoveWindow_Click");
            }
        }
        #endregion
        #region global search

        private void BtnShowGlobalSearch_Click(object sender, EventArgs e)
        {
            try
            {
                if (panel107.Width == 0)
                {
                    StartExpandingPanelHoriz(panel107);
                    currentWidthExpandingPanel = panel107.Width;
                }
                else
                {
                    StartShrinkingPanel(panel107);
                    currentWidthShrinkingPanel = panel107.Width;
                }

            }
            catch (WebException ex)
            {
                HandleException(ex, "BtnShowGlobalSearch_Click");
            }
        }

        private void TextBoxUniversalSearch_Enter(object sender, EventArgs e)
        {
            try
            {
                if (isTextBoxUniversalSearchWatermarkTextDisplayed)
                {
                    textBoxUniversalSearch.Invoke((MethodInvoker)delegate
                    {
                        textBoxUniversalSearch.Text = "";
                        textBoxUniversalSearch.ForeColor = numericUpDownBlockHeightToStartListFrom.ForeColor;
                    });
                    isTextBoxUniversalSearchWatermarkTextDisplayed = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "textBoxUniversalSearch_Enter");
            }
        }

        private void TextBoxUniversalSearch_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (isTextBoxUniversalSearchWatermarkTextDisplayed)
                {
                    textBoxUniversalSearch.Invoke((MethodInvoker)delegate
                    {
                        textBoxUniversalSearch.Text = "";
                        textBoxUniversalSearch.ForeColor = numericUpDownBlockHeightToStartListFrom.ForeColor;
                    });
                    isTextBoxUniversalSearchWatermarkTextDisplayed = false;
                }
                if (e.KeyChar == (char)Keys.Return)
                {
                    BtnUniversalSearch_Click(sender, e);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "textBoxUniversalSearch_KeyPress");
            }
        }

        private void TextBoxUniversalSearch_Leave(object sender, EventArgs e)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(textBoxUniversalSearch.Text))
                {
                    textBoxUniversalSearch.Invoke((MethodInvoker)delegate
                    {
                        textBoxUniversalSearch.Text = "block height, address, transaction ID or xpub...";
                        textBoxUniversalSearch.ForeColor = Color.Gray;
                    });
                    isTextBoxUniversalSearchWatermarkTextDisplayed = true;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "textBoxUniversalSearch_Leave");
            }
        }

        private void TextBoxUniversalSearch_TextChanged(object sender, EventArgs e)
        {
            try
            {
                btnUniversalSearch.Enabled = false;
                if (isTextBoxUniversalSearchWatermarkTextDisplayed)
                {
                    textBoxUniversalSearch.Invoke((MethodInvoker)delegate
                    {
                        textBoxUniversalSearch.ForeColor = numericUpDownBlockHeightToStartListFrom.ForeColor;
                    });
                    isTextBoxUniversalSearchWatermarkTextDisplayed = false;
                }
                else
                {
                    // check if it's a block number
                    if (IsNumeric(textBoxUniversalSearch.Text))
                    {
                        if (Convert.ToInt32(textBoxUniversalSearch.Text) <= Convert.ToInt32(lblHeaderBlockNumber.Text))
                        {
                            searchTarget = "block";
                            btnUniversalSearch.Enabled = true;
                        }
                    }
                    else
                    {
                        //check if its an address
                        string addressType = DetermineAddressType(textBoxUniversalSearch.Text); // check address is valid and what type of address
                        if (String.Compare(addressType, "P2PKH (legacy)") == 0 ||
                        String.Compare(addressType, "P2SH") == 0 ||
                        String.Compare(addressType, "P2WPKH (segwit)") == 0 ||
                        String.Compare(addressType, "P2WSH") == 0 ||
                        String.Compare(addressType, "P2TT (taproot)") == 0 ||
                        String.Compare(addressType, "unknown") == 0) // address is valid
                        {
                            searchTarget = "address";
                            btnUniversalSearch.Enabled = true;
                        }
                        else
                        {
                            //check if its a transaction id
                            if (ValidateTransactionId(textBoxUniversalSearch.Text)) // check if the entered string is valid
                            {
                                searchTarget = "transaction";
                                btnUniversalSearch.Enabled = true;
                            }
                            else
                            {
                                //check if its an xpub
                                try
                                {
                                    if (string.Compare(textBoxUniversalSearch.Text, "block height, address, transaction ID or xpub...") == 0)
                                    {
                                        return;
                                    }
                                    BitcoinExtPubKey xpub = new BitcoinExtPubKey(textBoxUniversalSearch.Text, Network.Main);
                                    _ = xpub.GetPublicKey();
                                }
                                catch
                                {
                                    return;
                                }
                                searchTarget = "xpub";
                                btnUniversalSearch.Enabled = true;
                            }
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "textBoxUniversalSearch_TextChanged");
            }
        }

        private void BtnUniversalSearch_Click(object sender, EventArgs e)
        {
            try
            {
                // search for block
                if (String.Compare(searchTarget, "block") == 0)
                {
                    numericUpDownSubmittedBlockNumber.Invoke((MethodInvoker)delegate
                    {
                        numericUpDownSubmittedBlockNumber.Text = textBoxUniversalSearch.Text; // copy block number to block screen
                    });
                    LookupBlockAsync();
                    //show the block screen
                    BtnMenuBlock_ClickAsync(sender, e);
                }

                //search for address
                if (String.Compare(searchTarget, "address") == 0)
                {
                    textboxSubmittedAddress.Invoke((MethodInvoker)delegate
                    {
                        textboxSubmittedAddress.Text = textBoxUniversalSearch.Text; // copy address to address screen
                    });
                    //show the address screen
                    BtnMenuAddress_ClickAsync(sender, e);
                }

                //search for transaction
                if (String.Compare(searchTarget, "transaction") == 0)
                {
                    // copy transaction ID to transaction screen
                    textBoxTransactionID.Invoke((MethodInvoker)delegate
                    {
                        textBoxTransactionID.Text = textBoxUniversalSearch.Text;
                    });
                    //show the transaction screen
                    BtnMenuTransaction_ClickAsync(sender, e);
                }

                //search for xpub
                if (String.Compare(searchTarget, "xpub") == 0)
                {
                    textBoxSubmittedXpub.Invoke((MethodInvoker)delegate
                    {
                        textBoxSubmittedXpub.Text = textBoxUniversalSearch.Text;
                    });
                    //show the xpub screen
                    BtnMenuXpub_ClickAsync(sender, e);
                }

                //reset the search
                textBoxUniversalSearch.Invoke((MethodInvoker)delegate
                {
                    textBoxUniversalSearch.Text = "block height, address, transaction ID or xpub...";
                    textBoxUniversalSearch.ForeColor = Color.Gray;
                });
                isTextBoxUniversalSearchWatermarkTextDisplayed = true;
                btnUniversalSearch.Enabled = false;
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnUniversalSearch_Click");
            }
        }
        #endregion
        #region chart icons in header area

        private void PictureBoxHeaderPriceChart_Click(object sender, EventArgs e)
        {
            try
            {
                ChartPriceAsync();
                BtnMenuCharts_ClickAsync(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxHeaderPriceChart_Click");
            }
        }

        private void PictureBoxHeaderFeeRatesChart_Click(object sender, EventArgs e)
        {
            try
            {
                ChartFeeRatesAsync();
                BtnMenuCharts_ClickAsync(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxHeaderFeeRatesChart_Click");
            }
        }

        private void PictureBoxChartCirculation_Click(object sender, EventArgs e)
        {
            try
            {
                ChartCirculationAsync();
                BtnMenuCharts_ClickAsync(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxChartCirculation_Click");
            }
        }

        private void PictureBoxHeaderBlockSizeChart_Click(object sender, EventArgs e)
        {
            try
            {
                ChartBlockSizeAsync();
                BtnMenuCharts_ClickAsync(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxHeaderBlockSizeChart_Click");
            }
        }

        private void PictureBoxHeaderConverterChart_Click(object sender, EventArgs e)
        {
            try
            {
                BtnMenuPriceConverter_ClickAsync(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxHeaderConverterChart_Click");
            }
        }

        private void PictureBoxHeaderMarketCapChart_Click(object sender, EventArgs e)
        {
            try
            {
                ChartMarketCapAsync();
                BtnMenuCharts_ClickAsync(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxHeaderMarketCapChart_Click");
            }
        }

        private void LblHeaderFeeRangeChart_Click(object sender, EventArgs e)
        {
            try
            {
                ChartFeeRatesAsync();
                BtnMenuCharts_ClickAsync(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "lblHeaderFeeRangeChart_Click");
            }
        }

        private void LblHeaderBlockFeesChart_Click(object sender, EventArgs e)
        {
            try
            {
                ChartBlockFeesAsync();
                BtnMenuCharts_ClickAsync(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "lblHeaderBlockFeesChart_Click");
            }
        }
        #endregion
        #region get panel states
        public Panel GetPanelBlock() // enables help screen to get state (visible) of panel to determine which help text to show
        {
            return this.panelBlock;
        }

        public Panel GetPanelBlockList() // enables help screen to get state (visible) of panel to determine which help text to show
        {
            return this.panelBlockList;
        }

        public Panel GetPanelAddress() // enables help screen to get state (visible) of panel to determine which help text to show
        {
            return this.panelAddress;
        }

        public Panel GetPanelAddressUTXO() // enables help screen to get state (visible) of panel to determine which help text to show
        {
            return this.panelAddressUTXO;
        }

        public Panel GetPanelBitcoinDashboard() // enables help screen to get state (visible) of panel to determine which help text to show
        {
            return this.panelBitcoinDashboard;
        }

        public Panel GetPanelLightningDashboard() // enables help screen to get state (visible) of panel to determine which help text to show
        {
            return this.panelLightningDashboard;
        }

        public Panel GetPanelTransaction() // enables help screen to get state (visible) of panel to determine which help text to show
        {
            return this.panelTransaction;
        }

        public Panel GetPanelXpub() // enables help screen to get state (visible) of panel to determine which help text to show
        {
            return this.panelXpub;
        }

        public Panel GetPanelMiningBlocks() // enables help screen to get state (visible) of panel to determine which help text to show
        {
            return this.panelMiningBlocks;
        }

        public Panel GetPanelMiningHashrate() // enables help screen to get state (visible) of panel to determine which help text to show
        {
            return this.panelMiningHashrate;
        }

        public Panel GetPanelMiningPools() // enables help screen to get state (visible) of panel to determine which help text to show
        {
            return this.panelMiningPools;
        }

        public Panel GetPanelDCACalculator() // enables help screen to get state (visible) of panel to determine which help text to show
        {
            return this.panelDCACalculator;
        }

        public Panel GetPanelPriceConverter() // enables help screen to get state (visible) of panel to determine which help text to show
        {
            return this.panelPriceConverter;
        }

        public Panel GetPanelCharts() // enables help screen to get state (visible) of panel to determine which help text to show
        {
            return this.panelCharts;
        }

        public Panel GetPanelBookmarks() // enables help screen to get state (visible) of panel to determine which help text to show
        {
            return this.panelBookmarks;
        }

        public Panel GetPanelAppearance() // enables help screen to get state (visible) of panel to determine which help text to show
        {
            return this.panelAppearance;
        }

        public Panel GetPanelSettings() // enables help screen to get state (visible) of panel to determine which help text to show
        {
            return this.panelSettings;
        }

        public Panel GetPanelDirectory() // enables help screen to get state (visible) of panel to determine which help text to show
        {
            return this.panelDirectory;
        }
        #endregion
        #region close menus
        private void CloseThemeMenu()
        {
            try
            {
                panelThemeMenu.Invoke((MethodInvoker)delegate
                {
                    panelThemeMenu.Height = 0;
                    btnThemeMenu.BackColor = Color.Transparent;
                });
                panelThemeMenuBackdrop.Invoke((MethodInvoker)delegate
                {
                    panelThemeMenuBackdrop.Height = 0;
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "CloseThemeMenu");
            }
        }

        private void CloseCurrencyMenu()
        {
            try
            {
                panelCurrency.Invoke((MethodInvoker)delegate
                {
                    panelCurrency.Height = 0;
                    btnCurrency.BackColor = Color.Transparent;
                });
                panelCurrencyBackdrop.Invoke((MethodInvoker)delegate
                {
                    panelCurrencyBackdrop.Height = 0;
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "CloseCurrencyMenu");
            }
        }

        private void CloseHelpAboutMenu()
        {
            try
            {
                panelHelpAboutMenu.Invoke((MethodInvoker)delegate
                {
                    panelHelpAboutMenu.Height = 0;
                });
                lblOpenHelpAboutMenu.Invoke((MethodInvoker)delegate
                {
                    lblOpenHelpAboutMenu.Text = "HELP, UPDATE ▼";
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "CloseCurrencyMenu");
            }
        }

        private void ClosePreferencesMenu()
        {
            if (String.Compare(lblOpenPreferences.Text, "PREFERENCES ▲") == 0)
            {
                CloseThemeMenu();
                CloseCurrencyMenu();
                lblOpenPreferences.Invoke((MethodInvoker)delegate
                {
                    lblOpenPreferences.Text = "PREFERENCES ▼";
                });
                btnMenuSettings.Visible = false;
                btnThemeMenu.Visible = false;
                btnCurrency.Visible = false;
                panelOpenHelpAboutMenu.Invoke((MethodInvoker)delegate
                {
                    panelOpenHelpAboutMenu.Location = new Point(panelOpenHelpAboutMenu.Location.X, panelOpenHelpAboutMenu.Location.Y - (int)(54 * UIScale));
                });
                panelHelpAboutMenu.Invoke((MethodInvoker)delegate
                {
                    panelHelpAboutMenu.Location = new Point(panelHelpAboutMenu.Location.X, panelHelpAboutMenu.Location.Y - (int)(54 * UIScale));
                });
            }
        }
        #endregion
        #endregion
        //![](resources\tinylogo1.png;;;0.04706,0.04877)
        #region ⚡⚡⚡ CLASSES

        #region read settings from file
        public static class SettingsManager
        {
            public static Settings? Settings { get; private set; }

            public static void Initialize()
            {
                Settings = ReadSettingsFromJsonFile();
            }

            private static Settings ReadSettingsFromJsonFile()
            {
                string settingsFileName = "SATSuma_settings.json";
                string appDataDirectory = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
                string applicationDirectory = Path.Combine(appDataDirectory, "SATSuma");
                // Create the application directory if it doesn't exist
                Directory.CreateDirectory(applicationDirectory);
                string settingsFilePath = Path.Combine(applicationDirectory, settingsFileName);
                string filePath = settingsFilePath;

                if (!File.Exists(filePath))
                {
                    File.Create(filePath).Dispose();
                }
                // Read the contents of the JSON file into a string
                string json = File.ReadAllText(filePath);

                // Deserialize the JSON string into a list of settings objects
                var settings = JsonConvert.DeserializeObject<Settings>(json);

                // If the JSON file doesn't exist or is empty, return an empty list
                settings ??= new Settings();
                return settings;
            }
        }
        #endregion

        #region themes from file
        public static class ThemesManager
        {
            public static List<Theme>? Themes { get; private set; }

            public static void Initialize()
            {
                Themes = ReadThemesFromJsonFile();
            }
            private static List<Theme> ReadThemesFromJsonFile()
            {
                string themesFileName = "SATSuma_themes.json";
                string appDataDirectory = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
                string applicationDirectory = Path.Combine(appDataDirectory, "SATSuma");
                // Create the application directory if it doesn't exist
                Directory.CreateDirectory(applicationDirectory);
                string themesFilePath = Path.Combine(applicationDirectory, themesFileName);
                string filePath = themesFilePath;

                if (!System.IO.File.Exists(filePath))
                {
                    System.IO.File.Create(filePath).Dispose();
                }
                // Read the contents of the JSON file into a string
                string json = System.IO.File.ReadAllText(filePath);

                var themes = JsonConvert.DeserializeObject<List<Theme>>(json);

                // If the JSON file doesn't exist or is empty, return an empty list
                themes ??= new List<Theme>();

                return themes;
            }
        }
        #endregion

        #region bookmark
        public class Bookmark
        {
            public DateTime DateAdded { get; set; }
            public string? Type { get; set; }
            public string? Data { get; set; }
            public string? Note { get; set; }
            public bool? Encrypted { get; set; }
            public string? KeyCheck { get; set; }
        }
        #endregion

        #region theme
        public class Theme
        {
            public string? ThemeName { get; set; }
            public Color DataFields { get; set; }
            public Color Labels { get; set; }
            public Color Headings { get; set; }
            public Color Tables { get; set; }
            public Color TableHeadings { get; set; }
            public Color OtherText { get; set; }
            public Color PriceBlock { get; set; }
            public Color StatusErrors { get; set; }
            public Color Buttons { get; set; }
            public Color ButtonText { get; set; }
            public Color Lines { get; set; }
            public Color TextBoxes { get; set; }
            public Color ProgressBars { get; set; }
            public Color TableBackgrounds { get; set; }
            public Color TableTitleBars { get; set; }
            public bool ShowTime { get; set; }
            public bool HeadingBGDefault { get; set; }
            public bool HeadingBGNone { get; set; }
            public bool HeadingBGCustom { get; set; }
            public Color HeadingBackgrounds { get; set; }
            public Color WindowBackground { get; set; }
            public string? WindowImage { get; set; }
            public bool BackgroundGenesis { get; set; }
            public bool BackgroundFranklin { get; set; }
            public bool BackgroundSatsuma { get; set; }
            public bool BackgroundHoneyBadger { get; set; }
            public bool BackgroundSymbol { get; set; }
            public bool BackgroundStackSats { get; set; }
            public bool BackgroundCustomColor { get; set; }
            public bool BackgroundCustomImage { get; set; }
            public Color Panels { get; set; }
            public string? ChartsDark { get; set; }
            public int OrangeInfinity { get; set; }
            public int BorderRadius { get; set; }
            public Color FiatConversionText { get; set; }
            public decimal Opacity { get; set; }
            public int TitlesBackgroundImage { get; set; }
            public string? ProgressBarStyle { get; set; }
        }
        #endregion

        #region settings
        public class Settings
        {
            public string? SettingsCurrencySelected { get; set; }
            public string? SettingsSelectedNetwork { get; set; }
            public string? SettingsMessariJSONSelected { get; set; }
            public string? SettingsCoinbaseEnpointsSelected { get; set; }
            public string? SettingsBlockchainInfoEndpointsSelected { get; set; }
            public string? SettingsOfflineModeSelected { get; set; }
            public string? SettingsDirectoryEnabled { get; set; }
            public string? SettingsAlwaysOnTop { get; set; }
            public string? SettingsDataRefreshPeriod { get; set; }
            public string? SettingsNumberOfConsecutiveUnusedAddresses { get; set; }
            public string? SettingsNumberUpDownDerivationPathsToCheck { get; set; }
            public string? SettingsStartupScreen { get; set; }
            public string? SettingsUIScale { get; set; }
            public string? SettingsCoingeckoAPISelected { get; set; }
            public string? SettingsMempoolSpacePriceAPISelected { get; set; }
            public string? SettingsNode { get; set; }
            public string? SettingsDefaultTheme { get; set; }
        }
        #endregion

        #region address transactions
        // ------------------------------------- Address Transactions -----------------------------------
        public class TransactionsForAddressService
        {
            private readonly string _nodeUrl;

            public TransactionsForAddressService(string nodeUrl)
            {
                _nodeUrl = nodeUrl;
            }

            public async Task<string> GetTransactionsForAddressAsync(string address, string mempoolConfOrAllTx, string lastSeenTxId = "")
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri(_nodeUrl);
                        if (String.Compare(mempoolConfOrAllTx, "chain") == 0)
                        {
                            var response = await client.GetAsync($"address/{address}/txs/chain/{lastSeenTxId}").ConfigureAwait(true);
                            if (response.IsSuccessStatusCode)
                            {
                                return await response.Content.ReadAsStringAsync().ConfigureAwait(true);
                            }
                        }
                        if (String.Compare(mempoolConfOrAllTx, "mempool") == 0)
                        {
                            var response = await client.GetAsync($"address/{address}/txs/mempool").ConfigureAwait(true);
                            if (response.IsSuccessStatusCode)
                            {
                                return await response.Content.ReadAsStringAsync().ConfigureAwait(true);
                            }
                        }
                        if (String.Compare(mempoolConfOrAllTx, "all") == 0)
                        {
                            var response = await client.GetAsync($"address/{address}/txs").ConfigureAwait(true);
                            if (response.IsSuccessStatusCode)
                            {
                                return await response.Content.ReadAsStringAsync().ConfigureAwait(true);
                            }
                        }

                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                }
                return string.Empty;
            }
        }

        // ------------------------------------- Address Transactions (for xpub screen) -----------------------------------
        public class TransactionsForXpubAddressService
        {
            private readonly string _nodeUrl;

            public TransactionsForXpubAddressService(string nodeUrl)
            {
                _nodeUrl = nodeUrl;
            }

            public async Task<string> GetTransactionsForXpubAddressAsync(string address, string mempoolConfOrAllTx, string lastSeenTxId = "")
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri(_nodeUrl);
                        if (String.Compare(mempoolConfOrAllTx, "chain") == 0)
                        {
                            if (lastSeenTxId == "")
                            {
                                var response = await client.GetAsync($"address/{address}/txs/{lastSeenTxId}").ConfigureAwait(true);
                                if (response.IsSuccessStatusCode)
                                {
                                    return await response.Content.ReadAsStringAsync().ConfigureAwait(true);
                                }
                            }
                            else
                            {
                                var response = await client.GetAsync($"address/{address}/txs/chain/{lastSeenTxId}").ConfigureAwait(true);
                                if (response.IsSuccessStatusCode)
                                {
                                    return await response.Content.ReadAsStringAsync().ConfigureAwait(true);
                                }
                            }

                        }
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                }
                return string.Empty;
            }
        }

        public class AddressTransactions
        {
            public string? Txid { get; set; }
            public Status_AddressTransactions? Status { get; set; }
            public List<Vout_AddressTransactions>? Vout { get; set; }
            public List<Vin_AddressTransactions>? Vin { get; set; }
        }

        public class Vin_AddressTransactions
        {
            public Prevout_AddressTransactions? Prevout { get; set; }
        }

        public class Prevout_AddressTransactions
        {
            public string? Scriptpubkey_address { get; set; }
            public decimal Value { get; set; }
        }

        public class Vout_AddressTransactions
        {
            public double Value { get; set; }
            public string? Scriptpubkey_address { get; set; }
        }

        public class Status_AddressTransactions
        {
            public int Block_height { get; set; }
            public string? Confirmed { get; set; }
        }
        #endregion

        #region mining pools list
        public class MiningPoolsListService
        {
            private readonly string _nodeUrl;

            public MiningPoolsListService(string nodeUrl)
            {
                _nodeUrl = nodeUrl;
            }

            public async Task<string> GetMiningPoolsListAsync()
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri(_nodeUrl);

                        var response = await client.GetAsync($"v1/mining/pools/all").ConfigureAwait(true);
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync().ConfigureAwait(true);
                        }

                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                }
                return string.Empty;
            }
        }

        public class PoolsWrapper
        {
            public List<PoolForList>? Pools { get; set; }
        }

        public class PoolForList
        {
            public string? Name { get; set; }
            public string? Slug { get; set; }
        }
        #endregion

        #region mining pools by block
        public class PoolsByBlockService
        {
            private readonly string _nodeUrl;

            public PoolsByBlockService(string nodeUrl)
            {
                _nodeUrl = nodeUrl;
            }

            public async Task<string> GetPoolsByBlockAsync(string poolsBlocksTimePeriod)
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri(_nodeUrl);

                        var response = await client.GetAsync($"v1/mining/pools/{poolsBlocksTimePeriod}").ConfigureAwait(true);
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync().ConfigureAwait(true);
                        }

                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                }
                return string.Empty;
            }
        }

        public class PoolsBlocks
        {
            public Pool[]? Pools { get; set; }
            public string? BlockCount { get; set; }
        }

        public class Pool
        {
            public string? Name { get; set; }
            public string? Link { get; set; }
            public string? BlockCount { get; set; }
            public string? Rank { get; set; }
            public string? EmptyBlocks { get; set; }
        }
        #endregion

        #region mining pools by hashrate
        public class PoolsByHashrateService
        {
            private readonly string _nodeUrl;

            public PoolsByHashrateService(string nodeUrl)
            {
                _nodeUrl = nodeUrl;
            }

            public async Task<string> GetPoolsByHashrateAsync(string poolsHashrateTimePeriod)
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri(_nodeUrl);

                        var response = await client.GetAsync($"v1/mining/hashrate/pools/{poolsHashrateTimePeriod}").ConfigureAwait(true);
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync().ConfigureAwait(true);
                        }

                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                }
                return string.Empty;
            }
        }

        public class PoolHashrate
        {
            public double AvgHashrate { get; set; }
            public double Share { get; set; }
            public string? PoolName { get; set; }
        }
        #endregion

        #region blocks by mining pool

        public class BlocksByPoolService
        {
            private readonly string _nodeUrl;

            public BlocksByPoolService(string nodeUrl)
            {
                _nodeUrl = nodeUrl;
            }

            public async Task<string> GetBlocksByPoolAsync(string slug)
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri(_nodeUrl);

                        var response = await client.GetAsync($"v1/mining/pool/{slug}/blocks/").ConfigureAwait(true);
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync().ConfigureAwait(true);
                        }

                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                }
                return string.Empty;
            }
        }

        public class Extras
        {
            public long Reward { get; set; }
            public long TotalFees { get; set; }
        }

        public class PoolBlock
        {
            public long Timestamp { get; set; }
            public int Height { get; set; }
            [JsonProperty("tx_count")]
            public int TxCount { get; set; }
            public int Size { get; set; }
            public Extras? Extras { get; set; }
        }

        #endregion

        #region mining pool stats

        public class PoolDataService
        {
            private readonly string _nodeUrl;

            public PoolDataService(string nodeUrl)
            {
                _nodeUrl = nodeUrl;
            }

            public async Task<string> GetPoolDataJsonAsync(string slug)
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri(_nodeUrl);
                        var response = await client.GetAsync($"v1/mining/pool/{slug}").ConfigureAwait(true);
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync().ConfigureAwait(true);
                        }
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                }
                return string.Empty;
            }

            public async Task<PoolData> GetPoolDataAsync(string slug)
            {
                var json = await GetPoolDataJsonAsync(slug).ConfigureAwait(true);
                if (!string.IsNullOrEmpty(json))
                {
                    return JsonConvert.DeserializeObject<PoolData>(json)!;
                }
                return null!;
            }
        }

        public class BlockCount
        {
            public int All { get; set; }
            [JsonProperty("24h")]
            public int _24h { get; set; }
            [JsonProperty("1w")]
            public int _1w { get; set; }
        }

        public class BlockShare
        {
            public decimal All { get; set; }
            [JsonProperty("24h")]
            public decimal _24h { get; set; }
            [JsonProperty("1w")]
            public decimal _1w { get; set; }
        }

        public class PoolData
        {
            public Pool? Pool { get; set; }
            public BlockCount? BlockCount { get; set; }
            public BlockShare? BlockShare { get; set; }
            public double EstimatedHashrate { get; set; }
        }

        #endregion

        #region address UTXOs
        public class UTXOsForAddressService
        {
            private readonly string _nodeUrl;

            public UTXOsForAddressService(string nodeUrl)
            {
                _nodeUrl = nodeUrl;
            }

            public async Task<string> GetUTXOsForAddressAsync(string address)
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri(_nodeUrl);
                        var response = await client.GetAsync($"address/{address}/utxo").ConfigureAwait(true);
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync().ConfigureAwait(true);
                        }

                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                }
                return string.Empty;
            }
        }

        public class AddressUTXOs
        {
            public string? Txid { get; set; }
            public Status_AddressUTXOs? Status { get; set; }
            public string? Value { get; set; }
        }


        public class Status_AddressUTXOs
        {
            public int Block_height { get; set; }
        }
        #endregion

        #region blocks
        public class BlockDataService
        {
            private readonly string _nodeUrl;
            public BlockDataService(string nodeUrl)
            {
                _nodeUrl = nodeUrl;
            }
            public async Task<string> GetBlockDataAsync(string blockHeight)
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        if (String.Compare(blockHeight, "000000") == 0)
                        {
                            blockHeight = "";
                        }

                        client.BaseAddress = new Uri(_nodeUrl);

                        var response = await client.GetAsync($"v1/blocks/{blockHeight}").ConfigureAwait(true);

                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync().ConfigureAwait(true);
                        }
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                }
                return string.Empty;
            }
        }

        public class Block
        {
            public Block_extras? Extras { get; set; }
            public string? Height { get; set; }
            public string? Version { get; set; }
            public string? Timestamp { get; set; }
            public string? Nonce { get; set; }
            public int Tx_count { get; set; }
            public int Size { get; set; }
            public string? Weight { get; set; }
        }

        public class Block_extras
        {
            public string? Reward { get; set; }
            public decimal MedianFee { get; set; }
            public decimal[]? FeeRange { get; set; }
            public double TotalFees { get; set; }
            public string? AvgFee { get; set; }
            public string? AvgTxSize { get; set; }
            public string? TotalInputs { get; set; }
            public string? TotalOutputs { get; set; }
            public Block_pool? Pool { get; set; }

        }

        public class Block_pool
        {
            public string? Name { get; set; }
        }
        #endregion

        #region transaction
        public class TransactionService
        {
            private readonly string _nodeUrl;
            public TransactionService(string nodeUrl)
            {
                _nodeUrl = nodeUrl;
            }
            public async Task<string> GetTransactionAsync(string TransactionID)
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri(_nodeUrl);
                        var response = await client.GetAsync($"tx/{TransactionID}").ConfigureAwait(true);
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync().ConfigureAwait(true);
                        }
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                }
                return string.Empty;
            }
        }

        public class Transaction
        {
            public int Version { get; set; }
            public int Locktime { get; set; }
            public TransactionVin[]? Vin { get; set; }
            public TransactionVout[]? Vout { get; set; }
            public int Size { get; set; }
            public int Weight { get; set; }
            public int Fee { get; set; }
            public TransactionStatus? Status { get; set; }
        }

        public class TransactionStatus
        {
            public int Block_height { get; set; }
            public int Block_time { get; set; }
        }

        public class TransactionVin
        {
            public TransactionVinPrevout? Prevout { get; set; }
            public bool Is_coinbase { get; set; }
        }

        public class TransactionVinPrevout
        {
            public string? Scriptpubkey_address { get; set; }
            public long Value { get; set; }
        }

        public class TransactionVout
        {
            public string? Scriptpubkey_asm { get; set; }
            public string? Scriptpubkey_address { get; set; }
            public long Value { get; set; }
        }
        #endregion

        #region block transactions
        public class TransactionsForBlockService
        {
            private readonly string _nodeUrl;

            public TransactionsForBlockService(string nodeUrl)
            {
                _nodeUrl = nodeUrl;
            }

            public async Task<string> GetTransactionsForBlockAsync(string blockHash, string lastSeenBlockTransaction)
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri(_nodeUrl);
                        var response = await client.GetAsync($"block/{blockHash}/txs/{lastSeenBlockTransaction}").ConfigureAwait(true);
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync().ConfigureAwait(true);
                        }

                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                }
                return null!;
            }
        }

        public class Block_Transactions
        {
            public string? Txid { get; set; }
            public List<Vin_BlockTransactions>? Vin { get; set; }
            public List<Vout_BlockTransactions>? Vout { get; set; }
            public string? Fee { get; set; }
        }

        public class Vin_BlockTransactions
        {
        }

        public class Vout_BlockTransactions
        {
            public string? Value { get; set; }
        }
        #endregion

        #region date/time
        public static class DateTimeExtensions
        {
            public static DateTime FromUnixTimeMilliseconds(long milliseconds)
            {
                DateTimeOffset dateTimeOffset = DateTimeOffset.FromUnixTimeMilliseconds(milliseconds);
                return dateTimeOffset.UtcDateTime;
            }
        }
        #endregion

        #region charts
        #region price chart
        public class PriceCoordinatesList
        {
            public string? X { get; set; }
            public decimal Y { get; set; }
        }

        public class HistoricPriceDataService
        {
            public async Task<string> GetHistoricPriceDataAsync(string chartPeriod)
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri("https://api.blockchain.info/");
                        string blockChainInfoPeriod = "";
                        if (String.Compare(chartPeriod, "1m") == 0)
                        {
                            blockChainInfoPeriod = "1months";
                        }
                        if (String.Compare(chartPeriod, "3m") == 0)
                        {
                            blockChainInfoPeriod = "3months";
                        }
                        if (String.Compare(chartPeriod, "6m") == 0)
                        {
                            blockChainInfoPeriod = "6months";
                        }
                        if (String.Compare(chartPeriod, "1y") == 0)
                        {
                            blockChainInfoPeriod = "1years";
                        }
                        if (String.Compare(chartPeriod, "3y") == 0)
                        {
                            blockChainInfoPeriod = "3years";
                        }
                        if (String.Compare(chartPeriod, "all") == 0)
                        {
                            blockChainInfoPeriod = "all";
                        }
                        var response = await client.GetAsync($"charts/market-price?timespan={blockChainInfoPeriod}&format=json").ConfigureAwait(true);
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync().ConfigureAwait(true);
                        }
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                }
                return string.Empty;
            }
        }
        #endregion
        #region market cap chart
        public class MarketCapCoordinatesList
        {
            public string? X { get; set; }
            public decimal Y { get; set; }
        }

        public class MarketCapDataService
        {
            public async Task<string> GetMarketCapDataAsync(string chartPeriod)
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri("https://api.blockchain.info/");
                        string blockChainInfoPeriod = "";
                        if (String.Compare(chartPeriod, "1m") == 0)
                        {
                            blockChainInfoPeriod = "1months";
                        }
                        if (String.Compare(chartPeriod, "3m") == 0)
                        {
                            blockChainInfoPeriod = "3months";
                        }
                        if (String.Compare(chartPeriod, "6m") == 0)
                        {
                            blockChainInfoPeriod = "6months";
                        }
                        if (String.Compare(chartPeriod, "1y") == 0)
                        {
                            blockChainInfoPeriod = "1years";
                        }
                        if (String.Compare(chartPeriod, "3y") == 0)
                        {
                            blockChainInfoPeriod = "3years";
                        }
                        if (String.Compare(chartPeriod, "all") == 0)
                        {
                            blockChainInfoPeriod = "all";
                        }
                        var response = await client.GetAsync($"charts/market-cap?timespan={blockChainInfoPeriod}&format=json").ConfigureAwait(true);
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync().ConfigureAwait(true);
                        }
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                }
                return string.Empty;
            }
        }
        #endregion
        #region reward chart
        public class HistoricRewardsAndPrice
        {
            public string? Timestamp { get; set; }
            public decimal AvgRewards { get; set; }
        }
        #endregion
        #region fees chart
        public class HistoricFeesAndPrice
        {
            public string? Timestamp { get; set; }
            public decimal AvgFees { get; set; }
        }
        #endregion
        #region hashrate and difficulty charts
        public class HashrateSnapshot
        {
            public string? Timestamp { get; set; }
            public decimal AvgHashrate { get; set; }
        }

        public class DifficultySnapshot
        {
            public string? Time { get; set; }
            public decimal Difficulty { get; set; }
        }

        public class HashrateAndDifficultyService
        {
            private readonly string _nodeUrl;
            public HashrateAndDifficultyService(string nodeUrl)
            {
                _nodeUrl = nodeUrl;
            }
            public async Task<string> GetHashrateAndDifficultyAsync(string chartPeriod)
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri(_nodeUrl);
                        var response = await client.GetAsync($"v1/mining/hashrate/{chartPeriod}").ConfigureAwait(true);
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync().ConfigureAwait(true);
                        }
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                }
                return string.Empty;
            }
        }
        #endregion
        #region pool hashrate
        public class PoolHashrateSnapshot
        {
            public string? Timestamp { get; set; }
            public decimal AvgHashrate { get; set; }
        }


        public class PoolHashrateService
        {
            private readonly string _nodeUrl;
            public PoolHashrateService(string nodeUrl)
            {
                _nodeUrl = nodeUrl;
            }
            public async Task<string> GetPoolHashrateAsync(string slug)
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri(_nodeUrl);
                        var response = await client.GetAsync($"v1/mining/pool/{slug}/hashrate/").ConfigureAwait(true);
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync().ConfigureAwait(true);
                        }
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                }
                return string.Empty;
            }
        }
        #endregion
        #region fee rates chart
        public class BlockFeeRates
        {
            public string? Timestamp { get; set; }
            public double AvgFee_0 { get; set; }
            public double AvgFee_10 { get; set; }
            public double AvgFee_25 { get; set; }
            public double AvgFee_50 { get; set; }
            public double AvgFee_75 { get; set; }
            public double AvgFee_90 { get; set; }
            public double AvgFee_100 { get; set; }
        }

        public class BlockFeeRatesDataService
        {
            private readonly string _nodeUrl;
            public BlockFeeRatesDataService(string nodeUrl)
            {
                _nodeUrl = nodeUrl;
            }
            public async Task<string> GetBlockFeeRatesAsync(string chartPeriod)
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri(_nodeUrl);
                        var response = await client.GetAsync($"v1/mining/blocks/fee-rates/{chartPeriod}").ConfigureAwait(true);
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync().ConfigureAwait(true);
                        }
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                }
                return string.Empty;
            }
        }
        #endregion
        #region circulation chart
        public class BTCInCircChartCoordinates
        {
            public string? X { get; set; } // date
            public decimal Y { get; set; } // BTC in circ
        }

        public class BitcoinsInCirculationDataService
        {
            public async Task<string> GetBitcoinsInCirculationAsync(string chartPeriod)
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri("https://api.blockchain.info/");
                        string blockChainInfoPeriod = "";
                        if (String.Compare(chartPeriod, "1m") == 0)
                        {
                            blockChainInfoPeriod = "1months";
                        }
                        if (String.Compare(chartPeriod, "3m") == 0)
                        {
                            blockChainInfoPeriod = "3months";
                        }
                        if (String.Compare(chartPeriod, "6m") == 0)
                        {
                            blockChainInfoPeriod = "6months";
                        }
                        if (String.Compare(chartPeriod, "1y") == 0)
                        {
                            blockChainInfoPeriod = "1years";
                        }
                        if (String.Compare(chartPeriod, "3y") == 0)
                        {
                            blockChainInfoPeriod = "3years";
                        }
                        if (String.Compare(chartPeriod, "all") == 0)
                        {
                            blockChainInfoPeriod = "all";
                        }
                        var response = await client.GetAsync($"charts/total-bitcoins?timespan={blockChainInfoPeriod}&format=json").ConfigureAwait(true);
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync().ConfigureAwait(true);
                        }
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                }
                return string.Empty;
            }
        }
        #endregion
        #region block size chart
        public class Sizes
        {
            public string? Timestamp { get; set; }
            public decimal AvgSize { get; set; }
        }

        public class BlockSizeAndWeightService
        {
            private readonly string _nodeUrl;
            public BlockSizeAndWeightService(string nodeUrl)
            {
                _nodeUrl = nodeUrl;
            }
            public async Task<string> GetBlockSizeAndWeightServiceAsync(string chartPeriod)
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri(_nodeUrl);
                        var response = await client.GetAsync($"v1/mining/blocks/sizes-weights/{chartPeriod}").ConfigureAwait(true);
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync().ConfigureAwait(true);
                        }
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                }
                return string.Empty;
            }
        }
        #endregion
        #region unique addresses chart
        public class UniqueAddressesList
        {
            public string? X { get; set; }
            public decimal Y { get; set; }
        }

        public class UniqueAddressesDataService
        {
            public async Task<string> GetUniqueAddressesDataAsync(string chartPeriod)
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri("https://api.blockchain.info/");
                        string blockChainInfoPeriod = "";
                        if (String.Compare(chartPeriod, "1m") == 0)
                        {
                            blockChainInfoPeriod = "1months";
                        }
                        if (String.Compare(chartPeriod, "3m") == 0)
                        {
                            blockChainInfoPeriod = "3months";
                        }
                        if (String.Compare(chartPeriod, "6m") == 0)
                        {
                            blockChainInfoPeriod = "6months";
                        }
                        if (String.Compare(chartPeriod, "1y") == 0)
                        {
                            blockChainInfoPeriod = "1years";
                        }
                        if (String.Compare(chartPeriod, "3y") == 0)
                        {
                            blockChainInfoPeriod = "3years";
                        }
                        if (String.Compare(chartPeriod, "all") == 0)
                        {
                            blockChainInfoPeriod = "all";
                        }
                        var response = await client.GetAsync($"charts/n-unique-addresses?timespan={blockChainInfoPeriod}&format=json").ConfigureAwait(true);
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync().ConfigureAwait(true);
                        }
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                }
                return string.Empty;
            }
        }
        #endregion
        #region utxo chart
        public class UTXOList
        {
            public string? X { get; set; }
            public decimal Y { get; set; }
        }

        public class UTXODataService
        {
            public async Task<string> GetUTXODataAsync(string chartPeriod)
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri("https://api.blockchain.info/");
                        string blockChainInfoPeriod = "";
                        if (String.Compare(chartPeriod, "1m") == 0)
                        {
                            blockChainInfoPeriod = "1months";
                        }
                        if (String.Compare(chartPeriod, "3m") == 0)
                        {
                            blockChainInfoPeriod = "3months";
                        }
                        if (String.Compare(chartPeriod, "6m") == 0)
                        {
                            blockChainInfoPeriod = "6months";
                        }
                        if (String.Compare(chartPeriod, "1y") == 0)
                        {
                            blockChainInfoPeriod = "1years";
                        }
                        if (String.Compare(chartPeriod, "3y") == 0)
                        {
                            blockChainInfoPeriod = "3years";
                        }
                        if (String.Compare(chartPeriod, "all") == 0)
                        {
                            blockChainInfoPeriod = "all";
                        }
                        var response = await client.GetAsync($"charts/utxo-count?timespan={blockChainInfoPeriod}&format=json").ConfigureAwait(true);
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync().ConfigureAwait(true);
                        }
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                }
                return string.Empty;
            }
        }
        #endregion
        #region pools ranking chart
        public class PoolsRanking
        {
            public string? Name { get; set; }
            public string? BlockCount { get; set; }
        }

        public class PoolsRankingDataService
        {
            private readonly string _nodeUrl;
            public PoolsRankingDataService(string nodeUrl)
            {
                _nodeUrl = nodeUrl;
            }
            public async Task<string> GetPoolsRankingDataAsync(string chartPeriod)
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri(_nodeUrl);
                        var response = await client.GetAsync($"v1/mining/pools/{chartPeriod}").ConfigureAwait(true);
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync().ConfigureAwait(true);
                        }
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                }
                return string.Empty;
            }
        }
        #endregion
        #region nodes per network, channels and capacity charts
        public class NodesPerNetworkAndCapacity
        {
            public string? Added { get; set; }
            public double Channel_count { get; set; }
            public double Total_capacity { get; set; }
            public double Tor_nodes { get; set; }
            public double Clearnet_nodes { get; set; }
            public double Unannounced_nodes { get; set; }
            public double Clearnet_tor_nodes { get; set; }
        }

        public class NodesPerNetworkAndCapacityDataService
        {
            private readonly string _nodeUrl;
            public NodesPerNetworkAndCapacityDataService(string nodeUrl)
            {
                _nodeUrl = nodeUrl;
            }
            public async Task<string> GetNodesPerNetworkAndCapacityAsync(string chartPeriod)
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri(_nodeUrl);
                        var response = await client.GetAsync($"v1/lightning/statistics/{chartPeriod}").ConfigureAwait(true);
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync().ConfigureAwait(true);
                        }
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                }
                return string.Empty;
            }
        }
        #endregion
        #region nodes by country chart
        public class CountryName
        {
            public string? En { get; set; }
        }

        public class LightningNodeCountry
        {
            public CountryName? Name { get; set; }
            public decimal Count { get; set; }
        }

        public class LightningNodesByCountryService
        {
            private readonly string _nodeUrl;
            public LightningNodesByCountryService(string nodeUrl)
            {
                _nodeUrl = nodeUrl;
            }
            public async Task<string> GetLightningNodesByCountryAsync()
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri(_nodeUrl);
                        var response = await client.GetAsync($"v1/lightning/nodes/countries").ConfigureAwait(true);
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync().ConfigureAwait(true);
                        }
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                }
                return string.Empty;
            }
        }

        #endregion

        #endregion

        #region circulation
        public class CirculationCalculator
        {
            // Initial block reward
            private const decimal InitialBlockReward = 50M;

            // Number of blocks per halving
            private const int BlocksPerHalving = 210000;

            public static decimal CalculateTotalBitcoinsIssued(int blockHeight)
            {
                // Determine the number of halvings
                int numberOfHalvings = blockHeight / BlocksPerHalving;

                // Initialize the total bitcoins issued
                decimal totalBitcoinsIssued = 0;

                // Calculate total bitcoins issued before the current halving
                for (int i = 0; i < numberOfHalvings; i++)
                {
                    // Total bitcoins issued in each halving period
                    decimal bitcoinsIssuedInHalving = BlocksPerHalving * InitialBlockReward / (decimal)Math.Pow(2, i);

                    // Add to the total bitcoins issued
                    totalBitcoinsIssued += bitcoinsIssuedInHalving;
                }

                // Calculate remaining bitcoins for the current halving period
                int remainingBlocks = blockHeight % BlocksPerHalving;
                totalBitcoinsIssued += remainingBlocks * GetBlockReward(numberOfHalvings);

                return totalBitcoinsIssued;
            }

            private static decimal GetBlockReward(int halvings)
            {
                // Calculate the block reward for the given number of halvings
                return InitialBlockReward / (decimal)Math.Pow(2, halvings);
            }
        }
        #endregion

        #region ath, market data
        public class CoinGeckoMarketDataService
        {
            private readonly string _nodeUrl;

            public CoinGeckoMarketDataService()
            {
                _nodeUrl = "https://api.coingecko.com";
            }

            public async Task<string> GetCoinGeckoMarketDataAsync()
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri(_nodeUrl);

                        var response = await client.GetAsync($"/api/v3/coins/bitcoin").ConfigureAwait(true);
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync().ConfigureAwait(true);
                        }

                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                }
                return string.Empty;
            }
        }

        public class Rootobject
        {
            public Market_Data? Market_data { get; set; }
        }

        public class Market_Data
        {
            public Ath? Ath { get; set; }
            public Ath_Change_Percentage? Ath_change_percentage { get; set; }
            public Ath_Date? Ath_date { get; set; }
            public High_24H? High_24h { get; set; }
            public Low_24H? Low_24h { get; set; }
            public Price_Change_Percentage_24H_In_Currency? Price_change_percentage_24h_in_currency { get; set; }
            public Price_Change_Percentage_7D_In_Currency? Price_change_percentage_7d_in_currency { get; set; }
            public Price_Change_Percentage_14D_In_Currency? Price_change_percentage_14d_in_currency { get; set; }
            public Price_Change_Percentage_30D_In_Currency? Price_change_percentage_30d_in_currency { get; set; }
            public Price_Change_Percentage_60D_In_Currency? Price_change_percentage_60d_in_currency { get; set; }
            public Price_Change_Percentage_200D_In_Currency? Price_change_percentage_200d_in_currency { get; set; }
            public Price_Change_Percentage_1Y_In_Currency? Price_change_percentage_1y_in_currency { get; set; }
        }

        public class Ath
        {
            public double Eur { get; set; }
            public double Gbp { get; set; }
            public double Usd { get; set; }
            public double Xau { get; set; }
        }

        public class Ath_Change_Percentage
        {
            public float Eur { get; set; }
            public float Gbp { get; set; }
            public float Usd { get; set; }
            public float Xau { get; set; }
        }

        public class Ath_Date
        {
            public DateTime Eur { get; set; }
            public DateTime Gbp { get; set; }
            public DateTime Usd { get; set; }
            public DateTime Xau { get; set; }
        }

        public class High_24H
        {
            public double Eur { get; set; }
            public double Gbp { get; set; }
            public double Usd { get; set; }
            public double Xau { get; set; }
        }

        public class Low_24H
        {
            public double Eur { get; set; }
            public double Gbp { get; set; }
            public double Usd { get; set; }
            public double Xau { get; set; }
        }

        public class Price_Change_Percentage_24H_In_Currency
        {
            public double Eur { get; set; }
            public double Gbp { get; set; }
            public double Usd { get; set; }
            public double Xau { get; set; }
        }

        public class Price_Change_Percentage_7D_In_Currency
        {
            public double Eur { get; set; }
            public double Gbp { get; set; }
            public double Usd { get; set; }
            public double Xau { get; set; }
        }

        public class Price_Change_Percentage_14D_In_Currency
        {
            public double Eur { get; set; }
            public double Gbp { get; set; }
            public double Usd { get; set; }
            public double Xau { get; set; }
        }

        public class Price_Change_Percentage_30D_In_Currency
        {
            public double Eur { get; set; }
            public double Gbp { get; set; }
            public double Usd { get; set; }
            public double Xau { get; set; }
        }

        public class Price_Change_Percentage_60D_In_Currency
        {
            public double Eur { get; set; }
            public double Gbp { get; set; }
            public double Usd { get; set; }
            public double Xau { get; set; }
        }

        public class Price_Change_Percentage_200D_In_Currency
        {
            public double Eur { get; set; }
            public double Gbp { get; set; }
            public double Usd { get; set; }
            public double Xau { get; set; }
        }

        public class Price_Change_Percentage_1Y_In_Currency
        {
            public double Eur { get; set; }
            public double Gbp { get; set; }
            public double Usd { get; set; }
            public double Xau { get; set; }
        }

        #endregion

        #region messari data
        public class MessariMarketDataService
        {
            private readonly string _nodeUrl;

            public MessariMarketDataService()
            {
                _nodeUrl = "https://data.messari.io";
            }

            public async Task<string> GetMessariMarketDataAsync()
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri(_nodeUrl);

                        var response = await client.GetAsync($"/api/v1/assets/bitcoin/metrics").ConfigureAwait(true);
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync().ConfigureAwait(true);
                        }

                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000).ConfigureAwait(true);
                    }
                }
                return string.Empty;
            }
        }

        public class MessariRootobject
        {
            public Data? Data { get; set; }
        }

        public class Data
        {
            public Blockchain_Stats_24_Hours? Blockchain_stats_24_hours { get; set; }
            public Cycle_Low? Cycle_low { get; set; }
            public On_Chain_Data? On_chain_data { get; set; }
        }

        public class Blockchain_Stats_24_Hours
        {
            public int Count_of_active_addresses { get; set; }
            public int Count_of_tx { get; set; }
            public int Count_of_blocks_added { get; set; }
        }

        public class Cycle_Low
        {
            public float Percent_up { get; set; }
        }

        public class On_Chain_Data
        {
            public int Addresses_count { get; set; }
            public int Addresses_balance_greater_0_001_native_units_count { get; set; }
            public int Addresses_balance_greater_0_01_native_units_count { get; set; }
            public int Addresses_balance_greater_0_1_native_units_count { get; set; }
            public int Addresses_balance_greater_1_native_units_count { get; set; }
            public int Addresses_balance_greater_10_native_units_count { get; set; }
            public int Addresses_balance_greater_100_native_units_count { get; set; }
            public int Addresses_balance_greater_100k_native_units_count { get; set; }
            public int Addresses_balance_greater_10k_native_units_count { get; set; }
            public int Addresses_balance_greater_1k_native_units_count { get; set; }
            public int Addresses_balance_greater_1m_native_units_count { get; set; }
            public decimal Issuance_last_24_hours_native_units { get; set; }
            public decimal Txn_volume_last_24_hours_native_units { get; set; }
            public float Average_utxo_age { get; set; }
            public int Median_utxo_age { get; set; }
            public int Utxo_count_last_24_hours { get; set; }
        }
        #endregion

        #endregion
    }
}