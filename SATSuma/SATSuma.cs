/*  
⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣴⣶⣾⣿⣿⣿⣿⣷⣶⣦⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀  ⠀  _____      _______ _____                       
⠀⠀⠀⠀⠀⣠⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣄⠀⠀⠀⠀⠀  ⠀ / ____|  /\|__   __/ ____|                 v2.1    
⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⠀⠀ ⠀ ⠀| (___   /  \  | | | (___  _   _ _ __ ___   __ _ 
⠀⠀⣴⣿⣿⣿⣿⣿⣿⣿⠟⠿⠿⡿⠀⢰⣿⠁⢈⣿⣿⣿⣿⣿⣿⣿⣿⣦⠀   ⠀ \___ \ / /\ \ | |  \___ \| | | | '_ ` _ \ / _` |
⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣤⣄⠀⠀⠀⠈⠉⠀⠸⠿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀  ⠀ ____) / ____ \| |  ____) | |_| | | | | | | (_| |
⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠀⠀⢠⣶⣶⣤⡀⠀⠈⢻⣿⣿⣿⣿⣿⣿⣿⡆  ⠀|_____/_/    \_\_| |_____/ \__,_|_| |_| |_|\__,_| 
⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀⠀⠼⣿⣿⡿⠃⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣷   A block explorer, Xpub viewer, bitcoin & lightning
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⢀⣀⣀⠀⠀⠀⠀⢴⣿⣿⣿⣿⣿⣿⣿⣿⣿   dashboard with the ability to create encryted 
⢿⣿⣿⣿⣿⣿⣿⣿⢿⣿⠁⠀⠀⣼⣿⣿⣿⣦⠀⠀⠈⢻⣿⣿⣿⣿⣿⣿⣿⡿   bookmarks and notes for addresses, blocks, xpubs &
⠸⣿⣿⣿⣿⣿⣿⣏⠀⠀⠀⠀⠀⠛⠛⠿⠟⠋⠀⠀⠀⣾⣿⣿⣿⣿⣿⣿⣿⠇   transactions. Xpub queries will only work on the 
⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⠇⠀⣤⡄⠀⣀⣀⣀⣀⣠⣾⣿⣿⣿⣿⣿⣿⣿⡟⠀   user's own node. Keys to unlock encrypted bookmarks
⠀⠀⠻⣿⣿⣿⣿⣿⣿⣿⣄⣰⣿⠁⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠀⠀   are not stored anywhere and are uncrecoverable. The
⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀   bookmarks file is SATSuma_bookmarks.json, and the
⠀⠀⠀⠀⠀⠙⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠀⠀⠀⠀⠀   themes file is SATSuma_themes.json, both are in the
⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠻⠿⢿⣿⣿⣿⣿⡿⠿⠟⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀   user's application data directory.

🍊 Homepage
https://satsuma.btcdir.org/

🍊 Version history 
https://satsuma.btcdir.org/version-history/
            
🍊 Download
https://satsuma.btcdir.org/download/

* Stuff to do:
* Taproot support on xpub screen
* dca - estimate a purchased amount when weekly or monthly freq selected and no matching date has been found on first item
* validate date input on dca (can't be same, can't start today, etc)
* improve clarity of label colours, axis colours on certain themes
* check main menu appearance when offline mode active
* test all again
*/

#region Using
using NBitcoin;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using QRCoder;
using ScottPlot;
using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.NetworkInformation;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;
using Control = System.Windows.Forms.Control;
using ListViewItem = System.Windows.Forms.ListViewItem;
using Panel = System.Windows.Forms.Panel;
using System.Drawing.Drawing2D;
using CustomControls.RJControls;
using System.Diagnostics;
using SATSuma.Properties;
using ScottPlot.Renderable;
#endregion

namespace SATSuma
{
    public partial class SATSuma : Form
    {
        readonly string CurrentVersion = "2.1";

        #region rounded form
        [DllImport("Gdi32.dll", EntryPoint = "CreateRoundRectRgn")]
        private static extern IntPtr CreateRoundRectRgn
         (
           int nLeftRect,     // x-coordinate of upper-left corner
           int nTopRect,      // y-coordinate of upper-left corner
           int nRightRect,    // x-coordinate of lower-right corner
           int nBottomRect,   // y-coordinate of lower-right corner
           int nWidthEllipse, // height of ellipse
           int nHeightEllipse // width of ellipse
         );
        #endregion

        #region ⚡VARIABLE DECLARATION⚡
        #region timers
        private int intDisplayCountdownToRefresh = 0; // countdown in seconds to next refresh, for display only
        private int intAPIGroup1TimerIntervalMillisecsConstant = 60000; // milliseconds, used to reset the interval of the timer for api refreshes
        private int APIGroup1DisplayTimerIntervalSecsConstant = 60; // seconds, used to reset the countdown display to its original number
        private int intDisplaySecondsElapsedSinceUpdate = 0; // used to count seconds since the data was last refreshed, for display only.
        private int APIRefreshFrequency = 1; // mins. Default value 1. Initial value only
        #endregion
        #region header variables
        bool isTextBoxUniversalSearchWatermarkTextDisplayed = true; // header for watermarked universal search
        bool firstTimeGettingBlockTip = true;
        string searchTarget = ""; // used to determine what the search button will search for
        int totalSecondsSinceLastBlock = 0;
        #endregion
        #region address screen variables
        private int TotalAddressTransactionRowsAdded = 0; // keeps track of how many rows of Address transactions have been added to the listview
        int rowsReturnedByAddressTransactionsAPI; // holds number of rows returned by api (differs betweem mempool.space and own node)
        private string addressScreenConfUnconfOrAllTx = "chain"; // used to keep track of whether we're doing transactions requests for conf, unconf, or all transactions
        bool PartOfAnAllAddressTransactionsRequest = false; // 'all' transactions use an 'all' api for the first call, but afterwards mempoolConforAllTx is set to chain for remaining (confirmed) txs. This is used to keep headings, etc consistent
        #endregion
        #region transaction screen variables
        private int TransactionOutputsScrollPosition = 0; // used to remember position in scrollable panel to return to that position after paint event
        private int TransactionInputsScrollPosition = 0; // used to remember position in scrollable panel to return to that position after paint event
        private bool isInputButtonPressed = false;
        private bool InputDownButtonPressed = false;
        private bool InputUpButtonPressed = false;
        private bool isOutputButtonPressed = false;
        private bool OutputDownButtonPressed = false;
        private bool OutputUpButtonPressed = false;
        private readonly List<Point> linePoints = new List<Point>(); // used to store coordinates for all the lines on the transaction screen
        #endregion
        #region xpub screen variables
        private bool xpubValid = false;
        private bool isTextBoxXpubScreenOwnNodeURLWatermarkTextDisplayed = true;
        private bool isXpubButtonPressed = false;
        private bool XpubDownButtonPressed = false;
        private bool XpubUpButtonPressed = false;
        private string previousXpubScreenOwnNodeURLStringToCompare = "";
        private int XpubAddressesScrollPosition = 0; // used to remember position in scrollable panel to return to that position after paint event
        #endregion
        #region block screen variables
        private int TotalBlockTransactionRowsAdded = 0; // keeps track of how many rows of Block transactions have been added to the listview
        int rowsReturnedByBlockTransactionsAPI; // holds number of rows returned by api (differs betweem mempool.space and own node)
        #endregion
        #region directory screen variables
        private bool linkClicked = false; // used to supress multiple events (and multiple browser tabs) when opening external link in default browser
        #endregion
        #region bookmark screen variables
        private int bookmarksScrollPosition = 0; // used to remember position in scrollable panel to return to that position after paint event
        string bookmarkDataInFullPreserved = string.Empty;
        string bookmarkNoteInFullPreserved = string.Empty;
        string bookmarkKeyCheckPreserved = string.Empty;
        private bool isBookmarksButtonPressed = false;
        private bool bookmarksDownButtonPressed = false;
        private bool bookmarksUpButtonPressed = false;
        private bool isBookmarkKeyWatermarkTextDisplayed = true;
        #endregion
        #region add bookmark tab variables
        private bool isBookmarkNoteWatermarkTextDisplayed = true;
        private bool isEncryptionKeyWatermarkTextDisplayed = true;
        #endregion
        #region blocks screen variables
        private string storedLastSeenBlockNumber = "0"; // restart point to retrieve blocks for block list
        #endregion
        #region btc dashboard variables
        private bool ObtainedHalvingSecondsRemainingYet = false; // used to check whether we know halvening seconds before we start trying to subtract from them
        #endregion
        #region settings variables
        readonly double UIScale = 3; // defaults to 150%
        double UIScaleToBeSavedToSettings = 3; // (1 = 100%, 2 = 125%, 3 = 150%, 4 = 175%, 5 = 200%)
        bool UIScaleAlreadySavedInFile = false; // is a UIScale saved in the settings file
        string UIScaleInFile = "3"; // the UIScale saved in the settingss file
        bool offlineMode = false; // disables all comms apart from to full node
        bool testNet = false; // testnet or mainnet
        bool xpubNodeURLAlreadySavedInFile = false; // keeps track of whether an xpub node URL is already saved
        bool settingsAlreadySavedInFile = false; // keeps track of whether settings are already saved
        bool defaultThemeAlreadySavedInFile = false; // keeps track of whether a default theme is already saved
        bool isTextBoxSettingsOwnNodeURLWatermarkTextDisplayed = true; // settings screen for watermarked node field
        private string NodeURL = "https://mempool.space/api/"; // default value. Can be changed by user.
        private string xpubNodeURL = ""; // no default value. User must provide path to own node
        string xpubNodeURLInFile = ""; // stores the xpub node URL from the file to check whether a newly supplied one is different, in which case we'll update the file
        string settingsInFile = ""; // stores the settings from the file to check whether any have changed, in which case we'll update the file
        string defaultThemeInFile = ""; // stores the default theme from the file to check whether a newly supplied one is different, in which case we'll update the file
        string currentlyActiveTheme = ""; // used to prevent user from deleting active theme
        string currencySelected = "D"; // for settings record in bookmarks file
        string alwaysOnTop = "0"; // for settings record in bookmarks file
        string selectedNetwork = "M"; // for settings record in bookmarks file
        string blockchairComJSONSelected = "1"; // for settings record in bookmarks file
        string bitcoinExplorerEnpointsSelected = "1"; // for settings record in bookmarks file
        string blockchainInfoEndpointsSelected = "1"; // for settings record in bookmarks file
        string OfflineModeSelected = "0"; // for settings record in bookmarks file 
        string startupScreenToSave = ""; // for settings record in bookmarks file
        bool enableDirectory = true; // enable or disable links directory
        string directoryEnabled = "1"; // for settings record in bookmarks file
        #endregion
        #region data services
        private TransactionsForAddressService _transactionsForAddressService;
        private TransactionsForXpubAddressService _transactionsForXpubAddressService;
        private BlockDataService _blockService;
        private TransactionService _transactionService;
        private TransactionsForBlockService _transactionsForBlockService;
        private HashrateAndDifficultyService _hashrateAndDifficultyService;
        private HistoricPriceDataService _historicPriceDataService;
        private MarketCapDataService _marketCapDataService;
        private BlockFeeRatesDataService _blockFeeRatesDataService;
        private BitcoinsInCirculationDataService _bitcoinsInCirculationDataService;
        private BlockSizeAndWeightService _blockSizeAndWeightService;
        private UniqueAddressesDataService _uniqueAddressesDataService;
        private UTXODataService _utxoDataService;
        private PoolsRankingDataService _poolsRankingDataService;
        private LightningNodesByCountryService _lightningNodesByCountryService;
        #endregion
        #region api use flag variables
        private bool RunBitcoinExplorerEndpointAPI = true; // enable/disable API
        private bool RunBlockchainInfoEndpointAPI = true; // enable/disable API
        private bool RunBitcoinExplorerOrgJSONAPI = true; // enable/disable API
        private bool RunBlockchairComJSONAPI = true; // enable/disable API
        private bool RunMempoolSpaceLightningAPI = true; // enable/disable API
        #endregion
        #region variables to hold button states
        bool dontDisableButtons = true; // ignore button disables during initial setup
        bool btnShowAllAddressTXWasEnabled = true; // Address screen - store button state during queries to return to that state afterwards
        bool btnShowConfirmedAddressTXWasEnabled = false; // Address screen - store button state during queries to return to that state afterwards
        bool btnShowUnconfirmedAddressTXWasEnabled = true; // Address screen - store button state during queries to return to that state afterwards
        bool btnFirstAddressTransactionWasEnabled = false; // Address screen - store button state during queries to return to that state afterwards
        bool btnNextAddressTransactionsWasEnabled = false; // Address screen - store button state during queries to return to that state afterwards
        bool BtnViewTransactionFromAddressWasEnabled = false; // Address screen - store button state during queries to return to that state afterwards
        bool BtnViewBlockFromAddressWasEnabled = false; // Address screen - store button state during queries to return to that state afterwards
        bool textBoxSubmittedAddressWasEnabled = true; // Address screen - store button state during queries to return to that state afterwards
        bool btnPreviousBlockTransactionsWasEnabled = false; // Block screen - store button state during queries to return to that state afterwards
        bool btnNextBlockTransactionsWasEnabled = false; // Block screen - store button state during queries to return to that state afterwards
        bool numericUpDownSubmittedBlockNumberWasEnabled = true; // Block screen - store button state during queries to return to that state afterwards
        bool btnNumericUpDownSubmittedBlockNumberUpWasEnabled = true; // Block screen - store button state during queries to return to that state afterwards
        bool btnNumericUpDownSubmittedBlockNumberDownWasEnabled = true; // Block screen - store button state during queries to return to that state afterwards
        bool btnNextBlockWasEnabled = false; // Block screen - store button state during queries to return to that state afterwards
        bool btnLookUpBlockWasEnabled = false; // Block screen - store button state during queries to return to that state afterwards
        bool btnPreviousBlockWasEnabled = true; // Block screen - store button state during queries to return to that state afterwards
        bool btnLookUpBlockListWasEnabled = true; // Block List screen - store button state during queries to return to that state afterwards
        bool btnViewBlockFromBlockListWasEnabled = false; // Block List screen - store button state during queries to return to that state afterwards
        bool btnNewer15BlocksWasEnabled = false; // Block List screen - store button state during queries to return to that state afterwards
        bool btnOlder15BlocksWasEnabled = true; // Block List screen - store button state during queries to return to that state afterwards
        bool numericUpDownBlockHeightToStartListFromWasEnabled = true; // Block List screen - store button state during queries to return to that state afterwards
        bool btnNumericUpDownBlockHeightToStartListFromUpWasEnabled = true; // Block List screen - store button state during queries to return to that state afterwards
        bool btnNumericUpDownBlockHeightToStartListFromDownWasEnabled = true; // Block List screen - store button state during queries to return to that state afterwards
        bool btnChartBlockFeesWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartDifficultyWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartHashrateWasEnabled = false; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartPriceWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartRewardWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartFeeRatesWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartCirculationWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartPeriod1mWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartPeriod1wWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartPeriod1yWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartPeriod24hWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartPeriod2yWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartPeriod3dWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartPeriod3mWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartPeriod3yWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartPeriod6mWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartPeriodAllWasEnabled = false; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartBlockSizeWasEnabled = false; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartUniqueAddressesWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnHashrateScaleLinearWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnHashrateScaleLogWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartDifficultyLinearWasEnabled = false; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartDifficultyLogWasEnabled = false; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartAddressScaleLinearWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartAddressScaleLogWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnPriceChartScaleLogWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnPriceChartScaleLinearWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartUTXOWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartPoolsRankingWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartNodesByNetworkWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartNodesByCountryWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartLightningCapacityWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartLightningChannelsWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartMarketCapWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnChartMarketCapLogWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnPriceConverterWasEnabled = true; // Chart screen - store button state during queries to return to that state afterwards
        bool btnTransactionInputsUpWasEnabled = false; // Transaction screen - store button state during queries to return to that state afterwards
        bool btnTransactionInputDownWasEnabled = false; // Transaction screen - store button state during queries to return to that state afterwards
        bool btnTransactionOutputsUpWasEnabled = false; // Transaction screen - store button state during queries to return to that state afterwards
        bool btnTransactionOutputsDownWasEnabled = false; // Transaction screen - store button state during queries to return to that state afterwards
        bool btnViewAddressFromTXInputWasEnabled = false; // Transaction screen - store button state during queries to return to that state afterwards
        bool btnViewAddressFromTXOutputWasEnabled = false; // Transaction screen - store button state during queries to return to that state afterwards
        private bool isSubmittedBlockNumberUpHeldDown = false; // Block screen - stores numericupdown button states for continuous value changes
        private bool isSubmittedBlockNumberDownHeldDown = false; // Block screen - stores numericupdown button states for continuous value changes
        private bool isBlockHeightToStartFromUpHeldDown = false; // Blocks screen - stores numericupdown button states for continuous value changes
        private bool isBlockHeightToStartFromDownHeldDown = false; // Blocks screen - stores numericupdown button states for continuous value changes
        private bool isDataRefreshPeriodUpHeldDown = false; // Settings screen - stores numericupdown button states for continuous value changes
        private bool isDataRefreshPeriodDownHeldDown = false; // Settings screen - stores numericupdown button states for continuous value changes
        private bool isZeroBalanceAdddressUpHeldDown = false; // Xpub screen - stores numericupdown button states for continuous value changes
        private bool isZeroBalanceAdddressDownHeldDown = false; // Xpub screen - stores numericupdown button states for continuous value changes
        private bool isDerivationPathsUpHeldDown = false; // Xpub screen - stores numericupdown button states for continuous value changes
        private bool isDerivationPathsDownHeldDown = false; // Xpub screen - stores numericupdown button states for continuous value changes
        private bool isOpacityUpHeldDown = false; // Create theme screen - stores numericupdown button states for continuous value changes
        private bool isOpacityDownHeldDown = false; // Create theme screen - stores numericupdown button states for continuous value changes
        #endregion
        #region colour variables
        Color subItemBackColor = Color.FromArgb(20, 20, 20);
        Color labelColor = Color.FromArgb(20, 20, 20);
        Color chartsBackgroundColor = Color.FromArgb(20, 20, 20);
        Color linesColor = Color.FromArgb(106, 72, 9);
        Color titleBackgroundColor = Color.FromArgb(0, 0, 0);
        Color listViewHeaderColor = Color.FromArgb(50, 50, 50);
        Color listViewHeaderTextColor = Color.Silver;
        Color tableTextColor = Color.FromArgb(255, 153, 0);
        #endregion
        #region variables specific to chart screen
        private int LastHighlightedIndex = -1; // used by charts for mousemove events to highlight plots closest to pointer
        private ScottPlot.Plottable.ScatterPlot scatter; // chart data gets plotted onto this
        private ScottPlot.Plottable.MarkerPlot HighlightedPoint; // highlighted (closest to pointer) plot gets plotted onto this
        bool ignoreMouseMoveOnChart = false; // ignore mouse move event while chart is still drawing
        string chartPeriod = "all"; // holds the string needed to generate charts with different time periods
        string chartType = ""; // keeps track of what type of chart is being displayed
        #endregion
        #region expanding panels
        private int currentHeightExpandingPanel = 0;
        private int currentWidthExpandingPanel = 0;
        private int currentWidthShrinkingPanel = 0;
        private int panelMaxHeight = 0;
        private int panelMaxWidth = 0;
        private int panelMinWidth = 0;
        private Panel panelToExpandVert = new Panel(); // panel animation vertical
        private Panel panelToExpand = new Panel(); // panel animation horizontal
        private Panel panelToShrink = new Panel(); // panel animation horizontal
        #endregion
        #region misc
        decimal OneBTCinSelectedCurrency = 0; // used to perform fiat conversions throughout SATSuma
        bool firstTimeLoadingScreen = true;
        bool firstTimeCustomThemeIndexChanged = true;
        double DCAFrequencyDays = 1; // for dca calculator screen
        #endregion
        #endregion

        #region ⚡INITIALISE⚡
        #region custom move form button
        [DllImport("user32.dll", EntryPoint = "ReleaseCapture")]  // needed for the code that moves the form as not using a standard control
        private extern static void ReleaseCapture();

        [DllImport("user32.dll", EntryPoint = "SendMessage")] // needed for the code that moves the form as not using a standard control
        private extern static void SendMessage(System.IntPtr hwnd, int wmsg, int wparam, int lparam);
        #endregion

        public SATSuma()
        {
            this.SetStyle(ControlStyles.OptimizedDoubleBuffer | ControlStyles.AllPaintingInWmPaint, true);
            InitializeComponent();

            #region restore saved UIScale
            RestoreUIScale(); // read UIScale from settings in bookmark file

            Dictionary<string, double> scaleMap = new Dictionary<string, double> // Translate saved UIScale value (1-5) into an actual UIScale value we can use
            {
                { "1", 1 },
                { "2", 1.25 },
                { "3", 1.5 },
                { "4", 1.75 },
                { "5", 2 }
            };

            if (UIScaleAlreadySavedInFile) // Set user's choice of UIScale
            {
                if (scaleMap.ContainsKey(UIScaleInFile))
                {
                    UIScale = scaleMap[UIScaleInFile];
                }
            }
            else // If nothing in settings, set it to the default 125% and save to settings
            {
                UIScale = 1.5;
                SaveSettingsToBookmarksFile();
            }
            // set the form dimensions
            this.Width = (int)(940 * UIScale);
            this.Height = (int)(754 * UIScale);
            #endregion
            #region check user data files exist and restore them from restore folder if they don't
            // files to be checked
            string appDataFolder = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
            string bookmarkFilePath = Path.Combine(appDataFolder, "SATSuma", "SATSuma_bookmarks.json");
            string themeFilePath = Path.Combine(appDataFolder, "SATSuma", "SATSuma_themes.json");
            // files to be restored if necessary
            string backupFolder = Path.Combine(Application.StartupPath, "Restore");
            string backupBookmarkFilePath = Path.Combine(backupFolder, "SATSuma_bookmarks.json");
            string backupThemeFilePath = Path.Combine(backupFolder, "SATSuma_themes.json");
            // restore files
            if (!File.Exists(bookmarkFilePath))
            {
                // Ensure the directory exists before copying the file
                Directory.CreateDirectory(Path.GetDirectoryName(bookmarkFilePath));
                File.Copy(backupBookmarkFilePath, bookmarkFilePath);
            }

            if (!File.Exists(themeFilePath))
            {
                // Ensure the directory exists before copying the file
                Directory.CreateDirectory(Path.GetDirectoryName(themeFilePath));
                File.Copy(backupThemeFilePath, themeFilePath);
            }
            #endregion
            #region rounded panels
            panel32.Paint += Panel_Paint;
            panel74.Paint += Panel_Paint;
            panel76.Paint += Panel_Paint;
            panel77.Paint += Panel_Paint;
            panel99.Paint += Panel_Paint;
            panel84.Paint += Panel_Paint;
            panel88.Paint += Panel_Paint;
            panel89.Paint += Panel_Paint;
            panel90.Paint += Panel_Paint;
            panel86.Paint += Panel_Paint;
            panel87.Paint += Panel_Paint;
            panel103.Paint += Panel_Paint;
            panel46.Paint += Panel_Paint;
            panel51.Paint += Panel_Paint;
            panel91.Paint += Panel_Paint;
            panel70.Paint += Panel_Paint;
            panel71.Paint += Panel_Paint;
            panel16.Paint += Panel_Paint;
            panel21.Paint += Panel_Paint;
            panel85.Paint += Panel_Paint;
            panel53.Paint += Panel_Paint;
            panel96.Paint += Panel_Paint;
            panel106.Paint += Panel_Paint;
            panel107.Paint += Panel_Paint;
            panel92.Paint += Panel_Paint;
            panelAddToBookmarks.Paint += Panel_Paint;
            panelAddToBookmarksBorder.Paint += Panel_Paint;
            panelLeftPanel.Paint += Panel_Paint;
            panelOwnNodeAddressTXInfo.Paint += Panel_Paint;
            panelOwnNodeBlockTXInfo.Paint += Panel_Paint;
            panelTransactionMiddle.Paint += Panel_Paint;
            panelErrorMessage.Paint += Panel_Paint;
            panelSettingsUIScale.Paint += Panel_Paint;
            panelSettingsUIScaleContainer.Paint += Panel_Paint;
            panelDCAMessages.Paint += Panel_Paint;
            panelDCASummary.Paint += Panel_Paint;
            panel117.Paint += Panel_Paint;
            panel119.Paint += Panel_Paint;
            panelPriceConvert.Paint += Panel_Paint;
            #endregion
            #region rounded panels (textbox containers)
            panelThemeNameContainer.Paint += Panel_Paint;
            panelOptionalNotesContainer.Paint += Panel_Paint;
            panelEncryptionKeyContainer.Paint += Panel_Paint;
            panelSubmittedAddressContainer.Paint += Panel_Paint;
            panelBlockHeightToStartFromContainer.Paint += Panel_Paint;
            panelTransactionIDContainer.Paint += Panel_Paint;
            panelSubmittedXpubContainer.Paint += Panel_Paint;
            panelXpubScreenOwnNodeURLContainer.Paint += Panel_Paint;
            panelBookmarkKeyContainer.Paint += Panel_Paint;
            panelConvertBTCToFiatContainer.Paint += Panel_Paint;
            panelConvertUSDToBTCContainer.Paint += Panel_Paint;
            panelConvertEURToBTCContainer.Paint += Panel_Paint;
            panelConvertGBPToBTCContainer.Paint += Panel_Paint;
            panelConvertXAUToBTCContainer.Paint += Panel_Paint;
            panelSettingsOwnNodeURLContainer.Paint += Panel_Paint;
            panelAppearanceTextbox1Container.Paint += Panel_Paint;
            panelComboBoxStartupScreenContainer.Paint += Panel_Paint;
            panelCustomizeThemeListContainer.Paint += Panel_Paint;
            panelHeadingBackgroundSelect.Paint += Panel_Paint;
            panelSelectBlockNumberContainer.Paint += Panel_Paint;
            panelUniversalSearchContainer.Paint += Panel_Paint;
            panel75.Paint += Panel_Paint;
            panel95.Paint += Panel_Paint;
            panel93.Paint += Panel_Paint;
            panel98.Paint += Panel_Paint;
            panel111.Paint += Panel_Paint;
            panel113.Paint += Panel_Paint;
            panel114.Paint += Panel_Paint;
            panel115.Paint += Panel_Paint;
            #endregion
            #region panels (heading containers)
            panel1.Paint += Panel_Paint;
            panel2.Paint += Panel_Paint;
            panel3.Paint += Panel_Paint;
            panel4.Paint += Panel_Paint;
            panel5.Paint += Panel_Paint;
            panel6.Paint += Panel_Paint;
            panel7.Paint += Panel_Paint;
            panel8.Paint += Panel_Paint;
            panel9.Paint += Panel_Paint;
            panel10.Paint += Panel_Paint;
            panel11.Paint += Panel_Paint;
            panel12.Paint += Panel_Paint;
            panel20.Paint += Panel_Paint;
            panel23.Paint += Panel_Paint;
            panel26.Paint += Panel_Paint;
            panel29.Paint += Panel_Paint;
            panel27.Paint += Panel_Paint;
            panel28.Paint += Panel_Paint;
            panel31.Paint += Panel_Paint;
            panel38.Paint += Panel_Paint;
            panel39.Paint += Panel_Paint;
            panel40.Paint += Panel_Paint;
            panel41.Paint += Panel_Paint;
            panel42.Paint += Panel_Paint;
            panel43.Paint += Panel_Paint;
            panel44.Paint += Panel_Paint;
            panel45.Paint += Panel_Paint;
            panel57.Paint += Panel_Paint;
            panel78.Paint += Panel_Paint;
            panel79.Paint += Panel_Paint;
            panel80.Paint += Panel_Paint;
            panel81.Paint += Panel_Paint;
            panel94.Paint += Panel_Paint;
            panel105.Paint += Panel_Paint;
            panel109.Paint += Panel_Paint;
            panelLoadingAnimationContainer.Paint += Panel_Paint;
            #endregion
            #region rounded form
            this.FormBorderStyle = FormBorderStyle.None;
            Region = System.Drawing.Region.FromHrgn(CreateRoundRectRgn(0, 0, Width, Height, 30, 30));
            // Add a 1-pixel border around the form
            Padding = new Padding(1);
            #endregion
        }

        private void SATSuma_Load(object sender, EventArgs e)
        {
            try
            {
                #region UIScale
                StoreOriginalDimensions(this);

                #region apply UIScale to all controls
                ScaleAllElements_Click(sender, e);
                #endregion

                #region restore UIScale labels on settings screen and disable/enable bigger/smaller buttons

                Dictionary<string, string> scaleTextMap = new Dictionary<string, string> // Transalte saved UIScale value (1-5) to strings to display on the settings screen
                {
                    { "1", "100%" },
                    { "2", "125%" },
                    { "3", "150%" },
                    { "4", "175%" },
                    { "5", "200%" }
                };
                if (UIScaleInFile == "1")
                {
                    lblScaleAmount.Invoke((MethodInvoker)delegate
                    {
                        lblScaleAmount.Text = scaleTextMap["1"];
                    });
                    btnSmallerScale.Invoke((MethodInvoker)delegate
                    {
                        btnSmallerScale.Enabled = false;
                    });
                }
                else if (scaleTextMap.ContainsKey(UIScaleInFile))
                {
                    lblScaleAmount.Invoke((MethodInvoker)delegate
                    {
                        lblScaleAmount.Text = scaleTextMap[UIScaleInFile];
                    });

                    if (UIScaleInFile == "5")
                    {
                        btnBiggerScale.Invoke((MethodInvoker)delegate
                        {
                            btnBiggerScale.Enabled = false;
                        });
                    }
                }
                #endregion

                #endregion

                panelErrorMessage.Invoke((MethodInvoker)delegate
                {
                    panelErrorMessage.Width = 0;
                });
                lblCurrentVersion.Invoke((MethodInvoker)delegate
                {
                    lblCurrentVersion.Text = "v" + CurrentVersion;
                    lblCurrentVersion.Location = new Point(lblSatsumaTitle.Location.X + lblSatsumaTitle.Width, lblCurrentVersion.Location.Y);
                });
                RestoreSavedSettings(); // api choices, node, xpub node, theme
                CheckNetworkStatus();
                GetBlockTip();
                UpdateBitcoinAndLightningDashboards(); // setting them now avoids waiting a whole minute for the first refresh
                StartTheClocksTicking(); // start all the timers
                numericUpDownBlockHeightToStartListFrom.Invoke((MethodInvoker)delegate
                {
                    numericUpDownBlockHeightToStartListFrom.Text = lblBlockNumber.Text; //setup block list screen
                });
                LookupBlockList(); // fetch the first 15 blocks automatically for the block list initial view.
                this.Visible = true;
                AddressInvalidHideControls(); // Address screen - initially address textbox is empty so hide the controls
                // prepopulate chart with fee rates (only if user hasn't selected one of the charts for their startup screen)
                btnChartPeriodAll.Enabled = false;
                if (!comboBoxStartupScreen.Texts.StartsWith("chart - "))
                {
                    BtnChartFeeRates_Click(sender, e);
                }
                // prepopulate the DCA calculator
                rjDatePickerDCAStartDate.MaxDate = DateTime.Today;
                rjDatePickerDCAEndDate.MaxDate = DateTime.Today;
                rjDatePickerDCAStartDate.Value = new DateTime(2016, 3, 4); 
                rjDatePickerDCAEndDate.Value = DateTime.Today;
                if (lblBlockchainInfoEndpoints.Text == "✔️")
                {
                    PopulateDCACalculator();
                }
                dontDisableButtons = false; // from here on, buttons are disabled during queries
                CheckForUpdates();
                PopulateThemeComboboxes();
                LoadAndStyleDirectoryBrowser();
                
                #region navigate to the saved startup screen

                Dictionary<string, Action> buttonClickEvents = new Dictionary<string, Action>
                {
                    { "blocks", () => BtnMenuBlockList_Click(sender, e) },
                    { "block", () => BtnMenuBlock_Click(sender, e) },
                    { "address", () => BtnMenuAddress_Click(sender, e) },
                    { "transaction", () => BtnMenuTransaction_Click(sender, e) },
                    { "xpub", () => BtnMenuXpub_Click(sender, e) },
                    { "bitcoin dashboard", () => BtnMenuBitcoinDashboard_Click(sender, e) },
                    { "lightning dashboard", () => BtnMenuLightningDashboard_Click(sender, e) },
                    { "bookmarks", () => BtnMenuBookmarks_Click(sender, e) },
                    { "directory", () => BtnMenuDirectory_Click(sender, e) },
                    { "chart - fee rates", () => { BtnMenuCharts_Click(sender, e); BtnChartFeeRates_Click(sender, e); } },
                    { "chart - block fees", () => { BtnMenuCharts_Click(sender, e); BtnChartBlockFees_Click(sender, e); } },
                    { "chart - block reward", () => { BtnMenuCharts_Click(sender, e); BtnChartReward_Click(sender, e); } },
                    { "chart - block size", () => { BtnMenuCharts_Click(sender, e); BtnChartBlockSize_Click(sender, e); } },
                    { "chart - hashrate", () => { BtnMenuCharts_Click(sender, e); BtnChartHashrate_Click(sender, e); } },
                    { "chart - difficulty", () => { BtnMenuCharts_Click(sender, e); BtnChartDifficulty_Click(sender, e); } },
                    { "chart - circulation", () => { BtnMenuCharts_Click(sender, e); BtnChartCirculation_Click(sender, e); } },
                    { "chart - addresses", () => { BtnMenuCharts_Click(sender, e); BtnChartUniqueAddresses_Click(sender, e); } },
                    { "chart - UTXO's", () => { BtnMenuCharts_Click(sender, e); BtnChartUTXO_Click(sender, e); } },
                    { "chart - pools ranking", () => { BtnMenuCharts_Click(sender, e); BtnChartPoolsRanking_Click(sender, e); } },
                    { "chart - ⚡nodes by network", () => { BtnMenuCharts_Click(sender, e); BtnChartNodesByNetwork_Click(sender, e); } },
                    { "chart - ⚡nodes by country", () => { BtnMenuCharts_Click(sender, e); BtnChartNodesByCountry_Click(sender, e); } },
                    { "chart - ⚡channels", () => { BtnMenuCharts_Click(sender, e); BtnChartLightningChannels_Click(sender, e); } },
                    { "chart - price", () => { BtnMenuCharts_Click(sender, e); BtnChartPrice_Click(sender, e); } },
                    { "chart - market cap.", () => { BtnMenuCharts_Click(sender, e); BtnChartMarketCap_Click(sender, e); } },
                    { "btc/fiat converter", () => BtnMenuPriceConverter_Click(sender, e)},
                    { "dca calculator", () => BtnMenuDCACalculator_Click(sender, e) }
                };
                if (buttonClickEvents.TryGetValue(comboBoxStartupScreen.Texts, out Action buttonClickEvent))
                {
                    buttonClickEvent.Invoke();
                }
                else
                {
                    BtnMenuBlockList_Click(sender, e);
                }

                #endregion
            }
            catch (WebException ex)
            {
                HandleException(ex, "SATSuma_Load");
            }
        }
        #endregion
        
        #region ⚡CLOCK TICK EVENTS (1 sec and API refresh clock only)⚡
        private void StartTheClocksTicking()
        {
            try
            {
                APIRefreshFrequency = Convert.ToInt32(numericUpDownDashboardRefresh.Value);
                intDisplayCountdownToRefresh = (APIRefreshFrequency * 60); //turn minutes into seconds. This is the number used to display remaning time until refresh
                APIGroup1DisplayTimerIntervalSecsConstant = (APIRefreshFrequency * 60); //turn minutes into seconds. This is kept constant and used to reset the timer to this number
                intAPIGroup1TimerIntervalMillisecsConstant = ((APIRefreshFrequency * 60) * 1000); // turn minutes into seconds, then into milliseconds
                timerAPIRefreshPeriod.Interval = intAPIGroup1TimerIntervalMillisecsConstant; // set the timer interval
                timer1Sec.Start(); // timer used to refresh the clock values
                timerAPIRefreshPeriod.Start(); // used to trigger API refreshes
            }
            catch (Exception ex)
            {
                HandleException(ex, "StartTheClocksTicking");
            }
        }

        private void Timer1Sec_Tick(object sender, EventArgs e) // update the time (if displayed) and refresh countdowns, countups, etc
        {
            try
            {
                UpdateOnScreenClock();
                UpdateOnScreenCountdownAndFlashLights();
                UpdateOnScreenElapsedTimeSinceUpdate();
                UpdateSecondsToHalving();
                if (intDisplayCountdownToRefresh < 11) // when there are only 10 seconds left until the refresh, clear error alert symblol & error message
                {
                    ClearAlertAndErrorMessage();
                }
                totalSecondsSinceLastBlock++;
                int minutesSinceLastBlock = totalSecondsSinceLastBlock / 60;
                int secondsSinceLastBlock = totalSecondsSinceLastBlock % 60;
                string formattedTime = $"{minutesSinceLastBlock}m {secondsSinceLastBlock}s ago";
                lblHeaderBlockAge.Invoke((MethodInvoker)delegate
                {
                    lblHeaderBlockAge.Text = formattedTime;
                });
                if (lblUpdaterLight.Visible)
                {
                    if (secondsSinceLastBlock % 2 == 0)
                    {
                        btnMenuSplash.Invoke((MethodInvoker)delegate
                        {
                            btnMenuSplash.ForeColor = Color.FromArgb(255, 153, 0);
                        });
                    }
                    else
                    {
                        btnMenuSplash.Invoke((MethodInvoker)delegate
                        {
                            btnMenuSplash.ForeColor = btnMenuSettings.ForeColor;
                        });
                    }
                }
                // reset node activity light
                headerSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                {
                    headerSelectedNodeStatusLight.ForeColor = Color.OliveDrab;
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "Timer1Sec_Tick");
            }
        }

        private void TimerAPIRefreshPeriod_Tick(object sender, EventArgs e) // update the btc/lightning dashboard fields
        {
            try
            {
                ClearAlertAndErrorMessage(); // wipe anything that may be showing in the error area (it should be empty anyway)
                CheckNetworkStatus();
                using (WebClient client = new WebClient())
                {
                    try
                    {
                        string BlockTipURL = NodeURL + "blocks/tip/height";
                        string BlockTip = client.DownloadString(BlockTipURL); // get current block tip
                        if (decimal.TryParse(BlockTip, out decimal blockTipValue))
                        {
                            numericUpDownSubmittedBlockNumber.Maximum = Convert.ToDecimal(BlockTip);
                            numericUpDownBlockHeightToStartListFrom.Maximum = Convert.ToDecimal(BlockTip);
                        }
                    }
                    catch (Exception ex)
                    {
                        HandleException(ex, "TimerAPIRefreshPeriod_Tick");
                    }
                }
                UpdateBitcoinAndLightningDashboards(); // fetch data and populate fields for dashboards
                PopulateConverterScreen(); // refresh amounts on BTC/fiat converter screen
            }
            catch (WebException ex)
            {
                HandleException(ex, "TimerAPIRefreshPeriod_Tick");
            }
        }
        #endregion

        #region ⚡BITCOIN AND LIGHTNING DASHBOARD SCREENS⚡
        #region update dashboards
        public async void UpdateBitcoinAndLightningDashboards()
        {
            ToggleLoadingAnimation("enable");

            using (WebClient client = new WebClient())
            {
                bool errorOccurred = false;
                #region mempool.space api's
                Task task0 = Task.Run(async () => // mempool.space api's
                {
                    // current block height, size and transaction count
                    try
                    {
                        #region determine network age
                        DateTime startDate = new DateTime(2009, 1, 3, 18, 15, 0); // Genesis block time
                        DateTime currentDate = DateTime.Now; // Current date and time

                        TimeSpan elapsedTime = currentDate - startDate;

                        // Calculate years, months, days, hours, minutes, and seconds
                        int years = currentDate.Year - startDate.Year;
                        int months = currentDate.Month - startDate.Month;
                        int days = currentDate.Day - startDate.Day;
                        int hours = elapsedTime.Hours;
                        int minutes = elapsedTime.Minutes;
                        int seconds = elapsedTime.Seconds;

                        // Adjust negative months and days
                        if (days < 0)
                        {
                            months--;
                            days += DateTime.DaysInMonth(startDate.Year, startDate.Month);
                        }
                        if (months < 0)
                        {
                            years--;
                            months += 12;
                        }
                        lblNetworkAge.Invoke((MethodInvoker)delegate
                        {
                            lblNetworkAge.Text = $"{years} years, {months} months, {days} days"; 
                        });
                        #endregion

                        var blocksJson = await _blockService.GetBlockDataAsync("000000");  // don't pass a block to start from - we want the tip
                        var blocks = JsonConvert.DeserializeObject<List<Block>>(blocksJson);

                        if (blocks != null)
                        {
                            if (blocks.Count > 0)
                            {
                                lblHeaderTransactions.Invoke((MethodInvoker)delegate
                                {
                                    lblHeaderTransactions.Text = Convert.ToString(blocks[0].Tx_count);
                                });

                                string newBlockHeight = blocks[0].Height;
                                string oldBlockHeight = lblBlockNumber.Text;
                                if ((newBlockHeight != oldBlockHeight) || (firstTimeGettingBlockTip == true))
                                {
                                    long timestamp = long.Parse(blocks[0].Timestamp);
                                    DateTimeOffset blockTime = DateTimeOffset.FromUnixTimeSeconds(timestamp);
                                    TimeSpan timeDifference = DateTimeOffset.Now - blockTime;
                                    totalSecondsSinceLastBlock = (int)timeDifference.TotalSeconds;
                                    int minutesSinceLastBlock = totalSecondsSinceLastBlock / 60;
                                    int secondsSinceLastBlock = totalSecondsSinceLastBlock % 60;
                                    string formattedTime = $"{minutesSinceLastBlock}m {secondsSinceLastBlock}s ago";
                                    lblHeaderBlockAge.Invoke((MethodInvoker)delegate
                                    {
                                        lblHeaderBlockAge.Text = formattedTime;
                                    });
                                    lblBlockNumber.Invoke((MethodInvoker)delegate
                                    {
                                        lblBlockNumber.Text = Convert.ToString(blocks[0].Height);
                                    });
                                    lblHeaderBlockAge.Invoke((MethodInvoker)delegate
                                    {
                                        lblHeaderBlockAge.Location = new Point(lblBlockNumber.Location.X + lblBlockNumber.Width, lblHeaderBlockAge.Location.Y);
                                    });
                                    firstTimeGettingBlockTip = false;
                                }

                                long sizeInBytes = blocks[0].Size;
                                string sizeString; // convert display to bytes/kb/mb accordingly
                                if (sizeInBytes < 1000)
                                {
                                    sizeString = $"{sizeInBytes} bytes";
                                }
                                else if (sizeInBytes < 1000 * 1000)
                                {
                                    double sizeInKB = (double)sizeInBytes / 1000;
                                    sizeString = $"{sizeInKB:N2} KB";
                                }
                                else
                                {
                                    double sizeInMB = (double)sizeInBytes / (1000 * 1000);
                                    sizeString = $"{sizeInMB:N2} MB";
                                }
                                lblHeaderBlockSize.Invoke((MethodInvoker)delegate
                                {
                                    lblHeaderBlockSize.Text = sizeString;
                                });
                                lblHeaderBlockSizeChart.Invoke((MethodInvoker)delegate
                                {
                                    lblHeaderBlockSizeChart.Location = new Point(lblHeaderBlockSize.Location.X + lblHeaderBlockSize.Width, lblHeaderBlockSizeChart.Location.Y);
                                });
                                // difficulty epoch = block height / 2016 rounded up to an integer
                                lblDifficultyEpoch.Invoke((MethodInvoker)delegate
                                {
                                    lblDifficultyEpoch.Text = Convert.ToString((int)Math.Ceiling(Convert.ToDecimal(lblBlockNumber.Text) / 2016));
                                });
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        errorOccurred = true;
                        HandleException(ex, "UpdateDashboards(block size & tx count)");
                    }

                    // fees
                    try
                    {
                        var (fastestFee, halfHourFee, hourFee, economyFee, minimumFee) = GetFees();
                        lblHeaderfeesHighPriority.Invoke((MethodInvoker)delegate
                        {
                            lblHeaderfeesHighPriority.Text = fastestFee;
                        });
                        lblHeaderFeesMediumPriority.Invoke((MethodInvoker)delegate
                        {
                            lblHeaderFeesMediumPriority.Text = halfHourFee;
                        });
                        lblHeaderFeesLowPriority.Invoke((MethodInvoker)delegate
                        {
                            lblHeaderFeesLowPriority.Text = hourFee;
                        });
                        lblHeaderFeesNoPriority.Invoke((MethodInvoker)delegate
                        {
                            lblHeaderFeesNoPriority.Text = economyFee;
                        });
                        lblHeaderFeeRatesChart.Invoke((MethodInvoker)delegate
                        {
                            lblHeaderFeeRatesChart.Location = new Point(lblHeaderFeesNoPriority.Location.X + lblHeaderFeesNoPriority.Width, lblHeaderFeeRatesChart.Location.Y);
                        });
                    }
                    catch (Exception ex)
                    {
                        errorOccurred = true;
                        HandleException(ex, "UpdateDashboards(fees)");
                    }

                    // hashrate
                    try
                    {
                        var (currentHashrate, currentDifficulty) = GetHashrate();
                        lblHeaderHashrate.Invoke((MethodInvoker)delegate
                        {
                            lblHeaderHashrate.Text = currentHashrate;
                        });
                        lblHeaderHashRateChart.Invoke((MethodInvoker)delegate
                        {
                            lblHeaderHashRateChart.Location = new Point(lblHeaderHashrate.Location.X + lblHeaderHashrate.Width, lblHeaderHashRateChart.Location.Y);
                        });
                        lblEstHashrate.Invoke((MethodInvoker)delegate
                        {
                            lblEstHashrate.Text = currentHashrate;
                        });
                        lblHashrateChart.Invoke((MethodInvoker)delegate
                        {
                            lblHashrateChart.Location = new Point(lblEstHashrate.Location.X + lblEstHashrate.Width, lblHashrateChart.Location.Y);
                        });
                        lblBlockListEstHashRate.Invoke((MethodInvoker)delegate
                        {
                            lblBlockListEstHashRate.Text = currentHashrate;
                        });
                        lblBlockListHashrateChart.Invoke((MethodInvoker)delegate
                        {
                            lblBlockListHashrateChart.Location = new Point(lblBlockListEstHashRate.Location.X + lblBlockListEstHashRate.Width, lblBlockListHashrateChart.Location.Y);
                        });
                    }
                    catch (Exception ex)
                    {
                        errorOccurred = true;
                        HandleException(ex, "UpdateDashboards(hashrate)");
                    }

                    // difficulty adjustment
                    try
                    {
                        string truncatedPercent = "0%";
                        var (progressPercent, difficultyChange, estimatedRetargetDate, remainingBlocks, remainingTime, previousRetarget, nextRetargetHeight, timeAvg, timeOffset) = GetDifficultyAdjustment();
                        if (decimal.TryParse(progressPercent, out decimal progressValue2))
                        {
                            progressValue2 = decimal.Parse(progressPercent.TrimEnd('%')) / 100; // convert to decimal and scale to range [0, 1]
                            truncatedPercent = string.Format("{0:F2}%", progressValue2 * 100); // truncate to two decimal places
                        }

                        lblProgressNextDiffAdjPercentage.Invoke((MethodInvoker)delegate
                        {
                            lblProgressNextDiffAdjPercentage.Text = "(" + truncatedPercent + ")";
                        });
                        lblBlockListProgressNextDiffAdjPercentage.Invoke((MethodInvoker)delegate //Block List
                        {
                            lblBlockListProgressNextDiffAdjPercentage.Text = "(" + truncatedPercent + ")";
                        });

                        if (decimal.TryParse(progressPercent, out decimal progressValue))
                        {
                            progressValue = decimal.Parse(progressPercent); // convert to decimal and scale to range [0, 1]
                            progressBarNextDiffAdj.Value = Convert.ToInt16(progressValue); // scale to fit progress bar range
                            progressBarBlockListNextDiffAdj.Value = Convert.ToInt16(progressValue); // scale to fit progress bar range - Block List
                        }
                        lblDifficultyAdjEst.Invoke((MethodInvoker)delegate
                        {
                            lblDifficultyAdjEst.Text = difficultyChange + "%";
                        });
                        lblDifficultyChart.Invoke((MethodInvoker)delegate
                        {
                            lblDifficultyChart.Location = new Point(lblDifficultyAdjEst.Location.X + lblDifficultyAdjEst.Width, lblDifficultyChart.Location.Y);
                        });
                        lblBlockListNextDifficultyAdjustment.Invoke((MethodInvoker)delegate  // (Blocks list)
                        {
                            lblBlockListNextDifficultyAdjustment.Text = difficultyChange + "%";
                        });
                        lblBlockListDifficultyChart.Invoke((MethodInvoker)delegate  // (Blocks list)
                        {
                            lblBlockListDifficultyChart.Location = new Point(lblBlockListNextDifficultyAdjustment.Location.X + lblBlockListNextDifficultyAdjustment.Width, lblBlockListDifficultyChart.Location.Y);
                        });
                        lblBlocksUntilDiffAdj.Invoke((MethodInvoker)delegate
                        {
                            lblBlocksUntilDiffAdj.Text = remainingBlocks.ToString();
                        });
                        string formattedDate;
                        if (NodeURL == "https://mempool.space/api/" || NodeURL == "https://mempool.space/testnet/api/")
                        {
                            long unixTimestamp = Convert.ToInt64(estimatedRetargetDate);
                            DateTime retargetDate = DateTimeExtensions.FromUnixTimeMilliseconds(unixTimestamp);
                            formattedDate = retargetDate.ToString("yyyy-MM-dd");
                        }
                        else
                        {
                            double estRetargetDate = Convert.ToDouble(estimatedRetargetDate);
                            DateTimeOffset dateTimeOffset = DateTimeOffset.FromUnixTimeMilliseconds((long)estRetargetDate);
                            DateTime dateTime = dateTimeOffset.LocalDateTime;
                            formattedDate = dateTime.ToString();
                        }
                        lblEstDiffAdjDate.Invoke((MethodInvoker)delegate
                        {
                            lblEstDiffAdjDate.Text = formattedDate;
                        });
                        lblNextDiffAdjBlock.Invoke((MethodInvoker)delegate
                        {
                            lblNextDiffAdjBlock.Text = nextRetargetHeight;
                        });
                        lblBlockListNextDiffAdjBlock.Invoke((MethodInvoker)delegate // (Blocks list)
                        {
                            lblBlockListNextDiffAdjBlock.Text = nextRetargetHeight;
                        });

                        int minutes = 0;
                        int seconds = 0;
                        if (decimal.TryParse(timeAvg, out decimal AvgTimeBetweenBlocks))
                        {
                            AvgTimeBetweenBlocks = (Convert.ToDecimal(timeAvg) / 1000) / 60;
                            minutes = (int)AvgTimeBetweenBlocks;
                            seconds = (int)((AvgTimeBetweenBlocks - minutes) * 60);
                        }
                        string timeString = $"{minutes} mins {seconds} secs";
                        lblAvgTimeBetweenBlocks.Invoke((MethodInvoker)delegate
                        {
                            lblAvgTimeBetweenBlocks.Text = timeString;
                        });
                        lblBlockListAvgTimeBetweenBlocks.Invoke((MethodInvoker)delegate // (Blocks list)
                        {
                            lblBlockListAvgTimeBetweenBlocks.Text = timeString;
                        });
                    }
                    catch (Exception ex)
                    {
                        errorOccurred = true;
                        HandleException(ex, "UpdateDashboards(difficulty adjustment)");
                    }

                    // transactions in mempool
                    try
                    {
                        var (txCount, vSize, totalFees) = GetMempool();
                        string txInMempool = txCount;
                        lblTXInMempool.Invoke((MethodInvoker)delegate
                        {
                            lblTXInMempool.Text = txInMempool;
                        });
                        lblBlockListTXInMempool.Invoke((MethodInvoker)delegate  // Blocks list
                        {
                            lblBlockListTXInMempool.Text = txInMempool;
                        });
                    }
                    catch (Exception ex)
                    {
                        errorOccurred = true;
                        HandleException(ex, "UpdateAPIGroup1DataFields(GetMempool)");
                    }

                });
                Task task4 = Task.Run(() => // mempool.space lightning JSON
                {
                    try
                    {
                        if (!testNet)
                        {
                            if (RunMempoolSpaceLightningAPI)
                            {
                                var (channelCount, nodeCount, totalCapacity, torNodes, clearnetNodes, unannouncedNodes, avgCapacity, avgFeeRate, avgBaseeFeeMtokens, medCapacity, medFeeRate, medBaseeFeeMtokens, clearnetTorNodes) = MempoolSpaceLightningJSONRefresh();
                                lblChannelCount.Invoke((MethodInvoker)delegate
                                {
                                    lblChannelCount.Text = channelCount;
                                });
                                lblNodeCount.Invoke((MethodInvoker)delegate
                                {
                                    lblNodeCount.Text = nodeCount;
                                });
                                lblTotalCapacity.Invoke((MethodInvoker)delegate
                                {
                                    lblTotalCapacity.Text = totalCapacity;
                                });
                                lblTorNodes.Invoke((MethodInvoker)delegate
                                {
                                    lblTorNodes.Text = torNodes;
                                });
                                lblClearnetNodes.Invoke((MethodInvoker)delegate
                                {
                                    lblClearnetNodes.Text = clearnetNodes;
                                });
                                lblAverageCapacity.Invoke((MethodInvoker)delegate
                                {
                                    lblAverageCapacity.Text = avgCapacity;
                                });
                                lblAverageFeeRate.Invoke((MethodInvoker)delegate
                                {
                                    lblAverageFeeRate.Text = avgFeeRate;
                                });
                                lblUnannouncedNodes.Invoke((MethodInvoker)delegate
                                {
                                    lblUnannouncedNodes.Text = unannouncedNodes;
                                });
                                lblAverageBaseFeeMtokens.Invoke((MethodInvoker)delegate
                                {
                                    lblAverageBaseFeeMtokens.Text = avgBaseeFeeMtokens;
                                });
                                lblMedCapacity.Invoke((MethodInvoker)delegate
                                {
                                    lblMedCapacity.Text = medCapacity;
                                });
                                lblMedFeeRate.Invoke((MethodInvoker)delegate
                                {
                                    lblMedFeeRate.Text = medFeeRate;
                                });
                                lblMedBaseFeeTokens.Invoke((MethodInvoker)delegate
                                {
                                    lblMedBaseFeeTokens.Text = medBaseeFeeMtokens;
                                });
                                lblClearnetTorNodes.Invoke((MethodInvoker)delegate
                                {
                                    lblClearnetTorNodes.Text = clearnetTorNodes;
                                });
                            }
                            else
                            {
                                lblChannelCount.Invoke((MethodInvoker)delegate
                                {
                                    lblChannelCount.Text = "Disabled";
                                });
                                lblNodeCount.Invoke((MethodInvoker)delegate
                                {
                                    lblNodeCount.Text = "Disabled";
                                });
                                lblTotalCapacity.Invoke((MethodInvoker)delegate
                                {
                                    lblTotalCapacity.Text = "Disabled";
                                });
                                lblTorNodes.Invoke((MethodInvoker)delegate
                                {
                                    lblTorNodes.Text = "Disabled";
                                });
                                lblClearnetNodes.Invoke((MethodInvoker)delegate
                                {
                                    lblClearnetNodes.Text = "Disabled";
                                });
                                lblAverageCapacity.Invoke((MethodInvoker)delegate
                                {
                                    lblAverageCapacity.Text = "Disabled";
                                });
                                lblAverageFeeRate.Invoke((MethodInvoker)delegate
                                {
                                    lblAverageFeeRate.Text = "Disabled";
                                });
                                lblUnannouncedNodes.Invoke((MethodInvoker)delegate
                                {
                                    lblUnannouncedNodes.Text = "Disabled";
                                });
                                lblAverageBaseFeeMtokens.Invoke((MethodInvoker)delegate
                                {
                                    lblAverageBaseFeeMtokens.Text = "Disabled";
                                });
                                lblMedCapacity.Invoke((MethodInvoker)delegate
                                {
                                    lblMedCapacity.Text = "Disabled";
                                });
                                lblMedFeeRate.Invoke((MethodInvoker)delegate
                                {
                                    lblMedFeeRate.Text = "Disabled";
                                });
                                lblMedBaseFeeTokens.Invoke((MethodInvoker)delegate
                                {
                                    lblMedBaseFeeTokens.Text = "Disabled";
                                });
                                lblClearnetTorNodes.Invoke((MethodInvoker)delegate
                                {
                                    lblClearnetTorNodes.Text = "Disabled";
                                });
                            }
                            lblLightningNodesChart.Invoke((MethodInvoker)delegate
                            {
                                lblLightningNodesChart.Location = new Point(label40.Location.X + label40.Width, lblLightningNodesChart.Location.Y);
                            });
                            lblLightningChannelsChart.Invoke((MethodInvoker)delegate
                            {
                                lblLightningChannelsChart.Location = new Point(label34.Location.X + label34.Width, lblLightningChannelsChart.Location.Y);
                            });
                            lblLightningCapacityChart.Invoke((MethodInvoker)delegate
                            {
                                lblLightningCapacityChart.Location = new Point(label38.Location.X + label38.Width, lblLightningCapacityChart.Location.Y);
                            });
                            if (RunMempoolSpaceLightningAPI)
                            {
                                var (clearnetCapacity, torCapacity, unknownCapacity) = MempoolSpaceCapacityBreakdownJSONRefresh();
                                lblClearnetCapacity.Invoke((MethodInvoker)delegate
                                {
                                    lblClearnetCapacity.Text = clearnetCapacity;
                                });
                                lblTorCapacity.Invoke((MethodInvoker)delegate
                                {
                                    lblTorCapacity.Text = torCapacity;
                                });
                                lblUnknownCapacity.Invoke((MethodInvoker)delegate
                                {
                                    lblUnknownCapacity.Text = unknownCapacity;
                                });
                            }
                            else
                            {
                                lblClearnetCapacity.Invoke((MethodInvoker)delegate
                                {
                                    lblClearnetCapacity.Text = "Disabled";
                                });
                                lblTorCapacity.Invoke((MethodInvoker)delegate
                                {
                                    lblTorCapacity.Text = "Disabled";
                                });
                                lblUnknownCapacity.Invoke((MethodInvoker)delegate
                                {
                                    lblUnknownCapacity.Text = "Disabled";
                                });
                            }
                            if (RunMempoolSpaceLightningAPI)
                            {
                                var (aliases, capacities) = MempoolSpaceLiquidityRankingJSONRefresh();
                                for (int i = 0; i < aliases.Count && i < capacities.Count && i < 10; i++)
                                {
                                    System.Windows.Forms.Label aliasLabel = (System.Windows.Forms.Label)this.Controls.Find("aliasLabel" + (i + 1), true)[0];
                                    aliasLabel.Invoke((MethodInvoker)delegate
                                    {
                                        aliasLabel.Text = aliases[i];
                                    });
                                    System.Windows.Forms.Label capacityLabel = (System.Windows.Forms.Label)this.Controls.Find("capacityLabel" + (i + 1), true)[0];
                                    capacityLabel.Invoke((MethodInvoker)delegate
                                    {
                                        capacityLabel.Text = capacities[i];
                                    });
                                }
                                var result7 = MempoolSpaceConnectivityRankingJSONRefresh();
                                if (result7.aliases.Count > 0)
                                {
                                    for (int i = 0; i < result7.aliases.Count && i < 10; i++)
                                    {
                                        System.Windows.Forms.Label aliasLabel = (System.Windows.Forms.Label)this.Controls.Find("aliasConnLabel" + (i + 1), true)[0];
                                        aliasLabel.Invoke((MethodInvoker)delegate
                                        {
                                            aliasLabel.Text = result7.aliases[i];
                                        });
                                        System.Windows.Forms.Label channelLabel = (System.Windows.Forms.Label)this.Controls.Find("channelLabel" + (i + 1), true)[0];
                                        channelLabel.Invoke((MethodInvoker)delegate
                                        {
                                            channelLabel.Text = result7.channels[i];
                                        });
                                    }
                                }
                            }
                            else
                            {
                                for (int i = 0; i < 10; i++)
                                {
                                    System.Windows.Forms.Label aliasLabel = (System.Windows.Forms.Label)this.Controls.Find("aliasLabel" + (i + 1), true)[0];
                                    aliasLabel.Invoke((MethodInvoker)delegate
                                    {
                                        aliasLabel.Text = "disabled";
                                    });
                                    System.Windows.Forms.Label capacityLabel = (System.Windows.Forms.Label)this.Controls.Find("capacityLabel" + (i + 1), true)[0];
                                    capacityLabel.Invoke((MethodInvoker)delegate
                                    {
                                        capacityLabel.Text = "disabled";
                                    });
                                }
                                for (int i = 0; i < 10; i++)
                                {
                                    System.Windows.Forms.Label aliasLabel = (System.Windows.Forms.Label)this.Controls.Find("aliasConnLabel" + (i + 1), true)[0];
                                    aliasLabel.Invoke((MethodInvoker)delegate
                                    {
                                        aliasLabel.Text = "disabled";
                                    });
                                    System.Windows.Forms.Label channelLabel = (System.Windows.Forms.Label)this.Controls.Find("channelLabel" + (i + 1), true)[0];
                                    channelLabel.Invoke((MethodInvoker)delegate
                                    {
                                        channelLabel.Text = "disabled";
                                    });
                                }
                            }
                        }
                        SetLightsMessagesAndResetTimers();
                    }
                    catch (Exception ex)
                    {
                        errorOccurred = true;
                        HandleException(ex, "UpdateDashboards(Task4)");
                    }
                });
                #endregion
                #region bitcoinexplorer.org api
                Task task1 = Task.Run(() =>  // bitcoinexplorer.org JSON for market data
                {
                    if (!offlineMode)
                    {
                        try
                        {
                            if (!testNet)
                            {
                                if (RunBitcoinExplorerEndpointAPI)
                                {
                                    GetMarketData();
                                }
                                else
                                {
                                    lblPriceUSD.Invoke((MethodInvoker)delegate
                                    {
                                        lblPriceUSD.Text = "disabled";
                                    });

                                    lblMoscowTime.Invoke((MethodInvoker)delegate
                                    {
                                        lblMoscowTime.Text = "disabled";
                                    });
                                    lblMarketCapUSD.Invoke((MethodInvoker)delegate
                                    {
                                        lblMarketCapUSD.Text = "disabled";
                                    });
                                    lblHeaderPrice.Invoke((MethodInvoker)delegate
                                    {
                                        lblHeaderPrice.Text = "disabled";
                                    });

                                    lblHeaderMoscowTime.Invoke((MethodInvoker)delegate
                                    {
                                        lblHeaderMoscowTime.Text = "disabled";
                                    });
                                    lblHeaderMarketCap.Invoke((MethodInvoker)delegate
                                    {
                                        lblHeaderMarketCap.Text = "disabled";
                                    });
                                }
                            }
                            else
                            {
                                lblPriceUSD.Invoke((MethodInvoker)delegate
                                {
                                    lblPriceUSD.Text = "0 (TestNet)";
                                });
                                lblMoscowTime.Invoke((MethodInvoker)delegate
                                {
                                    lblMoscowTime.Text = "0 (TestNet)";
                                });
                                lblMarketCapUSD.Invoke((MethodInvoker)delegate
                                {
                                    lblMarketCapUSD.Text = "0 (TestNet)";
                                });
                                lblHeaderPrice.Invoke((MethodInvoker)delegate
                                {
                                    lblHeaderPrice.Text = "0 (TestNet)";
                                });
                                lblHeaderMoscowTime.Invoke((MethodInvoker)delegate
                                {
                                    lblHeaderMoscowTime.Text = "0 (TestNet)";
                                });
                                lblHeaderMarketCap.Invoke((MethodInvoker)delegate
                                {
                                    lblHeaderMarketCap.Text = "0 (TestNet)";
                                });
                            }
                            lblMarketCapChart.Invoke((MethodInvoker)delegate
                            {
                                lblMarketCapChart.Location = new Point(lblMarketCapUSD.Location.X + lblMarketCapUSD.Width, lblMarketCapChart.Location.Y);
                            });
                            lblPriceChart.Invoke((MethodInvoker)delegate
                            {
                                lblPriceChart.Location = new Point(lblPriceUSD.Location.X + lblPriceUSD.Width, lblPriceChart.Location.Y);
                            });
                            lblConverterChart.Invoke((MethodInvoker)delegate
                            {
                                lblConverterChart.Location = new Point(lblMoscowTime.Location.X + lblMoscowTime.Width, lblConverterChart.Location.Y);
                            });
                            lblHeaderPriceChart.Invoke((MethodInvoker)delegate
                            {
                                lblHeaderPriceChart.Location = new Point(lblHeaderPrice.Location.X + lblHeaderPrice.Width, lblHeaderPriceChart.Location.Y);
                            });
                            lblHeaderConverterChart.Invoke((MethodInvoker)delegate
                            {
                                lblHeaderConverterChart.Location = new Point(lblHeaderMoscowTime.Location.X + lblHeaderMoscowTime.Width, lblHeaderConverterChart.Location.Y);
                            });
                            lblHeaderMarketCapChart.Invoke((MethodInvoker)delegate
                            {
                                lblHeaderMarketCapChart.Location = new Point(lblHeaderMarketCap.Location.X + lblHeaderMarketCap.Width, lblHeaderMarketCapChart.Location.Y);
                            });
                            SetLightsMessagesAndResetTimers();
                        }
                        catch (Exception ex)
                        {
                            errorOccurred = true;
                            HandleException(ex, "UpdateDashboards(Task1)");
                        }
                    }
                });
                Task task3 = Task.Run(() => // Bitcoinexplorer.org JSON
                {
                    if (!offlineMode)
                    {
                        try
                        {
                            if (!testNet)
                            {
                                if (RunBitcoinExplorerOrgJSONAPI)
                                {
                                    var (nextBlockFee, thirtyMinFee, sixtyMinFee, oneDayFee, txInNextBlock, nextBlockMinFee, nextBlockMaxFee, nextBlockTotalFees) = BitcoinExplorerOrgJSONRefresh();
                                    lblTransInNextBlock.Invoke((MethodInvoker)delegate
                                    {
                                        lblTransInNextBlock.Text = txInNextBlock;
                                    });
                                    lblBlockListTXInNextBlock.Invoke((MethodInvoker)delegate // Blocks list
                                    {
                                        lblBlockListTXInNextBlock.Text = txInNextBlock;
                                    });
                                    lblNextBlockMinMaxFee.Invoke((MethodInvoker)delegate
                                    {
                                        lblNextBlockMinMaxFee.Text = nextBlockMinFee + " / " + nextBlockMaxFee;
                                    });
                                    lblBlockListMinMaxInFeeNextBlock.Invoke((MethodInvoker)delegate // Blocks list
                                    {
                                        lblBlockListMinMaxInFeeNextBlock.Text = nextBlockMinFee + " / " + nextBlockMaxFee;
                                    });
                                    lblNextBlockTotalFees.Invoke((MethodInvoker)delegate
                                    {
                                        lblNextBlockTotalFees.Text = nextBlockTotalFees;
                                    });
                                    lblNextBlockTotalFeesFiat.Invoke((MethodInvoker)delegate
                                    {
                                        lblNextBlockTotalFeesFiat.Text = lblHeaderPrice.Text[0] + (Convert.ToDecimal(nextBlockTotalFees) * OneBTCinSelectedCurrency).ToString("N2");
                                        lblNextBlockTotalFeesFiat.Location = new Point(lblNextBlockTotalFees.Location.X + lblNextBlockTotalFees.Width, lblNextBlockTotalFeesFiat.Location.Y);
                                    });
                                    lblBlockListTotalFeesInNextBlock.Invoke((MethodInvoker)delegate // Blocks list
                                    {
                                        lblBlockListTotalFeesInNextBlock.Text = nextBlockTotalFees;
                                    });



                                    lblBlockListTotalFeesInNextBlockFiat.Invoke((MethodInvoker)delegate // Blocks list
                                    {
                                        lblBlockListTotalFeesInNextBlockFiat.Text = lblHeaderPrice.Text[0] + (Convert.ToDecimal(nextBlockTotalFees) * OneBTCinSelectedCurrency).ToString("N2");
                                        lblBlockListTotalFeesInNextBlockFiat.Location = new Point(lblBlockListTotalFeesInNextBlock.Location.X + lblBlockListTotalFeesInNextBlock.Width, lblBlockListTotalFeesInNextBlockFiat.Location.Y);
                                    });
                                }
                                else
                                {
                                    lblTransInNextBlock.Invoke((MethodInvoker)delegate
                                    {
                                        lblTransInNextBlock.Text = "disabled";
                                    });
                                    lblBlockListTXInNextBlock.Invoke((MethodInvoker)delegate // Blocks list
                                    {
                                        lblBlockListTXInNextBlock.Text = "disabled";
                                    });
                                    lblNextBlockMinMaxFee.Invoke((MethodInvoker)delegate
                                    {
                                        lblNextBlockMinMaxFee.Text = "disabled";
                                    });
                                    lblBlockListMinMaxInFeeNextBlock.Invoke((MethodInvoker)delegate // Blocks list
                                    {
                                        lblBlockListMinMaxInFeeNextBlock.Text = "disabled";
                                    });
                                    lblNextBlockTotalFees.Invoke((MethodInvoker)delegate
                                    {
                                        lblNextBlockTotalFees.Text = "disabled";
                                    });
                                    lblBlockListTotalFeesInNextBlock.Invoke((MethodInvoker)delegate // Blocks list
                                    {
                                        lblBlockListTotalFeesInNextBlock.Text = "disabled";
                                    });
                                }
                            }
                            else
                            {
                                lblTransInNextBlock.Invoke((MethodInvoker)delegate
                                {
                                    lblTransInNextBlock.Text = "unavailable on TestNet";
                                });
                                lblBlockListTXInNextBlock.Invoke((MethodInvoker)delegate // Blocks list
                                {
                                    lblBlockListTXInNextBlock.Text = "unavailable on TestNet";
                                });
                                lblNextBlockMinMaxFee.Invoke((MethodInvoker)delegate
                                {
                                    lblNextBlockMinMaxFee.Text = "unavailable on TestNet";
                                });
                                lblBlockListMinMaxInFeeNextBlock.Invoke((MethodInvoker)delegate // Blocks list
                                {
                                    lblBlockListMinMaxInFeeNextBlock.Text = "unavailable on TestNet";
                                });
                                lblNextBlockTotalFees.Invoke((MethodInvoker)delegate
                                {
                                    lblNextBlockTotalFees.Text = "unavailable on TestNet";
                                });
                                lblBlockListTotalFeesInNextBlock.Invoke((MethodInvoker)delegate // Blocks list
                                {
                                    lblBlockListTotalFeesInNextBlock.Text = "unavailable on TestNet";
                                });
                            }
                            if (!testNet && lblNextBlockTotalFeesFiat.Text != "no data" && lblNextBlockTotalFeesFiat.Visible)
                            {
                                lblBlockFeesChart.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockFeesChart.Location = new Point(lblNextBlockTotalFeesFiat.Location.X + lblNextBlockTotalFeesFiat.Width, lblBlockFeesChart.Location.Y);
                                });
                            }
                            else
                            {
                                lblBlockFeesChart.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockFeesChart.Location = new Point(lblNextBlockTotalFeesFiat.Location.X + lblNextBlockTotalFeesFiat.Width, lblBlockFeesChart.Location.Y);
                                });
                            }
                            lblFeeRangeChart.Invoke((MethodInvoker)delegate
                            {
                                lblFeeRangeChart.Location = new Point(lblNextBlockMinMaxFee.Location.X + lblNextBlockMinMaxFee.Width, lblFeeRangeChart.Location.Y);
                            });
                            lblBlockListFeeRangeChart2.Invoke((MethodInvoker)delegate
                            {
                                lblBlockListFeeRangeChart2.Location = new Point(lblBlockListMinMaxInFeeNextBlock.Location.X + lblBlockListMinMaxInFeeNextBlock.Width, lblBlockListFeeRangeChart2.Location.Y);
                            });

                            if (!testNet)
                            {
                                lblBlockListFeeChart2.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListFeeChart2.Location = new Point(lblBlockListTotalFeesInNextBlockFiat.Location.X + lblBlockListTotalFeesInNextBlockFiat.Width, lblBlockListFeeChart2.Location.Y);
                                });
                            }
                            else
                            {
                                lblBlockListFeeChart2.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListFeeChart2.Location = new Point(lblBlockListTotalFeesInNextBlock.Location.X + lblBlockListTotalFeesInNextBlock.Width, lblBlockListFeeChart2.Location.Y);
                                });
                            }
                            SetLightsMessagesAndResetTimers();
                        }
                        catch (Exception ex)
                        {
                            errorOccurred = true;
                            HandleException(ex, "UpdateDashboards(Task3)");
                        }
                    }
                });
                #endregion
                #region blockchain.info api
                Task task2 = Task.Run(() => // blockchain.info endpoints 
                {
                    if (!offlineMode)
                    {
                        try
                        {
                            if (!testNet)
                            {
                                if (RunBlockchainInfoEndpointAPI)
                                {
                                    var (avgNoTransactions, blockNumber, blockReward, estHashrate, avgTimeBetweenBlocks, btcInCirc, hashesToSolve, twentyFourHourTransCount, twentyFourHourBTCSent) = BlockchainInfoEndpointsRefresh();
                                    lblAvgNoTransactions.Invoke((MethodInvoker)delegate
                                    {
                                        lblAvgNoTransactions.Text = avgNoTransactions;
                                    });
                                    lblBlockReward.Invoke((MethodInvoker)delegate
                                    {
                                        lblBlockReward.Text = blockReward;
                                    });

                                    if (decimal.TryParse(blockReward, out decimal epoch))
                                    {
                                        epoch = (int)(Math.Log(Convert.ToDouble(blockReward) / 50) / Math.Log(0.5)) + 1;
                                    }
                                    else
                                    {
                                        epoch = 0;
                                    }
                                    lblSubsidyEpoch.Invoke((MethodInvoker)delegate
                                    {
                                        lblSubsidyEpoch.Text = Convert.ToString(epoch);
                                    });

                                    if (decimal.TryParse(blockReward, out decimal decimalBlockReward))
                                    {
                                        lblBlockRewardFiat.Invoke((MethodInvoker)delegate
                                        {
                                            lblBlockRewardFiat.Text = lblHeaderPrice.Text[0] + (Convert.ToDecimal(blockReward) * OneBTCinSelectedCurrency).ToString("N2");
                                            lblBlockRewardFiat.Location = new Point(lblBlockReward.Location.X + lblBlockReward.Width, lblBlockRewardFiat.Location.Y);
                                        });
                                    }
                                    else
                                    {
                                        lblBlockRewardFiat.Invoke((MethodInvoker)delegate
                                        {
                                            lblBlockRewardFiat.Text = "0";
                                            lblBlockRewardFiat.Location = new Point(lblBlockReward.Location.X + lblBlockReward.Width, lblBlockRewardFiat.Location.Y);
                                        });
                                    }

                                    if (decimal.TryParse(blockReward, out decimal DecBlockReward))
                                    {
                                        DecBlockReward = Convert.ToDecimal(blockReward);
                                    }
                                    else
                                    {
                                        DecBlockReward = 0;
                                    }
                                    decimal NextBlockReward = DecBlockReward / 2;
                                    lblBlockRewardAfterHalving.Invoke((MethodInvoker)delegate
                                    {
                                        lblBlockRewardAfterHalving.Text = Convert.ToString(NextBlockReward);
                                    });
                                    lblBlockRewardAfterHalvingFiat.Invoke((MethodInvoker)delegate
                                    {
                                        lblBlockRewardAfterHalvingFiat.Text = lblHeaderPrice.Text[0] + (Convert.ToDecimal(NextBlockReward) * OneBTCinSelectedCurrency).ToString("N2");
                                        lblBlockRewardAfterHalvingFiat.Location = new Point(lblBlockRewardAfterHalving.Location.X + lblBlockRewardAfterHalving.Width, lblBlockRewardAfterHalvingFiat.Location.Y);
                                    });
                                    lblBlockListBlockReward.Invoke((MethodInvoker)delegate // (Blocks list)
                                    {
                                        lblBlockListBlockReward.Text = blockReward;
                                    });
                                    if (decimal.TryParse(blockReward, out decimal blockReward2))
                                    {
                                        lblBlockListBlockRewardFiat.Invoke((MethodInvoker)delegate // (Blocks list)
                                        {
                                            lblBlockListBlockRewardFiat.Text = lblHeaderPrice.Text[0] + (Convert.ToDecimal(blockReward) * OneBTCinSelectedCurrency).ToString("N2");
                                            lblBlockListBlockRewardFiat.Location = new Point(lblBlockListBlockReward.Location.X + lblBlockListBlockReward.Width, lblBlockListBlockRewardFiat.Location.Y);
                                        });
                                    }
                                    else
                                    {
                                        lblBlockListBlockRewardFiat.Invoke((MethodInvoker)delegate // (Blocks list)
                                        {
                                            lblBlockListBlockRewardFiat.Text = "0";
                                            lblBlockListBlockRewardFiat.Location = new Point(lblBlockListBlockReward.Location.X + lblBlockListBlockReward.Width, lblBlockListBlockRewardFiat.Location.Y);
                                        });
                                    }
                                    
                                    lblBTCInCirc.Invoke((MethodInvoker)delegate
                                    {
                                        lblBTCInCirc.Text = btcInCirc + " / 21000000";
                                    });
                                    if (decimal.TryParse(btcInCirc, out decimal btcInCircDec))
                                    {
                                        lblBTCToBeIssued.Invoke((MethodInvoker)delegate
                                        {
                                            lblBTCToBeIssued.Text = Convert.ToString(21000000 - btcInCircDec);
                                        });
                                    }
                                    else
                                    {
                                        lblBTCToBeIssued.Invoke((MethodInvoker)delegate
                                        {
                                            btcInCircDec = 0;
                                            lblBTCToBeIssued.Text = "0";
                                        });
                                    }
                                    
                                    decimal percentIssued = Math.Round((100m / 21000000) * btcInCircDec, 2);
                                    lblPercentIssued.Invoke((MethodInvoker)delegate
                                    {
                                        lblPercentIssued.Text = Convert.ToString(percentIssued);
                                    });

                                    progressBarPercentIssued.Invoke((MethodInvoker)delegate
                                    {
                                        progressBarPercentIssued.Value = Convert.ToInt16(percentIssued);
                                    });
                                    lblHashesToSolve.Invoke((MethodInvoker)delegate
                                    {
                                        lblHashesToSolve.Text = hashesToSolve;
                                    });
                                    lblBlockListAttemptsToSolveBlock.Invoke((MethodInvoker)delegate // (Blocks list)
                                    {
                                        lblBlockListAttemptsToSolveBlock.Text = hashesToSolve;
                                    });
                                    lbl24HourTransCount.Invoke((MethodInvoker)delegate
                                    {
                                        lbl24HourTransCount.Text = twentyFourHourTransCount;
                                    });
                                    if (decimal.TryParse(twentyFourHourBTCSent, out decimal twentyFourHourBTCSentDec))
                                    {
                                        lbl24HourBTCSent.Invoke((MethodInvoker)delegate
                                        {
                                            lbl24HourBTCSent.Text = twentyFourHourBTCSentDec.ToString("F2");
                                        });
                                        lbl24HourBTCSentFiat.Invoke((MethodInvoker)delegate
                                        {
                                            lbl24HourBTCSentFiat.Text = lblHeaderPrice.Text[0] + (twentyFourHourBTCSentDec * OneBTCinSelectedCurrency).ToString("N2");
                                            lbl24HourBTCSentFiat.Location = new Point(lbl24HourBTCSent.Location.X + lbl24HourBTCSent.Width, lbl24HourBTCSentFiat.Location.Y);
                                        });
                                    }
                                }
                                else
                                {
                                    lblAvgNoTransactions.Invoke((MethodInvoker)delegate
                                    {
                                        lblAvgNoTransactions.Text = "disabled";
                                    });
                                    lblBlockReward.Invoke((MethodInvoker)delegate
                                    {
                                        lblBlockReward.Text = "disabled";
                                    });
                                    lblBlockListBlockReward.Invoke((MethodInvoker)delegate // (Blocks list)
                                    {
                                        lblBlockListBlockReward.Text = "disabled";
                                    });
                                    lblBlockRewardAfterHalving.Invoke((MethodInvoker)delegate
                                    {
                                        lblBlockRewardAfterHalving.Text = "disabled";
                                    });
                                    lblBTCInCirc.Invoke((MethodInvoker)delegate
                                    {
                                        lblBTCInCirc.Text = "disabled";
                                    });
                                    lblHashesToSolve.Invoke((MethodInvoker)delegate
                                    {
                                        lblHashesToSolve.Text = "disabled";
                                    });
                                    lblBlockListAttemptsToSolveBlock.Invoke((MethodInvoker)delegate // (Blocks list)
                                    {
                                        lblBlockListAttemptsToSolveBlock.Text = "disabled";
                                    });
                                    lbl24HourTransCount.Invoke((MethodInvoker)delegate
                                    {
                                        lbl24HourTransCount.Text = "disabled";
                                    });
                                    lbl24HourBTCSent.Invoke((MethodInvoker)delegate
                                    {
                                        lbl24HourBTCSent.Text = "disabled";
                                    });
                                    lblPercentIssued.Invoke((MethodInvoker)delegate
                                    {
                                        lblPercentIssued.Text = "disabled";
                                    });

                                    progressBarPercentIssued.Invoke((MethodInvoker)delegate
                                    {
                                        progressBarPercentIssued.Value = 0;
                                    });
                                }
                            }
                            else
                            {
                                lblAvgNoTransactions.Invoke((MethodInvoker)delegate
                                {
                                    lblAvgNoTransactions.Text = "unavailable on TestNet";
                                });
                                lblBlockReward.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockReward.Text = "unavailable on TestNet";
                                });
                                lblBlockListBlockReward.Invoke((MethodInvoker)delegate // (Blocks list)
                                {
                                    lblBlockListBlockReward.Text = "unavailable on TestNet";
                                });
                                lblBlockRewardAfterHalving.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockRewardAfterHalving.Text = "unavailable on TestNet";
                                });
                                lblBTCInCirc.Invoke((MethodInvoker)delegate
                                {
                                    lblBTCInCirc.Text = "unavailable on TestNet";
                                });
                                lblHashesToSolve.Invoke((MethodInvoker)delegate
                                {
                                    lblHashesToSolve.Text = "unavailable on TestNet";
                                });
                                lblBlockListAttemptsToSolveBlock.Invoke((MethodInvoker)delegate // (Blocks list)
                                {
                                    lblBlockListAttemptsToSolveBlock.Text = "unavailable on TestNet";
                                });
                                lbl24HourTransCount.Invoke((MethodInvoker)delegate
                                {
                                    lbl24HourTransCount.Text = "unavailable on TestNet";
                                });
                                lbl24HourBTCSent.Invoke((MethodInvoker)delegate
                                {
                                    lbl24HourBTCSent.Text = "unavailable on TestNet";
                                });
                                lblPercentIssued.Invoke((MethodInvoker)delegate
                                {
                                    lblPercentIssued.Text = "unavailable on TestNet";
                                });

                                progressBarPercentIssued.Invoke((MethodInvoker)delegate
                                {
                                    progressBarPercentIssued.Value = 0;
                                });
                            }
                            lblChartCirculation.Invoke((MethodInvoker)delegate
                            {
                                lblChartCirculation.Location = new Point(lblBTCInCirc.Location.X + lblBTCInCirc.Width, lblChartCirculation.Location.Y);
                            });
                            SetLightsMessagesAndResetTimers();
                        }
                        catch (Exception ex)
                        {
                            errorOccurred = true;
                            HandleException(ex, "UpdateBitcoinAndLightningDashboards(Task2)");
                        }
                    }
                });
                #endregion
                #region blockchair.com api
                Task task5 = Task.Run(() =>  // blockchair.com JSON for chain stats
                {
                    try
                    {
                        if (!testNet)
                        {
                            if (RunBlockchairComJSONAPI)
                            {
                                
                                var result7 = BlockchairComChainStatsJSONRefresh();
                                int hodling_addresses = int.Parse(result7.hodling_addresses);
                                if (hodling_addresses > 0) // this api sometimes doesn't populate this field with anything but 0
                                {
                                    lblHodlingAddresses.Invoke((MethodInvoker)delegate
                                    {
                                        lblHodlingAddresses.Text = result7.hodling_addresses;
                                    });
                                }
                                else
                                {
                                    lblHodlingAddresses.Invoke((MethodInvoker)delegate
                                    {
                                        lblHodlingAddresses.Text = "no data";
                                    });
                                }
                                lblBlocksIn24Hours.Invoke((MethodInvoker)delegate
                                {
                                    lblBlocksIn24Hours.Text = result7.blocks_24h;
                                });
                                lblNodes.Invoke((MethodInvoker)delegate
                                {
                                    lblNodes.Text = result7.nodes;
                                });
                                dynamic blockchainSize = result7.blockchain_size;
                                double blockchainSizeGB = 0;
                                if (decimal.TryParse(blockchainSize, out decimal blockchainSizeGBtemp))
                                {
                                    blockchainSizeGB = Math.Round(Convert.ToDouble(blockchainSize) / 1073741824.0, 2);
                                }
                                else
                                {
                                    blockchainSizeGB = 0;
                                }
                                lblBlockchainSize.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockchainSize.Text = blockchainSizeGB.ToString();
                                });
                            }
                            else
                            {
                                lblHodlingAddresses.Invoke((MethodInvoker)delegate
                                {
                                    lblHodlingAddresses.Text = "disabled";
                                });
                                lblBlocksIn24Hours.Invoke((MethodInvoker)delegate
                                {
                                    lblBlocksIn24Hours.Text = "disabled";
                                });
                                lblNodes.Invoke((MethodInvoker)delegate
                                {
                                    lblNodes.Text = "disabled";
                                });
                                lblBlockchainSize.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockchainSize.Text = "disabled";
                                });
                            }
                        }
                        else
                        {
                            lblHodlingAddresses.Invoke((MethodInvoker)delegate
                            {
                                lblHodlingAddresses.Text = "unavailable on TestNet";
                            });
                            lblBlocksIn24Hours.Invoke((MethodInvoker)delegate
                            {
                                lblBlocksIn24Hours.Text = "unavailable on TestNet";
                            });
                            lblNodes.Invoke((MethodInvoker)delegate
                            {
                                lblNodes.Text = "unavailable on TestNet";
                            });
                            lblBlockchainSize.Invoke((MethodInvoker)delegate
                            {
                                lblBlockchainSize.Text = "unavailable on TestNet";
                            });
                        }
                        lblPoolRankingChart.Invoke((MethodInvoker)delegate
                        {
                            lblPoolRankingChart.Location = new Point(lblBlocksIn24Hours.Location.X + lblBlocksIn24Hours.Width, lblPoolRankingChart.Location.Y);
                        });
                        lblUniqueAddressesChart.Invoke((MethodInvoker)delegate
                        {
                            lblUniqueAddressesChart.Location = new Point(lblHodlingAddresses.Location.X + lblHodlingAddresses.Width, lblUniqueAddressesChart.Location.Y);
                        });
                        SetLightsMessagesAndResetTimers();
                    }
                    catch (Exception ex)
                    {
                        errorOccurred = true;
                        HandleException(ex, "UpdateBitcoinAndLightningDashboards(Task5)");
                    }
                });
                Task task6 = Task.Run(() =>  // blockchair.com JSON for halving stats
                {
                    try
                    {
                        if (!testNet)
                        {
                            if (RunBlockchairComJSONAPI)
                            {
                                var (halveningBlock, halveningReward, halveningTime, blocksLeft, seconds_left) = BlockchairComHalvingJSONRefresh();
                                lblProgressToHalving.Invoke((MethodInvoker)delegate
                                {
                                    lblProgressToHalving.Text = halveningBlock + " / " + blocksLeft;
                                });
                                int progressBarValue = 0;
                                try
                                {
                                    progressBarValue = 210000 - Convert.ToInt32(blocksLeft);
                                    if (progressBarValue > 210000 || progressBarValue < 0)
                                    {
                                        progressBarValue = 0;
                                    }
                                }
                                catch (Exception)
                                {
                                    progressBarValue = 0;
                                }
                                progressBarProgressToHalving.Value = progressBarValue;
                                progressBarBlockListHalvingProgress.Value = progressBarValue;
                                lblBlockListHalvingBlockAndRemaining.Invoke((MethodInvoker)delegate // Blocks list
                                {
                                    lblBlockListHalvingBlockAndRemaining.Text = halveningBlock + " / " + blocksLeft;
                                });
                                string halvening_time = halveningTime;
                                string halveningDate = "";
                                try
                                {
                                    DateTime halveningDateTime = DateTime.ParseExact(halvening_time, "yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture);
                                    halveningDate = halveningDateTime.Date.ToString("yyyy-MM-dd");
                                }
                                catch (Exception)
                                {
                                    halveningDate = "9999-12-31";
                                }

                                lblEstimatedHalvingDate.Invoke((MethodInvoker)delegate
                                {
                                    lblEstimatedHalvingDate.Text = halveningDate + " / ";
                                });
                                lblHalvingSecondsRemaining.Invoke((MethodInvoker)delegate
                                {
                                    lblHalvingSecondsRemaining.Location = new Point(lblEstimatedHalvingDate.Location.X + lblEstimatedHalvingDate.Width - (int)(8 * UIScale), lblEstimatedHalvingDate.Location.Y);
                                    if (seconds_left != null)
                                    {
                                        lblHalvingSecondsRemaining.Text = seconds_left;
                                        ObtainedHalvingSecondsRemainingYet = true; // signifies that we can now start deducting from this
                                    }
                                });
                            }
                            else
                            {
                                progressBarProgressToHalving.Value = 0;
                                progressBarBlockListHalvingProgress.Value = 0;
                                lblProgressToHalving.Invoke((MethodInvoker)delegate
                                {
                                    lblProgressToHalving.Text = "disabled";
                                });
                                lblBlockListHalvingBlockAndRemaining.Invoke((MethodInvoker)delegate // Blocks list
                                {
                                    lblBlockListHalvingBlockAndRemaining.Text = "disabled";
                                });

                                lblEstimatedHalvingDate.Invoke((MethodInvoker)delegate
                                {
                                    lblEstimatedHalvingDate.Text = "disabled";
                                });
                                lblHalvingSecondsRemaining.Invoke((MethodInvoker)delegate
                                {
                                    lblHalvingSecondsRemaining.Text = "disabled";
                                });
                            }
                        }
                        else
                        {
                            progressBarProgressToHalving.Value = 0;
                            progressBarBlockListHalvingProgress.Value = 0;
                            lblProgressToHalving.Invoke((MethodInvoker)delegate
                            {
                                lblProgressToHalving.Text = "unavailable";
                            });
                            lblBlockListHalvingBlockAndRemaining.Invoke((MethodInvoker)delegate // Blocks list
                            {
                                lblBlockListHalvingBlockAndRemaining.Text = "unavailable";
                            });

                            lblEstimatedHalvingDate.Invoke((MethodInvoker)delegate
                            {
                                lblEstimatedHalvingDate.Text = "unavailable on TestNet";
                            });
                            lblHalvingSecondsRemaining.Invoke((MethodInvoker)delegate
                            {
                                lblHalvingSecondsRemaining.Text = "";
                            });
                        }
                        SetLightsMessagesAndResetTimers();
                    }
                    catch (Exception ex)
                    {
                        errorOccurred = true;
                        HandleException(ex, "UpdateBitcoinAndLightningDashboards(Task6)");
                    }
                });
                #endregion
                await Task.WhenAll(task0, task1, task2, task3, task4, task5, task6);

                if (errorOccurred)
                {
                    intDisplayCountdownToRefresh = APIGroup1DisplayTimerIntervalSecsConstant;
                    lblStatusLight.Invoke((MethodInvoker)delegate
                    {
                        lblStatusLight.ForeColor = Color.Red;
                    });
                    lblStatusLight.Invoke((MethodInvoker)delegate
                    {
                        lblStatusLight.Text = "🔴";
                    });
                }
            }
            ToggleLoadingAnimation("disable");
        }
        #endregion
        #region chart icon clicks
        private void PictureBoxHashrateChart_Click(object sender, EventArgs e)
        {
            BtnChartHashrate_Click(sender, e);
            BtnMenuCharts_Click(sender, e);
        }

        private void PictureBoxDifficultyChart_Click(object sender, EventArgs e)
        {
            BtnChartDifficulty_Click(sender, e);
            BtnMenuCharts_Click(sender, e);
        }

        private void PictureBoxPriceChart_Click(object sender, EventArgs e)
        {
            BtnChartPrice_Click(sender, e);
            BtnMenuCharts_Click(sender, e);
        }

        private void PictureBoxPoolRankingChart_Click(object sender, EventArgs e)
        {
            BtnChartPoolsRanking_Click(sender, e);
            BtnMenuCharts_Click(sender, e);
        }

        private void PictureBoxMarketCapChart_Click(object sender, EventArgs e)
        {
            BtnChartMarketCap_Click(sender, e);
            BtnMenuCharts_Click(sender, e);
        }

        private void PictureBoxUniqueAddressesChart_Click(object sender, EventArgs e)
        {
            BtnChartUniqueAddresses_Click(sender, e);
            BtnMenuCharts_Click(sender, e);
        }

        private void PictureBoxFeeRangeChart_Click(object sender, EventArgs e)
        {
            BtnChartFeeRates_Click(sender, e);
            BtnMenuCharts_Click(sender, e);
        }

        private void PictureBoxBlockFeesChart_Click(object sender, EventArgs e)
        {
            BtnChartBlockFees_Click(sender, e);
            BtnMenuCharts_Click(sender, e);
        }

        private void PictureBoxLightningCapacityChart_Click(object sender, EventArgs e)
        {
            BtnChartLightningCapacity_Click(sender, e);
            BtnMenuCharts_Click(sender, e);
        }

        private void PictureBoxLightningNodesChart_Click(object sender, EventArgs e)
        {
            BtnChartNodesByNetwork_Click(sender, e);
            BtnMenuCharts_Click(sender, e);
        }

        private void PictureBoxLightningChannelsChart_Click(object sender, EventArgs e)
        {
            BtnChartLightningChannels_Click(sender, e);
            BtnMenuCharts_Click(sender, e);
        }

        private void PictureBoxConverterChart_Click(object sender, EventArgs e)
        {
            BtnMenuPriceConverter_Click(sender, e);
        }
        #endregion
        #region api calls for dashboards
        private (string currentHashrate, string currentDifficulty) GetHashrate()
        {
            try
            {
                using WebClient client = new WebClient();
                LightUpNodeLight();
                var response = client.DownloadString(NodeURL + "v1/mining/hashrate/3d");
                var data = JObject.Parse(response);
                string currentHashrate = "";
                string currentDifficulty = "";
                if (data["currentHashrate"] != null && data["currentDifficulty"] != null)
                {
                    currentHashrate = Convert.ToString(data["currentHashrate"]);
                    currentDifficulty = Convert.ToString(data["currentDifficulty"]);
                    return (currentHashrate, currentDifficulty);
                }
                else
                {
                    return ("error", "error");
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "GetHashrate");
            }
            return ("error", "error");
        }

        private (string fastestFee, string halfHourFee, string hourFee, string economyFee, string minimumFee) GetFees()
        {
            try
            {
                using WebClient client = new WebClient();
                LightUpNodeLight();
                var response = client.DownloadString(NodeURL + "v1/fees/recommended");
                var data = JObject.Parse(response);
                if (data["fastestFee"] != null && data["halfHourFee"] != null && data["hourFee"] != null && data["economyFee"] != null && data["minimumFee"] != null)
                {
                    string fastestFee = Convert.ToString(data["fastestFee"]);
                    string halfHourFee = Convert.ToString(data["halfHourFee"]);
                    string hourFee = Convert.ToString(data["hourFee"]);
                    string economyFee = Convert.ToString(data["economyFee"]);
                    string minimumFee = Convert.ToString(data["minimumFee"]);
                    return (fastestFee, halfHourFee, hourFee, economyFee, minimumFee);
                }
                else
                {
                    return ("error", "error", "error", "error", "error");
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "GetFees");
            }
            return ("error", "error", "error", "error", "error");
        }

        private (string progressPercent, string difficultyChange, string estimatedRetargetDate, string remainingBlocks, string remainingTime, string previousRetarget, string nextRetargetHeight, string timeAvg, string timeOffset) GetDifficultyAdjustment()
        {
            try
            {
                using WebClient client = new WebClient();
                LightUpNodeLight();
                var response = client.DownloadString(NodeURL + "v1/difficulty-adjustment");
                var data = JObject.Parse(response);
                if (data["progressPercent"] != null && data["difficultyChange"] != null && data["estimatedRetargetDate"] != null && data["remainingBlocks"] != null && data["remainingTime"] != null && data["previousRetarget"] != null && data["nextRetargetHeight"] != null && data["timeAvg"] != null && data["timeOffset"] != null)
                {
                    string progressPercent = Convert.ToString(data["progressPercent"]);
                    decimal difficultyChangeFull = (decimal)data["difficultyChange"];
                    string difficultyChange = Math.Round(difficultyChangeFull, 2).ToString();
                    string estimatedRetargetDate = Convert.ToString(data["estimatedRetargetDate"]);
                    string remainingBlocks = Convert.ToString(data["remainingBlocks"]);
                    string remainingTime = Convert.ToString(data["remainingTime"]);
                    string previousRetarget = Convert.ToString(data["previousRetarget"]);
                    string nextRetargetHeight = Convert.ToString(data["nextRetargetHeight"]);
                    string timeAvg = Convert.ToString(data["timeAvg"]);
                    string timeOffset = Convert.ToString(data["timeOffset"]);
                    return (progressPercent, difficultyChange, estimatedRetargetDate, remainingBlocks, remainingTime, previousRetarget, nextRetargetHeight, timeAvg, timeOffset);
                }
                else
                {
                    return ("error", "error", "error", "error", "error", "error", "error", "error", "error");
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "GetDifficultyAdjustment");
            }
            return ("error", "error", "error", "error", "error", "error", "error", "error", "error");
        }

        private (string priceUSD, string priceGBP, string priceEUR, string priceXAU) BitcoinExplorerOrgGetPrice()
        {
            try
            {
                using WebClient client = new WebClient();
                var response = client.DownloadString("https://bitcoinexplorer.org/api/price");
                var data = JObject.Parse(response);
                if (data["usd"] != null && data["gbp"] != null && data["eur"] != null && data["xau"] != null)
                {
                    string priceUSD = Convert.ToString(data["usd"]);
                    string priceGBP = Convert.ToString(data["gbp"]);
                    string priceEUR = Convert.ToString(data["eur"]);
                    string priceXAU = Convert.ToString(data["xau"]);
                    return (priceUSD, priceGBP, priceEUR, priceXAU);
                }
                else
                {
                    return ("error", "error", "error", "error");
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BitcoinExplorerOrgGetPrice");
            }
            return ("error", "error", "error", "error");
        }

        private (string mCapUSD, string mCapGBP, string mCapEUR, string mCapXAU) BitcoinExplorerOrgGetMarketCap()
        {
            try
            {
                using WebClient client = new WebClient();
                var response = client.DownloadString("https://bitcoinexplorer.org/api/price/marketcap");
                var data = JObject.Parse(response);
                if (data["usd"] != null && data["gbp"] != null && data["eur"] != null && data["xau"] != null)
                {
                    string mCapUSD = Convert.ToString(data["usd"]);
                    string mCapGBP = Convert.ToString(data["gbp"]);
                    string mCapEUR = Convert.ToString(data["eur"]);
                    string mCapXAU = Convert.ToString(data["xau"]);
                    return (mCapUSD, mCapGBP, mCapEUR, mCapXAU);
                }
                else
                {
                    return ("error", "error", "error", "error");
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BitcoinExplorerOrgGetMarketCap");
            }
            return ("error", "error", "error", "error");
        }

        private (string satsUSD, string satsGBP, string satsEUR, string satsXAU) BitcoinExplorerOrgGetMoscowTime()
        {
            try
            {
                using WebClient client = new WebClient();
                var response = client.DownloadString("https://bitcoinexplorer.org/api/price/sats");
                var data = JObject.Parse(response);
                if (data["usd"] != null && data["gbp"] != null && data["eur"] != null && data["xau"] != null)
                {
                    string satsUSD = Convert.ToString(data["usd"]);
                    string satsGBP = Convert.ToString(data["gbp"]);
                    string satsEUR = Convert.ToString(data["eur"]);
                    string satsXAU = Convert.ToString(data["xau"]);
                    return (satsUSD, satsGBP, satsEUR, satsXAU);
                }
                else
                {
                    return ("error", "error", "error", "error");
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BitcoinExplorerOrgGetMoscowTime");
            }
            return ("error", "error", "error", "error");
        }

        private (string txCount, string vSize, string totalFees) GetMempool()
        {
            try
            {

                using WebClient client = new WebClient();
                LightUpNodeLight();
                var response = client.DownloadString(NodeURL + "mempool");
                if (testNet)
                {
                    response = client.DownloadString("https://mempool.space/testnet/api/mempool");
                }
                var data = JObject.Parse(response);
                if (data["count"] != null && data["vsize"] != null && data["total_fee"] != null)
                {
                    string txCount = Convert.ToString(data["count"]);
                    string vSize = Convert.ToString(data["vsize"]);
                    string totalFees = Convert.ToString(data["total_fee"]);
                    return (txCount, vSize, totalFees);
                }
                else
                {
                    return ("error", "error", "error");
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "GetMempool");
            }
            return ("error", "error", "error");
        }

        private (string avgNoTransactions, string blockNumber, string blockReward, string estHashrate, string avgTimeBetweenBlocks, string btcInCirc, string hashesToSolve, string twentyFourHourTransCount, string twentyFourHourBTCSent) BlockchainInfoEndpointsRefresh()
        {
            try
            {
                using WebClient client = new WebClient();
                string avgNoTransactions = client.DownloadString("https://blockchain.info/q/avgtxnumber"); // average number of transactions in last 100 blocks (to about 6 decimal places!)
                string avgNoTransactionsText = "";
                if (double.TryParse(avgNoTransactions, out double dblAvgNoTransactions))
                {
                    dblAvgNoTransactions = Math.Round(dblAvgNoTransactions);
                    avgNoTransactionsText = dblAvgNoTransactions.ToString();
                }
                else
                {
                    dblAvgNoTransactions = 0;
                    avgNoTransactionsText = "0";
                }
                string blockNumber = client.DownloadString("https://blockchain.info/q/getblockcount"); // most recent block number
                string blockReward = client.DownloadString("https://blockchain.info/q/bcperblock"); // current block reward
                string estHashrate = client.DownloadString("https://blockchain.info/q/hashrate"); // hashrate estimate
                string secondsBetweenBlocks = client.DownloadString("https://blockchain.info/q/interval"); // average time between blocks in seconds
                if (double.TryParse(secondsBetweenBlocks, out double dblSecondsBetweenBlocks))
                {
                    dblSecondsBetweenBlocks = Convert.ToDouble(secondsBetweenBlocks);
                }
                else
                {
                    dblSecondsBetweenBlocks = 0;
                }
                TimeSpan time = TimeSpan.FromSeconds(dblSecondsBetweenBlocks);
                string timeString = string.Format("{0:%m}m {0:%s}s", time);
                string avgTimeBetweenBlocks = timeString;
                string totalBTC = client.DownloadString("https://blockchain.info/q/totalbc"); // total sats in circulation
                string btcInCirc = ConvertSatsToBitcoin(totalBTC).ToString();
                string hashesToSolve = client.DownloadString("https://blockchain.info/q/hashestowin"); // avg number of hashes to win a block
                string twentyFourHourTransCount = client.DownloadString("https://blockchain.info/q/24hrtransactioncount"); // number of transactions in last 24 hours
                string twentyFourHourBTCSent = client.DownloadString("https://blockchain.info/q/24hrbtcsent"); // number of sats sent in 24 hours
                twentyFourHourBTCSent = ConvertSatsToBitcoin(twentyFourHourBTCSent).ToString();
                return (avgNoTransactionsText, blockNumber, blockReward, estHashrate, avgTimeBetweenBlocks, btcInCirc, hashesToSolve, twentyFourHourTransCount, twentyFourHourBTCSent);
            }
            catch (Exception ex)
            {
                HandleException(ex, "BlockchainInfoEndpointsRefresh");
            }
            return ("0", "0", "0", "0", "0", "0", "0", "0", "0");
        }

        private (List<string> aliases, List<string> capacities) MempoolSpaceLiquidityRankingJSONRefresh()
        {
            try
            {
                using WebClient client = new WebClient();
                LightUpNodeLight();
                var response = client.DownloadString(NodeURL + "v1/lightning/nodes/rankings/liquidity");
                var data = JArray.Parse(response);

                List<string> aliases = new List<string>();
                List<string> capacities = new List<string>();

                for (int i = 0; i < data.Count && i < 10; i++) // Limit to the number of available elements or a specific count (e.g., 10)
                {
                    try
                    {
                        string alias = (string)data[i]["alias"];
                        string capacity = (string)data[i]["capacity"];

                        // Check if alias and capacity exist before adding to the lists
                        if (!string.IsNullOrEmpty(alias) && !string.IsNullOrEmpty(capacity))
                        {
                            capacity = ConvertSatsToBitcoin(capacity).ToString();
                            double dblCapacity = Convert.ToDouble(capacity);
                            dblCapacity = Math.Round(dblCapacity, 2); // round to 2 decimal places
                            capacity = Convert.ToString(dblCapacity);

                            aliases.Add(alias);
                            capacities.Add(capacity);
                        }
                        else
                        {
                            aliases.Add("error");
                            capacities.Add("0");
                        }
                    }
                    catch (Exception ex)
                    {
                        // Handle parsing errors for a specific element
                        HandleException(ex, $"Parsing error for element {i}");
                    }
                }

                return (aliases, capacities);
            }
            catch (Exception ex)
            {
                HandleException(ex, "MempoolSpaceLiquidityRankingJSONRefresh");
            }

            return (new List<string>(), new List<string>());
        }

        private (List<string> aliases, List<string> channels) MempoolSpaceConnectivityRankingJSONRefresh()
        {
            try
            {
                using WebClient client = new WebClient();
                LightUpNodeLight();
                var response = client.DownloadString(NodeURL + "v1/lightning/nodes/rankings/connectivity");
                var data = JArray.Parse(response);

                List<string> aliases = new List<string>();
                List<string> channels = new List<string>();

                for (int i = 0; i < data.Count && i < 10; i++) // Limit to the number of available elements or a specific count (e.g., 10)
                {
                    try
                    {
                        string alias = (string)data[i]["alias"];
                        string channelCount = (string)data[i]["channels"];

                        // Check if alias and channelCount exist before adding to the lists
                        if (!string.IsNullOrEmpty(alias) && !string.IsNullOrEmpty(channelCount))
                        {
                            aliases.Add(alias);
                            channels.Add(channelCount);
                        }
                        else
                        {
                            // Handle the case where alias or channelCount is missing
                        }
                    }
                    catch (Exception ex)
                    {
                        // Handle parsing errors for a specific element
                        HandleException(ex, $"Parsing error for element {i}");
                    }
                }

                return (aliases, channels);
            }
            catch (Exception ex)
            {
                HandleException(ex, "MempoolSpaceConnectivityRankingJSONRefresh");
            }

            return (new List<string>(), new List<string>());
        }

        private (string clearnetCapacity, string torCapacity, string unknownCapacity) MempoolSpaceCapacityBreakdownJSONRefresh()
        {
            try
            {
                using WebClient client = new WebClient();
                LightUpNodeLight();
                var response = client.DownloadString(NodeURL + "v1/lightning/nodes/isp-ranking");
                var data = JObject.Parse(response);

                string clearnetCapacity = "0";
                string torCapacity = "0";
                string unknownCapacity = "0";

                try
                {
                    string clearnetCapacityString = (string)data["clearnetCapacity"];
                    if (!string.IsNullOrEmpty(clearnetCapacityString))
                    {
                        clearnetCapacity = ConvertSatsToBitcoin(clearnetCapacityString).ToString();
                        double dblClearnetCapacity = Convert.ToDouble(clearnetCapacity);
                        dblClearnetCapacity = Math.Round(dblClearnetCapacity, 2); // round to 2 decimal places
                        clearnetCapacity = Convert.ToString(dblClearnetCapacity);
                    }

                    string torCapacityString = (string)data["torCapacity"];
                    if (!string.IsNullOrEmpty(torCapacityString))
                    {
                        torCapacity = ConvertSatsToBitcoin(torCapacityString).ToString();
                        double dblTorCapacity = Convert.ToDouble(torCapacity);
                        dblTorCapacity = Math.Round(dblTorCapacity, 2);
                        torCapacity = Convert.ToString(dblTorCapacity);
                    }

                    string unknownCapacityString = (string)data["unknownCapacity"];
                    if (!string.IsNullOrEmpty(unknownCapacityString))
                    {
                        unknownCapacity = ConvertSatsToBitcoin(unknownCapacityString).ToString();
                        double dblUnknownCapacity = Convert.ToDouble(unknownCapacity);
                        dblUnknownCapacity = Math.Round(dblUnknownCapacity, 2);
                        unknownCapacity = Convert.ToString(dblUnknownCapacity);
                    }
                }
                catch (Exception ex)
                {
                    // Handle parsing errors for specific capacity types
                    HandleException(ex, "Parsing error for capacity types");
                }

                return (clearnetCapacity, torCapacity, unknownCapacity);
            }
            catch (Exception ex)
            {
                HandleException(ex, "MempoolSpaceCapacityBreakdownJSONRefresh");
            }

            return ("0", "0", "0");
        }

        private (string channelCount, string nodeCount, string totalCapacity, string torNodes, string clearnetNodes, string unannouncedNodes, string avgCapacity, string avgFeeRate, string avgBaseeFeeMtokens, string medCapacity, string medFeeRate, string medBaseeFeeMtokens, string clearnetTorNodes) MempoolSpaceLightningJSONRefresh()
        {
            try
            {
                using WebClient client = new WebClient();
                LightUpNodeLight();
                var response = client.DownloadString(NodeURL + "v1/lightning/statistics/latest");
                var data = JObject.Parse(response);
                if (data["latest"]["channel_count"] != null && data["latest"]["node_count"] != null && data["latest"]["total_capacity"] != null && data["latest"]["tor_nodes"] != null && data["latest"]["clearnet_nodes"] != null && data["latest"]["unannounced_nodes"] != null && data["latest"]["avg_capacity"] != null && data["latest"]["avg_fee_rate"] != null && data["latest"]["avg_base_fee_mtokens"] != null && data["latest"]["med_capacity"] != null && data["latest"]["med_fee_rate"] != null && data["latest"]["med_base_fee_mtokens"] != null && data["latest"]["clearnet_tor_nodes"] != null)
                {
                    var channelCount = (string)data["latest"]["channel_count"];
                    var nodeCount = (string)data["latest"]["node_count"];
                    string totalCapacityString = Convert.ToString(data["latest"]["total_capacity"]);
                    string totalCapacity = ConvertSatsToBitcoin(totalCapacityString).ToString();
                    if (double.TryParse(totalCapacity, out double dblTotalCapacity))
                    {
                        dblTotalCapacity = Convert.ToDouble(totalCapacity);
                        dblTotalCapacity = Math.Round(dblTotalCapacity, 2);
                        totalCapacity = Convert.ToString(dblTotalCapacity);
                    }
                    else
                    {
                        totalCapacity = "0";
                    }
                    var torNodes = (string)data["latest"]["tor_nodes"];
                    var clearnetNodes = (string)data["latest"]["clearnet_nodes"];
                    var unannouncedNodes = (string)data["latest"]["unannounced_nodes"];
                    var avgCapacity = (string)data["latest"]["avg_capacity"];
                    var avgFeeRate = (string)data["latest"]["avg_fee_rate"];
                    var avgBaseeFeeMtokens = (string)data["latest"]["avg_base_fee_mtokens"];
                    var medCapacity = (string)data["latest"]["med_capacity"];
                    var medFeeRate = (string)data["latest"]["med_fee_rate"];
                    var medBaseeFeeMtokens = (string)data["latest"]["med_base_fee_mtokens"];
                    medBaseeFeeMtokens ??= "0";
                    var clearnetTorNodes = (string)data["latest"]["clearnet_tor_nodes"];
                    return (channelCount, nodeCount, totalCapacity, torNodes, clearnetNodes, unannouncedNodes, avgCapacity, avgFeeRate, avgBaseeFeeMtokens, medCapacity, medFeeRate, medBaseeFeeMtokens, clearnetTorNodes);
                }
                else
                {
                    return ("0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0");
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "MempoolSpaceLightningJSONRefresh");
            }
            return ("0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0");
        }

        private (string nextBlockFee, string thirtyMinFee, string sixtyMinFee, string oneDayFee, string txInNextBlock, string nextBlockMinFee, string nextBlockMaxFee, string nextBlockTotalFees) BitcoinExplorerOrgJSONRefresh()
        {
            try
            {
                // fees
                var client = new HttpClient();
                var response = client.GetAsync("https://bitcoinexplorer.org/api/mempool/fees").Result;
                var json = response.Content.ReadAsStringAsync().Result;
                var data = JObject.Parse(json);
                var nextBlockFee = "0";
                var thirtyMinFee = "0";
                var sixtyMinFee = "0";
                var oneDayFee = "0";
                if (data["nextBlock"] != null && data["30min"] != null && data["60min"] != null && data["1day"] != null)
                {
                    thirtyMinFee = (string)data["30min"];
                    sixtyMinFee = (string)data["60min"];
                    oneDayFee = (string)data["1day"];
                }
                // next block
                var response2 = client.GetAsync("https://bitcoinexplorer.org/api/mining/next-block").Result;
                var json2 = response2.Content.ReadAsStringAsync().Result;
                var data2 = JObject.Parse(json2);
                if (data2["txCount"] != null && data2["minFeeRate"] != null && data2["maxFeeRate"] != null && data2["totalFees"] != null)
                {
                    var txInNextBlock = (string)data2["txCount"];
                    var nextBlockMinFee = (string)data2["minFeeRate"];
                    double valuetoround = Convert.ToDouble(nextBlockMinFee);
                    double roundedValue = Math.Round(valuetoround, 2);
                    nextBlockMinFee = Convert.ToString(roundedValue);
                    var nextBlockMaxFee = (string)data2["maxFeeRate"];
                    valuetoround = Convert.ToDouble(nextBlockMaxFee);
                    roundedValue = Math.Round(valuetoround, 2);
                    nextBlockMaxFee = Convert.ToString(roundedValue);
                    var nextBlockTotalFees = (string)data2["totalFees"];
                    valuetoround = Convert.ToDouble(nextBlockTotalFees);
                    roundedValue = Math.Round(valuetoround, 2);
                    nextBlockTotalFees = Convert.ToString(roundedValue);
                    return (nextBlockFee, thirtyMinFee, sixtyMinFee, oneDayFee, txInNextBlock, nextBlockMinFee, nextBlockMaxFee, nextBlockTotalFees);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BitcoinExplorerOrgJSONRefresh");
            }
            return ("0", "0", "0", "0", "0", "0", "0", "0");
        }

        private (string halveningBlock, string halveningReward, string halveningTime, string blocksLeft, string seconds_left) BlockchairComHalvingJSONRefresh()
        {
            try
            {
                using WebClient client = new WebClient();
                var response = client.DownloadString("https://api.blockchair.com/tools/halvening");
                var data = JObject.Parse(response);
                if (data["data"]["bitcoin"]["halvening_block"] != null && data["data"]["bitcoin"]["halvening_reward"] != null && data["data"]["bitcoin"]["halvening_time"] != null && data["data"]["bitcoin"]["blocks_left"] != null && data["data"]["bitcoin"]["seconds_left"] != null)
                {
                    var halveningBlock = (string)data["data"]["bitcoin"]["halvening_block"];
                    var halveningReward = (string)data["data"]["bitcoin"]["halvening_reward"];
                    var halveningTime = (string)data["data"]["bitcoin"]["halvening_time"];
                    var blocksLeft = (string)data["data"]["bitcoin"]["blocks_left"];
                    var seconds_left = (string)data["data"]["bitcoin"]["seconds_left"];
                    return (halveningBlock, halveningReward, halveningTime, blocksLeft, seconds_left);
                }
                else
                {
                    return ("0", "0", "0", "0", "0");
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BlockchairComHalvingJSONRefresh");
            }
            return ("0", "0", "0", "0", "0");
        }

        private (string hodling_addresses, string blocks_24h, string nodes, string blockchain_size) BlockchairComChainStatsJSONRefresh()
        {
            try
            {
                using WebClient client = new WebClient();
                var response = client.DownloadString("https://api.blockchair.com/bitcoin/stats");
                var data = JObject.Parse(response);
                if (data["data"]["hodling_addresses"] != null && data["data"]["blocks_24h"] != null && data["data"]["nodes"] != null && data["data"]["blockchain_size"] != null)
                {
                    var hodling_addresses = (string)data["data"]["hodling_addresses"];
                    var blocks_24h = (string)data["data"]["blocks_24h"];
                    var nodes = (string)data["data"]["nodes"];
                    var blockchain_size = (string)data["data"]["blockchain_size"];
                    return (hodling_addresses, blocks_24h, nodes, blockchain_size);
                }
                else
                {
                    return ("0", "0", "0", "0");
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BlockchairComJSONRefresh");
            }
            return ("0", "0", "0", "0");
        }
        #endregion
        #region update seconds to halving
        private void UpdateSecondsToHalving()
        {
            try
            {
                if (!testNet)
                {
                    if (ObtainedHalvingSecondsRemainingYet) // only want to do this if we've already retrieved seconds remaining until halvening
                    {
                        string secondsString = lblHalvingSecondsRemaining.Text;
                        try
                        {
                            int SecondsToHalving = int.Parse(secondsString);
                            if (SecondsToHalving > 0)
                            {
                                SecondsToHalving--; // one second closer to the halvening!
                                lblHalvingSecondsRemaining.Invoke((MethodInvoker)delegate
                                {
                                    lblHalvingSecondsRemaining.Text = SecondsToHalving.ToString();
                                });
                            }
                        }
                        catch
                        {
                            lblHalvingSecondsRemaining.Invoke((MethodInvoker)delegate
                            {
                                lblHalvingSecondsRemaining.Text = "disabled";
                            });
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "UpdateSecondsToHalving");
            }
        }
        #endregion
        #region draw lines between fields on lightning dashboard
        private void PanelLightningDashboard_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                using Pen pen = new Pen(linesColor, 1);
                // Capacity connecting lines
                e.Graphics.DrawLine(pen, lblTotalCapacity.Right, lblTotalCapacity.Top + (lblTotalCapacity.Height / 2), lblClearnetCapacity.Left, lblClearnetCapacity.Top + (lblClearnetCapacity.Height / 2));
                e.Graphics.DrawLine(pen, (lblTotalCapacity.Right + lblClearnetCapacity.Left) / 2, lblTotalCapacity.Top + (lblTotalCapacity.Height / 2), (lblTotalCapacity.Right + lblClearnetCapacity.Left) / 2, lblUnknownCapacity.Top + (lblUnknownCapacity.Height / 2));
                e.Graphics.DrawLine(pen, (lblTotalCapacity.Right + lblClearnetCapacity.Left) / 2, lblTorCapacity.Top + (lblTorCapacity.Height / 2), lblTorCapacity.Left, lblTorCapacity.Top + (lblTorCapacity.Height / 2));
                e.Graphics.DrawLine(pen, (lblTotalCapacity.Right + lblClearnetCapacity.Left) / 2, lblUnknownCapacity.Top + (lblUnknownCapacity.Height / 2), lblUnknownCapacity.Left, lblUnknownCapacity.Top + (lblUnknownCapacity.Height / 2));
                // Node connecting lines
                e.Graphics.DrawLine(pen, lblNodeCount.Right, lblNodeCount.Top + (lblNodeCount.Height / 2), lblTorNodes.Left, lblTorNodes.Top + (lblTorNodes.Height / 2));
                e.Graphics.DrawLine(pen, (lblTotalCapacity.Right + lblClearnetCapacity.Left) / 2, lblTorNodes.Top + (lblTorNodes.Height / 2), (lblTotalCapacity.Right + lblClearnetCapacity.Left) / 2, lblUnannouncedNodes.Top + (lblUnannouncedNodes.Height / 2));
                e.Graphics.DrawLine(pen, (lblTotalCapacity.Right + lblClearnetCapacity.Left) / 2, lblClearnetNodes.Top + (lblClearnetNodes.Height / 2), lblClearnetNodes.Left, lblClearnetNodes.Top + (lblClearnetNodes.Height / 2));
                e.Graphics.DrawLine(pen, (lblTotalCapacity.Right + lblClearnetCapacity.Left) / 2, lblClearnetTorNodes.Top + (lblClearnetTorNodes.Height / 2), lblClearnetTorNodes.Left, lblClearnetTorNodes.Top + (lblClearnetTorNodes.Height / 2));
                e.Graphics.DrawLine(pen, (lblTotalCapacity.Right + lblClearnetCapacity.Left) / 2, lblUnannouncedNodes.Top + (lblUnannouncedNodes.Height / 2), lblUnannouncedNodes.Left, lblUnannouncedNodes.Top + (lblUnannouncedNodes.Height / 2));
                // Channel connecting lines
                e.Graphics.DrawLine(pen, lblChannelCount.Right, lblChannelCount.Top + (lblChannelCount.Height / 2), lblAverageCapacity.Left, lblAverageCapacity.Top + (lblAverageCapacity.Height / 2));
                e.Graphics.DrawLine(pen, (lblChannelCount.Right + lblAverageCapacity.Left) / 2, lblChannelCount.Top + (lblChannelCount.Height / 2), (lblChannelCount.Right + lblAverageCapacity.Left) / 2, lblMedBaseFeeTokens.Top + (lblMedBaseFeeTokens.Height / 2));
                e.Graphics.DrawLine(pen, (lblChannelCount.Right + lblAverageCapacity.Left) / 2, lblAverageFeeRate.Top + (lblAverageFeeRate.Height / 2), lblAverageFeeRate.Left, lblAverageFeeRate.Top + (lblAverageFeeRate.Height / 2));
                e.Graphics.DrawLine(pen, (lblChannelCount.Right + lblAverageCapacity.Left) / 2, lblAverageBaseFeeMtokens.Top + (lblAverageBaseFeeMtokens.Height / 2), lblAverageBaseFeeMtokens.Left, lblAverageBaseFeeMtokens.Top + (lblAverageBaseFeeMtokens.Height / 2));
                e.Graphics.DrawLine(pen, (lblChannelCount.Right + lblAverageCapacity.Left) / 2, lblMedCapacity.Top + (lblMedCapacity.Height / 2), lblMedCapacity.Left, lblMedCapacity.Top + (lblMedCapacity.Height / 2));
                e.Graphics.DrawLine(pen, (lblChannelCount.Right + lblAverageCapacity.Left) / 2, lblMedFeeRate.Top + (lblMedFeeRate.Height / 2), lblMedFeeRate.Left, lblMedFeeRate.Top + (lblMedFeeRate.Height / 2));
                e.Graphics.DrawLine(pen, (lblChannelCount.Right + lblAverageCapacity.Left) / 2, lblMedBaseFeeTokens.Top + (lblMedBaseFeeTokens.Height / 2), lblMedBaseFeeTokens.Left, lblMedBaseFeeTokens.Top + (lblMedBaseFeeTokens.Height / 2));
            }
            catch (WebException ex)
            {
                HandleException(ex, "Drawing connectors on lightning dashboard");
            }
        }
        #endregion
        #endregion

        #region ⚡ADDRESS SCREEN⚡
        #region setup address screen
        private async void TboxSubmittedAddress_TextChanged(object sender, EventArgs e)
        {
            try
            {
                BtnViewBlockFromAddress.Visible = false;
                BtnViewTransactionFromAddress.Visible = false;
                listViewAddressTransactions.Items.Clear(); // wipe any data in the transaction listview
                TotalAddressTransactionRowsAdded = 0;

                string addressString = textboxSubmittedAddress.Text; // supplied address

                string addressType = DetermineAddressType(addressString); // check address is valid and what type of address
                if (addressType == "P2PKH (legacy)" || addressType == "P2SH" || addressType == "P2WPKH (segwit)" || addressType == "P2WSH" || addressType == "P2TT (taproot)" || addressType == "unknown") // address is valid
                {
                    ToggleLoadingAnimation("enable"); // start the loading animation
                    DisableEnableAddressButtons("disable"); // disable buttons during operation
                    lblInvalidAddressIndicator.Invoke((MethodInvoker)delegate
                    {
                        lblInvalidAddressIndicator.ForeColor = Color.OliveDrab;
                        lblInvalidAddressIndicator.Text = "✔️ valid address";
                    });
                    AddressValidShowControls();
                    lblAddressType.Invoke((MethodInvoker)delegate
                    {
                        lblAddressType.Text = addressType + " address";
                    });
                    // generate QR code for address
                    QRCodeGenerator qrGenerator = new QRCodeGenerator();
                    QRCodeData qrCodeData = qrGenerator.CreateQrCode(addressString, QRCodeGenerator.ECCLevel.Q);
                    QRCode qrCode = new QRCode(qrCodeData);
                    //var qrCodeImage = qrCode.GetGraphic(20, Color.Gray, Color.Black, false);
                    var qrCodeImage = qrCode.GetGraphic(20, label77.ForeColor, Color.Black, false);
                    qrCodeImage.MakeTransparent(Color.Black);
                    AddressQRCodePicturebox.Invoke((MethodInvoker)delegate
                    {
                        AddressQRCodePicturebox.Image = qrCodeImage;
                    });
                    try
                    {
                        await GetAddressBalanceAsync(addressString); // make sure we get these results before processing transactions
                    }
                    catch (Exception ex)
                    {
                        HandleException(ex, "TboxSubmittedAddress_TextChanged (Error getting address balance)");
                        return;
                    }
                    string lastSeenTxId = "0"; // start from the top of the JSON (most recent tx)
                    try
                    {
                        await GetTransactionsForAddress(addressString, lastSeenTxId); // get first batch of transactions
                    }
                    catch (Exception ex)
                    {
                        HandleException(ex, "TboxSubmittedAddress_TextChanged (Error getting first batch of transactions for address)");
                        return;
                    }
                    DisableEnableAddressButtons("enable"); // enable the buttons that were previously enabled again
                    ToggleLoadingAnimation("disable"); // stop the loading animation
                }
                else
                {
                    if (addressString == "")
                    {
                        lblInvalidAddressIndicator.Invoke((MethodInvoker)delegate
                        {
                            lblInvalidAddressIndicator.Text = "";
                        });
                    }
                    else
                    {
                        lblInvalidAddressIndicator.Invoke((MethodInvoker)delegate
                        {
                            lblInvalidAddressIndicator.ForeColor = Color.IndianRed;
                            lblInvalidAddressIndicator.Text = "✖️ invalid address";
                        });
                    }
                    lblAddressType.Invoke((MethodInvoker)delegate
                    {
                        lblAddressType.Text = "Invalid address format";
                    });
                    AddressQRCodePicturebox.Invoke((MethodInvoker)delegate
                    {
                        AddressQRCodePicturebox.Image = null;
                    });
                    lblAddressConfirmedReceived.Invoke((MethodInvoker)delegate
                    {
                        lblAddressConfirmedReceived.Text = string.Empty;
                    });
                    lblAddressConfirmedReceivedOutputs.Invoke((MethodInvoker)delegate
                    {
                        lblAddressConfirmedReceivedOutputs.Text = string.Empty;
                    });
                    lblAddressConfirmedSpent.Invoke((MethodInvoker)delegate
                    {
                        lblAddressConfirmedSpent.Text = string.Empty;
                    });
                    lblAddressConfirmedSpentOutputs.Invoke((MethodInvoker)delegate
                    {
                        lblAddressConfirmedSpentOutputs.Text = string.Empty;
                    });
                    lblAddressConfirmedTransactionCount.Invoke((MethodInvoker)delegate
                    {
                        lblAddressConfirmedTransactionCount.Text = string.Empty;
                    });
                    lblAddressConfirmedUnspent.Invoke((MethodInvoker)delegate
                    {
                        lblAddressConfirmedUnspent.Text = string.Empty;
                    });
                    lblAddressConfirmedUnspentOutputs.Invoke((MethodInvoker)delegate
                    {
                        lblAddressConfirmedUnspentOutputs.Text = string.Empty;
                    });
                    AddressInvalidHideControls();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TboxSubmittedAddress_TextChanged");
            }
        }

        //---------------------- DETERMINE BITCOIN ADDRESS TYPE--------------------------------------------------------
        private string DetermineAddressType(string address)
        {
            try
            {
                NBitcoin.BitcoinAddress bitcoinAddress;
                if (NodeURL == "https://mempool.space/api/") //mempool.space mainnet
                {
                    bitcoinAddress = NBitcoin.BitcoinAddress.Create(address, Network.Main);
                }
                else
                {
                    if (NodeURL == "https://mempool.space/testnet/api/") //mempool.space testnet
                    {
                        bitcoinAddress = NBitcoin.BitcoinAddress.Create(address, Network.TestNet);
                    }
                    else
                    {
                        bool containsTestnet = NodeURL.Contains("testnet");
                        if (containsTestnet) // own node, testnet
                        {
                            bitcoinAddress = NBitcoin.BitcoinAddress.Create(address, Network.TestNet);
                        }
                        else //own node, mainnet
                        {
                            bitcoinAddress = NBitcoin.BitcoinAddress.Create(address, Network.Main);
                        }

                    }
                }

                if (bitcoinAddress is BitcoinPubKeyAddress)
                {
                    return "P2PKH (legacy)"; // Legacy P2PKH
                }
                else if (bitcoinAddress is BitcoinScriptAddress)
                {
                    return "P2SH"; // (pay-to-script-hash) Multisig P2SH
                }
                else if (bitcoinAddress is BitcoinWitPubKeyAddress)
                {
                    return "P2WPKH (segwit)"; // P2WPKH
                }
                else if (bitcoinAddress is BitcoinWitScriptAddress)
                {
                    return "P2WSH"; // (pay-to- witness-script-hash) P2WSH 
                }
                else if (address.StartsWith("bc1p") && (address.Length > 41 || address.Length < 73))
                {
                    for (int i = 4; i < address.Length - 4; i++)
                    {
                        char c = address[i];
                        if (((c >= '0' && c <= '9') || (c >= 'q' && c <= 'z')))
                        {
                            return "P2TT (taproot)";
                        }
                    }
                }
                return "unknown";
            }
            catch (FormatException)
            {
                return "Invalid address format";
            }
        }

        //------------------------------------------ GET ADDRESS BALANCE-----------------------------------------------
        private async Task GetAddressBalance(string addressString)
        {
            try
            {
                var request = "address/" + addressString;
                var RequestURL = NodeURL + request;
                var client = new HttpClient();
                LightUpNodeLight();
                var response = await client.GetAsync($"{RequestURL}"); // get the JSON to get address balance and no of transactions etc
                if (!response.IsSuccessStatusCode)
                {
                    lblSettingsSelectedNodeStatus.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsSelectedNodeStatus.Text = "Disconnected/error";
                        lblSettingsSelectedNodeStatus.Location = new Point((int)(755 * UIScale) - lblSettingsSelectedNodeStatus.Width, lblSettingsSelectedNodeStatus.Location.Y);
                    });
                    lblSettingsSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsSelectedNodeStatusLight.ForeColor = Color.Red;
                        lblSettingsSelectedNodeStatusLight.Location = new Point(lblSettingsSelectedNodeStatus.Location.X - lblSettingsSelectedNodeStatusLight.Width, lblSettingsSelectedNodeStatusLight.Location.Y);
                    });
                    lblErrorMessage.Invoke((MethodInvoker)delegate
                    {
                        lblErrorMessage.Text = "Node offline/disconnected: ";
                    });
                    return;
                }
                var jsonData = await response.Content.ReadAsStringAsync();
                var addressData = JObject.Parse(jsonData);

                if (addressScreenConfUnconfOrAllTx == "chain" && !PartOfAnAllAddressTransactionsRequest)  //confirmed stats only. 'All' reverts to 'chain' after the first query, so we need to exclude those
                {
                    if (addressData["chain_stats"]["tx_count"] != null && addressData["chain_stats"]["funded_txo_sum"] != null && addressData["chain_stats"]["funded_txo_count"] != null && addressData["chain_stats"]["spent_txo_sum"] != null && addressData["chain_stats"]["spent_txo_count"] != null)
                    {
                        label61.Invoke((MethodInvoker)delegate
                        {
                            label61.Text = "Confirmed unspent (balance)";
                        });
                        label59.Invoke((MethodInvoker)delegate
                        {
                            label59.Text = "Confirmed transaction count";
                        });
                        label67.Invoke((MethodInvoker)delegate
                        {
                            label67.Text = "Confirmed received";
                        });
                        label63.Invoke((MethodInvoker)delegate
                        {
                            label63.Text = "Confirmed spent";
                        });
                        lblAddressConfirmedTransactionCount.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedTransactionCount.Text = Convert.ToString(addressData["chain_stats"]["tx_count"]);
                        });
                        lblAddressConfirmedReceived.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedReceived.Text = ConvertSatsToBitcoin(Convert.ToString(addressData["chain_stats"]["funded_txo_sum"])).ToString();
                        });
                        lblAddressConfirmedReceivedOutputs.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedReceivedOutputs.Text = "(" + addressData["chain_stats"]["funded_txo_count"] + " outputs)";
                        });
                        lblAddressConfirmedReceivedFiat.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedReceivedFiat.Text = lblHeaderPrice.Text[0] + (Convert.ToDecimal(Convert.ToDecimal(addressData["chain_stats"]["funded_txo_sum"]) / 100000000) * OneBTCinSelectedCurrency).ToString("N2");
                        });
                        lblAddressConfirmedSpent.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedSpent.Text = ConvertSatsToBitcoin(Convert.ToString(addressData["chain_stats"]["spent_txo_sum"])).ToString();
                        });
                        lblAddressConfirmedSpentFiat.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedSpentFiat.Text = lblHeaderPrice.Text[0] + (Convert.ToDecimal(Convert.ToDecimal(addressData["chain_stats"]["spent_txo_sum"]) / 100000000) * OneBTCinSelectedCurrency).ToString("N2");
                        });
                        lblAddressConfirmedSpentOutputs.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedSpentOutputs.Text = "(" + addressData["chain_stats"]["spent_txo_count"] + " outputs)";
                        });
                        var fundedTx = Convert.ToDouble(addressData["chain_stats"]["funded_txo_count"]);
                        var spentTx = Convert.ToDouble(addressData["chain_stats"]["spent_txo_count"]);
                        var confirmedReceived = Convert.ToDouble(addressData["chain_stats"]["funded_txo_sum"]);
                        var confirmedSpent = Convert.ToDouble(addressData["chain_stats"]["spent_txo_sum"]);
                        var confirmedUnspent = confirmedReceived - confirmedSpent;
                        var unSpentTxOutputs = fundedTx - spentTx;
                        lblAddressConfirmedUnspent.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedUnspent.Text = ConvertSatsToBitcoin(Convert.ToString(confirmedUnspent)).ToString();
                        });
                        lblAddressConfirmedUnspentOutputs.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedUnspentOutputs.Text = "(" + Convert.ToString(unSpentTxOutputs) + " outputs)";
                        });
                        lblAddressConfirmedUnspentFiat.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedUnspentFiat.Text = lblHeaderPrice.Text[0] + (Convert.ToDecimal(confirmedUnspent / 100000000) * OneBTCinSelectedCurrency).ToString("N2");
                        });
                    }
                }
                if (addressScreenConfUnconfOrAllTx == "mempool") //mempool stats only
                {
                    if (addressData["mempool_stats"]["tx_count"] != null && addressData["mempool_stats"]["funded_txo_sum"] != null && addressData["mempool_stats"]["funded_txo_count"] != null && addressData["mempool_stats"]["funded_txo_sum"] != null && addressData["mempool_stats"]["spent_txo_sum"] != null && addressData["chain_stats"]["spent_txo_count"] != null)
                    {
                        label61.Invoke((MethodInvoker)delegate
                        {
                            label61.Text = "Unconfirmed unspent (balance)";
                        });
                        label59.Invoke((MethodInvoker)delegate
                        {
                            label59.Text = "Unconfirmed transaction count";
                        });
                        label67.Invoke((MethodInvoker)delegate
                        {
                            label67.Text = "Unconfirmed received";
                        });
                        label63.Invoke((MethodInvoker)delegate
                        {
                            label63.Text = "Unconfirmed spent";
                        });
                        lblAddressConfirmedTransactionCount.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedTransactionCount.Text = Convert.ToString(addressData["mempool_stats"]["tx_count"]);
                        });
                        lblAddressConfirmedReceived.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedReceived.Text = ConvertSatsToBitcoin(Convert.ToString(addressData["mempool_stats"]["funded_txo_sum"])).ToString();
                        });
                        lblAddressConfirmedReceivedOutputs.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedReceivedOutputs.Text = "(" + addressData["mempool_stats"]["funded_txo_count"] + " outputs)";
                        });
                        lblAddressConfirmedReceivedFiat.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedReceivedFiat.Text = lblHeaderPrice.Text[0] + (Convert.ToDecimal(Convert.ToDecimal(addressData["mempool_stats"]["funded_txo_sum"]) / 100000000) * OneBTCinSelectedCurrency).ToString("N2");
                        });
                        lblAddressConfirmedSpent.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedSpent.Text = ConvertSatsToBitcoin(Convert.ToString(addressData["mempool_stats"]["spent_txo_sum"])).ToString();
                        });
                        lblAddressConfirmedSpentFiat.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedSpentFiat.Text = lblHeaderPrice.Text[0] + (Convert.ToDecimal(Convert.ToDecimal(addressData["mempool_stats"]["spent_txo_sum"]) / 100000000) * OneBTCinSelectedCurrency).ToString("N2");
                        });
                        lblAddressConfirmedSpentOutputs.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedSpentOutputs.Text = "(" + addressData["mempool_stats"]["spent_txo_count"] + " outputs)";
                        });
                        var fundedTx = Convert.ToDouble(addressData["mempool_stats"]["funded_txo_count"]);
                        var spentTx = Convert.ToDouble(addressData["mempool_stats"]["spent_txo_count"]);
                        var confirmedReceived = Convert.ToDouble(addressData["mempool_stats"]["funded_txo_sum"]);
                        var confirmedSpent = Convert.ToDouble(addressData["mempool_stats"]["spent_txo_sum"]);
                        var confirmedUnspent = confirmedReceived - confirmedSpent;
                        var unSpentTxOutputs = fundedTx - spentTx;
                        lblAddressConfirmedUnspent.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedUnspent.Text = ConvertSatsToBitcoin(Convert.ToString(confirmedUnspent)).ToString();
                        });
                        lblAddressConfirmedUnspentOutputs.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedUnspentOutputs.Text = "(" + Convert.ToString(unSpentTxOutputs) + " outputs)";
                        });
                        lblAddressConfirmedUnspentFiat.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedUnspentFiat.Text = lblHeaderPrice.Text[0] + (Convert.ToDecimal(confirmedUnspent / 100000000) * OneBTCinSelectedCurrency).ToString("N2");
                        });
                    }
                }
                if (addressScreenConfUnconfOrAllTx == "all" || (addressScreenConfUnconfOrAllTx == "chain" && PartOfAnAllAddressTransactionsRequest)) // all TXs so will need to add chain and mempool amounts together before displaying. 
                {
                    if (addressData["mempool_stats"]["tx_count"] != null && addressData["mempool_stats"]["funded_txo_sum"] != null && addressData["mempool_stats"]["funded_txo_count"] != null && addressData["mempool_stats"]["funded_txo_sum"] != null && addressData["mempool_stats"]["spent_txo_sum"] != null && addressData["chain_stats"]["spent_txo_count"] != null && addressData["chain_stats"]["tx_count"] != null && addressData["chain_stats"]["funded_txo_sum"] != null && addressData["chain_stats"]["funded_txo_count"] != null && addressData["chain_stats"]["spent_txo_sum"] != null && addressData["chain_stats"]["spent_txo_count"] != null)
                    {
                        label61.Invoke((MethodInvoker)delegate
                        {
                            label61.Text = "Total unspent (balance)";
                        });
                        label59.Invoke((MethodInvoker)delegate
                        {
                            label59.Text = "Total transaction count";
                        });
                        label67.Invoke((MethodInvoker)delegate
                        {
                            label67.Text = "Total received";
                        });
                        label63.Invoke((MethodInvoker)delegate
                        {
                            label63.Text = "Total spent";
                        });
                        int chainTransactionCount = Convert.ToInt32(addressData["chain_stats"]["tx_count"]);
                        int mempoolTransactionCount = Convert.ToInt32(addressData["mempool_stats"]["tx_count"]);
                        int totalTransactionCount = chainTransactionCount + mempoolTransactionCount;
                        lblAddressConfirmedTransactionCount.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedTransactionCount.Text = Convert.ToString(totalTransactionCount);
                        });

                        long chainReceived = Convert.ToInt64(addressData["chain_stats"]["funded_txo_sum"]);
                        long mempoolReceived = Convert.ToInt64(addressData["mempool_stats"]["funded_txo_sum"]);
                        long totalReceived = chainReceived + mempoolReceived;
                        decimal BTCtotalReceived = ConvertSatsToBitcoin(totalReceived.ToString());
                        lblAddressConfirmedReceived.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedReceived.Text = Convert.ToString(BTCtotalReceived);
                        });
                        lblAddressConfirmedReceivedFiat.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedReceivedFiat.Text = lblHeaderPrice.Text[0] + (Convert.ToDecimal(totalReceived / 100000000) * OneBTCinSelectedCurrency).ToString("N2");
                        });
                        int chainReceivedOutputs = Convert.ToInt32(addressData["chain_stats"]["funded_txo_count"]);
                        int mempoolReceivedOutputs = Convert.ToInt32(addressData["mempool_stats"]["funded_txo_count"]);
                        int totalReceivedOutputs = chainReceivedOutputs + mempoolReceivedOutputs;
                        lblAddressConfirmedReceivedOutputs.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedReceivedOutputs.Text = "(" + totalReceivedOutputs + " outputs)";
                        });

                        long chainSpent = Convert.ToInt64(addressData["chain_stats"]["spent_txo_sum"]);
                        long mempoolSpent = Convert.ToInt64(addressData["mempool_stats"]["spent_txo_sum"]);
                        long totalSpent = chainSpent + mempoolSpent;
                        decimal BTCtotalSpent = ConvertSatsToBitcoin(totalSpent.ToString());
                        lblAddressConfirmedSpent.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedSpent.Text = Convert.ToString(BTCtotalSpent);
                        });
                        lblAddressConfirmedSpentFiat.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedSpentFiat.Text = lblHeaderPrice.Text[0] + (Convert.ToDecimal(totalSpent / 100000000) * OneBTCinSelectedCurrency).ToString("N2");
                        });
                        int chainSpentOutputs = Convert.ToInt32(addressData["chain_stats"]["spent_txo_count"]);
                        int mempoolSpentOutputs = Convert.ToInt32(addressData["mempool_stats"]["spent_txo_count"]);
                        int totalSpentOutputs = chainSpentOutputs + mempoolSpentOutputs;
                        lblAddressConfirmedSpentOutputs.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedSpentOutputs.Text = "(" + totalSpentOutputs + " outputs)";
                        });

                        var chainFundedTx = Convert.ToDouble(addressData["chain_stats"]["funded_txo_count"]);
                        var chainSpentTx = Convert.ToDouble(addressData["chain_stats"]["spent_txo_count"]);
                        var chainReceived2 = Convert.ToDouble(addressData["chain_stats"]["funded_txo_sum"]);
                        var chainSpent2 = Convert.ToDouble(addressData["chain_stats"]["spent_txo_sum"]);
                        var mempoolFundedTx = Convert.ToDouble(addressData["mempool_stats"]["funded_txo_count"]);
                        var mempoolSpentTx = Convert.ToDouble(addressData["mempool_stats"]["spent_txo_count"]);
                        var mempoolReceived2 = Convert.ToDouble(addressData["mempool_stats"]["funded_txo_sum"]);
                        var mempoolSpent2 = Convert.ToDouble(addressData["mempool_stats"]["spent_txo_sum"]);

                        var chainUnspent = chainReceived2 - chainSpent2;
                        var chainUnspentTxOutputs = chainFundedTx - chainSpentTx;
                        var mempoolUnspent = mempoolReceived2 - mempoolSpent2;
                        var mempoolUnspentTxOutputs = mempoolFundedTx - mempoolSpentTx;

                        var totalUnspent = chainUnspent + mempoolUnspent;
                        var totalUnspentTXOutputs = chainUnspentTxOutputs + mempoolUnspentTxOutputs;

                        lblAddressConfirmedUnspent.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedUnspent.Text = ConvertSatsToBitcoin(Convert.ToString(totalUnspent)).ToString();
                        });
                        lblAddressConfirmedUnspentOutputs.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedUnspentOutputs.Text = "(" + Convert.ToString(totalUnspentTXOutputs) + " outputs)";
                        });
                        lblAddressConfirmedUnspentFiat.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedUnspentFiat.Text = lblHeaderPrice.Text[0] + (Convert.ToDecimal(totalUnspent / 100000000) * OneBTCinSelectedCurrency).ToString("N2");
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "GetAddressBalance");
            }
        }

        private async Task GetAddressBalanceAsync(string addressString)
        {
            await GetAddressBalance(addressString);
        }

        //-------------------------------- GET TRANSACTIONS FOR ADDRESS -----------------------------------------------
        private async Task GetTransactionsForAddress(string addressString, string lastSeenTxId)
        {
            try
            {
                if (NodeURL == "https://mempool.space/api/" || NodeURL == "https://mempool.space/testnet/api/")
                {
                    rowsReturnedByAddressTransactionsAPI = 25;
                    panelOwnNodeAddressTXInfo.Visible = false;
                }
                else
                {
                    rowsReturnedByAddressTransactionsAPI = 10;
                    panelOwnNodeAddressTXInfo.Visible = true;
                }
                LightUpNodeLight();
                var transactionsJson = await _transactionsForAddressService.GetTransactionsForAddressAsync(addressString, addressScreenConfUnconfOrAllTx, lastSeenTxId);
                var transactions = JsonConvert.DeserializeObject<List<AddressTransactions>>(transactionsJson);
                List<string> txIds = transactions.Select(t => t.Txid).ToList();

                // Update lastSeenTxId if this isn't our first fetch of tranasctions to restart from the right place
                if (transactions.Count > 0)
                {
                    if (transactions.Last().Status.Confirmed == "true") // make sure the last shown tx wasn't a mempool tx before using its txid as a key to a subsequent call. 
                    {
                        lastSeenTxId = transactions.Last().Txid; // it was a confirmed tx so we can carry on the next api call from that point
                    }
                    else
                    {
                        lastSeenTxId = ""; // If it was a mempool record then the next call (to confirmed tx's) will need a null txid to start from the beginning
                    }
                    lastSeenTxId = transactions.Last().Txid;
                }

                //LIST VIEW
                listViewAddressTransactions.Invoke((MethodInvoker)delegate
                {
                    listViewAddressTransactions.Items.Clear(); // remove any data that may be there already
                });
                listViewAddressTransactions.GetType().InvokeMember("DoubleBuffered", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.SetProperty, null, listViewAddressTransactions, new object[] { true });

                // Check if the column header already exists
                if (listViewAddressTransactions.Columns.Count == 0)
                {
                    // If not, add the column header
                    if (addressScreenConfUnconfOrAllTx == "chain")
                    {
                        if (PartOfAnAllAddressTransactionsRequest)
                        {
                            listViewAddressTransactions.Invoke((MethodInvoker)delegate
                            {
                                listViewAddressTransactions.Columns.Add(" Transaction ID (all transactions)", (int)(260 * UIScale));
                            });
                        }
                        else
                        {
                            listViewAddressTransactions.Invoke((MethodInvoker)delegate
                            {
                                listViewAddressTransactions.Columns.Add(" Transaction ID (confirmed)", (int)(260 * UIScale));
                            });
                        }
                    }
                    if (addressScreenConfUnconfOrAllTx == "mempool")
                    {
                        listViewAddressTransactions.Invoke((MethodInvoker)delegate
                        {
                            listViewAddressTransactions.Columns.Add(" Transaction ID (unconfirmed)", (int)(260 * UIScale));
                        });
                    }
                    if (addressScreenConfUnconfOrAllTx == "all")
                    {
                        listViewAddressTransactions.Invoke((MethodInvoker)delegate
                        {
                            listViewAddressTransactions.Columns.Add(" Transaction ID (all transactions)", (int)(260 * UIScale));
                        });
                    }
                }

                // Add the block height column header
                if (listViewAddressTransactions.Columns.Count == 1)
                {
                    listViewAddressTransactions.Invoke((MethodInvoker)delegate
                    {
                        listViewAddressTransactions.Columns.Add("Block", (int)(65 * UIScale));
                    });
                }

                // Add the balance change column header
                if (listViewAddressTransactions.Columns.Count == 2)
                {
                    listViewAddressTransactions.Invoke((MethodInvoker)delegate
                    {
                        listViewAddressTransactions.Columns.Add("Amount", (int)(110 * UIScale));
                    });
                }

                // Add the status column header
                if (listViewAddressTransactions.Columns.Count == 3)
                {
                    listViewAddressTransactions.Invoke((MethodInvoker)delegate
                    {
                        listViewAddressTransactions.Columns.Add("Confs", (int)(70 * UIScale));
                    });
                }

                // Add the items to the ListView
                int counter = 0; // used to count rows in list as they're added
                WebClient client2 = new WebClient();
                string CurrentBlockHeightStringForCalc = client2.DownloadString(NodeURL + "blocks/tip/height");

                foreach (AddressTransactions transaction in transactions)
                {
                    decimal balanceChange = 0; // will hold net result of transaction to this address
                    decimal balanceChangeVin = 0; // will hold net result of inputs to this address
                    decimal balanceChangeVout = 0; // will hold net result of outputs to this address
                    balanceChangeVout = (decimal)transaction.Vout // value of all outputs where address is the provided address
                        .Where(v => v.Scriptpubkey_address == addressString)
                        .Sum(v => v.Value);
                    balanceChangeVin = (decimal)transaction.Vin
                        .Where(v => v.Prevout != null && v.Prevout.Scriptpubkey_address == addressString)
                        .Sum(v => v.Prevout.Value);
                    balanceChange = balanceChangeVout - balanceChangeVin; // calculate net change to balance for this transaction
                    string balanceChangeString = balanceChange.ToString();
                    balanceChange = ConvertSatsToBitcoin(balanceChangeString); // convert it to bitcoin
                    if (balanceChange >= 0)
                    {
                        balanceChangeString = "+" + balanceChange.ToString("0.00000000"); // add a + for positive numbers
                    }
                    else
                    {
                        balanceChangeString = balanceChange.ToString("0.00000000"); // - already there for negatives
                    }

                    ListViewItem item = new ListViewItem(transaction.Txid); // create new row
                    if (transaction.Status.Confirmed == "true")
                    {
                        item.SubItems.Add(transaction.Status.Block_height.ToString()); // add block height
                    }
                    else
                    {
                        item.SubItems.Add("------".ToString()); // unconfirmed, so no block height
                    }

                    item.SubItems.Add(balanceChangeString.ToString()); // add net change to balance

                    if (transaction.Status.Confirmed == "true")
                    {
                        decimal CurrentBlockForCalc = Convert.ToDecimal(CurrentBlockHeightStringForCalc);
                        decimal TransactionBlockForCalc = transaction.Status.Block_height;
                        decimal Confirmations = (CurrentBlockForCalc - TransactionBlockForCalc) + 1;
                        item.SubItems.Add(Confirmations.ToString()); // and confirmed status
                    }
                    else
                    {
                        item.SubItems.Add("---".ToString()); // unconfirmed, so no confirmations
                    }

                    listViewAddressTransactions.Invoke((MethodInvoker)delegate
                    {
                        listViewAddressTransactions.Items.Add(item); // add row
                    });

                    counter++; // increment rows for this batch
                    TotalAddressTransactionRowsAdded++; // increment all rows

                    if (TotalAddressTransactionRowsAdded <= rowsReturnedByAddressTransactionsAPI) // less than 25 transactions in all
                    {
                        btnFirstAddressTransaction.Visible = false; // so this won't be needed
                    }
                    else
                    {
                        if (addressScreenConfUnconfOrAllTx != "mempool") //regardless how many unconfirmed TXs there are, the api only returns the first batch, but otherwise we can go back to first TX
                        {
                            btnFirstAddressTransaction.Visible = true;
                        }
                    }

                    if (Convert.ToString(TotalAddressTransactionRowsAdded) == lblAddressConfirmedTransactionCount.Text) // we've shown all the TXs
                    {
                        btnNextAddressTransactions.Visible = false; // so we won't need this
                    }
                    else
                    {
                        if (addressScreenConfUnconfOrAllTx != "mempool") //regardless how many unconfirmed TXs there are, the api only returns the first batch, but otherwise we can go to the next batch
                        {
                            btnNextAddressTransactions.Visible = true;
                        }
                    }

                    if (counter == rowsReturnedByAddressTransactionsAPI) // ListView is full. stop adding rows at this point and pick up from here next time.
                    {
                        break;
                    }
                }
                if (listViewAddressTransactions.Items.Count > 0)
                {
                    listViewAddressTransactions.Items[0].Selected = true;
                }
                if (counter > 0)
                {
                    lblAddressTXPositionInList.Invoke((MethodInvoker)delegate
                    {
                        lblAddressTXPositionInList.Text = "Transactions " + (TotalAddressTransactionRowsAdded - counter + 1) + " - " + (TotalAddressTransactionRowsAdded) + " of " + lblAddressConfirmedTransactionCount.Text;
                    });
                }
                else
                {
                    lblAddressTXPositionInList.Invoke((MethodInvoker)delegate
                    {
                        lblAddressTXPositionInList.Text = "No transactions to display";
                    });
                }
                if (addressScreenConfUnconfOrAllTx == "all") // we only do one call to the 'all' api, then have to switch to the confirmed api for subsequent calls
                {
                    addressScreenConfUnconfOrAllTx = "chain";
                }
                // set focus
                if (btnNextAddressTransactions.Visible && btnNextAddressTransactions.Enabled)
                {
                    btnNextAddressTransactions.Focus();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "GetTransactionsForAddress");
            }
        }
        #endregion
        #region show prev/next tx's
        //------------------------ GET NEXT TRANSACTIONS FOR ADDRESS --------------------------------------------------
        private async void BtnGetNextTransactionsForAddress(object sender, EventArgs e)
        {
            try
            {
                ToggleLoadingAnimation("enable"); // start the loading animation
                DisableEnableAddressButtons("disable"); // disable buttons during operation
                var address = textboxSubmittedAddress.Text; // Get the address from the address text box
                                                            // Get the last seen transaction ID from the list view
                string lastSeenTxId;
                if (listViewAddressTransactions.Items[listViewAddressTransactions.Items.Count - 1].SubItems[1].Text == "------")
                {
                    lastSeenTxId = ""; // last seen transaction was unconfirmed, so next call will be for confirmed TXs, starting from the first
                }
                else
                {
                    lastSeenTxId = listViewAddressTransactions.Items[listViewAddressTransactions.Items.Count - 1].Text; // last seen transaction was confirmed, so next call will carry on where we left off
                }
                // Call the GetConfirmedTransactionsForAddress method with the updated lastSeenTxId
                await GetTransactionsForAddress(address, lastSeenTxId);
                DisableEnableAddressButtons("enable"); // enable the buttons that were previously enabled again
                ToggleLoadingAnimation("disable"); // stop the loading animation
                BtnViewBlockFromAddress.Visible = false;
                BtnViewTransactionFromAddress.Visible = false;
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnGetNextTransactionsForAddress");
            }
        }

        //------------------------ JUMP BACK TO FIRST TRANSACTION ------------------------------------------------------
        private async void BtnFirstTransactionForAddress_Click(object sender, EventArgs e)
        {
            try
            {
                ToggleLoadingAnimation("enable"); // start the loading animation
                DisableEnableAddressButtons("disable"); // disable buttons during operation
                if (PartOfAnAllAddressTransactionsRequest) // if this was originally a list of 'all' TXs which switched to 'chain', switch back to 'all' to get the unconfirmed again first
                {
                    addressScreenConfUnconfOrAllTx = "all";
                }
                btnFirstAddressTransaction.Visible = false;
                var address = textboxSubmittedAddress.Text; // Get the address from the address text box
                var lastSeenTxId = "0"; // Reset the last seen transaction ID to go back to start
                TotalAddressTransactionRowsAdded = 0;
                btnNextAddressTransactions.Visible = true; // this time we know there's a next page (couldn't press first otherwise)
                BtnViewBlockFromAddress.Visible = false;
                BtnViewTransactionFromAddress.Visible = false;

                // Call the GetConfirmedTransactionsForAddress method with the updated lastSeenTxId
                await GetTransactionsForAddress(address, lastSeenTxId);
                DisableEnableAddressButtons("enable"); // enable the buttons that were previously enabled again
                ToggleLoadingAnimation("disable"); // stop the loading animation
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnFirstTransactionForAddress_Click");
            }
        }
        #endregion
        #region confirmed/mempool/both
        //------------------------ SHOW TRANSACTIONS IN MEMPOOL ------------------------------------------------------
        private void BtnShowUnconfirmedTXForAddress_Click(object sender, EventArgs e)
        {
            try
            {
                btnShowConfirmedTX.Enabled = true;
                btnShowAllTX.Enabled = true;
                btnShowUnconfirmedTX.Enabled = false;
                addressScreenConfUnconfOrAllTx = "mempool";
                btnNextAddressTransactions.Visible = false;
                btnFirstAddressTransaction.Visible = false;
                PartOfAnAllAddressTransactionsRequest = false;
                BtnViewBlockFromAddress.Visible = false;
                BtnViewTransactionFromAddress.Visible = false;
                // force a text box (address) change event to fetch unconfirmed transactions
                string temp = textboxSubmittedAddress.Text;
                textboxSubmittedAddress.Invoke((MethodInvoker)delegate
                {
                    textboxSubmittedAddress.Text = "";
                });
                listViewAddressTransactions.Invoke((MethodInvoker)delegate
                {
                    listViewAddressTransactions.Columns.Clear(); // force headings to be redrawn
                });
                textboxSubmittedAddress.Invoke((MethodInvoker)delegate
                {
                    textboxSubmittedAddress.Text = temp;
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnShowUnconfirmedTXForAddress_Click");
            }
        }

        //------------------------ SHOW CONFIRMED TRANSACTIONS ------------------------------------------------------
        private void BtnShowConfirmedTXForAddress_Click(object sender, EventArgs e)
        {
            try
            {
                btnShowConfirmedTX.Enabled = false;
                btnShowAllTX.Enabled = true;
                btnShowUnconfirmedTX.Enabled = true;
                addressScreenConfUnconfOrAllTx = "chain";
                PartOfAnAllAddressTransactionsRequest = false;
                BtnViewBlockFromAddress.Visible = false;
                BtnViewTransactionFromAddress.Visible = false;
                // force a text box (address) change event to fetch confirmed transactions
                string temp = textboxSubmittedAddress.Text;
                textboxSubmittedAddress.Invoke((MethodInvoker)delegate
                {
                    textboxSubmittedAddress.Text = "";
                });
                listViewAddressTransactions.Invoke((MethodInvoker)delegate
                {
                    listViewAddressTransactions.Columns.Clear(); // force headings to be redrawn
                });
                textboxSubmittedAddress.Invoke((MethodInvoker)delegate
                {
                    textboxSubmittedAddress.Text = temp;
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnShowConfirmedTXForAddress_Click");
            }
        }

        //------------------------ SHOW CONFIRMED & UNCONFIRMED TRANSACTIONS -------------------------------------------
        private void BtnShowAllTXForAddress_Click(object sender, EventArgs e)
        {
            try
            {
                btnShowConfirmedTX.Enabled = true;
                btnShowAllTX.Enabled = false;
                btnShowUnconfirmedTX.Enabled = true;
                addressScreenConfUnconfOrAllTx = "all";
                PartOfAnAllAddressTransactionsRequest = true;
                BtnViewBlockFromAddress.Visible = false;
                BtnViewTransactionFromAddress.Visible = false;
                // force a text box (address) change event to fetch all (confirmed and unconfirmed) transactions
                string temp = textboxSubmittedAddress.Text;
                textboxSubmittedAddress.Invoke((MethodInvoker)delegate
                {
                    textboxSubmittedAddress.Text = "";
                });
                listViewAddressTransactions.Invoke((MethodInvoker)delegate
                {
                    listViewAddressTransactions.Columns.Clear(); // force headings to be redrawn
                });
                textboxSubmittedAddress.Invoke((MethodInvoker)delegate
                {
                    textboxSubmittedAddress.Text = temp;
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnShowAllTXForAddress_Click");
            }
        }
        #endregion
        #region navigate from tx row to other screen
        //------------------------ VIEW THE BLOCK CONTAINING THIS TRANSACTION ------------------------------------------
        private void BtnViewBlockFromAddress_Click(object sender, EventArgs e)
        {
            try
            {
                CheckNetworkStatus();
                // Get the selected item
                ListViewItem selectedItem = listViewAddressTransactions.SelectedItems[0];
                // Get the second subitem in the selected item 
                string submittedBlockNumber = selectedItem.SubItems[1].Text;
                // copy block number to the block screen
                numericUpDownSubmittedBlockNumber.Invoke((MethodInvoker)delegate
                {
                    numericUpDownSubmittedBlockNumber.Text = submittedBlockNumber;
                });
                try
                {
                    LookupBlock();
                }
                catch (Exception ex)
                {
                    HandleException(ex, "BtnViewBlockFromAddress_Click");
                }
                //show the block screen
                BtnMenuBlock_Click(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnViewBlockFromAddress_Click");
            }
        }

        //------------------------ VIEW THIS TRANSACTION ------------------------------------------------------
        private void BtnViewTransactionFromAddress_Click(object sender, EventArgs e)
        {
            try
            {
                CheckNetworkStatus();
                // Get the selected item
                ListViewItem selectedItem = listViewAddressTransactions.SelectedItems[0];
                // Get the first subitem in the selected item 
                string TransactionIDFromRow = selectedItem.SubItems[0].Text;
                // copy transaction ID to transaction screen
                textBoxTransactionID.Invoke((MethodInvoker)delegate
                {
                    textBoxTransactionID.Text = TransactionIDFromRow;
                });
                //show the transaction screen
                BtnMenuTransaction_Click(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnViewTransactionFromAddress_Click");
            }
        }
        #endregion
        #region listview appearance
        //------------------------ CHANGE COLOUR OF SELECTED ROW ------------------------------------------------------
        private void ListViewAddressTransactions_ItemSelectionChanged(object sender, ListViewItemSelectionChangedEventArgs e)
        {
            try
            {
                foreach (ListViewItem item in listViewAddressTransactions.Items)
                {
                    if (item != null)
                    {
                        if (item.Selected)
                        {
                            foreach (ListViewItem.ListViewSubItem subItem in item.SubItems)
                            {
                                subItem.ForeColor = MakeColorLighter(tableTextColor, 40);
                            }
                            BtnViewTransactionFromAddress.Invoke((MethodInvoker)delegate
                            {
                                BtnViewTransactionFromAddress.Location = new Point(item.Position.X + listViewAddressTransactions.Location.X + listViewAddressTransactions.Columns[0].Width - BtnViewTransactionFromAddress.Width - (int)(3 * UIScale), item.Position.Y + listViewAddressTransactions.Location.Y);
                                BtnViewTransactionFromAddress.Height = item.Bounds.Height;
                            });
                            BtnViewBlockFromAddress.Invoke((MethodInvoker)delegate
                            {
                                BtnViewBlockFromAddress.Location = new Point(item.Position.X + listViewAddressTransactions.Location.X + listViewAddressTransactions.Columns[0].Width + listViewAddressTransactions.Columns[1].Width - BtnViewBlockFromAddress.Width - (int)(3 * UIScale), item.Position.Y + listViewAddressTransactions.Location.Y);
                                BtnViewBlockFromAddress.Height = item.Bounds.Height;
                            });
                        }
                        else
                        {
                            foreach (ListViewItem.ListViewSubItem subItem in item.SubItems)
                            {
                                subItem.ForeColor = tableTextColor;
                            }
                        }
                    }
                }
                BtnViewTransactionFromAddress.Visible = listViewAddressTransactions.SelectedItems.Count > 0;
                BtnViewBlockFromAddress.Visible = listViewAddressTransactions.SelectedItems.Count > 0;
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewAddressTransactions_ItemSelectionChanged");
            }
        }

        //-----DRAW AN ELLIPSIS WHEN STRINGS DONT FIT IN LISTVIEW COLUMN (ALSO COLOUR BALANCE DIFFERENCE RED/GREEN)----
        private void ListViewAddressTransactions_DrawSubItem(object sender, DrawListViewSubItemEventArgs e)
        {
            try
            {
                var text = e.SubItem.Text;

                if (text[0] == '+') // if the string is a change to an amount and positive
                {
                    e.SubItem.ForeColor = Color.OliveDrab; // make it green
                }
                else
                if (text[0] == '-') // if the string is a change to an amount and negative
                {
                    e.SubItem.ForeColor = Color.IndianRed; // make it red
                }

                var font = listViewAddressTransactions.Font;
                var columnWidth = e.Header.Width;
                var textWidth = TextRenderer.MeasureText(text, font).Width;
                if (textWidth > columnWidth)
                {
                    // Truncate the text
                    var maxText = text.Substring(0, text.Length * columnWidth / textWidth - 3) + "...";

                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);
                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewAddressTransactions.BackColor), bounds);
                    }
                    TextRenderer.DrawText(e.Graphics, maxText, font, bounds, e.Item.ForeColor, TextFormatFlags.EndEllipsis | TextFormatFlags.Left);
                }
                else if (textWidth < columnWidth)
                {
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);

                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewAddressTransactions.BackColor), bounds);
                    }

                    TextRenderer.DrawText(e.Graphics, text, font, bounds, e.SubItem.ForeColor, TextFormatFlags.Left);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewAddressTransactions_DrawSubItem");
            }
        }

        //------------------ LIMIT MINIMUM WIDTH OF ADDRESS LISTVIEW COLUMNS ------------------------------------------
        private void ListViewAddressTransactions_ColumnWidthChanging(object sender, ColumnWidthChangingEventArgs e)
        {
            try
            {
                if (e.ColumnIndex == 0)
                {
                    if (listViewAddressTransactions.Columns[e.ColumnIndex].Width < (int)(260 * UIScale)) // min width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(260 * UIScale);
                    }
                    if (listViewAddressTransactions.Columns[e.ColumnIndex].Width > (int)(460 * UIScale)) // max width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(460 * UIScale);
                    }

                    BtnViewTransactionFromAddress.Invoke((MethodInvoker)delegate
                    {
                        BtnViewTransactionFromAddress.Location = new Point(listViewAddressTransactions.Columns[0].Width + listViewAddressTransactions.Location.X - BtnViewTransactionFromAddress.Width - (int)(6 * UIScale), BtnViewTransactionFromAddress.Location.Y);
                    });
                    BtnViewBlockFromAddress.Invoke((MethodInvoker)delegate
                    {
                        BtnViewBlockFromAddress.Location = new Point(listViewAddressTransactions.Columns[0].Width + listViewAddressTransactions.Columns[1].Width + listViewAddressTransactions.Location.X - BtnViewBlockFromAddress.Width + (int)(2 * UIScale), BtnViewBlockFromAddress.Location.Y);
                    });
                }

                if (e.ColumnIndex == 1)
                {
                    if (listViewAddressTransactions.Columns[e.ColumnIndex].Width != (int)(65 * UIScale)) // don't allow this one to change
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(65 * UIScale);
                    }
                }
                if (e.ColumnIndex == 2)
                {
                    if (listViewAddressTransactions.Columns[e.ColumnIndex].Width != (int)(110 * UIScale)) // don't allow this one to change
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(110 * UIScale);
                    }
                }
                if (e.ColumnIndex == 3)
                {
                    if (listViewAddressTransactions.Columns[e.ColumnIndex].Width != (int)(70 * UIScale)) // don't allow this one to change
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(70 * UIScale);
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewAddressTransactions_ColumnWidthChanging");
            }
        }
        #endregion
        #region configure controls
        //------------------------ SHOW ALL THE ADDRESS CONTROLS ------------------------------------------------------
        private void AddressValidShowControls() // show all address related controls
        {
            try
            {
                if (addressScreenConfUnconfOrAllTx == "mempool")//only one page of unconfirmed tx regardless how many tx there are
                {
                    btnNextAddressTransactions.Visible = false;
                    btnFirstAddressTransaction.Visible = false;
                }
                lblAddressTXPositionInList.Visible = true;
                label59.Visible = true;
                label61.Visible = true;
                label67.Visible = true;
                label63.Visible = true;
                listViewAddressTransactions.Visible = true;
                lblAddressConfirmedUnspent.Visible = true;
                lblAddressConfirmedUnspentOutputs.Visible = true;
                lblAddressConfirmedTransactionCount.Visible = true;
                lblAddressConfirmedReceived.Visible = true;
                lblAddressConfirmedReceivedOutputs.Visible = true;
                lblAddressConfirmedSpent.Visible = true;
                lblAddressConfirmedSpentOutputs.Visible = true;
                lblAddressConfirmedReceivedFiat.Visible = true;
                lblAddressConfirmedSpentFiat.Visible = true;
                lblAddressConfirmedUnspentFiat.Visible = true;
                btnShowAllTX.Visible = true;
                btnShowConfirmedTX.Visible = true;
                btnShowUnconfirmedTX.Visible = true;
                lblAddressType.Visible = true;
                panel41.Visible = true;
                panel42.Visible = true;
                panel43.Visible = true;
                panel44.Visible = true;
                listViewAddressTransactions.Visible = true;
            }
            catch (Exception ex)
            {
                HandleException(ex, "AddressValidShowControls");
            }
        }

        //------------------------ HIDE ALL THE ADDRESS CONTROLS ------------------------------------------------------
        private void AddressInvalidHideControls() // hide all address related controls
        {
            try
            {
                if (lblAddressType.Visible)
                {
                    btnNextAddressTransactions.Visible = false;
                    btnFirstAddressTransaction.Visible = false;
                    lblAddressTXPositionInList.Visible = false;
                    label59.Visible = false;
                    label61.Visible = false;
                    label67.Visible = false;
                    label63.Visible = false;
                    listViewAddressTransactions.Visible = false;
                    lblAddressConfirmedUnspent.Visible = false;
                    lblAddressConfirmedUnspentOutputs.Visible = false;
                    lblAddressConfirmedTransactionCount.Visible = false;
                    lblAddressConfirmedReceived.Visible = false;
                    lblAddressConfirmedReceivedOutputs.Visible = false;
                    lblAddressConfirmedSpent.Visible = false;
                    lblAddressConfirmedSpentOutputs.Visible = false;
                    lblAddressConfirmedReceivedFiat.Visible = false;
                    lblAddressConfirmedSpentFiat.Visible = false;
                    lblAddressConfirmedUnspentFiat.Visible = false;
                    btnShowAllTX.Visible = false;
                    btnShowConfirmedTX.Visible = false;
                    btnShowUnconfirmedTX.Visible = false;
                    lblAddressType.Visible = false;
                    panel41.Visible = false;
                    panel42.Visible = false;
                    panel43.Visible = false;
                    panel44.Visible = false;
                    listViewAddressTransactions.Visible = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "AddressInvalidHideControls");
            }
        }

        private void DisableEnableAddressButtons(string enableOrDisableAddressButtons)
        {
            try
            {
                if (enableOrDisableAddressButtons == "disable")
                {
                    // get current state of buttons before disabling them
                    btnShowAllAddressTXWasEnabled = btnShowAllTX.Enabled;
                    btnShowConfirmedAddressTXWasEnabled = btnShowConfirmedTX.Enabled;
                    btnShowUnconfirmedAddressTXWasEnabled = btnShowUnconfirmedTX.Enabled;
                    btnFirstAddressTransactionWasEnabled = btnFirstAddressTransaction.Enabled;
                    btnNextAddressTransactionsWasEnabled = btnNextAddressTransactions.Enabled;
                    BtnViewTransactionFromAddressWasEnabled = BtnViewTransactionFromAddress.Enabled;
                    BtnViewBlockFromAddressWasEnabled = BtnViewBlockFromAddress.Enabled;
                    textBoxSubmittedAddressWasEnabled = textboxSubmittedAddress.Enabled;

                    //disable them all
                    btnShowAllTX.Enabled = false;
                    btnShowConfirmedTX.Enabled = false;
                    btnShowUnconfirmedTX.Enabled = false;
                    btnFirstAddressTransaction.Enabled = false;
                    btnNextAddressTransactions.Enabled = false;
                    BtnViewTransactionFromAddress.Enabled = false;
                    BtnViewBlockFromAddress.Enabled = false;
                    textboxSubmittedAddress.Enabled = false;
                    //panelLeftPanel.Enabled = false;
                }
                else
                {
                    // use previously saved states to reinstate buttons
                    btnShowAllTX.Enabled = btnShowAllAddressTXWasEnabled;
                    btnShowConfirmedTX.Enabled = btnShowConfirmedAddressTXWasEnabled;
                    btnShowUnconfirmedTX.Enabled = btnShowUnconfirmedAddressTXWasEnabled;
                    btnFirstAddressTransaction.Enabled = btnFirstAddressTransactionWasEnabled;
                    btnNextAddressTransactions.Enabled = btnNextAddressTransactionsWasEnabled;
                    BtnViewTransactionFromAddress.Enabled = BtnViewTransactionFromAddressWasEnabled;
                    BtnViewBlockFromAddress.Enabled = BtnViewBlockFromAddressWasEnabled;
                    textboxSubmittedAddress.Enabled = textBoxSubmittedAddressWasEnabled;
                    //panelLeftPanel.Enabled = true;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "DisableEnableAddressButtons");
            }
        }
        #endregion
        #endregion

        #region ⚡BLOCK SCREEN⚡
        #region user input
        private void NumericUpDownSubmittedBlockNumberUp_Click(object sender, EventArgs e)
        {
            try
            {
                if (long.TryParse(lblBlockNumber.Text, out long blockNumber))
                {
                    // Check if numericUpDownSubmittedBlockNumber.Value is less than blockNumber
                    if (numericUpDownSubmittedBlockNumber.Value < blockNumber)
                    {
                        numericUpDownSubmittedBlockNumber.Value++;
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "NumericUpDownSubmittedBlockNumberUp_Click");
            }
        }

        private void NumericUpDownSubmittedBlockNumberDown_Click(object sender, EventArgs e)
        {
            try
            {
                if (numericUpDownSubmittedBlockNumber.Value > 0)
                {
                    numericUpDownSubmittedBlockNumber.Value--;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "NumericUpDownSubmittedBlockNumberDown_Click");
            }
        }

        private void BtnLookUpBlock_Click(object sender, EventArgs e)
        {
            try
            {
                LookupBlock();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnLookUpBlock_Click");
            }
        }

        private void NumericUpDownSubmittedBlockNumber_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                // Handle enter
                if (e.KeyChar == '\r')
                {
                    // Submit button was pressed
                    LookupBlock();
                    e.Handled = true;
                    return;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "numericUpDownSubmittedBlockNumber_KeyPress");
            }
        }

        #region continuous increment/decrement of numericUpDown controls when mouse button held down
        private void BtnNumericUpDownSubmittedBlockNumberUp_MouseDown(object sender, MouseEventArgs e)
        {
            isSubmittedBlockNumberUpHeldDown = true;
            timerNumUpDownContinuous.Enabled = true;
            timerNumUpDownContinuous.Start();
        }

        private void BtnNumericUpDownSubmittedBlockNumberUp_MouseUp(object sender, MouseEventArgs e)
        {
            isSubmittedBlockNumberUpHeldDown = false;
            timerNumUpDownContinuous.Stop();
            timerNumUpDownContinuous.Enabled = false;
        }

        private void BtnNumericUpDownSubmittedBlockNumberDown_MouseDown(object sender, MouseEventArgs e)
        {
            isSubmittedBlockNumberDownHeldDown = true;
            timerNumUpDownContinuous.Enabled = true;
            timerNumUpDownContinuous.Start();
        }

        private void BtnNumericUpDownSubmittedBlockNumberDown_MouseUp(object sender, MouseEventArgs e)
        {
            isSubmittedBlockNumberDownHeldDown = false;
            timerNumUpDownContinuous.Stop();
            timerNumUpDownContinuous.Enabled = false;
        }
        #endregion
        #endregion
        #region get the data
        //------------------------ LOOK UP THE BLOCK ------------------------------------------------------------------
        private async void LookupBlock()
        {
            try
            {
                if (numericUpDownSubmittedBlockNumber.Value == 0)
                {
                    btnPreviousBlock.Enabled = false;
                }
                else
                {
                    btnPreviousBlock.Enabled = true;
                }
                if (decimal.TryParse(lblBlockNumber.Text, out decimal labelblockNumber))
                {
                    if (numericUpDownSubmittedBlockNumber.Value == labelblockNumber)
                    {
                        btnNextBlock.Enabled = false;
                    }
                    else
                    {
                        btnNextBlock.Enabled = true;
                    }
                }
                TotalBlockTransactionRowsAdded = 0; 
                btnViewTransactionFromBlock.Visible = false;
                if (int.TryParse(numericUpDownSubmittedBlockNumber.Text, out var submittedBlockHeight))
                {
                    // display block hash
                    using (WebClient client = new WebClient())
                    {
                        string BlockHashURL = NodeURL + "block-height/" + submittedBlockHeight;
                        LightUpNodeLight();
                        string BlockHash = client.DownloadString(BlockHashURL); // get hash of provided block
                        lblBlockHash.Invoke((MethodInvoker)delegate
                        {
                            lblBlockHash.Text = BlockHash;
                        });
                    }
                    lblBlockBlockHeight.Invoke((MethodInvoker)delegate
                    {
                        lblBlockBlockHeight.Text = "Block " + numericUpDownSubmittedBlockNumber.Text;
                        lblBlockBlockHeight.Location = new Point((panel105.Width / 2) - (lblBlockBlockHeight.Width / 2), lblBlockBlockHeight.Location.Y);
                    });

                    var blockNumber = Convert.ToString(numericUpDownSubmittedBlockNumber.Text);
                    await GetFifteenBlocks(blockNumber);
                    string BlockHashToGetTransactionsFor = lblBlockHash.Text;
                    await GetTransactionsForBlock(BlockHashToGetTransactionsFor, "0");
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "LookupBlock");
            }
        }

        //------------------------ GET FIFTEEN BLOCKS STARTNG FROM THE ONE WE'RE INTERESTED IN ------------------------
        private async Task GetFifteenBlocks(string blockNumber) // overkill at this point, because we're only interested in one block, but this gets us the data
        {
            try
            {
                ToggleLoadingAnimation("enable"); // start the loading animation
                DisableEnableBlockButtons("disable"); // disable buttons during operation
                LightUpNodeLight();
                var blocksJson = await _blockService.GetBlockDataAsync(blockNumber);
                if (!string.IsNullOrEmpty(blocksJson))
                {
                    var blocks = JsonConvert.DeserializeObject<List<Block>>(blocksJson);
                    ToggleLoadingAnimation("disable"); // stop the loading animation
                    DisableEnableBlockButtons("enable"); // enable buttons after operation is complete
                    lblNumberOfTXInBlock.Invoke((MethodInvoker)delegate
                    {
                        lblNumberOfTXInBlock.Text = Convert.ToString(blocks[0].Tx_count);
                    });
                    long sizeInBytes = blocks[0].Size;
                    string sizeString; // convert display to bytes/kb/mb accordingly
                    if (sizeInBytes < 1000)
                    {
                        sizeString = $"{sizeInBytes} bytes";
                    }
                    else if (sizeInBytes < 1000 * 1000)
                    {
                        double sizeInKB = (double)sizeInBytes / 1000;
                        sizeString = $"{sizeInKB:N2} KB";
                    }
                    else
                    {
                        double sizeInMB = (double)sizeInBytes / (1000 * 1000);
                        sizeString = $"{sizeInMB:N2} MB";
                    }
                    lblSizeOfBlock.Invoke((MethodInvoker)delegate
                    {
                        lblSizeOfBlock.Text = sizeString;
                    });
                    lblBlockScreenChartBlockSize.Invoke((MethodInvoker)delegate
                    {
                        lblBlockScreenChartBlockSize.Location = new Point(lblSizeOfBlock.Location.X + lblSizeOfBlock.Width, lblBlockScreenChartBlockSize.Location.Y);
                    });
                    string strWeight = Convert.ToString(blocks[0].Weight);

                    if (decimal.TryParse(strWeight, out decimal decWeight))
                    {
                        decWeight /= 1000000m; // convert to MWU
                        string strFormattedWeight = decWeight.ToString("N2"); // Display to 2 decimal places
                        lblBlockWeight.Invoke((MethodInvoker)delegate
                        {
                            lblBlockWeight.Text = strFormattedWeight;
                        });
                    }
                    string TotalBlockFees = Convert.ToString(blocks[0].Extras.TotalFees);
                    TotalBlockFees = Convert.ToString(ConvertSatsToBitcoin(TotalBlockFees));
                    lblTotalFees.Invoke((MethodInvoker)delegate
                    {
                        lblTotalFees.Text = TotalBlockFees;
                    });
                    if (decimal.TryParse(TotalBlockFees, out decimal totalBlockFeesDec))
                    {
                        lblTotalFeesFiat.Invoke((MethodInvoker)delegate
                        {
                            lblTotalFeesFiat.Text = lblHeaderPrice.Text[0] + (totalBlockFeesDec * OneBTCinSelectedCurrency).ToString("N2");
                        });
                    }
                    lblBlockFeeChart.Invoke((MethodInvoker)delegate
                    {
                        lblBlockFeeChart.Location = new Point(lblTotalFees.Location.X + lblTotalFees.Width, lblBlockFeeChart.Location.Y);
                    });

                    string nonceString = blocks[0].Nonce;
                    if (long.TryParse(nonceString, out long nonceLong))
                    {
                        lblNonce.Invoke((MethodInvoker)delegate
                        {
                            lblNonce.Text = "0x" + nonceLong.ToString("X");
                        });
                    }

                    string Reward = Convert.ToString(blocks[0].Extras.Reward);
                    lblReward.Invoke((MethodInvoker)delegate
                    {
                        lblReward.Text = Convert.ToString(ConvertSatsToBitcoin(Reward));
                    });

                    if (decimal.TryParse(Reward, out decimal RewardDec))
                    {
                        lblRewardFiat.Invoke((MethodInvoker)delegate
                        {
                            lblRewardFiat.Text = lblHeaderPrice.Text[0] + ((RewardDec / 100000000) * OneBTCinSelectedCurrency).ToString("N2");
                        });
                    }

                    lblBlockScreenChartReward.Invoke((MethodInvoker)delegate
                    {
                        lblBlockScreenChartReward.Location = new Point(lblReward.Location.X + lblReward.Width, lblBlockScreenChartReward.Location.Y);
                    });


                    lblBlockFeeRangeAndMedianFee.Invoke((MethodInvoker)delegate
                    {
                        lblBlockFeeRangeAndMedianFee.Text = Convert.ToString(Convert.ToInt32(blocks[0].Extras.FeeRange[0])) + "-" + Convert.ToString(Convert.ToInt32(blocks[0].Extras.FeeRange[6])) + " / " + Convert.ToString(Convert.ToInt32(blocks[0].Extras.MedianFee));
                    });
                    lblBlockScreenChartFeeRange.Invoke((MethodInvoker)delegate
                    {
                        lblBlockScreenChartFeeRange.Location = new Point(lblBlockFeeRangeAndMedianFee.Location.X + lblBlockFeeRangeAndMedianFee.Width, lblBlockScreenChartFeeRange.Location.Y);
                    });
                    lblBlockAverageFee.Invoke((MethodInvoker)delegate
                    {
                        lblBlockAverageFee.Text = Convert.ToString(blocks[0].Extras.AvgFee);
                    });
                    lblMiner.Invoke((MethodInvoker)delegate
                    {
                        lblMiner.Text = Convert.ToString(blocks[0].Extras.Pool.Name);
                    });
                    lblBlockScreenPoolRankingChart.Invoke((MethodInvoker)delegate
                    {
                        lblBlockScreenPoolRankingChart.Location = new Point(lblMiner.Location.X + lblMiner.Width, lblBlockScreenPoolRankingChart.Location.Y);
                    });
                    lblBlockTime.Invoke((MethodInvoker)delegate
                    {
                        lblBlockTime.Text = DateTimeOffset.FromUnixTimeSeconds(long.Parse(blocks[0].Timestamp)).ToString("yyyy-MM-dd HH:mm");
                    });
                }
                else
                {
                    ToggleLoadingAnimation("disable"); // stop the loading animation
                    DisableEnableBlockButtons("enable"); // enable buttons after operation is complete
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "GetFifteenBlocks");
            }
        }

        //------------------------ GET TRANSACTIONS FOR BLOCK ---------------------------------------------------------
        private async Task GetTransactionsForBlock(string blockHash, string lastSeenBlockTransaction)
        {
            try
            {
                if (NodeURL == "https://mempool.space/api/" || NodeURL == "https://mempool.space/testnet/api/")
                {
                    rowsReturnedByBlockTransactionsAPI = 25;
                    panelOwnNodeBlockTXInfo.Visible = false;
                }
                else
                {
                    rowsReturnedByBlockTransactionsAPI = 10;
                    panelOwnNodeBlockTXInfo.Visible = true;
                }
                ToggleLoadingAnimation("enable"); // start the loading animation
                DisableEnableBlockButtons("disable"); // disable buttons during operation
                LightUpNodeLight();
                var BlockTransactionsJson = await _transactionsForBlockService.GetTransactionsForBlockAsync(blockHash, lastSeenBlockTransaction);
                if (!string.IsNullOrEmpty(BlockTransactionsJson))
                {
                    var transactions = JsonConvert.DeserializeObject<List<Block_Transactions>>(BlockTransactionsJson);
                    ToggleLoadingAnimation("disable"); // stop the loading animation
                    DisableEnableBlockButtons("enable"); // enable buttons after operation is complete
                    List<string> txIds = transactions.Select(t => t.Txid).ToList();

                    // Update lastSeenTxId if this isn't our first fetch of tranasctions to restart from the right place
                    if (txIds.Count > 0)
                    {
                        lastSeenBlockTransaction = txIds.Last();
                    }

                    //LIST VIEW
                    listViewBlockTransactions.Invoke((MethodInvoker)delegate
                    {
                        listViewBlockTransactions.Items.Clear(); // remove any data that may be there already
                    });
                    listViewBlockTransactions.GetType().InvokeMember("DoubleBuffered", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.SetProperty, null, listViewBlockTransactions, new object[] { true });

                    // Check if the column header already exists
                    if (listViewBlockTransactions.Columns.Count == 0)
                    {
                        // If not, add the column header
                        listViewBlockTransactions.Invoke((MethodInvoker)delegate
                        {
                            listViewBlockTransactions.Columns.Add(" Transaction ID", (int)(250 * UIScale));
                        });
                    }

                    if (listViewBlockTransactions.Columns.Count == 1)
                    {
                        // If not, add the column header
                        listViewBlockTransactions.Invoke((MethodInvoker)delegate
                        {
                            listViewBlockTransactions.Columns.Add("Fee", (int)(70 * UIScale));
                        });
                    }

                    if (listViewBlockTransactions.Columns.Count == 2)
                    {
                        // If not, add the column header
                        listViewBlockTransactions.Invoke((MethodInvoker)delegate
                        {
                            listViewBlockTransactions.Columns.Add("I/P", (int)(40 * UIScale));
                        });
                    }
                    if (listViewBlockTransactions.Columns.Count == 3)
                    {
                        // If not, add the column header
                        listViewBlockTransactions.Invoke((MethodInvoker)delegate
                        {
                            listViewBlockTransactions.Columns.Add("O/P", (int)(40 * UIScale));
                        });
                    }
                    if (listViewBlockTransactions.Columns.Count == 4)
                    {
                        // If not, add the column header
                        listViewBlockTransactions.Invoke((MethodInvoker)delegate
                        {
                            listViewBlockTransactions.Columns.Add("Amount", (int)(100 * UIScale));
                        });
                    }
                    // Add the items to the ListView
                    int counter = 0; // used to count rows in list as they're added

                    foreach (var blockTransaction in transactions)
                    {
                        ListViewItem item = new ListViewItem(blockTransaction.Txid); // create new row
                        item.SubItems.Add(blockTransaction.Fee.ToString());
                        item.SubItems.Add(blockTransaction.Vin.Count.ToString()); // number of inputs
                        item.SubItems.Add(blockTransaction.Vout.Count.ToString()); // number of outputs
                        decimal totalValue = blockTransaction.Vout.Sum(v => decimal.Parse(v.Value)); // sum of outputs
                        totalValue = ConvertSatsToBitcoin(totalValue.ToString());
                        item.SubItems.Add(totalValue.ToString());
                        listViewBlockTransactions.Invoke((MethodInvoker)delegate
                        {
                            listViewBlockTransactions.Items.Add(item); // add row
                        });

                        counter++; // increment rows for this batch
                        TotalBlockTransactionRowsAdded++; // increment all rows

                        if (TotalBlockTransactionRowsAdded <= rowsReturnedByBlockTransactionsAPI) // we must still be on first results so there are no previous
                        {
                            btnPreviousBlockTransactions.Enabled = false;
                        }
                        else
                        {
                            btnPreviousBlockTransactions.Enabled = true;
                        }

                        if (Convert.ToString(TotalBlockTransactionRowsAdded) == lblNumberOfTXInBlock.Text) // we've shown all the TXs
                        {
                            btnNextBlockTransactions.Enabled = false; // so we won't need this
                        }
                        else
                        {
                            btnNextBlockTransactions.Enabled = true;
                        }

                        if (counter == rowsReturnedByBlockTransactionsAPI) // ListView is full. stop adding rows at this point and pick up from here...
                        {
                            break;
                        }
                    }
                    listViewBlockTransactions.Items[0].Selected = true;
                    if (counter > 0)
                    {
                        lblBlockTXPositionInList.Invoke((MethodInvoker)delegate
                        {
                            lblBlockTXPositionInList.Text = "Transactions " + (TotalBlockTransactionRowsAdded - counter + 1) + " - " + (TotalBlockTransactionRowsAdded) + " of " + lblNumberOfTXInBlock.Text;
                        });
                    }
                    else
                    {
                        lblBlockTXPositionInList.Invoke((MethodInvoker)delegate
                        {
                            lblBlockTXPositionInList.Text = "No transactions to display"; // this can't really happen as there will always be a coinbase transaction
                        });
                    }
                }
                else
                {
                    ToggleLoadingAnimation("disable"); // stop the loading animation
                    DisableEnableBlockButtons("enable"); // enable buttons after operation is complete
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "GetTransactionsForBlocks");
            }
        }
        #endregion
        #region prev/next transactions
        //------------------------ GET NEXT BATCH OF TRANSACTIONS FOR BLOCK -------------------------------------------
        private async void BtnNextBlockTransactions_Click(object sender, EventArgs e)
        {
            try
            {
                var blockHash = lblBlockHash.Text; // Get the blockHash from the label again
                var lastSeenBlockTransaction = Convert.ToString(TotalBlockTransactionRowsAdded); // the JSON uses the count to restart fetching, rather than txid.
                await GetTransactionsForBlock(blockHash, lastSeenBlockTransaction); // Call the GetConfirmedTransactionsForBlock method with the updated lastSeenTxId
                btnViewTransactionFromBlock.Visible = false;
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnNextBlockTransactions_Click");
            }
        }

        //------------------------ GET PREVIOUS BATCH OF TRANSACTIONS FOR BLOCK -----------------------------------------
        private async void BtnPreviousBlockTransactions_Click(object sender, EventArgs e)
        {
            try
            {
                var blockHash = lblBlockHash.Text; // Get the blockHash from the label again
                if (TotalBlockTransactionRowsAdded % rowsReturnedByBlockTransactionsAPI == 0) // API expects last seen transaction to be a multiple of 25. If it is we can just subtract 50 for the prev page
                {
                    TotalBlockTransactionRowsAdded -= (rowsReturnedByBlockTransactionsAPI * 2);
                }
                else // otherwise we subtract the odd amount (only happens at end of list) and another 25 to be able to go back to the previous page.
                {
                    int closestMultipleOf25 = TotalBlockTransactionRowsAdded - (TotalBlockTransactionRowsAdded % rowsReturnedByBlockTransactionsAPI);
                    int firstNumberBeforeIt = closestMultipleOf25 - rowsReturnedByBlockTransactionsAPI;
                    TotalBlockTransactionRowsAdded = firstNumberBeforeIt;
                }
                var lastSeenBlockTransaction = Convert.ToString(TotalBlockTransactionRowsAdded); // the JSON uses the count to restart fetching, rather than txid.
                await GetTransactionsForBlock(blockHash, lastSeenBlockTransaction); // Call the GetConfirmedTransactionsForBlock method with the updated lastSeenTxId
                btnViewTransactionFromBlock.Visible = false;
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnPreviousBlockTransactions_Click");
            }
        }
        #endregion
        #region prev/next block
        //------------------------ VIEW PREVIOUS BLOCK ------------------------------------------------------------------
        private void BtnPreviousBlock_Click(object sender, EventArgs e) // decrease block number by 1 and populate block data
        {
            try
            {
                long CurrentSubmittedBlockNumber = Convert.ToInt32(numericUpDownSubmittedBlockNumber.Text);
                numericUpDownSubmittedBlockNumber.Invoke((MethodInvoker)delegate
                {
                    numericUpDownSubmittedBlockNumber.Text = Convert.ToString(CurrentSubmittedBlockNumber - 1);
                });
                LookupBlock();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnPreviousBlock_Click");
            }
        }

        //------------------------ VIEW NEXT BLOCK --------------------------------------------------------------------
        private void BtnNextBlock_Click(object sender, EventArgs e) // increase block number by 1 and populate block data
        {
            try
            {
                long CurrentSubmittedBlockNumber = Convert.ToInt32(numericUpDownSubmittedBlockNumber.Text);
                numericUpDownSubmittedBlockNumber.Invoke((MethodInvoker)delegate
                {
                    numericUpDownSubmittedBlockNumber.Text = Convert.ToString(CurrentSubmittedBlockNumber + 1);
                });
                LookupBlock();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnNextBlock_Click");
            }
        }
        #endregion
        #region listview appearance
        //------------------------ USER SELECTED A TRANSACTION ROW -----------------------------------------------------
        private void ListViewBlockTransactions_ItemSelectionChanged(object sender, ListViewItemSelectionChangedEventArgs e)
        {
            try
            {
                bool anySelected = false;
                if (listViewBlockTransactions.Items.Count > 0)
                {
                    foreach (ListViewItem item in listViewBlockTransactions.Items)
                    {
                        if (item != null)
                        {
                            if (item.Selected)
                            {
                                foreach (ListViewItem.ListViewSubItem subItem in item.SubItems)
                                {
                                    subItem.ForeColor = MakeColorLighter(tableTextColor, 40);
                                }
                                btnViewTransactionFromBlock.Invoke((MethodInvoker)delegate
                                {
                                    btnViewTransactionFromBlock.Location = new Point(item.Position.X + listViewBlockTransactions.Location.X + listViewBlockTransactions.Columns[0].Width - btnViewTransactionFromBlock.Width - (int)(6 * UIScale), item.Position.Y + listViewBlockTransactions.Location.Y);
                                    btnViewTransactionFromBlock.Height = item.Bounds.Height;
                                });
                                anySelected = true;
                            }
                            else
                            {
                                foreach (ListViewItem.ListViewSubItem subItem in item.SubItems)
                                {
                                    subItem.ForeColor = tableTextColor;
                                }
                            }
                        }
                    }
                    btnViewTransactionFromBlock.Visible = anySelected;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewBlockTransactions_ItemSelectionChanged");
            }
        }

        //------------------------ USER TRYING TO RESIZE COLUMNS ------------------------------------------------------
        private void ListViewBlockTransactions_ColumnWidthChanging(object sender, ColumnWidthChangingEventArgs e)
        {
            try
            {
                if (e.ColumnIndex == 0)
                {
                    if (listViewBlockTransactions.Columns[e.ColumnIndex].Width < (int)(250 * UIScale)) // min width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(250 * UIScale);
                    }
                    if (listViewBlockTransactions.Columns[e.ColumnIndex].Width > (int)(460 * UIScale)) // max width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(460 * UIScale);
                    }
                    btnViewTransactionFromBlock.Invoke((MethodInvoker)delegate
                    {
                        btnViewTransactionFromBlock.Location = new Point(listViewBlockTransactions.Columns[0].Width + listViewBlockTransactions.Location.X - btnViewTransactionFromBlock.Width - (int)(6 * UIScale), btnViewTransactionFromBlock.Location.Y);
                    });
                }

                if (e.ColumnIndex == 1)
                {
                    if (listViewBlockTransactions.Columns[e.ColumnIndex].Width != (int)(70 * UIScale)) // fixed width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(70 * UIScale);
                    }
                }
                if (e.ColumnIndex == 2)
                {
                    if (listViewBlockTransactions.Columns[e.ColumnIndex].Width != (int)(40 * UIScale)) // fixed width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(40 * UIScale);
                    }
                }
                if (e.ColumnIndex == 3)
                {
                    if (listViewBlockTransactions.Columns[e.ColumnIndex].Width != (int)(40 * UIScale)) // fixed width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(40 * UIScale);
                    }
                }
                if (e.ColumnIndex == 4)
                {
                    if (listViewBlockTransactions.Columns[e.ColumnIndex].Width != (int)(100 * UIScale)) // fixed width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(100 * UIScale);

                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewBlockTransactions_ColumnWidthChanging");
            }
        }

        //------------------------ FORMAT DATA WHILE DRAWING LISTVIEW ------------------------------------------------------
        private void ListViewBlockTransactions_DrawSubItem(object sender, DrawListViewSubItemEventArgs e)
        {
            try
            {
                var text = e.SubItem.Text;

                if (text[0] == '+') // if the string is a change to an amount and positive
                {
                    e.SubItem.ForeColor = Color.OliveDrab; // make it green

                }
                else
                if (text[0] == '-') // if the string is a change to an amount and negative
                {
                    e.SubItem.ForeColor = Color.IndianRed; // make it red
                }

                var font = listViewBlockTransactions.Font;
                var columnWidth = e.Header.Width;
                var textWidth = TextRenderer.MeasureText(text, font).Width;
                if (textWidth > columnWidth)
                {
                    // Truncate the text
                    var maxText = text.Substring(0, text.Length * columnWidth / textWidth - 3) + "...";
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);
                    // Clear the background
                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewBlockTransactions.BackColor), bounds);
                    }
                    TextRenderer.DrawText(e.Graphics, maxText, font, bounds, e.Item.ForeColor, TextFormatFlags.EndEllipsis | TextFormatFlags.Left);
                }
                else if (textWidth < columnWidth)
                {
                    // Clear the background
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);

                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewBlockTransactions.BackColor), bounds);
                    }

                    TextRenderer.DrawText(e.Graphics, text, font, bounds, e.SubItem.ForeColor, TextFormatFlags.Left);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewBlockTransactions_DrawSubItem");
            }
        }
        #endregion
        #region navigate from listview to tx screen
        private void BtnViewTransactionFromBlock_Click(object sender, EventArgs e)
        {
            try
            {
                CheckNetworkStatus();
                // Get the selected item
                ListViewItem selectedItem = listViewBlockTransactions.SelectedItems[0];
                // Get the first subitem in the selected item 
                string TransactionIDFromRow = selectedItem.SubItems[0].Text;
                // copy transaction ID to transaction screen
                textBoxTransactionID.Invoke((MethodInvoker)delegate
                {
                    textBoxTransactionID.Text = TransactionIDFromRow;
                });
                //show the transaction screen
                BtnMenuTransaction_Click(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnViewTransactionFromBlock_Click");
            }
        }
        #endregion
        #region enable/disable buttons
        private void DisableEnableBlockButtons(string enableOrDisableBlockButtons)
        {
            try
            {
                if (enableOrDisableBlockButtons == "disable")
                {
                    // get current state of buttons before disabling them
                    btnPreviousBlockTransactionsWasEnabled = btnPreviousBlockTransactions.Enabled;
                    btnNextBlockTransactionsWasEnabled = btnNextBlockTransactions.Enabled;
                    numericUpDownSubmittedBlockNumberWasEnabled = numericUpDownSubmittedBlockNumber.Enabled;
                    btnNumericUpDownSubmittedBlockNumberDownWasEnabled = btnNumericUpDownSubmittedBlockNumberDown.Enabled;
                    btnNumericUpDownSubmittedBlockNumberUpWasEnabled = btnNumericUpDownSubmittedBlockNumberUp.Enabled;
                    btnNextBlockWasEnabled = btnNextBlock.Enabled;
                    btnPreviousBlockWasEnabled = btnPreviousBlock.Enabled;
                    btnLookUpBlockWasEnabled = btnLookUpBlock.Enabled;

                    //disable them all
                    btnPreviousBlockTransactions.Enabled = false;
                    btnNextBlockTransactions.Enabled = false;
                    numericUpDownSubmittedBlockNumber.Enabled = false;
                    btnNumericUpDownSubmittedBlockNumberUp.Enabled = false;
                    btnNumericUpDownSubmittedBlockNumberDown.Enabled = false;
                    btnNextBlock.Enabled = false;
                    btnPreviousBlock.Enabled = false;
                    btnLookUpBlock.Enabled = false;
                }
                else
                {
                    // use previously saved states to reinstate buttons
                    btnPreviousBlockTransactions.Enabled = btnPreviousBlockTransactionsWasEnabled;
                    btnNextBlockTransactions.Enabled = btnNextBlockTransactionsWasEnabled;
                    btnNextBlock.Enabled = btnNextBlockWasEnabled;
                    btnPreviousBlock.Enabled = btnPreviousBlockWasEnabled;
                    numericUpDownSubmittedBlockNumber.Enabled = numericUpDownSubmittedBlockNumberWasEnabled;
                    btnNumericUpDownSubmittedBlockNumberDown.Enabled = btnNumericUpDownSubmittedBlockNumberDownWasEnabled;
                    btnNumericUpDownSubmittedBlockNumberUp.Enabled = btnNumericUpDownSubmittedBlockNumberUpWasEnabled;
                    btnLookUpBlock.Enabled = btnLookUpBlockWasEnabled;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "DisableEnableBlockButtons");
            }
        }
        #endregion
        #region chart icon clicks
        private void PictureBoxBlockScreenChartBlockSize_Click(object sender, EventArgs e)
        {
            try
            {
                BtnChartBlockSize_Click(sender, e);
                BtnMenuCharts_Click(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxBlockScreenChartBlockSize_Click");
            }
        }

        private void PictureBoxBlockScreenChartReward_Click(object sender, EventArgs e)
        {
            try
            {
                BtnChartReward_Click(sender, e);
                BtnMenuCharts_Click(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxBlockScreenChartReward_Click");
            }
        }

        private void PictureBoxBlockScreenChartFeeRange_Click(object sender, EventArgs e)
        {
            try
            {
                BtnChartFeeRates_Click(sender, e);
                BtnMenuCharts_Click(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxBlockScreenChartFeeRange_Click");
            }
        }

        private void PictureBoxBlockFeeChart_Click(object sender, EventArgs e)
        {
            try
            {
                BtnChartBlockFees_Click(sender, e);
                BtnMenuCharts_Click(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxBlockFeeChart_Click");
            }
        }

        private void PictureBoxBlockScreenPoolRankingChart_Click(object sender, EventArgs e)
        {
            try
            {
                BtnChartPoolsRanking_Click(sender, e);
                BtnMenuCharts_Click(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxBlockScreenPoolRankingChart_Click");
            }
        }
        #endregion
        #endregion

        #region ⚡TRANSACTION SCREEN⚡
        #region user input
        private void TextBoxTransactionID_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                // Handle enter
                if (e.KeyChar == '\r')
                {
                    // Submit button was pressed
                    LookupTransaction();
                    e.Handled = true;
                    return;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxTransactionID_KeyPress");
            }
        }

        //-------------------- TRANSACTION ID FIELD HAS CHANGED ------------------------------------------------
        private async void TextBoxTransactionID_TextChanged(object sender, EventArgs e)
        {
            try
            {
                string transactionIdToValidate = textBoxTransactionID.Text;

                if (ValidateTransactionId(transactionIdToValidate)) // check if the entered string is valid
                {
                    bool exists = await TransactionExists(transactionIdToValidate); // then check if it actually exists
                    if (exists)
                    {
                        lblInvalidTransaction.Invoke((MethodInvoker)delegate
                        {
                            lblInvalidTransaction.ForeColor = Color.OliveDrab;
                            lblInvalidTransaction.Text = "✔️ valid transaction ID";
                        });
                        LookupTransaction();
                    }
                    else
                    {
                        panelTransactionHeadline.Visible = false;
                        panelTransactionDiagram.Visible = false;
                        panel24.Visible = false;
                        panel25.Visible = false;
                        panel27.Visible = false;
                        panel28.Visible = false;
                        panel102.Visible = false;
                        panelTransactionOutputs.Visible = false;
                        panelTransactionInputs.Visible = false;
                        btnTransactionInputsUp.Visible = false;
                        btnTransactionInputDown.Visible = false;
                        btnTransactionOutputsUp.Visible = false;
                        btnTransactionOutputsDown.Visible = false;
                        listViewTransactionInputs.Visible = false;
                        listViewTransactionOutputs.Visible = false;
                        btnViewAddressFromTXInput.Visible = false;
                        btnViewAddressFromTXOutput.Visible = false;
                        lblInvalidTransaction.Invoke((MethodInvoker)delegate
                        {
                            lblInvalidTransaction.ForeColor = Color.IndianRed;
                            lblInvalidTransaction.Text = "✖️ invalid transaction ID";
                        });
                    }
                }
                else
                {
                    panelTransactionHeadline.Visible = false;
                    panelTransactionDiagram.Visible = false;
                    panel24.Visible = false;
                    panel25.Visible = false;
                    panel27.Visible = false;
                    panel28.Visible = false;
                    panel102.Visible = false;
                    panelTransactionOutputs.Visible = false;
                    panelTransactionInputs.Visible = false;
                    btnTransactionInputsUp.Visible = false;
                    btnTransactionInputDown.Visible = false;
                    btnTransactionOutputsUp.Visible = false;
                    btnTransactionOutputsDown.Visible = false;
                    listViewTransactionInputs.Visible = false;
                    listViewTransactionOutputs.Visible = false;
                    btnViewAddressFromTXInput.Visible = false;
                    btnViewAddressFromTXOutput.Visible = false;
                    if (transactionIdToValidate == "")
                    {
                        lblInvalidTransaction.Invoke((MethodInvoker)delegate
                        {
                            lblInvalidTransaction.Text = "";
                        });
                    }
                    else
                    {
                        lblInvalidTransaction.Invoke((MethodInvoker)delegate
                        {
                            lblInvalidTransaction.ForeColor = Color.IndianRed;
                            lblInvalidTransaction.Text = "✖️ invalid transaction ID";
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxTransactionID_TextChanged");
            }
        }
        #endregion
        #region validation
        //-------------------- CHECK ITS A VALID TRANSACTION ID FORMAT -----------------------------------------
        private bool ValidateTransactionId(string transactionId) // checks if transaction ID is in a valid format
        {
            try
            {
                if (uint256.TryParse(transactionId, out uint256 txId))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (FormatException)
            {
                return false;
            }
        }

        //-------------------- CHECK IF THE TRANSACTION ID EXISTS ----------------------------------------------
        private async Task<bool> TransactionExists(string transactionId) // checks if the valid transaction ID actually exists
        {
            ToggleLoadingAnimation("enable"); // start the loading animation
            DisableEnableTransactionButtons("disable"); // disable buttons during operation
            string url = NodeURL + "tx/" + transactionId;
            using HttpClient client = new HttpClient();
            LightUpNodeLight();
            HttpResponseMessage response = await client.GetAsync(url);
            ToggleLoadingAnimation("disable"); // start the loading animation
            DisableEnableTransactionButtons("enable"); // disable buttons during operation
            return response.IsSuccessStatusCode;
        }
        #endregion
        #region set up transaction screen
        //-------------------- LOOKUP THE TRANSACTION ----------------------------------------------------------
        private async void LookupTransaction()
        {
            try
            {
                #region display loading screen
                // display semi-transparent overlay form
                Form loadingTheme = new loadingTheme(UIScale)
                {
                    Owner = this, 
                    StartPosition = FormStartPosition.CenterParent, 
                    FormBorderStyle = FormBorderStyle.None, 
                    BackColor = panel84.BackColor, // Set the background color to match panel colours
                    Opacity = 1, 
                };
                loadingTheme.StartPosition = FormStartPosition.CenterParent;

                // Calculate the overlay form's location to place it in the center of the parent form
                loadingTheme.StartPosition = FormStartPosition.Manual;
                int parentCenterX = this.Location.X + this.Width / 2;
                int parentCenterY = this.Location.Y + this.Height / 2;
                int overlayX = parentCenterX - loadingTheme.Width / 2;
                int overlayY = parentCenterY - loadingTheme.Height / 2;
                loadingTheme.Location = new Point(overlayX, overlayY);
                loadingTheme.Show(this);
                #endregion



                string submittedTransactionID = textBoxTransactionID.Text;
                await GetTransaction(submittedTransactionID);



                //wait 2 secs 
                await Wait2Secs();
                //close the loading screen
                loadingTheme.Close();
                this.BringToFront();
                this.Focus();
            }
            catch (Exception ex)
            {
                HandleException(ex, "LookupTransaction");
            }
        }

        //-------------------- GET TRANSACTION DATA AND DISPLAY IT AND DIAGRAM ---------------------------------
        private async Task GetTransaction(string submittedTransactionID)
        {
            try
            {
                linePoints.Clear();
                btnViewAddressFromTXInput.Visible = false;
                btnViewAddressFromTXOutput.Visible = false;
                ToggleLoadingAnimation("enable"); // start the loading animation
                DisableEnableTransactionButtons("disable"); // disable buttons during operation
                LightUpNodeLight();
                var TransactionJson = await _transactionService.GetTransactionAsync(submittedTransactionID);
                if (!string.IsNullOrEmpty(TransactionJson))
                {
                    var transaction = JsonConvert.DeserializeObject<Transaction>(TransactionJson);
                    ToggleLoadingAnimation("disable"); // stop the loading animation
                    DisableEnableTransactionButtons("enable"); // enable buttons after operation is complete

                    lblTransactionBlockHeight.Invoke((MethodInvoker)delegate
                    {
                        lblTransactionBlockHeight.Text = Convert.ToString(transaction.Status.Block_height);
                        lblTransactionBlockHeight.Location = new Point(label113.Location.X + label113.Width, lblTransactionBlockHeight.Location.Y);
                    });
                    label126.Invoke((MethodInvoker)delegate
                    {
                        label126.Location = new Point(lblTransactionBlockHeight.Location.X + lblTransactionBlockHeight.Width + (int)(6 * UIScale), label126.Location.Y);
                    });

                    long unixTimestamp = Convert.ToInt64(transaction.Status.Block_time);
                    DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc).AddSeconds(unixTimestamp).ToLocalTime();
                    lblTransactionBlockTime.Invoke((MethodInvoker)delegate
                    {
                        lblTransactionBlockTime.Text = dateTime.ToString("yyyyMMdd-HH:mm");
                        lblTransactionBlockTime.Location = new Point(label126.Location.X + label126.Width, lblTransactionBlockTime.Location.Y);
                    });
                    label125.Invoke((MethodInvoker)delegate
                    {
                        label125.Location = new Point(lblTransactionBlockTime.Location.X + lblTransactionBlockTime.Width + (int)(6 * UIScale), label125.Location.Y);
                    });
                    lblTransactionConfirmations.Invoke((MethodInvoker)delegate
                    {
                        lblTransactionConfirmations.Text = Convert.ToString(Convert.ToInt32(lblBlockNumber.Text) - Convert.ToInt32(lblTransactionBlockHeight.Text));
                        lblTransactionConfirmations.Location = new Point(label125.Location.X + label125.Width, lblTransactionConfirmations.Location.Y);
                    });

                    label128.Invoke((MethodInvoker)delegate
                    {
                        label128.Location = new Point(lblTransactionConfirmations.Location.X + lblTransactionConfirmations.Width + (int)(6 * UIScale), label128.Location.Y);
                    });
                    lblTransactionLockTime.Invoke((MethodInvoker)delegate
                    {
                        lblTransactionLockTime.Text = Convert.ToString(transaction.Locktime);
                        lblTransactionLockTime.Location = new Point(label128.Location.X + label128.Width, lblTransactionLockTime.Location.Y);
                    });
                    label98.Invoke((MethodInvoker)delegate
                    {
                        label98.Location = new Point(lblTransactionLockTime.Location.X + lblTransactionLockTime.Width + (int)(6 * UIScale), label98.Location.Y);
                    });
                    lblTransactionVersion.Invoke((MethodInvoker)delegate
                    {
                        lblTransactionVersion.Text = Convert.ToString(transaction.Version);
                        lblTransactionVersion.Location = new Point(label98.Location.X + label98.Width, lblTransactionVersion.Location.Y);
                    });

                    lblTransactionSize.Invoke((MethodInvoker)delegate
                    {
                        lblTransactionSize.Text = Convert.ToString(transaction.Size) + " bytes";
                    });
                    lblTransactionWeight.Invoke((MethodInvoker)delegate
                    {
                        lblTransactionWeight.Text = Convert.ToString(transaction.Weight) + " MWU";
                    });
                    lblTransactionFee.Invoke((MethodInvoker)delegate
                    {
                        lblTransactionFee.Text = Convert.ToString(ConvertSatsToBitcoin(Convert.ToString(transaction.Fee)));
                    });

                    if (decimal.TryParse(lblTransactionFee.Text, out decimal transactionFeeDec))
                    {
                        lblTransactionFeeFiat.Invoke((MethodInvoker)delegate
                        {
                            lblTransactionFeeFiat.Text = lblHeaderPrice.Text[0] + (transactionFeeDec * OneBTCinSelectedCurrency).ToString("N2");
                        });
                    }

                    if (transaction.Vin.Count() == 1)
                    {
                        lblTransactionInputCount.Invoke((MethodInvoker)delegate
                        {
                            lblTransactionInputCount.Text = Convert.ToString(transaction.Vin.Count()) + " input";
                        });
                    }
                    else
                    {
                        lblTransactionInputCount.Invoke((MethodInvoker)delegate
                        {
                            lblTransactionInputCount.Text = Convert.ToString(transaction.Vin.Count()) + " inputs";
                        });
                    }
                    if (transaction.Vout.Count() == 1)
                    {
                        lblTransactionOutputCount.Invoke((MethodInvoker)delegate
                        {
                            lblTransactionOutputCount.Text = Convert.ToString(transaction.Vout.Count()) + " output";
                        });
                    }
                    else
                    {
                        lblTransactionOutputCount.Invoke((MethodInvoker)delegate
                        {
                            lblTransactionOutputCount.Text = Convert.ToString(transaction.Vout.Count()) + " outputs";
                        });
                    }
                    // ----------------- central bit of diagram
                    long totalValueIn = 0;
                    foreach (TransactionVin vin in transaction.Vin)
                    {
                        if (!vin.Is_coinbase)
                        {
                            totalValueIn += vin.Prevout.Value;
                        }
                    }
                    string strTotalValueIn = totalValueIn.ToString();
                    decimal decTotalBitcoinIn = ConvertSatsToBitcoin(strTotalValueIn);
                    lblTotalInputValue.Invoke((MethodInvoker)delegate
                    {
                        lblTotalInputValue.Text = decTotalBitcoinIn.ToString();
                        lblTotalInputValue.Location = new Point((panelTransactionDiagram.Size.Width / 2) - (lblTotalInputValue.Width / 2) - (int)(95 * UIScale), (panelTransactionDiagram.Size.Height / 2) + (int)(3 * UIScale));
                    });

                    lblTotalInputValueFiat.Invoke((MethodInvoker)delegate
                    {
                        lblTotalInputValueFiat.Text = lblHeaderPrice.Text[0] + (decTotalBitcoinIn * OneBTCinSelectedCurrency).ToString("N2");
                        lblTotalInputValueFiat.Location = new Point((panelTransactionDiagram.Size.Width / 2) - (lblTotalInputValueFiat.Width / 2) - (int)(95 * UIScale), lblTotalInputValue.Location.Y + (int)(14 * UIScale));
                    });

                    long totalValueOut = 0;
                    foreach (TransactionVout vout in transaction.Vout)
                    {
                        totalValueOut += vout.Value;
                    }
                    string strTotalValueOut = totalValueOut.ToString();
                    decimal decTotalBitcoinOut = ConvertSatsToBitcoin(strTotalValueOut);
                    lblTotalOutputValue.Invoke((MethodInvoker)delegate
                    {
                        lblTotalOutputValue.Text = decTotalBitcoinOut.ToString();
                        lblTotalOutputValue.Location = new Point((panelTransactionDiagram.Size.Width / 2) + (int)(95 * UIScale) - (lblTotalOutputValue.Width / 2), (panelTransactionDiagram.Size.Height / 2) + (int)(3 * UIScale));
                    });

                    lblTotalOutputValueFiat.Invoke((MethodInvoker)delegate
                    {
                        lblTotalOutputValueFiat.Text = lblHeaderPrice.Text[0] + (decTotalBitcoinOut * OneBTCinSelectedCurrency).ToString("N2");
                        lblTotalOutputValueFiat.Location = new Point((panelTransactionDiagram.Size.Width / 2) + (int)(95 * UIScale) - (lblTotalOutputValueFiat.Width / 2), lblTotalOutputValue.Location.Y + (int)(14 * UIScale));
                    });

                    lblTransactionFee.Invoke((MethodInvoker)delegate
                    {
                        lblTransactionFee.Location = new Point((panelTransactionDiagram.Size.Width / 2) - (lblTransactionFee.Width / 2), panelTransactionDiagram.Size.Height / 2 - (int)(134 * UIScale));
                    });
                    lblTransactionFeeFiat.Invoke((MethodInvoker)delegate
                    {
                        lblTransactionFeeFiat.Location = new Point((panelTransactionDiagram.Size.Width / 2) - (lblTransactionFeeFiat.Width / 2), lblTransactionFee.Location.Y + (int)(14 * UIScale));
                    });
                    label104.Invoke((MethodInvoker)delegate
                    {
                        label104.Location = new Point((panelTransactionDiagram.Size.Width / 2) - (label104.Width / 2), panelTransactionDiagram.Size.Height / 2 - (int)(149 * UIScale));
                    });
                    panelTransactionMiddle.Invoke((MethodInvoker)delegate
                    {
                        panelTransactionMiddle.Location = new Point((panelTransactionDiagram.Width / 2) - (panelTransactionMiddle.Width / 2), (panelTransactionDiagram.Height / 2) - (panelTransactionMiddle.Height / 2)); //move middle panel to centre
                    });
                    lblTransactionInputCount.Invoke((MethodInvoker)delegate
                    {
                        lblTransactionInputCount.Location = new Point((panelTransactionDiagram.Size.Width / 2) - (lblTransactionInputCount.Width / 2) - (int)(95 * UIScale), (panelTransactionDiagram.Size.Height / 2) - (int)(15 * UIScale));
                    });
                    lblTransactionOutputCount.Invoke((MethodInvoker)delegate
                    {
                        lblTransactionOutputCount.Location = new Point((panelTransactionDiagram.Size.Width / 2) + (int)(95 * UIScale) - (lblTransactionOutputCount.Width / 2), (panelTransactionDiagram.Size.Height / 2) - (int)(15 * UIScale));
                    });

                    if (transaction.Vin[0].Is_coinbase == true)
                    {
                        lblCoinbase.Invoke((MethodInvoker)delegate
                        {
                            lblCoinbase.Text = "Coinbase transaction";
                            lblCoinbase.Location = new Point((int)(10 * UIScale), (panelTransactionDiagram.Size.Height / 2) - (int)(15 * UIScale));
                        });
                    }
                    else
                    {
                        lblCoinbase.Invoke((MethodInvoker)delegate
                        {
                            lblCoinbase.Text = "";
                        });
                    }
                    // central horizontal
                    Point startPoint1 = new Point((panelTransactionDiagram.Size.Width / 2) - (int)(150 * UIScale), panelTransactionDiagram.Size.Height / 2);
                    Point endPoint1 = new Point((panelTransactionDiagram.Size.Width / 2) + (int)(150 * UIScale), panelTransactionDiagram.Size.Height / 2);
                    linePoints.Add(startPoint1);
                    linePoints.Add(endPoint1);
                    // vertical line up to fees
                    Point startPoint2 = new Point(panelTransactionDiagram.Size.Width / 2, panelTransactionDiagram.Size.Height / 2 - panelTransactionMiddle.Height / 2);
                    Point endPoint2 = new Point(panelTransactionDiagram.Size.Width / 2, panelTransactionDiagram.Size.Height / 2 - (int)(100 * UIScale));
                    linePoints.Add(startPoint2);
                    linePoints.Add(endPoint2);
                    // ------------- inputs on diagram
                    int NumberOfInputLines = Convert.ToInt32(transaction.Vin.Count());
                    decimal YInputsStep = 0;
                    decimal YInputsPos = 0;
                    if (NumberOfInputLines > 1)
                    {
                        YInputsStep = (decimal)(panelTransactionDiagram.Size.Height - 20) / (NumberOfInputLines - 1);
                        YInputsPos = 10;
                    }
                    else
                    {
                        YInputsStep = (panelTransactionDiagram.Size.Height / 2) - 20;
                        YInputsPos = (panelTransactionDiagram.Size.Height / 2);
                    }

                    if (NumberOfInputLines > 4)
                    {
                        btnTransactionInputDown.Visible = true;
                        btnTransactionInputsUp.Visible = true;
                    }
                    else
                    {
                        btnTransactionInputDown.Visible = false;
                        btnTransactionInputsUp.Visible = false;
                    }

                    foreach (var vin in transaction.Vin)
                    {
                        if (YInputsPos >= panelTransactionDiagram.Height)
                        {
                            break;
                        }
                        Point startPoint3 = new Point((int)(10 * UIScale), Convert.ToInt32(YInputsPos));
                        Point endPoint3 = new Point((int)(100 * UIScale), Convert.ToInt32(YInputsPos));
                        linePoints.Add(startPoint3);
                        linePoints.Add(endPoint3);
                        Point startPoint4 = new Point((int)(100 * UIScale), Convert.ToInt32(YInputsPos));
                        Point endPoint4 = new Point((panelTransactionDiagram.Size.Width / 2) - (int)(150 * UIScale), panelTransactionDiagram.Size.Height / 2);
                        linePoints.Add(startPoint4);
                        linePoints.Add(endPoint4);
                        YInputsPos += YInputsStep;
                    }
                    // --------------- outputs on diagram
                    int NumberOfOutputLines = Convert.ToInt32(transaction.Vout.Count());
                    decimal YOutputsStep = 0;
                    decimal YOutputsPos = 0;
                    if (NumberOfOutputLines > 1)
                    {
                        YOutputsStep = (decimal)(panelTransactionDiagram.Size.Height - 20) / (NumberOfOutputLines - 1);
                        YOutputsPos = 10;
                    }
                    else
                    {
                        YOutputsStep = (panelTransactionDiagram.Size.Height / 2) - 20;
                        YOutputsPos = (panelTransactionDiagram.Size.Height / 2);
                    }

                    if (NumberOfOutputLines > 4)
                    {
                        btnTransactionOutputsDown.Visible = true;
                        btnTransactionOutputsUp.Visible = true;
                    }
                    else
                    {
                        btnTransactionOutputsDown.Visible = false;
                        btnTransactionOutputsUp.Visible = false;
                    }

                    foreach (var vout in transaction.Vout)
                    {
                        if (YOutputsPos >= panelTransactionDiagram.Height)
                        {
                            break;
                        }
                        Point startPoint5 = new Point(panelTransactionDiagram.Size.Width - (int)(10 * UIScale), Convert.ToInt32(YOutputsPos));
                        Point endPoint5 = new Point(panelTransactionDiagram.Size.Width - (int)(100 * UIScale), Convert.ToInt32(YOutputsPos));
                        linePoints.Add(startPoint5);
                        linePoints.Add(endPoint5);
                        Point startPoint6 = new Point(panelTransactionDiagram.Size.Width - (int)(100 * UIScale), Convert.ToInt32(YOutputsPos));
                        Point endPoint6 = new Point((panelTransactionDiagram.Size.Width / 2) + (int)(150 * UIScale), panelTransactionDiagram.Size.Height / 2);
                        linePoints.Add(startPoint6);
                        linePoints.Add(endPoint6);
                        YOutputsPos += YOutputsStep;
                    }

                    // Inputs listview
                    listViewTransactionInputs.Invoke((MethodInvoker)delegate
                    {
                        listViewTransactionInputs.Items.Clear(); // remove any data that may be there already
                    });
                    listViewTransactionInputs.GetType().InvokeMember("DoubleBuffered", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.SetProperty, null, listViewTransactionInputs, new object[] { true });

                    // Check if the column header already exists
                    if (listViewTransactionInputs.Columns.Count == 0)
                    {
                        // If not, add the column header
                        listViewTransactionInputs.Invoke((MethodInvoker)delegate
                        {
                            listViewTransactionInputs.Columns.Add(" Address", (int)(225 * UIScale));
                        });
                    }

                    if (listViewTransactionInputs.Columns.Count == 1)
                    {
                        listViewTransactionInputs.Invoke((MethodInvoker)delegate
                        {
                            // If not, add the column header
                            listViewTransactionInputs.Columns.Add("Amount", (int)(120 * UIScale));
                        });
                    }

                    List<TransactionVinPrevout> prevouts = new List<TransactionVinPrevout>();

                    foreach (TransactionVin vin in transaction.Vin)
                    {
                        prevouts.Add(vin.Prevout);
                    }

                    foreach (TransactionVinPrevout prevout in prevouts)
                    {
                        string InputAddress = "";
                        if (prevout != null)
                        {
                            InputAddress = Convert.ToString(prevout.Scriptpubkey_address);
                            ListViewItem item = new ListViewItem(InputAddress); // create new row
                            string InputValue = Convert.ToString(prevout.Value);
                            decimal DecInputValue = ConvertSatsToBitcoin(InputValue);
                            item.SubItems.Add(DecInputValue.ToString());
                            listViewTransactionInputs.Invoke((MethodInvoker)delegate
                            {
                                listViewTransactionInputs.Items.Add(item); // add row
                            });
                        }
                        else
                        {
                            ListViewItem item = new ListViewItem("N/A"); // create new row
                            item.SubItems.Add("N/A");
                            listViewTransactionInputs.Invoke((MethodInvoker)delegate
                            {
                                listViewTransactionInputs.Items.Add(item); // add row
                            });
                        }
                    }
                    // Get the height of each item to set height of whole listview
                    int rowHeight = listViewTransactionInputs.Margin.Vertical + listViewTransactionInputs.Padding.Vertical + listViewTransactionInputs.GetItemRect(0).Height;
                    int itemCount = listViewTransactionInputs.Items.Count; // Get the number of items in the ListBox
                    int listBoxHeight = (itemCount + 2) * rowHeight; // Calculate the height of the ListBox (the extra 2 gives room for the header)

                    listViewTransactionInputs.Height = listBoxHeight; // Set the height of the ListBox
                    panelTransactionInputs.VerticalScroll.Value = 0;
                    panelTransactionInputs.VerticalScroll.Minimum = 0;
                    if (listViewTransactionInputs.Items.Count > 0)
                    {
                        listViewTransactionInputs.Items[0].Selected = true;
                    }

                    // Outputs listview
                    listViewTransactionOutputs.Invoke((MethodInvoker)delegate
                    {
                        listViewTransactionOutputs.Items.Clear(); // remove any data that may be there already
                    });
                    listViewTransactionOutputs.GetType().InvokeMember("DoubleBuffered", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.SetProperty, null, listViewTransactionOutputs, new object[] { true });

                    // Check if the column header already exists
                    if (listViewTransactionOutputs.Columns.Count == 0)
                    {
                        // If not, add the column header
                        listViewTransactionOutputs.Invoke((MethodInvoker)delegate
                        {
                            listViewTransactionOutputs.Columns.Add(" Address", (int)(225 * UIScale));
                        });
                    }

                    if (listViewTransactionOutputs.Columns.Count == 1)
                    {
                        listViewTransactionOutputs.Invoke((MethodInvoker)delegate
                        {
                            // If not, add the column header
                            listViewTransactionOutputs.Columns.Add("Amount", (int)(120 * UIScale));
                        });
                    }

                    List<TransactionVout> vouts = new List<TransactionVout>();

                    foreach (TransactionVout vout in transaction.Vout)
                    {
                        vouts.Add(vout);
                    }

                    foreach (TransactionVout vout in vouts)
                    {
                        string OutputAddress;
                        if (vout.Scriptpubkey_address != "" && vout.Scriptpubkey_address != null)  // display address
                        {
                            OutputAddress = Convert.ToString(vout.Scriptpubkey_address);
                        }
                        else // display OP RETURN after converting hex to ascii
                        {
                            string input = vout.Scriptpubkey_asm;
                            string hex = Regex.Match(input, @"\b([0-9A-Fa-f]{2})+\b").Value;
                            byte[] bytes = Enumerable.Range(0, hex.Length / 2)
                                .Select(x => Convert.ToByte(hex.Substring(x * 2, 2), 16))
                                .ToArray();
                            string ascii = Encoding.ASCII.GetString(bytes);
                            OutputAddress = "OP_RETURN: " + ascii;
                        }

                        ListViewItem item = new ListViewItem(OutputAddress); // create new row
                        string OutputValue = Convert.ToString(vout.Value);
                        decimal DecOutputValue = ConvertSatsToBitcoin(OutputValue);
                        item.SubItems.Add(DecOutputValue.ToString());
                        listViewTransactionOutputs.Invoke((MethodInvoker)delegate
                        {
                            listViewTransactionOutputs.Items.Add(item); // add row
                        });
                    }
                    int rowHeightout = listViewTransactionOutputs.Margin.Vertical + listViewTransactionOutputs.Padding.Vertical + listViewTransactionOutputs.GetItemRect(0).Height; // Get the height of each item to set height of whole listview
                    int itemCountout = listViewTransactionOutputs.Items.Count; // Get the number of items in the ListBox
                    int listBoxHeightout = (itemCountout + 2) * rowHeightout; // Calculate the height of the ListBox (the extra 2 gives room for the header)

                    listViewTransactionOutputs.Height = listBoxHeightout; // Set the height of the ListBox
                    panelTransactionOutputs.VerticalScroll.Value = 0;
                    panelTransactionOutputs.VerticalScroll.Minimum = 0;

                    if (listViewTransactionOutputs.Items.Count > 0)
                    {
                        listViewTransactionOutputs.Items[0].Selected = true;
                    }
                    // Trigger a repaint of the form
                    this.Invalidate();
                }
                else
                {
                    ToggleLoadingAnimation("disable"); // stop the loading animation
                    DisableEnableTransactionButtons("enable"); // enable buttons after operation is complete
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "GetTransaction");
            }
            panelTransactionHeadline.Visible = true;
            panelTransactionDiagram.Visible = true;
            panel24.Visible = true;
            panel25.Visible = true;
            panel27.Visible = true;
            panel28.Visible = true;
            panel102.Visible = true;
            panelTransactionOutputs.Visible = true;
            panelTransactionInputs.Visible = true;
            btnTransactionInputsUp.Visible = true;
            btnTransactionInputDown.Visible = true;
            btnTransactionOutputsUp.Visible = true;
            btnTransactionOutputsDown.Visible = true;
            listViewTransactionInputs.Visible = true;
            listViewTransactionOutputs.Visible = true;
            btnViewAddressFromTXInput.Visible = true;
            btnViewAddressFromTXOutput.Visible = true;
        }
        #endregion
        #region listview appearance
        //-------------------- AN INPUT ROW HAS BEEN SELECTED --------------------------------------------------
        private void ListViewTransactionInputs_ItemSelectionChanged(object sender, ListViewItemSelectionChangedEventArgs e)
        {
            try
            {
                bool anySelected = false;
                foreach (ListViewItem item in listViewTransactionInputs.Items)
                {
                    if (item != null)
                    {
                        if (item.Selected)
                        {
                            foreach (ListViewItem.ListViewSubItem subItem in item.SubItems)
                            {
                                subItem.ForeColor = MakeColorLighter(tableTextColor, 40);
                            }
                            if (item.SubItems[0].Text != "N/A" && item.SubItems[0].Text != "")
                            {
                                btnViewAddressFromTXInput.Invoke((MethodInvoker)delegate
                                {
                                    btnViewAddressFromTXInput.Visible = true;
                                    btnViewAddressFromTXInput.Location = new Point(item.Position.X + listViewTransactionInputs.Location.X + listViewTransactionInputs.Columns[0].Width - btnViewAddressFromTXInput.Width - (int)(8 * UIScale), item.Position.Y + listViewTransactionInputs.Location.Y);
                                    btnViewAddressFromTXInput.Height = item.Bounds.Height;
                                });
                                anySelected = true;
                            }
                            else
                            {
                                btnViewAddressFromTXInput.Visible = false;
                            }
                        }
                        else
                        {
                            foreach (ListViewItem.ListViewSubItem subItem in item.SubItems)
                            {
                                subItem.ForeColor = tableTextColor;
                            }
                        }
                    }
                }
                btnViewAddressFromTXInput.Visible = anySelected;
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewTransactionInputs_ItemSelectionChanged");
            }
        }

        //-------------------- AN OUTPUT ROW HAS BEEN SELECTED --------------------------------------------------
        private void ListViewTransactionOutputs_ItemSelectionChanged(object sender, ListViewItemSelectionChangedEventArgs e)
        {
            try
            {
                bool anySelected = false;
                foreach (ListViewItem item in listViewTransactionOutputs.Items)
                {
                    if (item != null)
                    {
                        if (item.Selected)
                        {
                            foreach (ListViewItem.ListViewSubItem subItem in item.SubItems)
                            {
                                subItem.ForeColor = MakeColorLighter(tableTextColor, 40);
                            }
                            if (item.SubItems[0].Text != "N/A" && item.SubItems[0].Text != "")
                            {
                                btnViewAddressFromTXOutput.Invoke((MethodInvoker)delegate
                                {
                                    btnViewAddressFromTXOutput.Visible = true;
                                    btnViewAddressFromTXOutput.Location = new Point(item.Position.X + listViewTransactionOutputs.Location.X + listViewTransactionOutputs.Columns[0].Width - btnViewAddressFromTXOutput.Width - (int)(8 * UIScale), item.Position.Y + listViewTransactionOutputs.Location.Y);
                                    btnViewAddressFromTXOutput.Height = item.Bounds.Height;
                                });
                                anySelected = true;
                            }
                            else
                            {
                                btnViewAddressFromTXOutput.Visible = false;
                            }
                        }
                        else
                        {
                            foreach (ListViewItem.ListViewSubItem subItem in item.SubItems)
                            {
                                subItem.ForeColor = tableTextColor;
                            }
                        }
                    }
                }
                btnViewAddressFromTXOutput.Visible = anySelected;
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewTransactionOutputs_ItemSelectionChanged");
            }
        }

        //-------------------- USER TRYING TO CHANGE COLUMN WIDTHS ----------------------------------------------
        private void ListViewTransactionInputs_ColumnWidthChanging(object sender, ColumnWidthChangingEventArgs e)
        {
            try
            {
                if (e.ColumnIndex == 0)
                {
                    if (listViewTransactionInputs.Columns[e.ColumnIndex].Width < (int)(225 * UIScale)) // min width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(225 * UIScale);
                    }
                    if (listViewTransactionInputs.Columns[e.ColumnIndex].Width > (int)(345 * UIScale)) // max width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(345 * UIScale);
                    }
                }
                if (e.ColumnIndex == 1)
                {
                    if (listViewTransactionInputs.Columns[e.ColumnIndex].Width < (int)(120 * UIScale)) // don't allow this one to change
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(120 * UIScale);
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewTransactionInputs_ColumnWidthChanging");
            }
        }

        //-------------------- USER TRYING TO CHANGE COLUMN WIDTHS ----------------------------------------------
        private void ListViewTransactionOutputs_ColumnWidthChanging(object sender, ColumnWidthChangingEventArgs e)
        {
            try
            {
                if (e.ColumnIndex == 0)
                {
                    if (listViewTransactionOutputs.Columns[e.ColumnIndex].Width < (int)(225 * UIScale)) // min width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(225 * UIScale);
                    }
                    if (listViewTransactionOutputs.Columns[e.ColumnIndex].Width > (int)(345 * UIScale)) // max width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(345 * UIScale);
                    }
                }
                if (e.ColumnIndex == 1)
                {
                    if (listViewTransactionOutputs.Columns[e.ColumnIndex].Width < (int)(120 * UIScale)) // don't allow this one to change
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(120 * UIScale);
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewTransactionOutputs_ColumnWidthChanging");
            }
        }

        //-------------------- FORMAT DATA WHILE DRAWING LISTVIEW ----------------------------------------------
        private void ListViewTransactionInputs_DrawSubItem(object sender, DrawListViewSubItemEventArgs e)
        {
            try
            {
                var text = e.SubItem.Text;
                var font = listViewTransactionInputs.Font;
                var columnWidth = e.Header.Width;
                var textWidth = TextRenderer.MeasureText(text, font).Width;
                if (textWidth > columnWidth)
                {
                    // Truncate the text
                    var maxText = text.Substring(0, text.Length * columnWidth / textWidth - 3) + "...";
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);
                    // Clear the background
                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewTransactionInputs.BackColor), bounds);
                    }
                    TextRenderer.DrawText(e.Graphics, maxText, font, bounds, e.Item.ForeColor, TextFormatFlags.EndEllipsis | TextFormatFlags.Left);
                }
                else if (textWidth < columnWidth)
                {
                    // Clear the background
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);

                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewTransactionInputs.BackColor), bounds);
                    }
                    TextRenderer.DrawText(e.Graphics, text, font, bounds, e.SubItem.ForeColor, TextFormatFlags.Left);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewTransactionInputs_DrawSubItem");
            }
        }

        //-------------------- FORMAT DATA WHILE DRAWING LISTVIEW ----------------------------------------------
        private void ListViewTransactionOutputs_DrawSubItem(object sender, DrawListViewSubItemEventArgs e)
        {
            try
            {
                var text = e.SubItem.Text;
                var font = listViewTransactionOutputs.Font;
                var columnWidth = e.Header.Width;
                var textWidth = TextRenderer.MeasureText(text, font).Width;
                if (textWidth > columnWidth)
                {
                    // Truncate the text
                    var maxText = text.Substring(0, text.Length * columnWidth / textWidth - 3) + "...";
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);
                    // Clear the background
                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewTransactionOutputs.BackColor), bounds);
                    }
                    TextRenderer.DrawText(e.Graphics, maxText, font, bounds, e.Item.ForeColor, TextFormatFlags.EndEllipsis | TextFormatFlags.Left);
                }
                else if (textWidth < columnWidth)
                {
                    // Clear the background
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);

                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewTransactionOutputs.BackColor), bounds);
                    }

                    TextRenderer.DrawText(e.Graphics, text, font, bounds, e.SubItem.ForeColor, TextFormatFlags.Left);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewTransactionOutputs_DrawSubItem");
            }
        }
        #endregion
        #region listview scrolling
        //-------------------- SCROLL-DOWN INPUTS CLICKED -------------------------------------------------------
        private void BtnTransactionInputsDown_Click(object sender, EventArgs e)
        {
            try
            {
                if (panelTransactionInputs.VerticalScroll.Value < panelTransactionInputs.VerticalScroll.Maximum)
                {
                    panelTransactionInputs.VerticalScroll.Value++;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnTransactionInputsDown_Click");
            }
        }

        //-------------------- SCROLL-DOWN OUTPUTS CLICKED -----------------------------------------------------
        private void BtnTransactionOutputsDown_Click(object sender, EventArgs e)
        {
            try
            {
                if (panelTransactionOutputs.VerticalScroll.Value < panelTransactionOutputs.VerticalScroll.Maximum)
                {
                    panelTransactionOutputs.VerticalScroll.Value++;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnTransactionOutputsDown_Click");
            }
        }

        //-------------------- SCROLL-DOWN MOUSE-DOWN --------------------------------------------------------
        private void BtnTransactionInputsDown_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isInputButtonPressed = true;
                InputDownButtonPressed = true;
                TXInScrollTimer.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnTransactionInputsDown_MouseDown");
            }
        }

        private void BtnTransactionOutputsDown_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                //scrollPosition = new Point(panel26.HorizontalScroll.Value, panel26.VerticalScroll.Value);
                isOutputButtonPressed = true;
                OutputDownButtonPressed = true;
                TXOutScrollTimer.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnTransactionOutputsDown_MouseDown");
            }
        }

        //-------------------- SCROLL-DOWN MOUSE-UP-- --------------------------------------------------------
        private void BtnTransactionInputsDown_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isInputButtonPressed = false;
                InputDownButtonPressed = false;
                TXInScrollTimer.Stop();
                TXInScrollTimer.Interval = 50; // reset the interval to its original value
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnTransactionInputsDown_MouseUp");
            }
        }

        private void BtnTransactionOutputsDown_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isOutputButtonPressed = false;
                OutputDownButtonPressed = false;
                TXOutScrollTimer.Stop();
                TXOutScrollTimer.Interval = 50; // reset the interval to its original value
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnTransactionOutputsDown_MouseUp");
            }
        }

        //-------------------- HANDLE THE ACTUAL SCROLLING --------------------------------------------------
        private void TXInTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                if (isInputButtonPressed)
                {
                    if (InputDownButtonPressed)
                    {
                        if (panelTransactionInputs.VerticalScroll.Value < panelTransactionInputs.VerticalScroll.Maximum - 5)
                        {
                            panelTransactionInputs.VerticalScroll.Value = panelTransactionInputs.VerticalScroll.Value + 5;
                            TransactionInputsScrollPosition = panelTransactionInputs.VerticalScroll.Value; // store the scroll position to reposition on the paint event
                        }
                        TXInScrollTimer.Interval = 1; // set a faster interval while the button is held down
                    }
                    else if (InputUpButtonPressed)
                    {
                        if (panelTransactionInputs.VerticalScroll.Value > panelTransactionInputs.VerticalScroll.Minimum + 5)
                        {
                            panelTransactionInputs.VerticalScroll.Value = panelTransactionInputs.VerticalScroll.Value - 5;
                            TransactionInputsScrollPosition = panelTransactionInputs.VerticalScroll.Value; // store the scroll position to reposition on the paint event
                        }
                        TXInScrollTimer.Interval = 1; // set a faster interval while the button is held down
                    }
                }
                else
                {
                    TXInScrollTimer.Stop();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TXInTimer_Tick");
            }
        }

        private void TXOutTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                if (isOutputButtonPressed)
                {
                    if (OutputDownButtonPressed)
                    {
                        if (panelTransactionOutputs.VerticalScroll.Value < panelTransactionOutputs.VerticalScroll.Maximum - 5)
                        {
                            panelTransactionOutputs.VerticalScroll.Value = panelTransactionOutputs.VerticalScroll.Value + 5;
                            TransactionOutputsScrollPosition = panelTransactionOutputs.VerticalScroll.Value; // store the scroll position to reposition on the paint event
                        }
                        TXOutScrollTimer.Interval = 1; // set a faster interval while the button is held down
                    }
                    else if (OutputUpButtonPressed)
                    {
                        if (panelTransactionOutputs.VerticalScroll.Value > panelTransactionOutputs.VerticalScroll.Minimum + 5)
                        {
                            panelTransactionOutputs.VerticalScroll.Value = panelTransactionOutputs.VerticalScroll.Value - 5;
                            TransactionOutputsScrollPosition = panelTransactionOutputs.VerticalScroll.Value; // store the scroll position to reposition on the paint event
                        }
                        TXOutScrollTimer.Interval = 1; // set a faster interval while the button is held down
                    }
                }
                else
                {
                    TXOutScrollTimer.Stop();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TXOutTimer_Tick");
            }
        }

        //-------------------- SCROLL-UP INPUTS CLICKED -------------------------------------------------------
        private void BtnTransactionInputsUp_Click(object sender, EventArgs e)
        {
            try
            {
                if (panelTransactionInputs.VerticalScroll.Value > panelTransactionInputs.VerticalScroll.Minimum)
                {
                    panelTransactionInputs.VerticalScroll.Value--;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnTransactionInputsUp_Click");
            }
        }

        //-------------------- SCROLL-UP OUTPUTS CLICKED -------------------------------------------------------
        private void BtnTransactionOutputsUp_Click(object sender, EventArgs e)
        {
            try
            {
                if (panelTransactionOutputs.VerticalScroll.Value > panelTransactionOutputs.VerticalScroll.Minimum)
                {
                    panelTransactionOutputs.VerticalScroll.Value--;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnTransactionOutputsUp_Click");
            }
        }

        //-------------------- SCROLL-UP MOUSE-DOWN -------------------------------------------------------
        private void BtnTransactionInputsUp_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isInputButtonPressed = true;
                InputUpButtonPressed = true;
                TXInScrollTimer.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnTransactionInputsUp_MouseDown");
            }
        }

        private void BtnTransactionOutputsUp_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isOutputButtonPressed = true;
                OutputUpButtonPressed = true;
                TXOutScrollTimer.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnTransactionOutputsUp_MouseDown");
            }
        }

        //-------------------- SCROLL-UP MOUSE-UP -------------------------------------------------------
        private void BtnTransactionInputsUp_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isInputButtonPressed = false;
                InputUpButtonPressed = false;
                TXInScrollTimer.Stop();
                TXInScrollTimer.Interval = 50; // reset the interval to its original value
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnTransactionInputsUp_MouseUp");
            }
        }

        private void BtnTransactionOutputsUp_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isOutputButtonPressed = false;
                OutputUpButtonPressed = false;
                TXOutScrollTimer.Stop();
                TXOutScrollTimer.Interval = 50; // reset the interval to its original value
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnTransactionOutputsUp_MouseUp");
            }
        }

        //-------------------- PREVENT LIST-VIEW FROM JUMPING TO TOP WHEN PAINTED ------------------------
        private void PanelTransactionInputs_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                if (btnViewAddressFromTXInput.Visible) // user must have clicked a row given that the button is visible
                {
                    panelTransactionInputs.VerticalScroll.Value = TransactionInputsScrollPosition; //return the scroll position to where it was when clicked (it jumps to top otherwise)
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "PanelTransactionInputs_Paint");
            }
        }

        private void PanelTransactionOutputs_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                if (btnViewAddressFromTXOutput.Visible) // user must have clicked a row given that the button is visible
                {
                    panelTransactionOutputs.VerticalScroll.Value = TransactionOutputsScrollPosition; //return the scroll position to where it was when clicked (it jumps to top otherwise)
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "PanelTransactionOutputs_Paint");
            }
        }

        #endregion
        #region draw transaction diagram
        //-------DRAW LINES ON TRANSACTION DIAGRAM FROM PREVIOUSLY STORED LIST-----------------------------------
        private void PanelTransactionDiagram_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                Pen pen = new Pen(linesColor);

                // Iterate over the stored list of points and draw lines between them
                for (int i = 0; i < linePoints.Count - 1; i += 2)
                {
                    e.Graphics.DrawLine(pen, linePoints[i], linePoints[i + 1]);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "PanelTransactionDiagram_Paint");
            }
        }
        #endregion
        #region navigate from listview to address screen
        //-------------------- VIEW ADDRESS ------------------------------------------------------------
        private void BtnViewAddressFromTXInput_Click(object sender, EventArgs e)
        {
            try
            {
                CheckNetworkStatus();
                // Get the selected item
                ListViewItem selectedItem = listViewTransactionInputs.SelectedItems[0];
                // Get the first subitem in the selected item 
                string SelectedAddress = selectedItem.SubItems[0].Text;
                textboxSubmittedAddress.Invoke((MethodInvoker)delegate
                {
                    textboxSubmittedAddress.Text = SelectedAddress; // copy address to address screen
                });
                //show the address screen
                BtnMenuAddress_Click(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnViewAddressFromTXInput_Click");
            }
        }

        private void BtnViewAddressFromTXOutput_Click(object sender, EventArgs e)
        {
            try
            {
                CheckNetworkStatus();
                // Get the selected item
                ListViewItem selectedItem = listViewTransactionOutputs.SelectedItems[0];
                // Get the first subitem in the selected item 
                string SelectedAddress = selectedItem.SubItems[0].Text;
                textboxSubmittedAddress.Invoke((MethodInvoker)delegate
                {
                    textboxSubmittedAddress.Text = SelectedAddress; // copy address to address screen
                });
                //show the address screen
                BtnMenuAddress_Click(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnViewAddressFromTXOutput_Click");
            }
        }
        #endregion
        #region enable/disable buttons
        private void DisableEnableTransactionButtons(string enableOrDisableTransactionButtons)
        {
            try
            {
                if (enableOrDisableTransactionButtons == "disable")
                {
                    // get current state of buttons before disabling them
                    btnTransactionInputsUpWasEnabled = btnTransactionInputsUp.Enabled;
                    btnTransactionInputDownWasEnabled = btnTransactionInputDown.Enabled;
                    btnTransactionOutputsUpWasEnabled = btnTransactionOutputsUp.Enabled;
                    btnTransactionOutputsDownWasEnabled = btnTransactionOutputsDown.Enabled;
                    btnViewAddressFromTXInputWasEnabled = btnViewAddressFromTXInput.Enabled;
                    btnViewAddressFromTXOutputWasEnabled = btnViewAddressFromTXOutput.Enabled;

                    //disable them all
                    btnTransactionInputsUp.Enabled = false;
                    btnTransactionInputDown.Enabled = false;
                    btnTransactionOutputsUp.Enabled = false;
                    btnTransactionOutputsDown.Enabled = false;
                    btnViewAddressFromTXInput.Enabled = false;
                    btnViewAddressFromTXOutput.Enabled = false;
                }
                else
                {
                    // use previously saved states to reinstate buttons
                    btnTransactionInputsUp.Enabled = btnTransactionInputsUpWasEnabled;
                    btnTransactionInputDown.Enabled = btnTransactionInputDownWasEnabled;
                    btnTransactionOutputsUp.Enabled = btnTransactionOutputsUpWasEnabled;
                    btnTransactionOutputsDown.Enabled = btnTransactionOutputsDownWasEnabled;
                    btnViewAddressFromTXInput.Enabled = btnViewAddressFromTXInputWasEnabled;
                    btnViewAddressFromTXOutput.Enabled = btnViewAddressFromTXOutputWasEnabled;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "DisableEnableTransactionButtons");
            }
        }
        #endregion
        #endregion

        #region ⚡BLOCK LIST SCREEN⚡
        #region user input
        private void BtnNumericUpDownBlockHeightToStartListFromUp_Click(object sender, EventArgs e)
        {
            try
            {
                if (numericUpDownBlockHeightToStartListFrom.Value < Convert.ToDecimal(lblBlockNumber.Text))
                {
                    numericUpDownBlockHeightToStartListFrom.Value++;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnNumericUpDownBlockHeightToStartListFromUp_Click");
            }
        }

        private void BtnNumericUpDownBlockHeightToStartListFromDown_Click(object sender, EventArgs e)
        {
            try
            { 
            if (numericUpDownBlockHeightToStartListFrom.Value > 0)
            {
                numericUpDownBlockHeightToStartListFrom.Value--;
            }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnNumericUpDownBlockHeightToStartListFromDown_Click");
            }
        }

        private void BtnLookUpBlockList_Click(object sender, EventArgs e)
        {
            try
            { 
            LookupBlockList();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnLookUpBlockList_Click");
            }
        }

        private void NumericUpDownBlockHeightToStartListFrom_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                // Handle enter
                if (e.KeyChar == '\r')
                {
                    // Submit button was pressed
                    LookupBlockList();
                    e.Handled = true;
                    return;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "numericUpDownBlockHeightToStartListFrom_KeyPress");
            }
        }

        #region continuous increment/decrement of numericUpDown controls when mouse button held down
        private void BtnNumericUpDownBlockHeightToStartListFromUp_MouseDown(object sender, MouseEventArgs e)
        {
            isBlockHeightToStartFromUpHeldDown = true;
            timerNumUpDownContinuous.Enabled = true;
            timerNumUpDownContinuous.Start();
        }

        private void BtnNumericUpDownBlockHeightToStartListFromUp_MouseUp(object sender, MouseEventArgs e)
        {
            isBlockHeightToStartFromUpHeldDown = false;
            timerNumUpDownContinuous.Stop();
            timerNumUpDownContinuous.Enabled = false;
        }

        private void BtnNumericUpDownBlockHeightToStartListFromDown_MouseDown(object sender, MouseEventArgs e)
        {
            isBlockHeightToStartFromDownHeldDown = true;
            timerNumUpDownContinuous.Enabled = true;
            timerNumUpDownContinuous.Start();
        }

        private void BtnNumericUpDownBlockHeightToStartListFromDown_MouseUp(object sender, MouseEventArgs e)
        {
            isBlockHeightToStartFromDownHeldDown = false;
            timerNumUpDownContinuous.Stop();
            timerNumUpDownContinuous.Enabled = false;
        }
        #endregion
        #endregion
        #region set up block list screen
        private async void LookupBlockList()
        {
            try
            {
                btnViewBlockFromBlockList.Visible = false;
                if (int.TryParse(numericUpDownBlockHeightToStartListFrom.Text, out int blocknum)) // check it's numeric
                {
                    var blockNumber = Convert.ToString(numericUpDownBlockHeightToStartListFrom.Text);
                    await GetFifteenBlocksForBlockList(blockNumber);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "LookupBlockList");
            }
        }

        //-------------------- GET A LIST OF FIFTEEN BLOCKS AND DISPLAY THEM ------------------------------------------------
        private async Task GetFifteenBlocksForBlockList(string lastSeenBlockNumber)
        {
            try
            {
                ToggleLoadingAnimation("enable"); // start the loading animation
                DisableEnableBlockListButtons("disable"); // disable buttons during operation

                LightUpNodeLight();
                var blocksJson = await _blockService.GetBlockDataAsync(lastSeenBlockNumber);
                if (!string.IsNullOrEmpty(blocksJson))
                {

                    ToggleLoadingAnimation("disable"); // stop the loading animation
                    DisableEnableBlockListButtons("enable"); // enable buttons after operation is complete

                    var blocks = JsonConvert.DeserializeObject<List<Block>>(blocksJson);
                    List<string> blocklist = blocks.Select(t => t.Height).ToList();

                    // Update lastSeenBlockNumber if this isn't our first fetch of blocks to restart from the right place
                    if (blocklist.Count > 0)
                    {
                        lastSeenBlockNumber = blocklist.Last();
                        storedLastSeenBlockNumber = blocklist.Last();
                    }

                    //LIST VIEW
                    listViewBlockList.Invoke((MethodInvoker)delegate
                    {
                        listViewBlockList.Items.Clear(); // remove any data that may be there already
                    });
                    listViewBlockList.GetType().InvokeMember("DoubleBuffered", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.SetProperty, null, listViewBlockList, new object[] { true });

                    // Check if the column header already exists

                    if (listViewBlockList.Columns.Count == 0)
                    {
                        listViewBlockList.Invoke((MethodInvoker)delegate
                        {
                            // If not, add the column header
                            listViewBlockList.Columns.Add("Height", (int)(65 * UIScale));
                        });
                    }

                    if (listViewBlockList.Columns.Count == 1)
                    {
                        // If not, add the column header
                        listViewBlockList.Invoke((MethodInvoker)delegate
                        {
                            listViewBlockList.Columns.Add(" Date / time", (int)(115 * UIScale));
                        });
                    }

                    if (listViewBlockList.Columns.Count == 2)
                    {
                        listViewBlockList.Invoke((MethodInvoker)delegate
                        {
                            // If not, add the column header
                            listViewBlockList.Columns.Add("TX count", (int)(60 * UIScale));
                        });
                    }
                    if (listViewBlockList.Columns.Count == 3)
                    {
                        listViewBlockList.Invoke((MethodInvoker)delegate
                        {
                            // If not, add the column header
                            listViewBlockList.Columns.Add("Size", (int)(50 * UIScale));
                        });
                    }
                    if (listViewBlockList.Columns.Count == 4)
                    {
                        listViewBlockList.Invoke((MethodInvoker)delegate
                        {
                            // If not, add the column header
                            listViewBlockList.Columns.Add("Fee range", (int)(70 * UIScale));
                        });
                    }
                    if (listViewBlockList.Columns.Count == 5)
                    {
                        listViewBlockList.Invoke((MethodInvoker)delegate
                        {
                            // If not, add the column header
                            listViewBlockList.Columns.Add("Med.", (int)(50 * UIScale));
                        });
                    }
                    if (listViewBlockList.Columns.Count == 6)
                    {
                        listViewBlockList.Invoke((MethodInvoker)delegate
                        {
                            // If not, add the column header
                            listViewBlockList.Columns.Add("Reward (BTC)", (int)(91 * UIScale));
                        });
                    }
                    // Add the items to the ListView
                    int counter = 0; // used to count rows in list as they're added
                    string formattedDateTime;
                    foreach (var block in blocks)
                    {
                        formattedDateTime = "00010101-01:01";
                        if (long.TryParse(block.Timestamp, out long unixTimestamp))
                        {
                            DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc).AddSeconds(unixTimestamp).ToLocalTime();
                            formattedDateTime = dateTime.ToString("yyyyMMdd-HH:mm");
                        }
                        //ListViewItem item = new ListViewItem(formattedDateTime); // create new row
                        //item.SubItems.Add(block.Height.ToString());
                        ListViewItem item = new ListViewItem(block.Height); // create new row
                        item.SubItems.Add(formattedDateTime.ToString());
                        item.SubItems.Add(block.Tx_count.ToString());
                        decimal sizeInMB = block.Size;
                        sizeInMB /= 1000000;
                        item.SubItems.Add(sizeInMB.ToString("0.00")); // number of outputs
                        string feerange = Convert.ToString(Convert.ToInt32(block.Extras.FeeRange[0])) + "-" + Convert.ToString(Convert.ToInt32(block.Extras.FeeRange[6]));
                        item.SubItems.Add(feerange.ToString());
                        string medFee = Convert.ToString("~" + Convert.ToInt32(block.Extras.MedianFee));
                        item.SubItems.Add(medFee.ToString());
                        string RewardInSats = Convert.ToString(block.Extras.Reward);
                        decimal RewardInBTC = ConvertSatsToBitcoin(RewardInSats);
                        item.SubItems.Add(RewardInBTC.ToString());
                        listViewBlockList.Invoke((MethodInvoker)delegate
                        {
                            listViewBlockList.Items.Add(item); // add row
                        });

                        counter++; // increment rows for this batch


                        if (blocklist.First() == lblBlockNumber.Text) // We're looking at the most recent blocks 
                        {
                            btnNewer15Blocks.Enabled = false;
                        }
                        else
                        {
                            btnNewer15Blocks.Enabled = true;

                        }

                        if (counter > 1 && blocklist.Last() == "0") // we've reached the Genesis Block (bottom of the list)
                        {
                            btnOlder15Blocks.Enabled = false; // so we won't need this
                        }
                        else
                        {
                            btnOlder15Blocks.Enabled = true;
                        }

                        if (counter == 15) // ListView is full. stop adding rows at this point and pick up from here...
                        {
                            break;
                        }
                    }

                    if (counter > 0)
                    {
                        listViewBlockList.Items[0].Selected = true;
                        if (btnOlder15Blocks.Enabled == true)
                        {
                            btnOlder15Blocks.Focus();
                        }
                        else
                        {
                            btnNewer15Blocks.Focus();
                        }
                        lblBlockListPositionInList.Invoke((MethodInvoker)delegate
                        {
                            lblBlockListPositionInList.Text = "Blocks " + blocklist.Last() + " - " + blocklist.First() + " of " + lblBlockNumber.Text;
                        });
                        label6.Invoke((MethodInvoker)delegate
                        {
                            label6.Text = "Blocks " + blocklist.Last() + " - " + blocklist.First();
                        });
                    }
                    else
                    {
                        lblBlockListPositionInList.Invoke((MethodInvoker)delegate
                        {
                            lblBlockListPositionInList.Text = "No blocks to display";
                        });
                    }
                }
                else
                {
                    ToggleLoadingAnimation("disable"); // stop the loading animation
                    DisableEnableBlockListButtons("enable"); // enable buttons after operation is complete
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "GetFifteenBlocksForBlockList");
            }
        }
        #endregion
        #region prev/next batch of blocks
        //-------------------- GET THE PREVIOUS FIFTEEN BLOCKS --------------------------------------------------------------
        private async void BtnOlder15Blocks_Click(object sender, EventArgs e)
        {
            try
            {
                int blockheight = (Convert.ToInt32(storedLastSeenBlockNumber) - 1);
                string blockNumber = Convert.ToString(blockheight);
                // Get 15 more blocks starting from the current block height minus the number we've already seen
                await GetFifteenBlocksForBlockList(blockNumber);
                btnViewBlockFromBlockList.Visible = false;
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnOlder15Blocks_Click");
            }
        }

        //-------------------- GET THE NEXT FIFTEEN BLOCKS ------------------------------------------------------------------
        private async void BtnNewer15Blocks_Click(object sender, EventArgs e)
        {
            try
            {
                // instead of paging back 29 records from the last seen number, calculate 14 + number of items currently displayed. This ensures that if we're looking at the final page, the previous page looks the same on the way back as it did on the way there.
                int blockheight = (Convert.ToInt32(storedLastSeenBlockNumber) + 14 + listViewBlockList.Items.Count);
                string blockNumber = Convert.ToString(blockheight);
                // Get 15 more blocks starting from the current block height minus the number we've already seen
                await GetFifteenBlocksForBlockList(blockNumber);
                btnViewBlockFromBlockList.Visible = false;
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnNewer15Blocks_Click");
            }
        }
        #endregion
        #region listview appearance
        private void ListViewBlockList_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (listViewBlockList.SelectedItems.Count > 0)
                {
                    Rectangle itemRect = listViewBlockList.GetItemRect(listViewBlockList.SelectedIndices[0]);
                    panel14.Invoke((MethodInvoker)delegate
                    {
                        panel14.Top = itemRect.Top + (int)(8 * UIScale);
                    });
                    panel19.Invoke((MethodInvoker)delegate
                    {
                        panel19.Height = panel17.Top - panel14.Top;
                        panel19.Top = panel14.Top;
                    });
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewBlockList_SelectedIndexChanged");
            }
        }

        //-------------------- USER TRYING TO CHANGE COLUMN WIDTH -----------------------------------------------------------
        private void ListViewBlockList_ColumnWidthChanging(object sender, ColumnWidthChangingEventArgs e)
        {
            try
            {
                if (e.ColumnIndex == 0)
                {
                    if (listViewBlockList.Columns[e.ColumnIndex].Width != (int)(60 * UIScale)) // don't allow this one to change
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(60 * UIScale);
                    }
                }
                if (e.ColumnIndex == 1)
                {
                    if (listViewBlockList.Columns[e.ColumnIndex].Width != (int)(115 * UIScale)) // min width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(115 * UIScale);
                    }
                }
                if (e.ColumnIndex == 2)
                {
                    if (listViewBlockList.Columns[e.ColumnIndex].Width != (int)(60 * UIScale)) // don't allow this one to change
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(60 * UIScale);
                    }
                }
                if (e.ColumnIndex == 3)
                {
                    if (listViewBlockList.Columns[e.ColumnIndex].Width != (int)(50 * UIScale)) // don't allow this one to change
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(50 * UIScale);
                    }
                }
                if (e.ColumnIndex == 4)
                {
                    if (listViewBlockList.Columns[e.ColumnIndex].Width != (int)(75 * UIScale)) // don't allow this one to change
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(75 * UIScale);
                    }
                }
                if (e.ColumnIndex == 5)
                {
                    if (listViewBlockList.Columns[e.ColumnIndex].Width != (int)(50 * UIScale)) // don't allow this one to change
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(50 * UIScale);
                    }
                }
                if (e.ColumnIndex == 6)
                {
                    if (listViewBlockList.Columns[e.ColumnIndex].Width != (int)(91 * UIScale)) // don't allow this one to change
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(91 * UIScale);
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewBlockList_ColumnWidthChanging");
            }
        }

        //---------------------- FORMAT THE DATA IN THE LISTVIEW ------------------------------------------------------------
        private void ListViewBlockList_DrawSubItem(object sender, DrawListViewSubItemEventArgs e)
        {
            try
            {
                var text = e.SubItem.Text;

                if (text[0] == '+') // if the string is a change to an amount and positive
                {
                    e.SubItem.ForeColor = Color.OliveDrab; // make it green
                }
                else
                if (text[0] == '-') // if the string is a change to an amount and negative
                {
                    e.SubItem.ForeColor = Color.IndianRed; // make it red
                }

                var font = listViewBlockList.Font;
                var columnWidth = e.Header.Width;
                var textWidth = TextRenderer.MeasureText(text, font).Width;
                if (textWidth > columnWidth)
                {
                    // Truncate the text
                    var maxText = text.Substring(0, text.Length * columnWidth / textWidth - 3) + "...";
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);
                    // Clear the background
                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                        TextRenderer.DrawText(e.Graphics, text, font, bounds, MakeColorLighter(e.SubItem.ForeColor, 40), TextFormatFlags.Left);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewBlockList.BackColor), bounds);
                        TextRenderer.DrawText(e.Graphics, text, font, bounds, e.SubItem.ForeColor, TextFormatFlags.Left);
                    }
                    TextRenderer.DrawText(e.Graphics, maxText, font, bounds, e.Item.ForeColor, TextFormatFlags.EndEllipsis | TextFormatFlags.Left);
                }
                else if (textWidth < columnWidth)
                {
                    // Clear the background
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);

                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                        TextRenderer.DrawText(e.Graphics, text, font, bounds, MakeColorLighter(e.SubItem.ForeColor, 40), TextFormatFlags.Left);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewBlockList.BackColor), bounds);
                        TextRenderer.DrawText(e.Graphics, text, font, bounds, e.SubItem.ForeColor, TextFormatFlags.Left);
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewBlockList_DrawSubItem");
            }
        }
        #endregion
        #region navigate from listview to block screen
        //-------------------- VIEW INDIVIDUAL BLOCK ------------------------------------------------------------------------
        private void BtnViewBlockFromBlockList_Click(object sender, EventArgs e)
        {
            try
            {
                CheckNetworkStatus();
                // Get the selected item
                ListViewItem selectedItem = listViewBlockList.SelectedItems[0];
                if (selectedItem != null)
                {
                    string submittedBlockNumber = selectedItem.SubItems[0].Text;
                    numericUpDownSubmittedBlockNumber.Invoke((MethodInvoker)delegate
                    {
                        numericUpDownSubmittedBlockNumber.Text = submittedBlockNumber; // copy block number to block screen
                    });
                    LookupBlock();
                    //show the block screen
                    BtnMenuBlock_Click(sender, e);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnViewBlockFromBlockList_Click");
            }
        }
        #endregion
        #region detail selected block row
        //-------------------- A ROW HAS BEEN CLICKED ON BLOCKLIST ----------------------------------------------------------
        private async void ListViewBlockList_ItemSelectionChanged(object sender, ListViewItemSelectionChangedEventArgs e)
        {
            try
            {
                bool anySelected = false;
                foreach (ListViewItem item in listViewBlockList.Items)
                {
                    if (item != null)
                    {
                        if (item.Selected)
                        {
                            btnViewBlockFromBlockList.Enabled = true;
                            foreach (ListViewItem.ListViewSubItem subItem in item.SubItems)
                            {
                                subItem.ForeColor = MakeColorLighter(tableTextColor, 20);
                            }
                            anySelected = true;
                            btnViewBlockFromBlockList.Invoke((MethodInvoker)delegate
                            {
                                btnViewBlockFromBlockList.Location = new Point(item.Position.X + listViewBlockList.Location.X + listViewBlockList.Columns[0].Width  - btnViewBlockFromBlockList.Width - (int)(3 * UIScale), item.Position.Y + listViewBlockList.Location.Y);
                                btnViewBlockFromBlockList.Height = item.Bounds.Height;
                            });
                            // display block hash
                            using (WebClient client = new WebClient())
                            {
                                LightUpNodeLight();
                                string BlockHashURL = NodeURL + "block-height/" + item.SubItems[0].Text;
                                string BlockHash = client.DownloadString(BlockHashURL); // get hash of provided block
                                if (!string.IsNullOrEmpty(BlockHash))
                                {
                                    lblBlockListBlockHash.Invoke((MethodInvoker)delegate
                                    {
                                        lblBlockListBlockHash.Text = BlockHash;
                                        lblBlockListBlockHash.Location = new Point(label90.Location.X + label90.Width, label90.Location.Y + (int)(2 * UIScale));
                                    });
                                }
                            }
                            string blockNumber = item.SubItems[0].Text;
                            ToggleLoadingAnimation("enable"); // start the loading animation
                            DisableEnableBlockListButtons("disable"); // disable buttons during operation
                            LightUpNodeLight();
                            var blocksJson = await _blockService.GetBlockDataAsync(blockNumber);
                            if (!string.IsNullOrEmpty(blocksJson))
                            {
                                ToggleLoadingAnimation("disable"); // stop the loading animation
                                DisableEnableBlockListButtons("enable"); // enable buttons after operation is complete
                                var blocks = JsonConvert.DeserializeObject<List<Block>>(blocksJson);
                                List<string> blocklist = blocks.Select(t => t.Height).ToList();
                                lblBlockListBlockTime.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListBlockTime.Text = DateTimeOffset.FromUnixTimeSeconds(long.Parse(blocks[0].Timestamp)).ToString("yyyy-MM-dd HH:mm");
                                    lblBlockListBlockTime.Location = new Point(label91.Location.X + label91.Width, label91.Location.Y + (int)(2 * UIScale));
                                });
                                long sizeInBytes = blocks[0].Size;
                                string sizeString = ""; // convert display to bytes/kb/mb accordingly
                                if (sizeInBytes < 1000)
                                {
                                    sizeString = $"{sizeInBytes} bytes";
                                }
                                else if (sizeInBytes < 1000 * 1000)
                                {
                                    double sizeInKB = (double)sizeInBytes / 1000;
                                    sizeString = $"{sizeInKB:N2} KB";
                                }
                                else
                                {
                                    double sizeInMB = (double)sizeInBytes / (1000 * 1000);
                                    sizeString = $"{sizeInMB:N2} MB";
                                }
                                lblBlockListBlockSize.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListBlockSize.Text = sizeString;
                                    lblBlockListBlockSize.Location = new Point(label105.Location.X + label105.Width, label105.Location.Y + (int)(2 * UIScale));
                                });
                                string strWeight = Convert.ToString(blocks[0].Weight);

                                if (decimal.TryParse(strWeight, out decimal decWeight))
                                {
                                    decWeight /= 1000000m; // convert to MWU
                                    string strFormattedWeight = decWeight.ToString("N2"); // Display to 2 decimal places
                                    lblBlockListBlockWeight.Invoke((MethodInvoker)delegate
                                    {
                                        lblBlockListBlockWeight.Text = strFormattedWeight;
                                        lblBlockListBlockWeight.Location = new Point(label103.Location.X + label103.Width, label103.Location.Y + (int)(2 * UIScale));
                                    });
                                }

                                if (long.TryParse(blocks[0].Nonce, out long nonceLong))
                                {
                                    lblBlockListNonce.Invoke((MethodInvoker)delegate
                                    {
                                        lblBlockListNonce.Text = "0x" + nonceLong.ToString("X");
                                        lblBlockListNonce.Location = new Point(label24.Location.X + label24.Width, label24.Location.Y + (int)(2 * UIScale));
                                    });
                                }
                                lblBlockListMiner.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListMiner.Text = Convert.ToString(blocks[0].Extras.Pool.Name);
                                    lblBlockListMiner.Location = new Point(label95.Location.X + label95.Width, label95.Location.Y + (int)(2 * UIScale));
                                });
                                lblBlockListTransactionCount.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListTransactionCount.Text = Convert.ToString(blocks[0].Tx_count);
                                    lblBlockListTransactionCount.Location = new Point(label99.Location.X + label99.Width, label99.Location.Y + (int)(2 * UIScale));
                                });
                                string TotalBlockFees = Convert.ToString(blocks[0].Extras.TotalFees);
                                TotalBlockFees = Convert.ToString(ConvertSatsToBitcoin(TotalBlockFees));
                                lblBlockListTotalFees.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListTotalFees.Text = TotalBlockFees;
                                    lblBlockListTotalFees.Location = new Point(label88.Location.X + label88.Width, label88.Location.Y + (int)(2 * UIScale));
                                });
                                string Reward = Convert.ToString(blocks[0].Extras.Reward);
                                lblBlockListReward.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListReward.Text = Convert.ToString(ConvertSatsToBitcoin(Reward));
                                    lblBlockListReward.Location = new Point(label101.Location.X + label101.Width, label101.Location.Y + (int)(2 * UIScale));
                                });
                                lblBlockListBlockFeeRangeAndMedianFee.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListBlockFeeRangeAndMedianFee.Text = Convert.ToString(Convert.ToInt32(blocks[0].Extras.FeeRange[0])) + "-" + Convert.ToString(Convert.ToInt32(blocks[0].Extras.FeeRange[6])) + " / " + Convert.ToString(Convert.ToInt32(blocks[0].Extras.MedianFee));
                                    lblBlockListBlockFeeRangeAndMedianFee.Location = new Point(label93.Location.X + label93.Width, label93.Location.Y + (int)(2 * UIScale));
                                });
                                lblBlockListAverageFee.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListAverageFee.Text = Convert.ToString(blocks[0].Extras.AvgFee);
                                    lblBlockListAverageFee.Location = new Point(label97.Location.X + label97.Width, label97.Location.Y + (int)(2 * UIScale));
                                });
                                lblBlockListTotalInputs.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListTotalInputs.Text = Convert.ToString(blocks[0].Extras.TotalInputs);
                                    lblBlockListTotalInputs.Location = new Point(label89.Location.X + label89.Width, label89.Location.Y + (int)(2 * UIScale));
                                });
                                lblBlockListTotalOutputs.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListTotalOutputs.Text = Convert.ToString(blocks[0].Extras.TotalOutputs);
                                    lblBlockListTotalOutputs.Location = new Point(label94.Location.X + label94.Width, label94.Location.Y + (int)(2 * UIScale));
                                });
                                if (double.TryParse(blocks[0].Extras.AvgTxSize, out double avgTxSize))
                                {
                                    lblBlockListAverageTransactionSize.Invoke((MethodInvoker)delegate
                                    {
                                        lblBlockListAverageTransactionSize.Text = avgTxSize.ToString("F2");
                                        lblBlockListAverageTransactionSize.Location = new Point(label92.Location.X + label92.Width, label92.Location.Y + (int)(2 * UIScale));
                                    });
                                }
                                lblBlockListVersion.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListVersion.Text = Convert.ToString(blocks[0].Version);
                                    lblBlockListVersion.Location = new Point(label96.Location.X + label96.Width, label96.Location.Y + (int)(2 * UIScale));
                                });
                                lblBlockListBlockHeight.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListBlockHeight.Text = "Block height: " + Convert.ToString(blocks[0].Height);
                                });
                                lblBlockListPoolRanking.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListPoolRanking.Location = new Point(lblBlockListMiner.Location.X + lblBlockListMiner.Width, lblBlockListPoolRanking.Location.Y);
                                });
                                lblBlockListFeeChart.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListFeeChart.Location = new Point(lblBlockListTotalFees.Location.X + lblBlockListTotalFees.Width, lblBlockListFeeChart.Location.Y);
                                });
                                lblBlockListRewardChart.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListRewardChart.Location = new Point(lblBlockListReward.Location.X + lblBlockListReward.Width, lblBlockListRewardChart.Location.Y);
                                });
                                lblBlockListFeeRangeChart.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListFeeRangeChart.Location = new Point(lblBlockListBlockFeeRangeAndMedianFee.Location.X + lblBlockListBlockFeeRangeAndMedianFee.Width, lblBlockListFeeRangeChart.Location.Y);
                                });
                                lblBlockListBlockSizeChart.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockListBlockSizeChart.Location = new Point(lblBlockListBlockSize.Location.X + lblBlockListBlockSize.Width, lblBlockListBlockSizeChart.Location.Y);
                                });
                            }
                            else
                            {
                                ToggleLoadingAnimation("disable"); // stop the loading animation
                                DisableEnableBlockListButtons("enable"); // enable buttons after operation is complete
                            }
                        }
                        else
                        {
                            foreach (ListViewItem.ListViewSubItem subItem in item.SubItems)
                            {
                                subItem.ForeColor = tableTextColor;
                            }
                        }
                    }
                }
                btnViewBlockFromBlockList.Visible = anySelected;
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewBlockList_ItemSelectionChanged");
            }
        }
        #endregion
        #region chart icon clicks
        //---------------------- VIEW CHARTS --------------------------------------------------------------------------------
        private void PictureBoxBlockListDifficultyChart_Click(object sender, EventArgs e)
        {
            try
            {
                BtnChartDifficulty_Click(sender, e);
                BtnMenuCharts_Click(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxBlockListDifficultyChart_Click");
            }
        }

        private void PictureBoxBlockListHashrateChart_Click(object sender, EventArgs e)
        {
            try
            {
                BtnChartHashrate_Click(sender, e);
                BtnMenuCharts_Click(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxBlockListHashrateChart_Click");
            }
        }

        private void PictureBoxBlockListBlockSizeChart_Click(object sender, EventArgs e)
        {
            try
            {
                BtnChartBlockSize_Click(sender, e);
                BtnMenuCharts_Click(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxBlockListBlockSizeChart_Click");
            }
        }

        private void PictureBoxBlockListPoolRanking_Click(object sender, EventArgs e)
        {
            try
            {
                BtnChartPoolsRanking_Click(sender, e);
                BtnMenuCharts_Click(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxBlockListPoolRanking_Click");
            }
        }

        private void PictureBoxBlockListFeeChart_Click(object sender, EventArgs e)
        {
            try
            {
                BtnChartBlockFees_Click(sender, e);
                BtnMenuCharts_Click(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxBlockListFeeChart_Click");
            }
        }

        private void PictureBoxBlockListRewardChart_Click(object sender, EventArgs e)
        {
            try
            {
                BtnChartReward_Click(sender, e);
                BtnMenuCharts_Click(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxBlockListRewardChart_Click");
            }
        }

        private void PictureBoxBlockListFeeRangeChart_Click(object sender, EventArgs e)
        {
            try
            {
                BtnChartFeeRates_Click(sender, e);
                BtnMenuCharts_Click(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxBlockListFeeRangeChart_Click");
            }
        }

        private void PictureBoxBlockListFeeChart2_Click(object sender, EventArgs e)
        {
            try
            {
                BtnChartBlockFees_Click(sender, e);
                BtnMenuCharts_Click(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxBlockListFeeChart2_Click");
            }
        }

        private void PictureBoxBlockListFeeRangeChart2_Click(object sender, EventArgs e)
        {
            try
            {
                BtnChartFeeRates_Click(sender, e);
                BtnMenuCharts_Click(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxBlockListFeeRangeChart2_Click");
            }
        }
        #endregion
        #region disable/enable buttons
        private void DisableEnableBlockListButtons(string enableOrDisableBlockListButtons)
        {
            try
            {
                if (!dontDisableButtons)
                {
                    if (enableOrDisableBlockListButtons == "disable")
                    {
                        // get current state of buttons before disabling them
                        btnViewBlockFromBlockListWasEnabled = btnViewBlockFromBlockList.Enabled;
                        btnNewer15BlocksWasEnabled = btnNewer15Blocks.Enabled;
                        btnOlder15BlocksWasEnabled = btnOlder15Blocks.Enabled;
                        numericUpDownBlockHeightToStartListFromWasEnabled = numericUpDownBlockHeightToStartListFrom.Enabled;
                        btnNumericUpDownBlockHeightToStartListFromUpWasEnabled = btnNumericUpDownBlockHeightToStartListFromUp.Enabled;
                        btnNumericUpDownBlockHeightToStartListFromDownWasEnabled = btnNumericUpDownBlockHeightToStartListFromDown.Enabled;
                        btnLookUpBlockListWasEnabled = btnLookUpBlockList.Enabled;

                        //disable them all
                        btnViewBlockFromBlockList.Enabled = false;
                        btnNewer15Blocks.Enabled = false;
                        btnOlder15Blocks.Enabled = false;
                        numericUpDownBlockHeightToStartListFrom.Enabled = false;
                        btnNumericUpDownBlockHeightToStartListFromUp.Enabled = false;
                        btnNumericUpDownBlockHeightToStartListFromDown.Enabled = false;
                        btnLookUpBlockList.Enabled = false;
                    }
                    else
                    {
                        // use previously saved states to reinstate buttons
                        btnViewBlockFromBlockList.Enabled = btnViewBlockFromBlockListWasEnabled;
                        btnNewer15Blocks.Enabled = btnNewer15BlocksWasEnabled;
                        btnOlder15Blocks.Enabled = btnOlder15BlocksWasEnabled;
                        numericUpDownBlockHeightToStartListFrom.Enabled = numericUpDownBlockHeightToStartListFromWasEnabled;
                        btnNumericUpDownBlockHeightToStartListFromUp.Enabled = btnNumericUpDownBlockHeightToStartListFromUpWasEnabled;
                        btnNumericUpDownBlockHeightToStartListFromDown.Enabled = btnNumericUpDownBlockHeightToStartListFromDownWasEnabled;
                        btnLookUpBlockList.Enabled = btnLookUpBlockListWasEnabled;
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "DisableEnableBlockListButtons");
            }
        }
        #endregion
        #endregion

        #region ⚡XPUB SCREEN⚡
        #region user input & validation

        //-------------------- VALIDATE AND LOOK UP XPUB --------------------------------------------------------------------
        private void TextBoxSubmittedXpub_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (e.KeyChar == '\r')
                {
                    // Submit button was pressed
                    if (xpubValid)
                    {
                        LookupXpub();
                        e.Handled = true;
                        return;
                    }
                    else
                    {
                        return;
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxSubmittedXpub_KeyPress");
            }
        }

        private void TextBoxSubmittedXpub_TextChanged(object sender, EventArgs e)
        {
            try
            {
                xpubValid = false;
                progressBarCheckAllAddressTypes.Visible = false;
                progressBarCheckEachAddressType.Visible = false;
                lblCheckAllAddressTypesCount.Visible = false;
                lblCheckEachAddressTypeCount.Visible = false;
                panelXpubContainer.Visible = false;
                panel26.Visible = false;
                lblXpubStatus.Visible = false;
                panel23.Visible = false;
                label123.Visible = false;
                lblSegwitUsedAddresses.Visible = false;
                lblSegwitSummary.Visible = false;
                label111.Visible = false;
                lblLegacyUsedAddresses.Visible = false;
                lblLegacySummary.Visible = false;
                label119.Visible = false;
                lblSegwitP2SHUsedAddresses.Visible = false;
                lblSegwitP2SHSummary.Visible = false;
                panel29.Visible = false;
                label133.Visible = false;
                lblXpubConfirmedReceived.Visible = false;
                label129.Visible = false;
                lblXpubConfirmedSpent.Visible = false;
                label121.Visible = false;
                lblXpubConfirmedUnspent.Visible = false;
                btnXpubAddressesUp.Visible = false;
                btnXpubAddressesDown.Visible = false;
                listViewXpubAddresses.Visible = false;
                label135.Visible = false;
                lblP2SHSummary.Visible = false;
                lblP2SHUsedAddresses.Visible = false;
                label140.Visible = false;
                label141.Visible = false;
                btnViewAddressFromXpub.Visible = false;
                panel101.Visible = false;
                panel30.Visible = false;
                lblXpubConfirmedReceivedFiat.Visible = false;
                lblXpubConfirmedSpentFiat.Visible = false;
                lblXpubConfirmedUnspentFiat.Visible = false;

                if (textBoxSubmittedXpub.Text == "")
                {
                    lblValidXpubIndicator.Invoke((MethodInvoker)delegate
                    {
                        lblValidXpubIndicator.Text = "";
                    });
                    return;
                }

                // validate the inputted xpub before proceeding
                try
                {
                    string xpubString = textBoxSubmittedXpub.Text;
                    BitcoinExtPubKey xpub = new BitcoinExtPubKey(xpubString, Network.Main);
                    PubKey OnlyUsedToCheckIfXpubIsValid = xpub.GetPublicKey();
                }
                catch
                {
                    xpubValid = false;
                    lblValidXpubIndicator.Invoke((MethodInvoker)delegate
                    {
                        lblValidXpubIndicator.ForeColor = Color.IndianRed;
                        lblValidXpubIndicator.Text = "✖️ invalid Xpub";
                    });

                    return;
                }
                xpubValid = true;
                lblValidXpubIndicator.Invoke((MethodInvoker)delegate
                {
                    lblValidXpubIndicator.ForeColor = Color.OliveDrab;
                    lblValidXpubIndicator.Text = "✔️ valid Xpub";
                });
                LookupXpub();
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxSubmittedXpub_TextChanged");
            }
        }

        //-------------------- VALIDATE NODE URL ENTRY ---------------------------------------------------------------------------
        private void TextBoxXpubScreenOwnNodeURL_Enter(object sender, EventArgs e)
        {
            try
            {
                if (isTextBoxXpubScreenOwnNodeURLWatermarkTextDisplayed)
                {
                    textBoxXpubScreenOwnNodeURL.Invoke((MethodInvoker)delegate
                    {
                        textBoxXpubScreenOwnNodeURL.Text = "";
                        textBoxXpubScreenOwnNodeURL.ForeColor = Color.White;
                    });
                    isTextBoxXpubScreenOwnNodeURLWatermarkTextDisplayed = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxXpubScreenOwnNodeURL_Enter");
            }
        }

        private void TextBoxXpubScreenOwnNodeURL_Leave(object sender, EventArgs e)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(textBoxXpubScreenOwnNodeURL.Text))
                {
                    textBoxXpubScreenOwnNodeURL.Invoke((MethodInvoker)delegate
                    {
                        textBoxXpubScreenOwnNodeURL.Text = "e.g http://umbrel.local:3006/api/";
                        textBoxXpubScreenOwnNodeURL.ForeColor = Color.Gray;
                    });
                    isTextBoxXpubScreenOwnNodeURLWatermarkTextDisplayed = true;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxXpubScreenOwnNodeURL_Leave");
            }
        }

        private void TextBoxXpubScreenOwnNodeURL_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (isTextBoxXpubScreenOwnNodeURLWatermarkTextDisplayed)
                {
                    textBoxXpubScreenOwnNodeURL.Invoke((MethodInvoker)delegate
                    {
                        textBoxXpubScreenOwnNodeURL.ForeColor = Color.White;
                    });
                    isTextBoxXpubScreenOwnNodeURLWatermarkTextDisplayed = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxXpubScreenOwnNodeURL_TextChanged");
            }
        }

        private void TextBoxXpubScreenOwnNodeURL_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (isTextBoxXpubScreenOwnNodeURLWatermarkTextDisplayed)
                {
                    textBoxXpubScreenOwnNodeURL.Invoke((MethodInvoker)delegate
                    {
                        textBoxXpubScreenOwnNodeURL.Text = "";
                        textBoxXpubScreenOwnNodeURL.ForeColor = Color.White;
                    });
                    isTextBoxXpubScreenOwnNodeURLWatermarkTextDisplayed = false;
                }
                else
                {
                    previousXpubScreenOwnNodeURLStringToCompare = textBoxXpubScreenOwnNodeURL.Text;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxXpubScreenOwnNodeURL_KeyPress");
            }
        }

        private void TextBoxXpubScreenOwnNodeURL_KeyUp(object sender, KeyEventArgs e)
        {
            try
            {
                if (previousXpubScreenOwnNodeURLStringToCompare != textBoxXpubScreenOwnNodeURL.Text)
                {
                    lblXpubScreenOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                    {
                        lblXpubScreenOwnNodeStatusLight.ForeColor = Color.IndianRed;
                    });
                    lblXpubScreenOwnNodeStatus.Invoke((MethodInvoker)delegate
                    {
                        lblXpubScreenOwnNodeStatus.Text = "invalid / node offline";
                    });
                    lblXpubScreenOwnNodeStatus.Invoke((MethodInvoker)delegate
                    {
                        textBoxSubmittedXpub.Enabled = false;
                        textBoxSubmittedXpub.Text = "";
                    });
                    previousXpubScreenOwnNodeURLStringToCompare = textBoxXpubScreenOwnNodeURL.Text;
                    CheckNetworkStatus();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxXpubScreenOwnNodeURL_KeyUp");
            }
        }

        //-------------------- DERIVATION PATHS ---------------------------------------------------------------------------
        private void NumberUpDownDerivationPathsToCheck_Validating(object sender, CancelEventArgs e)
        {
            try
            {
                if (numberUpDownDerivationPathsToCheck.Value > 100)
                {
                    numberUpDownDerivationPathsToCheck.Value = 100;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "NumberUpDownDerivationPathsToCheck_Validating");
            }
        }

        private void NumberUpDownDerivationPathsToCheck_ValueChanged(object sender, EventArgs e)
        {
            try
            {
                SaveSettingsToBookmarksFile();
            }
            catch (Exception ex)
            {
                HandleException(ex, "numberUpDownDerivationPathsToCheck_ValueChanged");
            }
        }

        private void BtnDerivationPathsUp_Click(object sender, EventArgs e)
        {
            try
            {
                if (numberUpDownDerivationPathsToCheck.Value < 99)
                {
                    numberUpDownDerivationPathsToCheck.Value++;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDerivationPathsUp_Click");
            }
        }

        private void BtnDerivationPathsDown_Click(object sender, EventArgs e)
        {
            try
            {
                if (numberUpDownDerivationPathsToCheck.Value > 1)
                {
                    numberUpDownDerivationPathsToCheck.Value--;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDerivationPathsDown_Click");
            }
        }

        //------------- non-zero balances to be checked

        private void NumericUpDownMaxNumberOfConsecutiveUnusedAddresses_ValueChanged(object sender, EventArgs e)
        {
            try
            {
                SaveSettingsToBookmarksFile();
            }
            catch (Exception ex)
            {
                HandleException(ex, "numericUpDownMaxNumberOfConsecutiveUnusedAddresses_ValueChanged");
            }
        }

        private void BtnNonZeroBalancesUp_Click(object sender, EventArgs e)
        {
            try
            { 
                if (numericUpDownMaxNumberOfConsecutiveUnusedAddresses.Value < 99)
                {
                    numericUpDownMaxNumberOfConsecutiveUnusedAddresses.Value++;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnNonZeroBalancesUp_Click");
            }
        }

        private void BtnNonZeroBalancesDown_Click(object sender, EventArgs e)
        {
            try
            { 
                if (numericUpDownMaxNumberOfConsecutiveUnusedAddresses.Value > 1)
                {
                    numericUpDownMaxNumberOfConsecutiveUnusedAddresses.Value--;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnNonZeroBalancesUp_Click");
            }
        }

        #region continuous increment/decrement of numericUpDown controls when mouse button held down
        private void BtnNonZeroBalancesUp_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isZeroBalanceAdddressUpHeldDown = true;
                timerNumUpDownContinuous.Enabled = true;
                timerNumUpDownContinuous.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnNonZeroBalancesUp_MouseDown");
            }
        }

        private void BtnNonZeroBalancesUp_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isZeroBalanceAdddressUpHeldDown = false;
                timerNumUpDownContinuous.Stop();
                timerNumUpDownContinuous.Enabled = false;
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnNonZeroBalancesUp_MouseUp");
            }
        }

        private void BtnNonZeroBalancesDown_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isZeroBalanceAdddressDownHeldDown = true;
                timerNumUpDownContinuous.Enabled = true;
                timerNumUpDownContinuous.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnNonZeroBalancesDown_MouseDown");
            }
        }

        private void BtnNonZeroBalancesDown_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isZeroBalanceAdddressDownHeldDown = false;
                timerNumUpDownContinuous.Stop();
                timerNumUpDownContinuous.Enabled = false;
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnNonZeroBalancesDown_MouseUp");
            }
        }

        private void BtnDerivationPathsUp_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isDerivationPathsUpHeldDown = true;
                timerNumUpDownContinuous.Enabled = true;
                timerNumUpDownContinuous.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDerivationPathsUp_MouseDown");
            }
        }

        private void BtnDerivationPathsUp_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isDerivationPathsUpHeldDown = false;
                timerNumUpDownContinuous.Stop();
                timerNumUpDownContinuous.Enabled = false;
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDerivationPathsUp_MouseUp");
            }
        }

        private void BtnDerivationPathsDown_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isDerivationPathsDownHeldDown = true;
                timerNumUpDownContinuous.Enabled = true;
                timerNumUpDownContinuous.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDerivationPathsDown_MouseDown");
            }
        }

        private void BtnDerivationPathsDown_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isDerivationPathsDownHeldDown = false;
                timerNumUpDownContinuous.Stop();
                timerNumUpDownContinuous.Enabled = false;
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDerivationPathsDown_MouseUp");
            }
        }
        #endregion
        #endregion
        #region check node online
        //-------------------- CHECK NODE ONLINE -------------------------------------------------------
        private async void CheckOwnNodeIsOnline()
        {
            using var client = new HttpClient();
            try
            {
                Ping pingSender = new Ping();
                string pingAddress = "";

                if (textBoxXpubScreenOwnNodeURL.Text != "")
                {
                    // get the contents of the textbox
                    string url = textBoxXpubScreenOwnNodeURL.Text;

                    // create a regex pattern to match URLs
                    string pattern = @"^(http|https):\/\/.*\/api\/$";

                    // create a regex object
                    Regex regex = new Regex(pattern);

                    // use the regex object to match the contents of the textbox
                    if (regex.IsMatch(url)) // (at least partially) valid url
                    {
                        try
                        {
                            xpubNodeURL = textBoxXpubScreenOwnNodeURL.Text;
                            // get the hostname from the URL
                            // parse the URL to extract the hostname
                            Uri uri = new Uri(xpubNodeURL);
                            string hostname = uri.Host;

                            // resolve the hostname to an IP address
                            IPHostEntry hostEntry = Dns.GetHostEntry(hostname);
                            IPAddress ipAddress = hostEntry.AddressList[0];
                            pingAddress = ipAddress.ToString();
                        }
                        catch
                        {
                            lblXpubScreenOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                            {
                                lblXpubScreenOwnNodeStatusLight.ForeColor = Color.IndianRed;
                            });
                            lblSettingsOwnNodeSelected.Enabled = false;
                            Uri uri = new Uri(xpubNodeURL);
                            string hostname = uri.Host;
                            label174.Invoke((MethodInvoker)delegate
                            {
                                label174.Text = "your node (not connected)";
                            });
                            MoveNodeSelections();
                            lblXpubScreenOwnNodeStatus.Invoke((MethodInvoker)delegate
                            {
                                lblXpubScreenOwnNodeStatus.Text = hostname;
                            });
                            lblSettingsOwnNodeStatus.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsOwnNodeStatus.Text = hostname;
                                lblSettingsOwnNodeStatus.Location = new Point((int)(755 * UIScale) - lblSettingsOwnNodeStatus.Width, lblSettingsOwnNodeStatus.Location.Y);
                            });
                            lblSettingsOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsOwnNodeStatusLight.ForeColor = Color.IndianRed;
                                lblSettingsOwnNodeStatusLight.Location = new Point(lblSettingsOwnNodeStatus.Location.X - lblSettingsOwnNodeStatusLight.Width, lblSettingsOwnNodeStatusLight.Location.Y);
                            });
                            
                            lblSettingsSelectedNodeStatus.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsSelectedNodeStatus.Text = "node offline";
                                lblSettingsSelectedNodeStatus.Location = new Point((int)(755 * UIScale) - lblSettingsSelectedNodeStatus.Width, lblSettingsSelectedNodeStatus.Location.Y);
                            });
                            lblSettingsSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsSelectedNodeStatusLight.ForeColor = Color.IndianRed;
                                lblSettingsSelectedNodeStatusLight.Location = new Point(lblSettingsSelectedNodeStatus.Location.X - lblSettingsSelectedNodeStatusLight.Width, lblSettingsSelectedNodeStatusLight.Location.Y);
                            });
                            return;
                        }
                    }
                    else
                    {
                        lblXpubScreenOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                        {
                            lblXpubScreenOwnNodeStatusLight.ForeColor = Color.IndianRed;
                        });
                        lblSettingsOwnNodeSelected.Enabled = false;
                        Uri uri = new Uri(xpubNodeURL);
                        string hostname = uri.Host;
                        label174.Invoke((MethodInvoker)delegate
                        {
                            label174.Text = "your node (not connected)";
                        });
                        MoveNodeSelections();
                        lblXpubScreenOwnNodeStatus.Invoke((MethodInvoker)delegate
                        {
                            lblXpubScreenOwnNodeStatus.Text = hostname;
                        });
                        lblSettingsOwnNodeStatus.Invoke((MethodInvoker)delegate
                        {
                            lblSettingsOwnNodeStatus.Text = hostname;
                            lblSettingsOwnNodeStatus.Location = new Point((int)(755 * UIScale) - lblSettingsOwnNodeStatus.Width, lblSettingsOwnNodeStatus.Location.Y);
                        });
                        lblSettingsOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                        {
                            lblSettingsOwnNodeStatusLight.ForeColor = Color.IndianRed;
                            lblSettingsOwnNodeStatusLight.Location = new Point(lblSettingsOwnNodeStatus.Location.X - lblSettingsOwnNodeStatusLight.Width, lblSettingsOwnNodeStatusLight.Location.Y);
                        });

                        lblSettingsSelectedNodeStatus.Invoke((MethodInvoker)delegate
                        {
                            lblSettingsSelectedNodeStatus.Text = "invalid / node offline";
                            lblSettingsSelectedNodeStatus.Location = new Point((int)(755 * UIScale) - lblSettingsSelectedNodeStatus.Width, lblSettingsSelectedNodeStatus.Location.Y);
                        });
                        lblSettingsSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                        {
                            lblSettingsSelectedNodeStatusLight.ForeColor = Color.IndianRed;
                            lblSettingsSelectedNodeStatusLight.Location = new Point(lblSettingsSelectedNodeStatus.Location.X - lblSettingsSelectedNodeStatusLight.Width, lblSettingsSelectedNodeStatusLight.Location.Y);
                        });
                        return;
                    }
                }

                if (textBoxXpubScreenOwnNodeURL.Text != "")
                {
                    PingReply reply = await pingSender.SendPingAsync(pingAddress);
                    if (reply.Status == IPStatus.Success)
                    {
                        Uri uri = new Uri(xpubNodeURL);
                        string hostname = uri.Host;
                        lblXpubScreenOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                        {
                            lblXpubScreenOwnNodeStatusLight.ForeColor = Color.OliveDrab;
                        });
                        lblSettingsOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                        {
                            lblSettingsOwnNodeStatusLight.ForeColor = Color.OliveDrab;
                        });
                        lblSettingsOwnNodeSelected.Enabled = true;
                        headerSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                        {
                            headerSelectedNodeStatusLight.ForeColor = Color.OliveDrab;
                        });
                        
                        lblSettingsSelectedNodeStatus.Invoke((MethodInvoker)delegate
                        {
                            lblSettingsSelectedNodeStatus.Text = hostname;
                            lblSettingsSelectedNodeStatus.Location = new Point((int)(755 * UIScale) - lblSettingsSelectedNodeStatus.Width, lblSettingsSelectedNodeStatus.Location.Y);
                        });
                        lblSettingsSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                        {
                            lblSettingsSelectedNodeStatusLight.ForeColor = Color.OliveDrab;
                            lblSettingsSelectedNodeStatusLight.Location = new Point(lblSettingsSelectedNodeStatus.Location.X - lblSettingsSelectedNodeStatusLight.Width, lblSettingsSelectedNodeStatusLight.Location.Y);
                        });
                        label174.Invoke((MethodInvoker)delegate
                        {
                            label174.Text = hostname;
                        });
                        MoveNodeSelections();
                        lblXpubScreenOwnNodeStatus.Invoke((MethodInvoker)delegate
                        {
                            lblXpubScreenOwnNodeStatus.Text = hostname;
                        });
                        lblSettingsOwnNodeStatus.Invoke((MethodInvoker)delegate
                        {
                            lblSettingsOwnNodeStatus.Text = hostname;
                            lblSettingsOwnNodeStatus.Location = new Point((int)(755 * UIScale) - lblSettingsOwnNodeStatus.Width, lblSettingsOwnNodeStatus.Location.Y);
                        });
                        lblSettingsOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                        {
                            lblSettingsOwnNodeStatusLight.Location = new Point(lblSettingsOwnNodeStatus.Location.X - lblSettingsOwnNodeStatusLight.Width, lblSettingsOwnNodeStatusLight.Location.Y);
                        });

                        // write the node url to the bookmarks file for auto retrieval next time (only if it's different to the one that might already be there)
                        DateTime today = DateTime.Today;
                        string bookmarkData;
                        string keyCheck = "21m";
                        bookmarkData = textBoxXpubScreenOwnNodeURL.Text;
                        textBoxSettingsOwnNodeURL.Text = bookmarkData; // write it back to the settings screen too
                        var newBookmark = new Bookmark { DateAdded = today, Type = "node", Data = bookmarkData, Note = "", Encrypted = false, KeyCheck = keyCheck };
                        if (!xpubNodeURLAlreadySavedInFile)
                        {
                            // Read the existing bookmarks from the JSON file
                            var bookmarks = ReadBookmarksFromJsonFile();

                            // Add the new bookmark to the list
                            bookmarks.Add(newBookmark);

                            // Write the updated list of bookmarks back to the JSON file
                            WriteBookmarksToJsonFile(bookmarks);
                            xpubNodeURLAlreadySavedInFile = true;
                            xpubNodeURLInFile = bookmarkData;
                        }
                        else
                        {
                            if (xpubNodeURLInFile != textBoxXpubScreenOwnNodeURL.Text)
                            {
                                //delete the currently saved node url
                                DeleteBookmarkFromJsonFile(xpubNodeURLInFile);
                                // Read the existing bookmarks from the JSON file
                                var bookmarks = ReadBookmarksFromJsonFile();
                                // Add the new bookmark to the list
                                bookmarks.Add(newBookmark);
                                // Write the updated list of bookmarks back to the JSON file
                                WriteBookmarksToJsonFile(bookmarks);
                                xpubNodeURLAlreadySavedInFile = true;
                                xpubNodeURLInFile = bookmarkData;
                            }
                        }
                        textBoxSubmittedXpub.Enabled = true;
                    }
                    else
                    {
                        // not online
                        lblXpubScreenOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                        {
                            lblXpubScreenOwnNodeStatusLight.ForeColor = Color.IndianRed;
                        });
                        lblSettingsOwnNodeSelected.Enabled = false;
                        label174.Invoke((MethodInvoker)delegate
                        {
                            label174.Text = "your node (not connected)";
                        });
                        MoveNodeSelections();
                        lblXpubScreenOwnNodeStatus.Invoke((MethodInvoker)delegate
                        {
                            lblXpubScreenOwnNodeStatus.Text = "invalid / node offline";
                        });
                        lblSettingsOwnNodeStatus.Invoke((MethodInvoker)delegate
                        {
                            lblSettingsOwnNodeStatus.Text = "invalid / node offline";
                            lblSettingsOwnNodeStatus.Location = new Point((int)(755 * UIScale) - lblSettingsOwnNodeStatus.Width, lblSettingsOwnNodeStatus.Location.Y);
                        });
                        lblSettingsOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                        {
                            lblSettingsOwnNodeStatusLight.ForeColor = Color.IndianRed;
                            lblSettingsOwnNodeStatusLight.Location = new Point(lblSettingsOwnNodeStatus.Location.X - lblSettingsOwnNodeStatusLight.Width, lblSettingsOwnNodeStatusLight.Location.Y);
                        });
                    }
                }
            }
            catch (HttpRequestException)
            {
                lblXpubScreenOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                {
                    lblXpubScreenOwnNodeStatusLight.ForeColor = Color.IndianRed;
                });
                lblSettingsOwnNodeSelected.Enabled = false;
                label174.Invoke((MethodInvoker)delegate
                {
                    label174.Text = "your node (not connected)";
                });
                MoveNodeSelections();
                lblXpubScreenOwnNodeStatus.Invoke((MethodInvoker)delegate
                {
                    lblXpubScreenOwnNodeStatus.Text = "invalid / node offline";
                });
                lblSettingsOwnNodeStatus.Invoke((MethodInvoker)delegate
                {
                    lblSettingsOwnNodeStatus.Text = "invalid / node offline";
                    lblSettingsOwnNodeStatus.Location = new Point((int)(755 * UIScale) - lblSettingsOwnNodeStatus.Width, lblSettingsOwnNodeStatus.Location.Y);
                });
                lblSettingsOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                {
                    lblSettingsOwnNodeStatusLight.ForeColor = Color.IndianRed;
                    lblSettingsOwnNodeStatusLight.Location = new Point(lblSettingsOwnNodeStatus.Location.X - lblSettingsOwnNodeStatusLight.Width, lblSettingsOwnNodeStatusLight.Location.Y);
                });
            }
        }
        #endregion
        #region set up xpub screen
        //-----DERIVE ADDRESSES FOR DIFFERENT ADDRESS TYPES, SCAN FOR TX'S AND OUTPUT TO LIST -------------------------------------
        private async void LookupXpub()
        {
            try
            {
                textBoxSubmittedXpub.Enabled = false;
                textBoxXpubScreenOwnNodeURL.Enabled = false;
                // NOT SUPPORTED var newAddress = pubkey.Derive(0).Derive(0).PubKey.GetAddress(ScriptPubKeyType.TaprootBIP86, Network.Main); //Taproot P2SH

                int MaxNumberOfConsecutiveUnusedAddresses = Convert.ToInt32(numericUpDownMaxNumberOfConsecutiveUnusedAddresses.Value - 1);
                int segwitAddressesWithNonZeroBalance = 0;
                int legacyAddressesWithNonZeroBalance = 0;
                int segwitP2SHAddressesWithNonZeroBalance = 0;
                int P2SHAddressesWithNonZeroBalance = 0;
                int consecutiveUnusedAddressesForType = 0;
                int totalUnusedAddresses = 0;
                int usedSegwitAddresses = 0;
                int usedLegacyAddresses = 0;
                int usedSegwitP2SHAddresses = 0;
                int usedP2SHAddresses = 0;
                int numberOfAddressesChecked = 0;
                double segwitAddressesConfirmedUnspentBalance = 0;
                double legacyAddressesConfirmedUnspentBalance = 0;
                double segwitP2SHAddressesConfirmedUnspentBalance = 0;
                double P2SHAddressesConfirmedUnspentBalance = 0;
                double segwitTotalConfirmedReceived = 0;
                double legacyTotalConfirmedReceived = 0;
                double segwitP2SHTotalConfirmedReceived = 0;
                double P2SHTotalConfirmedReceived = 0;
                double segwitTotalConfirmedSpent = 0;
                double legacyTotalConfirmedSpent = 0;
                double segwitP2SHTotalConfirmedSpent = 0;
                double P2SHTotalConfirmedSpent = 0;
                double xpubTotalConfirmedReceived = 0;
                double xpubTotalConfirmedSpent = 0;
                double xpubTotalConfirmedUnspent = 0;

                numberOfAddressesChecked = 0;
                int checkingAddressCount = 1;
                List<NBitcoin.BitcoinAddress> segwitAddresses = new List<NBitcoin.BitcoinAddress>();
                List<NBitcoin.BitcoinAddress> legacyAddresses = new List<NBitcoin.BitcoinAddress>();
                List<NBitcoin.BitcoinAddress> segwitP2SHAddresses = new List<NBitcoin.BitcoinAddress>();
                List<NBitcoin.BitcoinAddress> P2SHAddresses = new List<NBitcoin.BitcoinAddress>();

                int DerivationPath = 0;
                int NumberOfDerivationPathsToCheck = Convert.ToInt32(numberUpDownDerivationPathsToCheck.Value);

                progressBarCheckEachAddressType.Maximum = MaxNumberOfConsecutiveUnusedAddresses;
                progressBarCheckAllAddressTypes.Maximum = MaxNumberOfConsecutiveUnusedAddresses * 4 * NumberOfDerivationPathsToCheck;

                progressBarCheckAllAddressTypes.Visible = true;
                progressBarCheckEachAddressType.Visible = true;

                panelXpubContainer.Visible = true;
                panel26.Visible = true;
                lblXpubStatus.Visible = true;
                panel23.Visible = true;
                label123.Visible = true;
                lblSegwitUsedAddresses.Visible = true;
                lblSegwitSummary.Visible = true;
                label111.Visible = true;
                lblLegacyUsedAddresses.Visible = true;
                lblLegacySummary.Visible = true;
                label119.Visible = true;
                lblSegwitP2SHUsedAddresses.Visible = true;
                lblSegwitP2SHSummary.Visible = true;
                panel29.Visible = true;
                label133.Visible = true;
                lblXpubConfirmedReceived.Visible = true;
                label129.Visible = true;
                lblXpubConfirmedSpent.Visible = true;
                label121.Visible = true;
                lblXpubConfirmedUnspent.Visible = true;
                listViewXpubAddresses.Visible = true;
                lblCheckAllAddressTypesCount.Visible = true;
                lblCheckEachAddressTypeCount.Visible = true;
                label135.Visible = true;
                lblP2SHSummary.Visible = true;
                lblP2SHUsedAddresses.Visible = true;
                label140.Visible = true;
                label141.Visible = true;
                panel101.Visible = true;
                panel30.Visible = true;
                panel30.BringToFront();
                lblXpubConfirmedReceivedFiat.Visible = true;
                lblXpubConfirmedSpentFiat.Visible = true;
                lblXpubConfirmedUnspentFiat.Visible = true;

                string submittedXpub = Convert.ToString(textBoxSubmittedXpub.Text);
                #region set up the listview
                //LIST VIEW
                listViewXpubAddresses.Invoke((MethodInvoker)delegate
                {
                    listViewXpubAddresses.Items.Clear(); // remove any data that may be there already
                });
                listViewXpubAddresses.GetType().InvokeMember("DoubleBuffered", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.SetProperty, null, listViewXpubAddresses, new object[] { true });

                // Check if the column headers already
                if (listViewXpubAddresses.Columns.Count == 0)
                {
                    listViewXpubAddresses.Invoke((MethodInvoker)delegate
                    {
                        listViewXpubAddresses.Columns.Add(" Address", (int)(130 * UIScale));
                    });
                }
                if (listViewXpubAddresses.Columns.Count == 1)
                {
                    listViewXpubAddresses.Invoke((MethodInvoker)delegate
                    {
                        listViewXpubAddresses.Columns.Add("TX's", (int)(35 * UIScale));
                    });
                }
                if (listViewXpubAddresses.Columns.Count == 2)
                {
                    listViewXpubAddresses.Invoke((MethodInvoker)delegate
                    {
                        listViewXpubAddresses.Columns.Add("Received", (int)(100 * UIScale));
                    });
                }
                if (listViewXpubAddresses.Columns.Count == 3)
                {
                    listViewXpubAddresses.Invoke((MethodInvoker)delegate
                    {
                        listViewXpubAddresses.Columns.Add("Spent", (int)(100 * UIScale));
                    });
                }
                if (listViewXpubAddresses.Columns.Count == 4)
                {
                    listViewXpubAddresses.Invoke((MethodInvoker)delegate
                    {
                        listViewXpubAddresses.Columns.Add("Unspent", (int)(100 * UIScale));
                    });
                }
                #endregion
                #region Taproot - not yet implemented :(
                #endregion
                #region P2WPKH (Bech32 SegWit)
                while (DerivationPath != NumberOfDerivationPathsToCheck)
                {
                    for (uint i = 0; i < 500; i++)
                    {
                        lblXpubStatus.Invoke((MethodInvoker)delegate
                        {
                            lblXpubStatus.Text = "Deriving P2WPKH Bech32 addresses";
                        });
                        var pubkey = ExtPubKey.Parse(submittedXpub, Network.Main);
                        uint index = i; // increment the index for each iteration
                        var BitcoinAddress = pubkey.Derive(Convert.ToUInt32(DerivationPath)).Derive(index).PubKey.GetAddress(ScriptPubKeyType.Segwit, Network.Main); //Segwit 
                        segwitAddresses.Add(BitcoinAddress);
                    }

                    label140.Invoke((MethodInvoker)delegate
                    {
                        label140.Text = "derivation path " + DerivationPath;
                    });

                    // query the balance for each address
                    foreach (NBitcoin.BitcoinAddress address in segwitAddresses) // (we break when we run out of used addresses)
                    {
                        string truncatedAddressForDisplay = address.ToString().Substring(0, 10) + "...";
                        lblXpubStatus.Invoke((MethodInvoker)delegate
                        {
                            lblXpubStatus.Text = "Deriving P2WPKH Bech32 addresses\r\nChecking address " + checkingAddressCount + " (" + truncatedAddressForDisplay + ")\r\nConsecutive unused addresses: " + consecutiveUnusedAddressesForType;
                        });
                        var request = "address/" + address;
                        var RequestURL = textBoxXpubScreenOwnNodeURL.Text + request;
                        var client = new HttpClient();
                        LightUpNodeLight();
                        var response = await client.GetAsync($"{RequestURL}"); // get the JSON to get address balance and no of transactions etc
                        if (!response.IsSuccessStatusCode)
                        {
                            lblSettingsSelectedNodeStatus.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsSelectedNodeStatus.Text = "Disconnected/error";
                                lblSettingsSelectedNodeStatus.Location = new Point((int)(755 * UIScale) - lblSettingsSelectedNodeStatus.Width, lblSettingsSelectedNodeStatus.Location.Y);
                            });
                            lblSettingsSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsSelectedNodeStatusLight.ForeColor = Color.Red;
                                lblSettingsSelectedNodeStatusLight.Location = new Point(lblSettingsSelectedNodeStatus.Location.X - lblSettingsSelectedNodeStatusLight.Width, lblSettingsSelectedNodeStatusLight.Location.Y);
                            });
                            lblErrorMessage.Invoke((MethodInvoker)delegate
                            {
                                lblErrorMessage.Text = "Node offline/disconnected: ";
                            });
                            return;
                        }
                        var jsonData = await response.Content.ReadAsStringAsync();
                        var addressData = JObject.Parse(jsonData);

                        // transactions for the address
                        string lastSeenTxId = "";
                        decimal TotalInForAllTXOnThisAddress = 0;
                        decimal TotalOutForAllTXOnThisAddress = 0;
                        int totalTXForAddress = Convert.ToInt32(addressData["chain_stats"]["tx_count"]);
                        int txProcessedForThisAddress = 0;

                        while (txProcessedForThisAddress != totalTXForAddress)
                        {
                            _transactionsForXpubAddressService = new TransactionsForXpubAddressService(textBoxXpubScreenOwnNodeURL.Text);
                            LightUpNodeLight();
                            var transactionsJson = await _transactionsForXpubAddressService.GetTransactionsForXpubAddressAsync(Convert.ToString(address), "chain", lastSeenTxId);
                            if (!string.IsNullOrEmpty(transactionsJson))
                            {
                                var transactions = JsonConvert.DeserializeObject<List<AddressTransactions>>(transactionsJson);
                                List<string> txIds = transactions.Select(t => t.Txid).ToList();
                                foreach (AddressTransactions transaction in transactions)
                                {
                                    decimal balanceChangeVin = 0; // will hold net result of inputs to this address
                                    decimal balanceChangeVout = 0; // will hold net result of outputs to this address    
                                    balanceChangeVin = (decimal)transaction.Vout // value of all outputs where address is the provided address
                                        .Where(v => v.Scriptpubkey_address == Convert.ToString(address))
                                        .Sum(v => v.Value);
                                    balanceChangeVout = (decimal)transaction.Vin
                                        .Where(v => v.Prevout != null && v.Prevout.Scriptpubkey_address == Convert.ToString(address))
                                        .Sum(v => v.Prevout.Value);
                                    TotalInForAllTXOnThisAddress += balanceChangeVin;
                                    TotalOutForAllTXOnThisAddress += balanceChangeVout;
                                    txProcessedForThisAddress++;
                                }
                                if (transactions.Last().Status.Confirmed == "true") // there might be more transactions to get. 
                                {
                                    lastSeenTxId = transactions.Last().Txid; // so we can carry on the next api call where we left off
                                }
                                else
                                {
                                    lastSeenTxId = "";
                                }
                            }
                        }

                        string ConfirmedTransactionCount = Convert.ToString(addressData["chain_stats"]["tx_count"]);
                        string ConfirmedReceived = Convert.ToString(ConvertSatsToBitcoin(Convert.ToString(TotalInForAllTXOnThisAddress)).ToString("0.00000000"));
                        string ConfirmedSpent = Convert.ToString(ConvertSatsToBitcoin(Convert.ToString(TotalOutForAllTXOnThisAddress)).ToString("0.00000000"));
                        var confirmedReceivedForCalc = Convert.ToDouble(TotalInForAllTXOnThisAddress);
                        var confirmedSpentForCalc = Convert.ToDouble(TotalOutForAllTXOnThisAddress);
                        var confirmedUnspentResult = confirmedReceivedForCalc - confirmedSpentForCalc;
                        string ConfirmedUnspent = ConvertSatsToBitcoin(Convert.ToString(confirmedUnspentResult)).ToString("0.00000000");

                        ListViewItem item = new ListViewItem(Convert.ToString(address)); // create new row
                        item.SubItems.Add(ConfirmedTransactionCount.ToString());
                        item.SubItems.Add(ConfirmedReceived.ToString());
                        item.SubItems.Add(ConfirmedSpent.ToString());
                        item.SubItems.Add(ConfirmedUnspent.ToString());
                        listViewXpubAddresses.Invoke((MethodInvoker)delegate
                        {
                            listViewXpubAddresses.Items.Add(item); // add row
                            numberOfAddressesChecked++;
                        });
                        if (listViewXpubAddresses.Items.Count > 23)
                        {
                            btnXpubAddressesUp.Visible = true;
                            btnXpubAddressesDown.Visible = true;
                        }
                        else
                        {
                            btnXpubAddressesUp.Visible = false;
                            btnXpubAddressesDown.Visible = false;
                        }

                        // Get the height of each item to set height of whole listview
                        int rowHeight = listViewXpubAddresses.Margin.Vertical + listViewXpubAddresses.Padding.Vertical + listViewXpubAddresses.GetItemRect(0).Height;
                        int itemCount = listViewXpubAddresses.Items.Count; // Get the number of items in the ListBox
                        int listBoxHeight = (itemCount + 2) * rowHeight; // Calculate the height of the ListBox (the extra 2 gives room for the header)

                        listViewXpubAddresses.Invoke((MethodInvoker)delegate
                        {
                            listViewXpubAddresses.Height = listBoxHeight; // Set the height of the ListBox
                        });
                        panelXpubContainer.VerticalScroll.Minimum = 0;

                        string segwitTotalConfirmedReceivedDisplay = "";
                        string segwitTotalConfirmedSpentDisplay = "";
                        string segwitAddressesConfirmedUnspentBalanceDisplay = "";

                        if (confirmedReceivedForCalc == 0)
                        {
                            consecutiveUnusedAddressesForType++; // unused addresses for this type of address
                            totalUnusedAddresses++; // overall count of unused addresses

                            // progress bar for this address type
                            if (consecutiveUnusedAddressesForType < progressBarCheckEachAddressType.Maximum)
                            {
                                progressBarCheckEachAddressType.Value = consecutiveUnusedAddressesForType;
                            }
                            else
                            {
                                progressBarCheckEachAddressType.Value = progressBarCheckEachAddressType.Maximum;
                            }
                            lblCheckEachAddressTypeCount.Invoke((MethodInvoker)delegate
                            {
                                lblCheckEachAddressTypeCount.Text = consecutiveUnusedAddressesForType.ToString() + "/" + (MaxNumberOfConsecutiveUnusedAddresses + 1).ToString();
                            });
                            // progress bar for all address types
                            if (totalUnusedAddresses < progressBarCheckAllAddressTypes.Maximum)
                            {
                                progressBarCheckAllAddressTypes.Value = (DerivationPath * MaxNumberOfConsecutiveUnusedAddresses) + consecutiveUnusedAddressesForType;
                            }
                            else
                            {
                                progressBarCheckAllAddressTypes.Value = progressBarCheckAllAddressTypes.Maximum;
                            }
                            lblCheckAllAddressTypesCount.Invoke((MethodInvoker)delegate
                            {
                                lblCheckAllAddressTypesCount.Text = totalUnusedAddresses.ToString() + "/" + ((MaxNumberOfConsecutiveUnusedAddresses + 1) * 4 * NumberOfDerivationPathsToCheck).ToString();
                            });
                            // assume there are no more used addresses at this point
                            if (consecutiveUnusedAddressesForType > MaxNumberOfConsecutiveUnusedAddresses)
                            {
                                break;
                            }
                        }
                        else
                        {
                            usedSegwitAddresses++;
                            consecutiveUnusedAddressesForType = 0;  
                            totalUnusedAddresses = DerivationPath * MaxNumberOfConsecutiveUnusedAddresses;  
                        }

                        if (confirmedReceivedForCalc > 0)
                        {
                            consecutiveUnusedAddressesForType = 0;
                            segwitTotalConfirmedReceived += confirmedReceivedForCalc;
                            xpubTotalConfirmedReceived += confirmedReceivedForCalc;
                        }

                        if (confirmedSpentForCalc > 0)
                        {
                            consecutiveUnusedAddressesForType = 0;
                            segwitTotalConfirmedSpent += confirmedSpentForCalc;
                            xpubTotalConfirmedSpent += confirmedSpentForCalc;
                        }

                        if (confirmedUnspentResult > 0)
                        {
                            consecutiveUnusedAddressesForType = 0;
                            xpubTotalConfirmedUnspent += confirmedUnspentResult;
                            segwitAddressesWithNonZeroBalance++;
                            segwitAddressesConfirmedUnspentBalance += confirmedUnspentResult;

                        }
                        checkingAddressCount++;
                        lblSegwitUsedAddresses.Invoke((MethodInvoker)delegate
                        {
                            lblSegwitUsedAddresses.Text = Convert.ToString(usedSegwitAddresses) + " used";
                        });
                        // format values before displaying them in the summary
                        if (segwitTotalConfirmedReceived > 0)
                        {
                            segwitTotalConfirmedReceivedDisplay = ConvertSatsToBitcoin(Convert.ToString(segwitTotalConfirmedReceived)).ToString("0.00000000");
                        }
                        else
                        {
                            segwitTotalConfirmedReceivedDisplay = "0";
                        }

                        if (segwitTotalConfirmedSpent > 0)
                        {
                            segwitTotalConfirmedSpentDisplay = ConvertSatsToBitcoin(Convert.ToString(segwitTotalConfirmedSpent)).ToString("0.00000000");
                        }
                        else
                        {
                            segwitTotalConfirmedSpentDisplay = "0";
                        }

                        if (segwitAddressesConfirmedUnspentBalance > 0)
                        {
                            segwitAddressesConfirmedUnspentBalanceDisplay = ConvertSatsToBitcoin(Convert.ToString(segwitAddressesConfirmedUnspentBalance)).ToString("0.00000000");
                        }
                        else
                        {
                            segwitAddressesConfirmedUnspentBalanceDisplay = "0";
                        }
                        lblSegwitSummary.Invoke((MethodInvoker)delegate
                        {
                            lblSegwitSummary.Text = segwitTotalConfirmedReceivedDisplay + "," + segwitTotalConfirmedSpentDisplay + "," + segwitAddressesConfirmedUnspentBalanceDisplay;
                        });
                    }

                    progressBarCheckEachAddressType.Value = 0;
                    consecutiveUnusedAddressesForType = 0;
                    checkingAddressCount = 1;
                    DerivationPath++;
                    segwitAddresses.Clear();

                }
                DerivationPath = 0;
                #endregion
                #region P2PKH legacy
                while (DerivationPath != NumberOfDerivationPathsToCheck)
                {
                    for (uint i = 0; i < 500; i++)
                    {
                        lblXpubStatus.Invoke((MethodInvoker)delegate
                        {
                            lblXpubStatus.Text = "Deriving P2PKH legacy addresses";
                        });
                        var pubkey = ExtPubKey.Parse(submittedXpub, Network.Main);
                        uint index = i; // increment the index for each iteration
                        var BitcoinAddress = pubkey.Derive(Convert.ToUInt32(DerivationPath)).Derive(index).PubKey.GetAddress(ScriptPubKeyType.Legacy, Network.Main); //Legacy 
                        legacyAddresses.Add(BitcoinAddress);
                    }
                    label140.Invoke((MethodInvoker)delegate
                    {
                        label140.Text = "derivation path " + DerivationPath;
                    });

                    // query the balance for each address
                    foreach (NBitcoin.BitcoinAddress address in legacyAddresses) // (we break when we run out of addresses with a balance)
                    {
                        string truncatedAddressForDisplay = address.ToString().Substring(0, 10) + "...";
                        lblXpubStatus.Invoke((MethodInvoker)delegate
                        {
                            lblXpubStatus.Text = "Deriving P2PKH legacy addresses\r\nChecking address " + checkingAddressCount + " (" + truncatedAddressForDisplay + ")\r\nConsecutive unused addresses: " + consecutiveUnusedAddressesForType;
                        });
                        var request = "address/" + address;
                        var RequestURL = textBoxXpubScreenOwnNodeURL.Text + request;
                        var client = new HttpClient();
                        LightUpNodeLight();
                        var response = await client.GetAsync($"{RequestURL}"); // get the JSON to get address balance and no of transactions etc
                        if (!response.IsSuccessStatusCode)
                        {
                            lblSettingsSelectedNodeStatus.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsSelectedNodeStatus.Text = "Disconnected/error";
                                lblSettingsSelectedNodeStatus.Location = new Point((int)(755 * UIScale) - lblSettingsSelectedNodeStatus.Width, lblSettingsSelectedNodeStatus.Location.Y);
                            });
                            lblSettingsSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsSelectedNodeStatusLight.ForeColor = Color.Red;
                                lblSettingsSelectedNodeStatusLight.Location = new Point(lblSettingsSelectedNodeStatus.Location.X - lblSettingsSelectedNodeStatusLight.Width, lblSettingsSelectedNodeStatusLight.Location.Y);
                            });
                            lblErrorMessage.Invoke((MethodInvoker)delegate
                            {
                                lblErrorMessage.Text = "Node offline/disconnected: ";
                            });
                            return;
                        }
                        var jsonData = await response.Content.ReadAsStringAsync();
                        var addressData = JObject.Parse(jsonData);

                        // transactions for the address
                        string lastSeenTxId = "";
                        decimal TotalInForAllTXOnThisAddress = 0;
                        decimal TotalOutForAllTXOnThisAddress = 0;
                        int totalTXForAddress = Convert.ToInt32(addressData["chain_stats"]["tx_count"]);
                        int txProcessedForThisAddress = 0;

                        while (txProcessedForThisAddress != totalTXForAddress)
                        {
                            _transactionsForXpubAddressService = new TransactionsForXpubAddressService(textBoxXpubScreenOwnNodeURL.Text);
                            LightUpNodeLight();
                            var transactionsJson = await _transactionsForXpubAddressService.GetTransactionsForXpubAddressAsync(Convert.ToString(address), "chain", lastSeenTxId);
                            if (!string.IsNullOrEmpty(transactionsJson))
                            {
                                var transactions = JsonConvert.DeserializeObject<List<AddressTransactions>>(transactionsJson);
                                List<string> txIds = transactions.Select(t => t.Txid).ToList();
                                foreach (AddressTransactions transaction in transactions)
                                {
                                    decimal balanceChangeVin = 0; // will hold net result of inputs to this address
                                    decimal balanceChangeVout = 0; // will hold net result of outputs to this address    
                                    balanceChangeVin = (decimal)transaction.Vout // value of all outputs where address is the provided address
                                        .Where(v => v.Scriptpubkey_address == Convert.ToString(address))
                                        .Sum(v => v.Value);
                                    balanceChangeVout = (decimal)transaction.Vin
                                        .Where(v => v.Prevout != null && v.Prevout.Scriptpubkey_address == Convert.ToString(address))
                                        .Sum(v => v.Prevout.Value);
                                    TotalInForAllTXOnThisAddress += balanceChangeVin;
                                    TotalOutForAllTXOnThisAddress += balanceChangeVout;
                                    txProcessedForThisAddress++;
                                }
                                if (transactions.Last().Status.Confirmed == "true") // there might be more transactions to get. 
                                {
                                    lastSeenTxId = transactions.Last().Txid; // so we can carry on the next api call where we left off
                                }
                                else
                                {
                                    lastSeenTxId = "";
                                }
                            }
                        }

                        string ConfirmedTransactionCount = Convert.ToString(addressData["chain_stats"]["tx_count"]);
                        string ConfirmedReceived = Convert.ToString(ConvertSatsToBitcoin(Convert.ToString(TotalInForAllTXOnThisAddress)).ToString("0.00000000"));
                        string ConfirmedSpent = Convert.ToString(ConvertSatsToBitcoin(Convert.ToString(TotalOutForAllTXOnThisAddress)).ToString("0.00000000"));
                        var confirmedReceivedForCalc = Convert.ToDouble(TotalInForAllTXOnThisAddress);
                        var confirmedSpentForCalc = Convert.ToDouble(TotalOutForAllTXOnThisAddress);
                        var confirmedUnspentResult = confirmedReceivedForCalc - confirmedSpentForCalc;
                        string ConfirmedUnspent = ConvertSatsToBitcoin(Convert.ToString(confirmedUnspentResult)).ToString("0.00000000");

                        ListViewItem item = new ListViewItem(Convert.ToString(address)); // create new row
                        item.SubItems.Add(ConfirmedTransactionCount.ToString());
                        item.SubItems.Add(ConfirmedReceived.ToString());
                        item.SubItems.Add(ConfirmedSpent.ToString());
                        item.SubItems.Add(ConfirmedUnspent.ToString());
                        listViewXpubAddresses.Invoke((MethodInvoker)delegate
                        {
                            listViewXpubAddresses.Items.Add(item); // add row
                            numberOfAddressesChecked++;
                        });
                        if (listViewXpubAddresses.Items.Count > 23)
                        {
                            btnXpubAddressesUp.Visible = true;
                            btnXpubAddressesDown.Visible = true;
                        }
                        else
                        {
                            btnXpubAddressesUp.Visible = false;
                            btnXpubAddressesDown.Visible = false;
                        }

                        // Get the height of each item to set height of whole listview
                        int rowHeight = listViewXpubAddresses.Margin.Vertical + listViewXpubAddresses.Padding.Vertical + listViewXpubAddresses.GetItemRect(0).Height;
                        int itemCount = listViewXpubAddresses.Items.Count; // Get the number of items in the ListBox
                        int listBoxHeight = (itemCount + 2) * rowHeight; // Calculate the height of the ListBox (the extra 2 gives room for the header)
                        listViewXpubAddresses.Invoke((MethodInvoker)delegate
                        {
                            listViewXpubAddresses.Height = listBoxHeight; // Set the height of the ListBox
                        });
                        panelXpubContainer.VerticalScroll.Minimum = 0;

                        string legacyTotalConfirmedReceivedDisplay = "";
                        string legacyTotalConfirmedSpentDisplay = "";
                        string legacyAddressesConfirmedUnspentBalanceDisplay = "";

                        if (confirmedReceivedForCalc == 0)
                        {
                            consecutiveUnusedAddressesForType++; // unused addresses for this type of address
                            totalUnusedAddresses++; // overall count of unused addresses

                            // progress bar for this address type
                            if (consecutiveUnusedAddressesForType < progressBarCheckEachAddressType.Maximum)
                            {
                                progressBarCheckEachAddressType.Value = consecutiveUnusedAddressesForType;
                            }
                            else
                            {
                                progressBarCheckEachAddressType.Value = progressBarCheckEachAddressType.Maximum;
                            }
                            lblCheckEachAddressTypeCount.Invoke((MethodInvoker)delegate
                            {
                                lblCheckEachAddressTypeCount.Text = consecutiveUnusedAddressesForType.ToString() + "/" + (MaxNumberOfConsecutiveUnusedAddresses + 1).ToString();
                            });
                            // progress bar for all address types
                            if (totalUnusedAddresses < progressBarCheckAllAddressTypes.Maximum)
                            {
                                progressBarCheckAllAddressTypes.Value = ((NumberOfDerivationPathsToCheck + DerivationPath) * MaxNumberOfConsecutiveUnusedAddresses) + consecutiveUnusedAddressesForType;
                            }
                            else
                            {
                                progressBarCheckAllAddressTypes.Value = progressBarCheckAllAddressTypes.Maximum;
                            }
                            lblCheckAllAddressTypesCount.Invoke((MethodInvoker)delegate
                            {
                                lblCheckAllAddressTypesCount.Text = totalUnusedAddresses.ToString() + "/" + ((MaxNumberOfConsecutiveUnusedAddresses + 1) * 4 * NumberOfDerivationPathsToCheck).ToString();
                            });

                            // assume there are no more used addresses at this point
                            if (consecutiveUnusedAddressesForType > MaxNumberOfConsecutiveUnusedAddresses)
                            {
                                break;
                            }
                        }
                        else
                        {
                            usedLegacyAddresses++;
                            consecutiveUnusedAddressesForType = 0;  //
                            totalUnusedAddresses = (NumberOfDerivationPathsToCheck + DerivationPath) * MaxNumberOfConsecutiveUnusedAddresses;  // this is the second address type, so reset to account for that, rather than 0
                        }

                        if (confirmedReceivedForCalc > 0)
                        {
                            consecutiveUnusedAddressesForType = 0;
                            legacyTotalConfirmedReceived += confirmedReceivedForCalc;
                            xpubTotalConfirmedReceived += confirmedReceivedForCalc;
                        }

                        if (confirmedSpentForCalc > 0)
                        {
                            consecutiveUnusedAddressesForType = 0;
                            legacyTotalConfirmedSpent += confirmedSpentForCalc;
                            xpubTotalConfirmedSpent += confirmedSpentForCalc;
                        }

                        if (confirmedUnspentResult > 0)
                        {
                            consecutiveUnusedAddressesForType = 0;
                            xpubTotalConfirmedUnspent += confirmedUnspentResult;
                            legacyAddressesWithNonZeroBalance++;
                            legacyAddressesConfirmedUnspentBalance += confirmedUnspentResult;

                        }
                        checkingAddressCount++;
                        lblLegacyUsedAddresses.Invoke((MethodInvoker)delegate
                        {
                            lblLegacyUsedAddresses.Text = Convert.ToString(usedLegacyAddresses) + " used";
                        });
                        // format values before displaying them in the summary
                        if (legacyTotalConfirmedReceived > 0)
                        {
                            legacyTotalConfirmedReceivedDisplay = ConvertSatsToBitcoin(Convert.ToString(legacyTotalConfirmedReceived)).ToString("0.00000000");
                        }
                        else
                        {
                            legacyTotalConfirmedReceivedDisplay = "0";
                        }

                        if (legacyTotalConfirmedSpent > 0)
                        {
                            legacyTotalConfirmedSpentDisplay = ConvertSatsToBitcoin(Convert.ToString(legacyTotalConfirmedSpent)).ToString("0.00000000");
                        }
                        else
                        {
                            legacyTotalConfirmedSpentDisplay = "0";
                        }

                        if (legacyAddressesConfirmedUnspentBalance > 0)
                        {
                            legacyAddressesConfirmedUnspentBalanceDisplay = ConvertSatsToBitcoin(Convert.ToString(legacyAddressesConfirmedUnspentBalance)).ToString("0.00000000");
                        }
                        else
                        {
                            legacyAddressesConfirmedUnspentBalanceDisplay = "0";
                        }
                        lblLegacySummary.Invoke((MethodInvoker)delegate
                        {
                            lblLegacySummary.Text = legacyTotalConfirmedReceivedDisplay + "," + legacyTotalConfirmedSpentDisplay + "," + legacyAddressesConfirmedUnspentBalanceDisplay;
                        });
                    }

                    progressBarCheckEachAddressType.Value = 0;
                    consecutiveUnusedAddressesForType = 0;
                    checkingAddressCount = 1;
                    DerivationPath++;
                    legacyAddresses.Clear();
                }
                DerivationPath = 0;
                #endregion
                #region P2SH-P2WPKH
                while (DerivationPath != NumberOfDerivationPathsToCheck)
                {
                    for (uint i = 0; i < 500; i++)
                    {
                        lblXpubStatus.Invoke((MethodInvoker)delegate
                        {
                            lblXpubStatus.Text = "Deriving P2SH-P2WPKH addresses";
                        });
                        var pubkey = ExtPubKey.Parse(submittedXpub, Network.Main);
                        uint index = i; // increment the index for each iteration
                        var BitcoinAddress = pubkey.Derive(Convert.ToUInt32(DerivationPath)).Derive(index).PubKey.GetAddress(ScriptPubKeyType.SegwitP2SH, Network.Main); //Segwit P2SH
                        segwitP2SHAddresses.Add(BitcoinAddress);
                    }
                    label140.Invoke((MethodInvoker)delegate
                    {
                        label140.Text = "derivation path " + DerivationPath;
                    });
                    // query the balance for each address
                    foreach (NBitcoin.BitcoinAddress address in segwitP2SHAddresses) // (we break when we run out of addresses with a balance)
                    {
                        string truncatedAddressForDisplay = address.ToString().Substring(0, 10) + "...";
                        lblXpubStatus.Invoke((MethodInvoker)delegate
                        {
                            lblXpubStatus.Text = "Deriving P2SH-P2WPKH addresses\r\nChecking address " + checkingAddressCount + " (" + truncatedAddressForDisplay + ")\r\nConsecutive unused addresses: " + consecutiveUnusedAddressesForType;
                        });
                        var request = "address/" + address;
                        var RequestURL = textBoxXpubScreenOwnNodeURL.Text + request;
                        var client = new HttpClient();
                        LightUpNodeLight();
                        var response = await client.GetAsync($"{RequestURL}"); // get the JSON to get address balance and no of transactions etc
                        if (!response.IsSuccessStatusCode)
                        {
                            lblSettingsSelectedNodeStatus.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsSelectedNodeStatus.Text = "Disconnected/error";
                                lblSettingsSelectedNodeStatus.Location = new Point((int)(755 * UIScale) - lblSettingsSelectedNodeStatus.Width, lblSettingsSelectedNodeStatus.Location.Y);
                            });
                            lblSettingsSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsSelectedNodeStatusLight.ForeColor = Color.Red;
                                lblSettingsSelectedNodeStatusLight.Location = new Point(lblSettingsSelectedNodeStatus.Location.X - lblSettingsSelectedNodeStatusLight.Width, lblSettingsSelectedNodeStatusLight.Location.Y);
                            });
                            lblErrorMessage.Invoke((MethodInvoker)delegate
                            {
                                lblErrorMessage.Text = "Node offline/disconnected: ";
                            });
                            return;
                        }
                        var jsonData = await response.Content.ReadAsStringAsync();
                        var addressData = JObject.Parse(jsonData);

                        // transactions for the address
                        string lastSeenTxId = "";
                        decimal TotalInForAllTXOnThisAddress = 0;
                        decimal TotalOutForAllTXOnThisAddress = 0;
                        int totalTXForAddress = Convert.ToInt32(addressData["chain_stats"]["tx_count"]);
                        int txProcessedForThisAddress = 0;

                        while (txProcessedForThisAddress != totalTXForAddress)
                        {
                            _transactionsForXpubAddressService = new TransactionsForXpubAddressService(textBoxXpubScreenOwnNodeURL.Text);
                            LightUpNodeLight();
                            var transactionsJson = await _transactionsForXpubAddressService.GetTransactionsForXpubAddressAsync(Convert.ToString(address), "chain", lastSeenTxId);
                            if (!string.IsNullOrEmpty(transactionsJson))
                            {
                                var transactions = JsonConvert.DeserializeObject<List<AddressTransactions>>(transactionsJson);
                                List<string> txIds = transactions.Select(t => t.Txid).ToList();
                                foreach (AddressTransactions transaction in transactions)
                                {
                                    decimal balanceChangeVin = 0; // will hold net result of inputs to this address
                                    decimal balanceChangeVout = 0; // will hold net result of outputs to this address    
                                    balanceChangeVout = (decimal)transaction.Vout // value of all outputs where address is the provided address
                                        .Where(v => v.Scriptpubkey_address == Convert.ToString(address))
                                        .Sum(v => v.Value);
                                    balanceChangeVin = (decimal)transaction.Vin
                                        .Where(v => v.Prevout != null && v.Prevout.Scriptpubkey_address == Convert.ToString(address))
                                        .Sum(v => v.Prevout.Value);
                                    TotalInForAllTXOnThisAddress += balanceChangeVin;
                                    TotalOutForAllTXOnThisAddress += balanceChangeVout;
                                    txProcessedForThisAddress++;
                                }
                                if (transactions.Last().Status.Confirmed == "true") // there might be more transactions to get. 
                                {
                                    lastSeenTxId = transactions.Last().Txid; // so we can carry on the next api call where we left off
                                }
                                else
                                {
                                    lastSeenTxId = "";
                                }
                            }
                        }

                        string ConfirmedTransactionCount = Convert.ToString(addressData["chain_stats"]["tx_count"]);
                        string ConfirmedReceived = Convert.ToString(TotalInForAllTXOnThisAddress.ToString("0.00000000"));
                        string ConfirmedSpent = Convert.ToString(TotalOutForAllTXOnThisAddress.ToString("0.00000000"));

                        var confirmedReceivedForCalc = Convert.ToDouble(TotalInForAllTXOnThisAddress);
                        var confirmedSpentForCalc = Convert.ToDouble(TotalOutForAllTXOnThisAddress);
                        var confirmedUnspentResult = confirmedReceivedForCalc - confirmedSpentForCalc;

                        string ConfirmedUnspent = ConvertSatsToBitcoin(Convert.ToString(confirmedUnspentResult)).ToString("0.00000000");

                        ListViewItem item = new ListViewItem(Convert.ToString(address)); // create new row
                        item.SubItems.Add(ConfirmedTransactionCount.ToString());
                        item.SubItems.Add(ConvertSatsToBitcoin(ConfirmedReceived.ToString()).ToString("0.00000000"));
                        item.SubItems.Add(ConvertSatsToBitcoin(ConfirmedSpent.ToString()).ToString("0.00000000"));
                        item.SubItems.Add(ConfirmedUnspent.ToString());
                        listViewXpubAddresses.Invoke((MethodInvoker)delegate
                        {
                            listViewXpubAddresses.Items.Add(item); // add row
                            numberOfAddressesChecked++;
                        });
                        if (listViewXpubAddresses.Items.Count > 23)
                        {
                            btnXpubAddressesUp.Visible = true;
                            btnXpubAddressesDown.Visible = true;
                        }
                        else
                        {
                            btnXpubAddressesUp.Visible = false;
                            btnXpubAddressesDown.Visible = false;
                        }

                        // Get the height of each item to set height of whole listview
                        int rowHeight = listViewXpubAddresses.Margin.Vertical + listViewXpubAddresses.Padding.Vertical + listViewXpubAddresses.GetItemRect(0).Height;
                        int itemCount = listViewXpubAddresses.Items.Count; // Get the number of items in the ListBox
                        int listBoxHeight = (itemCount + 2) * rowHeight; // Calculate the height of the ListBox (the extra 2 gives room for the header)

                        listViewXpubAddresses.Invoke((MethodInvoker)delegate
                        {
                            listViewXpubAddresses.Height = listBoxHeight; // Set the height of the ListBox
                        });
                        panelXpubContainer.VerticalScroll.Minimum = 0;

                        string segwitP2SHTotalConfirmedReceivedDisplay = "";
                        string segwitP2SHTotalConfirmedSpentDisplay = "";
                        string segwitP2SHAddressesConfirmedUnspentBalanceDisplay = "";

                        if (confirmedReceivedForCalc == 0)
                        {
                            consecutiveUnusedAddressesForType++; // unused addresses for this type of address
                            totalUnusedAddresses++; // overall count of unused addresses

                            // progress bar for this address type
                            if (consecutiveUnusedAddressesForType < progressBarCheckEachAddressType.Maximum)
                            {
                                progressBarCheckEachAddressType.Value = consecutiveUnusedAddressesForType;
                            }
                            else
                            {
                                progressBarCheckEachAddressType.Value = progressBarCheckEachAddressType.Maximum;
                            }
                            lblCheckEachAddressTypeCount.Invoke((MethodInvoker)delegate
                            {
                                lblCheckEachAddressTypeCount.Text = consecutiveUnusedAddressesForType.ToString() + "/" + (MaxNumberOfConsecutiveUnusedAddresses + 1).ToString();
                            });
                            // progress bar for all address types
                            if (totalUnusedAddresses < progressBarCheckAllAddressTypes.Maximum)
                            {
                                progressBarCheckAllAddressTypes.Value = (((NumberOfDerivationPathsToCheck * 2) + DerivationPath) * MaxNumberOfConsecutiveUnusedAddresses) + consecutiveUnusedAddressesForType;
                            }
                            else
                            {
                                progressBarCheckAllAddressTypes.Value = progressBarCheckAllAddressTypes.Maximum;
                            }
                            lblCheckAllAddressTypesCount.Invoke((MethodInvoker)delegate
                            {
                                lblCheckAllAddressTypesCount.Text = totalUnusedAddresses.ToString() + "/" + ((MaxNumberOfConsecutiveUnusedAddresses + 1) * 4 * NumberOfDerivationPathsToCheck).ToString();
                            });

                            // assume there are no more used addresses at this point
                            if (consecutiveUnusedAddressesForType > MaxNumberOfConsecutiveUnusedAddresses)
                            {
                                break;
                            }
                        }
                        else
                        {
                            usedSegwitP2SHAddresses++;
                            consecutiveUnusedAddressesForType = 0;  //
                            totalUnusedAddresses = ((NumberOfDerivationPathsToCheck * 2) + DerivationPath) * MaxNumberOfConsecutiveUnusedAddresses;  // this is the third address type, so reset to account for that, rather than 0
                        }

                        if (confirmedReceivedForCalc > 0)
                        {
                            consecutiveUnusedAddressesForType = 0;
                            segwitP2SHTotalConfirmedReceived += confirmedReceivedForCalc;
                            xpubTotalConfirmedReceived += confirmedReceivedForCalc;
                        }

                        if (confirmedSpentForCalc > 0)
                        {
                            consecutiveUnusedAddressesForType = 0;
                            segwitP2SHTotalConfirmedSpent += confirmedSpentForCalc;
                            xpubTotalConfirmedSpent += confirmedSpentForCalc;
                        }

                        if (confirmedUnspentResult > 0)
                        {
                            consecutiveUnusedAddressesForType = 0;
                            xpubTotalConfirmedUnspent += confirmedUnspentResult;
                            segwitP2SHAddressesWithNonZeroBalance++;
                            segwitP2SHAddressesConfirmedUnspentBalance += confirmedUnspentResult;

                        }
                        checkingAddressCount++;
                        lblSegwitP2SHUsedAddresses.Invoke((MethodInvoker)delegate
                        {
                            lblSegwitP2SHUsedAddresses.Text = Convert.ToString(usedSegwitP2SHAddresses) + " used";
                        });
                        // format values before displaying them in the summary
                        if (segwitP2SHTotalConfirmedReceived > 0)
                        {
                            segwitP2SHTotalConfirmedReceivedDisplay = ConvertSatsToBitcoin(Convert.ToString(segwitP2SHTotalConfirmedReceived)).ToString("0.00000000");
                        }
                        else
                        {
                            segwitP2SHTotalConfirmedReceivedDisplay = "0";
                        }

                        if (segwitP2SHTotalConfirmedSpent > 0)
                        {
                            segwitP2SHTotalConfirmedSpentDisplay = ConvertSatsToBitcoin(Convert.ToString(segwitP2SHTotalConfirmedSpent)).ToString("0.00000000");
                        }
                        else
                        {
                            segwitP2SHTotalConfirmedSpentDisplay = "0";
                        }

                        if (segwitP2SHAddressesConfirmedUnspentBalance > 0)
                        {
                            segwitP2SHAddressesConfirmedUnspentBalanceDisplay = ConvertSatsToBitcoin(Convert.ToString(segwitP2SHAddressesConfirmedUnspentBalance)).ToString("0.00000000");
                        }
                        else
                        {
                            segwitP2SHAddressesConfirmedUnspentBalanceDisplay = "0";
                        }
                        lblSegwitP2SHSummary.Invoke((MethodInvoker)delegate
                        {
                            lblSegwitP2SHSummary.Text = segwitP2SHTotalConfirmedReceivedDisplay + "," + segwitP2SHTotalConfirmedSpentDisplay + "," + segwitP2SHAddressesConfirmedUnspentBalanceDisplay;
                        });
                    }

                    progressBarCheckEachAddressType.Value = 0;
                    consecutiveUnusedAddressesForType = 0;
                    checkingAddressCount = 1;
                    DerivationPath++;
                    segwitP2SHAddresses.Clear();
                }
                DerivationPath = 0;
                #endregion
                #region P2SH
                while (DerivationPath != NumberOfDerivationPathsToCheck)
                {
                    for (uint i = 0; i < 500; i++)
                    {
                        lblXpubStatus.Invoke((MethodInvoker)delegate
                        {
                            lblXpubStatus.Text = "Deriving P2SH addresses";
                        });
                        var pubkey = ExtPubKey.Parse(submittedXpub, Network.Main);
                        uint index = i; // increment the index for each iteration
                        var redeemScript = pubkey.Derive(Convert.ToUInt32(DerivationPath)).Derive(index).PubKey.ScriptPubKey;
                        var scriptPubKey = redeemScript.Hash.ScriptPubKey;
                        var BitcoinAddress = scriptPubKey.GetDestinationAddress(Network.Main);
                        P2SHAddresses.Add(BitcoinAddress);
                    }
                    label140.Invoke((MethodInvoker)delegate
                    {
                        label140.Text = "derivation path " + DerivationPath;
                    });

                    // query the balance for each address
                    foreach (NBitcoin.BitcoinAddress address in P2SHAddresses) // (we break when we run out of addresses with a balance)
                    {
                        string truncatedAddressForDisplay = address.ToString().Substring(0, 10) + "...";
                        lblXpubStatus.Invoke((MethodInvoker)delegate
                        {
                            lblXpubStatus.Text = "Deriving P2SH addresses\r\nChecking address " + checkingAddressCount + " (" + truncatedAddressForDisplay + ")\r\nConsecutive unused addresses: " + consecutiveUnusedAddressesForType;
                        });
                        var request = "address/" + address;
                        var RequestURL = textBoxXpubScreenOwnNodeURL.Text + request;
                        var client = new HttpClient();
                        LightUpNodeLight();
                        var response = await client.GetAsync($"{RequestURL}"); // get the JSON to get address balance and no of transactions etc
                        if (!response.IsSuccessStatusCode)
                        {
                            lblSettingsSelectedNodeStatus.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsSelectedNodeStatus.Text = "Disconnected/error";
                                lblSettingsSelectedNodeStatus.Location = new Point((int)(755 * UIScale) - lblSettingsSelectedNodeStatus.Width, lblSettingsSelectedNodeStatus.Location.Y);
                            });
                            lblSettingsSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsSelectedNodeStatusLight.ForeColor = Color.Red;
                                lblSettingsSelectedNodeStatusLight.Location = new Point(lblSettingsSelectedNodeStatus.Location.X - lblSettingsSelectedNodeStatusLight.Width, lblSettingsSelectedNodeStatusLight.Location.Y);
                            });
                            lblErrorMessage.Invoke((MethodInvoker)delegate
                            {
                                lblErrorMessage.Text = "Node offline/disconnected: ";
                            });
                            return;
                        }
                        var jsonData = await response.Content.ReadAsStringAsync();
                        var addressData = JObject.Parse(jsonData);

                        // transactions for the address
                        string lastSeenTxId = "";
                        decimal TotalInForAllTXOnThisAddress = 0;
                        decimal TotalOutForAllTXOnThisAddress = 0;
                        int totalTXForAddress = Convert.ToInt32(addressData["chain_stats"]["tx_count"]);
                        int txProcessedForThisAddress = 0;

                        while (txProcessedForThisAddress != totalTXForAddress)
                        {
                            _transactionsForXpubAddressService = new TransactionsForXpubAddressService(textBoxXpubScreenOwnNodeURL.Text);
                            LightUpNodeLight();
                            var transactionsJson = await _transactionsForXpubAddressService.GetTransactionsForXpubAddressAsync(Convert.ToString(address), "chain", lastSeenTxId);
                            if (!string.IsNullOrEmpty(transactionsJson))
                            {
                                var transactions = JsonConvert.DeserializeObject<List<AddressTransactions>>(transactionsJson);
                                List<string> txIds = transactions.Select(t => t.Txid).ToList();
                                foreach (AddressTransactions transaction in transactions)
                                {
                                    decimal balanceChangeVin = 0; // will hold net result of inputs to this address
                                    decimal balanceChangeVout = 0; // will hold net result of outputs to this address    
                                    balanceChangeVin = (decimal)transaction.Vout // value of all outputs where address is the provided address
                                        .Where(v => v.Scriptpubkey_address == Convert.ToString(address))
                                        .Sum(v => v.Value);
                                    balanceChangeVout = (decimal)transaction.Vin
                                        .Where(v => v.Prevout != null && v.Prevout.Scriptpubkey_address == Convert.ToString(address))
                                        .Sum(v => v.Prevout.Value);
                                    TotalInForAllTXOnThisAddress += balanceChangeVin;
                                    TotalOutForAllTXOnThisAddress += balanceChangeVout;
                                    txProcessedForThisAddress++;
                                }
                                if (transactions.Last().Status.Confirmed == "true") // there might be more transactions to get. 
                                {
                                    lastSeenTxId = transactions.Last().Txid; // so we can carry on the next api call where we left off
                                }
                                else
                                {
                                    lastSeenTxId = "";
                                }
                            }
                        }

                        string ConfirmedTransactionCount = Convert.ToString(addressData["chain_stats"]["tx_count"]);
                        string ConfirmedReceived = Convert.ToString(ConvertSatsToBitcoin(Convert.ToString(TotalInForAllTXOnThisAddress)).ToString("0.00000000"));
                        string ConfirmedSpent = Convert.ToString(ConvertSatsToBitcoin(Convert.ToString(TotalOutForAllTXOnThisAddress)).ToString("0.00000000"));
                        var confirmedReceivedForCalc = Convert.ToDouble(TotalInForAllTXOnThisAddress);
                        var confirmedSpentForCalc = Convert.ToDouble(TotalOutForAllTXOnThisAddress);
                        var confirmedUnspentResult = confirmedReceivedForCalc - confirmedSpentForCalc;
                        string ConfirmedUnspent = ConvertSatsToBitcoin(Convert.ToString(confirmedUnspentResult)).ToString("0.00000000");

                        ListViewItem item = new ListViewItem(Convert.ToString(address)); // create new row
                        item.SubItems.Add(ConfirmedTransactionCount.ToString());
                        item.SubItems.Add(ConfirmedReceived.ToString());
                        item.SubItems.Add(ConfirmedSpent.ToString());
                        item.SubItems.Add(ConfirmedUnspent.ToString());
                        listViewXpubAddresses.Invoke((MethodInvoker)delegate
                        {
                            listViewXpubAddresses.Items.Add(item); // add row
                            numberOfAddressesChecked++;
                        });
                        if (listViewXpubAddresses.Items.Count > 23)
                        {
                            btnXpubAddressesUp.Visible = true;
                            btnXpubAddressesDown.Visible = true;
                        }
                        else
                        {
                            btnXpubAddressesUp.Visible = false;
                            btnXpubAddressesDown.Visible = false;
                        }

                        // Get the height of each item to set height of whole listview
                        int rowHeight = listViewXpubAddresses.Margin.Vertical + listViewXpubAddresses.Padding.Vertical + listViewXpubAddresses.GetItemRect(0).Height;
                        int itemCount = listViewXpubAddresses.Items.Count; // Get the number of items in the ListBox
                        int listBoxHeight = (itemCount + 2) * rowHeight; // Calculate the height of the ListBox (the extra 2 gives room for the header)
                        listViewXpubAddresses.Invoke((MethodInvoker)delegate
                        {
                            listViewXpubAddresses.Height = listBoxHeight; // Set the height of the ListBox
                        });
                        panelXpubContainer.VerticalScroll.Minimum = 0;

                        string P2SHTotalConfirmedReceivedDisplay = "";
                        string P2SHTotalConfirmedSpentDisplay = "";
                        string P2SHAddressesConfirmedUnspentBalanceDisplay = "";

                        if (confirmedReceivedForCalc == 0)
                        {
                            consecutiveUnusedAddressesForType++; // unused addresses for this type of address
                            totalUnusedAddresses++; // overall count of unused addresses

                            // progress bar for this address type
                            if (consecutiveUnusedAddressesForType < progressBarCheckEachAddressType.Maximum)
                            {
                                progressBarCheckEachAddressType.Value = consecutiveUnusedAddressesForType;
                            }
                            else
                            {
                                progressBarCheckEachAddressType.Value = progressBarCheckEachAddressType.Maximum;
                            }
                            lblCheckEachAddressTypeCount.Invoke((MethodInvoker)delegate
                            {
                                lblCheckEachAddressTypeCount.Text = consecutiveUnusedAddressesForType.ToString() + "/" + (MaxNumberOfConsecutiveUnusedAddresses + 1).ToString();
                            });
                            // progress bar for all address types
                            if (totalUnusedAddresses < progressBarCheckAllAddressTypes.Maximum)
                            {
                                progressBarCheckAllAddressTypes.Value = (((NumberOfDerivationPathsToCheck * 3) + DerivationPath) * MaxNumberOfConsecutiveUnusedAddresses) + consecutiveUnusedAddressesForType;
                            }
                            else
                            {
                                progressBarCheckAllAddressTypes.Value = progressBarCheckAllAddressTypes.Maximum;
                            }
                            lblCheckAllAddressTypesCount.Invoke((MethodInvoker)delegate
                            {
                                lblCheckAllAddressTypesCount.Text = totalUnusedAddresses.ToString() + "/" + ((MaxNumberOfConsecutiveUnusedAddresses + 1) * 4 * NumberOfDerivationPathsToCheck).ToString();
                            });

                            // assume there are no more used addresses at this point
                            if (consecutiveUnusedAddressesForType > MaxNumberOfConsecutiveUnusedAddresses)
                            {
                                break;
                            }
                        }
                        else
                        {
                            usedP2SHAddresses++;
                            consecutiveUnusedAddressesForType = 0;  //
                            totalUnusedAddresses = ((NumberOfDerivationPathsToCheck * 3) + DerivationPath) * MaxNumberOfConsecutiveUnusedAddresses;  // this is the fourth address type, so reset to account for that, rather than 0
                        }

                        if (confirmedReceivedForCalc > 0)
                        {
                            consecutiveUnusedAddressesForType = 0;
                            P2SHTotalConfirmedReceived += confirmedReceivedForCalc;
                            xpubTotalConfirmedReceived += confirmedReceivedForCalc;
                        }

                        if (confirmedSpentForCalc > 0)
                        {
                            consecutiveUnusedAddressesForType = 0;
                            P2SHTotalConfirmedSpent += confirmedSpentForCalc;
                            xpubTotalConfirmedSpent += confirmedSpentForCalc;
                        }

                        if (confirmedUnspentResult > 0)
                        {
                            consecutiveUnusedAddressesForType = 0;
                            xpubTotalConfirmedUnspent += confirmedUnspentResult;
                            P2SHAddressesWithNonZeroBalance++;
                            P2SHAddressesConfirmedUnspentBalance += confirmedUnspentResult;
                        }
                        checkingAddressCount++;
                        lblP2SHUsedAddresses.Invoke((MethodInvoker)delegate
                        {
                            lblP2SHUsedAddresses.Text = Convert.ToString(usedP2SHAddresses) + " used";
                        });
                        // format values before displaying them in the summary
                        if (P2SHTotalConfirmedReceived > 0)
                        {
                            P2SHTotalConfirmedReceivedDisplay = ConvertSatsToBitcoin(Convert.ToString(P2SHTotalConfirmedReceived)).ToString("0.00000000");
                        }
                        else
                        {
                            P2SHTotalConfirmedReceivedDisplay = "0";
                        }

                        if (P2SHTotalConfirmedSpent > 0)
                        {
                            P2SHTotalConfirmedSpentDisplay = ConvertSatsToBitcoin(Convert.ToString(P2SHTotalConfirmedSpent)).ToString("0.00000000");
                        }
                        else
                        {
                            P2SHTotalConfirmedSpentDisplay = "0";
                        }

                        if (P2SHAddressesConfirmedUnspentBalance > 0)
                        {
                            P2SHAddressesConfirmedUnspentBalanceDisplay = ConvertSatsToBitcoin(Convert.ToString(P2SHAddressesConfirmedUnspentBalance)).ToString("0.00000000");
                        }
                        else
                        {
                            P2SHAddressesConfirmedUnspentBalanceDisplay = "0";
                        }
                        lblP2SHSummary.Invoke((MethodInvoker)delegate
                        {
                            lblP2SHSummary.Text = P2SHTotalConfirmedReceivedDisplay + "," + P2SHTotalConfirmedSpentDisplay + "," + P2SHAddressesConfirmedUnspentBalanceDisplay;
                        });
                    }

                    progressBarCheckEachAddressType.Value = 0;
                    consecutiveUnusedAddressesForType = 0;
                    checkingAddressCount = 1;
                    DerivationPath++;
                    P2SHAddresses.Clear();
                }
                if (listViewXpubAddresses.Items.Count > 0)
                {
                    listViewXpubAddresses.Items[0].Selected = true;
                }

                DerivationPath = 0;
                #endregion
                #region totals after processing, hide progress bars, re-enable textboxes
                lblXpubStatus.Invoke((MethodInvoker)delegate
                {
                    lblXpubStatus.Text = "Finished scanning addresses\r\n" + numberOfAddressesChecked + " addresses checked";
                });
                lblXpubConfirmedReceived.Invoke((MethodInvoker)delegate
                {
                    lblXpubConfirmedReceived.Text = ConvertSatsToBitcoin(Convert.ToString(xpubTotalConfirmedReceived)).ToString("0.00000000");
                });
                lblXpubConfirmedReceivedFiat.Invoke((MethodInvoker)delegate
                {
                    lblXpubConfirmedReceivedFiat.Text = lblHeaderPrice.Text[0] + ((Convert.ToDecimal(xpubTotalConfirmedReceived) / 100000000) * OneBTCinSelectedCurrency).ToString("N2");
                });
                lblXpubConfirmedSpent.Invoke((MethodInvoker)delegate
                {
                    lblXpubConfirmedSpent.Text = ConvertSatsToBitcoin(Convert.ToString(xpubTotalConfirmedSpent)).ToString("0.00000000");
                });
                lblXpubConfirmedSpentFiat.Invoke((MethodInvoker)delegate
                {
                    lblXpubConfirmedSpentFiat.Text = lblHeaderPrice.Text[0] + ((Convert.ToDecimal(xpubTotalConfirmedSpent) / 100000000) * OneBTCinSelectedCurrency).ToString("N2");
                });
                lblXpubConfirmedUnspent.Invoke((MethodInvoker)delegate
                {
                    lblXpubConfirmedUnspent.Text = ConvertSatsToBitcoin(Convert.ToString(xpubTotalConfirmedUnspent)).ToString("0.00000000");
                });
                lblXpubConfirmedUnspentFiat.Invoke((MethodInvoker)delegate
                {
                    lblXpubConfirmedUnspentFiat.Text = lblHeaderPrice.Text[0] + ((Convert.ToDecimal(xpubTotalConfirmedUnspent) / 100000000) * OneBTCinSelectedCurrency).ToString("N2");
                });
                textBoxSubmittedXpub.Enabled = true;
                textBoxXpubScreenOwnNodeURL.Enabled = true;
                timerHideProgressBars.Start();
                #endregion
            }
            catch (Exception ex)
            {
                HandleException(ex, "LookupXpub");
            }
        }
        #endregion
        #region listview appearance
        //-------------------- FORMAT DATA IN LISTVIEW ----------------------------------------------------------------------------
        private void ListViewXpubAddresses_DrawSubItem(object sender, DrawListViewSubItemEventArgs e)
        {
            try
            {
                var text = e.SubItem.Text;

                if (e.ColumnIndex == 2)
                {
                    if (text != "0.00000000") // received
                    {
                        e.SubItem.ForeColor = Color.OliveDrab; // make it green
                    }
                }
                if (e.ColumnIndex == 3)
                {
                    if (text != "0.00000000") // spent
                    {
                        e.SubItem.ForeColor = Color.IndianRed; // make it red
                    }
                }
                if (e.ColumnIndex == 4)
                {
                    if (text != "0.00000000") // unspent
                    {
                        e.SubItem.ForeColor = Color.OliveDrab; // make it green if non-zero
                    }
                }

                var font = listViewXpubAddresses.Font;
                var columnWidth = e.Header.Width;
                var textWidth = TextRenderer.MeasureText(text, font).Width;
                if (textWidth > columnWidth)
                {
                    // Truncate the text
                    var maxText = text.Substring(0, text.Length * columnWidth / textWidth - 3) + "...";
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);
                    // Clear the background
                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewXpubAddresses.BackColor), bounds);
                    }
                    TextRenderer.DrawText(e.Graphics, maxText, font, bounds, e.Item.ForeColor, TextFormatFlags.EndEllipsis | TextFormatFlags.Left);
                }
                else if (textWidth < columnWidth)
                {
                    // Clear the background
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);

                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewXpubAddresses.BackColor), bounds);
                    }

                    TextRenderer.DrawText(e.Graphics, text, font, bounds, e.SubItem.ForeColor, TextFormatFlags.Left);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewXpubAddresses_DrawSubItem");
            }
        }

        //-------------------- USER TRYING TO CHANGE COLUMN WIDTHS -------------------------------------
        private void ListViewXpubAddresses_ColumnWidthChanging(object sender, ColumnWidthChangingEventArgs e)
        {
            try
            {
                if (e.ColumnIndex == 0)
                {
                    if (listViewXpubAddresses.Columns[e.ColumnIndex].Width < (int)(130 * UIScale)) // min width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(130 * UIScale);
                    }
                    if (listViewXpubAddresses.Columns[e.ColumnIndex].Width > (int)(460 * UIScale)) // max width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(460 * UIScale);
                    }

                    btnViewAddressFromXpub.Invoke((MethodInvoker)delegate
                    {
                        btnViewAddressFromXpub.Location = new Point(listViewXpubAddresses.Columns[0].Width + listViewXpubAddresses.Location.X - btnViewAddressFromXpub.Width - (int)(6 * UIScale), btnViewAddressFromXpub.Location.Y);
                    });
                }

                if (e.ColumnIndex == 1)
                {
                    if (listViewXpubAddresses.Columns[e.ColumnIndex].Width != (int)(35 * UIScale)) // don't allow this one to change
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(35 * UIScale);
                    }
                }
                if (e.ColumnIndex == 2)
                {
                    if (listViewXpubAddresses.Columns[e.ColumnIndex].Width < (int)(100 * UIScale)) // min width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(100 * UIScale);
                    }
                    if (listViewXpubAddresses.Columns[e.ColumnIndex].Width > (int)(250 * UIScale)) // max width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(250 * UIScale);
                    }
                }
                if (e.ColumnIndex == 3)
                {
                    if (listViewXpubAddresses.Columns[e.ColumnIndex].Width < (int)(100 * UIScale)) // min width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(100 * UIScale);
                    }
                    if (listViewXpubAddresses.Columns[e.ColumnIndex].Width > (int)(250 * UIScale)) // max width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(250 * UIScale);
                    }
                }
                if (e.ColumnIndex == 4)
                {
                    if (listViewXpubAddresses.Columns[e.ColumnIndex].Width < (int)(100 * UIScale)) // min width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(100 * UIScale);
                    }
                    if (listViewXpubAddresses.Columns[e.ColumnIndex].Width > (int)(250 * UIScale)) // max width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(250 * UIScale);
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewXpubAddresses_ColumnWidthChanging");
            }
        }

        //-------------------- ROW SELECTED ON THE LISTVIEW --------------------------------------------
        private void ListViewXpubAddresses_ItemSelectionChanged(object sender, ListViewItemSelectionChangedEventArgs e)
        {
            try
            {
                foreach (ListViewItem item in listViewXpubAddresses.Items)
                {
                    if (item != null)
                    {
                        if (item.Selected)
                        {
                            btnViewAddressFromXpub.Visible = true;
                            foreach (ListViewItem.ListViewSubItem subItem in item.SubItems)
                            {
                                subItem.ForeColor = MakeColorLighter(tableTextColor, 40);
                            }
                            if (item.SubItems[1].Text == "0")
                            {
                                btnViewAddressFromXpub.Enabled = false;
                            }
                            else
                            {
                                btnViewAddressFromXpub.Enabled = true;
                            }
                            btnViewAddressFromXpub.Invoke((MethodInvoker)delegate
                            {
                                btnViewAddressFromXpub.Location = new Point(item.Position.X + listViewXpubAddresses.Location.X + listViewXpubAddresses.Columns[0].Width - btnViewAddressFromXpub.Width - (int)(8 * UIScale), item.Position.Y + listViewXpubAddresses.Location.Y - 1);
                                btnViewAddressFromXpub.Height = item.Bounds.Height;
                            });
                        }
                        else
                        {
                            foreach (ListViewItem.ListViewSubItem subItem in item.SubItems)
                            {
                                subItem.ForeColor = tableTextColor;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "listViewXpubAddresses_ItemSelectionChanged");
            }
        }
        #endregion
        #region reposition & hide elements
        //-------------------- HIDE PROGRESS BARS, ETC AFTER A PERIOD ----------------------------------
        private void TimerHideProgressBars_Tick(object sender, EventArgs e)
        {
            try
            {
                progressBarCheckAllAddressTypes.Visible = false;
                progressBarCheckEachAddressType.Visible = false;
                lblCheckAllAddressTypesCount.Visible = false;
                lblCheckEachAddressTypeCount.Visible = false;
                label140.Visible = false;
                label141.Visible = false;

                timerHideProgressBars.Stop();
            }
            catch (Exception ex)
            {
                HandleException(ex, "TimerHideProgressBars_Tick");
            }
        }
        #endregion
        #region listview scrolling
        //-------------------- SCROLL-DOWN LISTVIEW ----------------------------------------------------
        private void BtnXpubAddressesDown_Click(object sender, EventArgs e)
        {
            try
            {
                if (panelXpubContainer.VerticalScroll.Value < panelXpubContainer.VerticalScroll.Maximum)
                {
                    panelXpubContainer.VerticalScroll.Value++;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnXpubAddressesDown_Click");
            }
        }

        private void BtnXpubAddressesDown_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isXpubButtonPressed = true;
                XpubDownButtonPressed = true;
                XpubScrollTimer.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnXpubAddressesDown_MouseDown");
            }
        }

        private void BtnXpubAddressesDown_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isXpubButtonPressed = false;
                XpubDownButtonPressed = false;
                XpubScrollTimer.Stop();
                XpubScrollTimer.Interval = 50; // reset the interval to its original value
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnXpubAddressesDown_MouseUp");
            }
        }

        //-------------------- SCROLL-UP LISTVIEW -------------------------------------------------------
        private void BtnXpubAddressUp_Click(object sender, EventArgs e)
        {
            try
            {
                if (panelXpubContainer.VerticalScroll.Value > panelXpubContainer.VerticalScroll.Minimum)
                {
                    panelXpubContainer.VerticalScroll.Value--;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnXpubAddressUp_Click");
            }
        }

        private void BtnXpubAddressUp_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isXpubButtonPressed = true;
                XpubUpButtonPressed = true;
                XpubScrollTimer.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnXpubAddressUp_MouseDown");
            }
        }

        private void BtnXpubAddressUp_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isXpubButtonPressed = false;
                XpubUpButtonPressed = false;
                XpubScrollTimer.Stop();
                XpubScrollTimer.Interval = 50; // reset the interval to its original value
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnXpubAddressUp_MouseUp");
            }
        }

        //-------------------- HANDLE THE SCROLLING -------------------------------------------------------
        private void XpubScrollTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                if (isXpubButtonPressed)
                {
                    if (XpubDownButtonPressed)
                    {
                        if (panelXpubContainer.VerticalScroll.Value < panelXpubContainer.VerticalScroll.Maximum - 5)
                        {
                            panelXpubContainer.VerticalScroll.Value = panelXpubContainer.VerticalScroll.Value + 5;
                            XpubAddressesScrollPosition = panelXpubContainer.VerticalScroll.Value; // store the scroll position to reposition on the paint event
                        }
                        XpubScrollTimer.Interval = 1; // set a faster interval while the button is held down
                    }
                    else if (XpubUpButtonPressed)
                    {
                        if (panelXpubContainer.VerticalScroll.Value > panelXpubContainer.VerticalScroll.Minimum + 5)
                        {
                            panelXpubContainer.VerticalScroll.Value = panelXpubContainer.VerticalScroll.Value - 5;
                            XpubAddressesScrollPosition = panelXpubContainer.VerticalScroll.Value; // store the scroll position to reposition on the paint event
                        }
                        XpubScrollTimer.Interval = 1; // set a faster interval while the button is held down
                    }
                }
                else
                {
                    XpubScrollTimer.Stop();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "XpubScrollTimer_Tick");
            }
        }

        private void PanelXpubContainer_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                if (btnViewAddressFromXpub.Visible) // user must have clicked a row given that the button is visible
                {
                    panelXpubContainer.VerticalScroll.Value = XpubAddressesScrollPosition; //return the scroll position to where it was when clicked (it jumps to top otherwise)
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "PanelXpubContainer_Paint");
            }
        }
        #endregion
        #region navigate from listview to address screen
        //-------------------- VIEW ADDRESS --------------------------------------------------------------
        private void BtnViewAddressFromXpub_Click(object sender, EventArgs e)
        {
            try
            {
                CheckNetworkStatus();
                // Get the selected item
                ListViewItem selectedItem = listViewXpubAddresses.SelectedItems[0];
                // Get the first subitem in the selected item 
                string SelectedAddress = selectedItem.SubItems[0].Text;
                textboxSubmittedAddress.Invoke((MethodInvoker)delegate
                {
                    textboxSubmittedAddress.Text = SelectedAddress; // copy address to address screen
                });
                //show the address screen
                BtnMenuAddress_Click(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnViewAddressFromXpub_Click");
            }
        }
        #endregion
        #endregion

        #region ⚡CHARTS SCREEN⚡
        #region chart - pools ranking
        private async void BtnChartPoolsRanking_Click(object sender, EventArgs e)
        {
            try
            {
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot1.Visible = false;
                formsPlot3.Visible = false;
                chartType = "poolranking";

                EnableAllCharts();
                btnChartPoolsRanking.Enabled = false;

                DisableIrrelevantTimePeriods();

                // clear any previous graph
                ClearAllChartData();
                int desiredSpacing = 98; // spacing added to title to force left-align in
                string spacing = new string('\u00A0', desiredSpacing);
                string title = string.Format("Mining pool rankings - time period: {0}{1}", chartPeriod, spacing);
                formsPlot2.Plot.Title(title, size: (int)(13 * UIScale), color: labelColor, bold: false);

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");
                LightUpNodeLight();
                var PoolRankingDataJson = await _poolsRankingDataService.GetPoolsRankingDataAsync(chartPeriod);
                if (!string.IsNullOrEmpty(PoolRankingDataJson))
                {
                    JObject jsonObj = JObject.Parse(PoolRankingDataJson);

                    List<PoolsRanking> poolsRankingList = JsonConvert.DeserializeObject<List<PoolsRanking>>(jsonObj["pools"].ToString());

                    // Calculate the total BlockCount
                    int totalBlockCount = poolsRankingList.Sum(p => int.Parse(p.BlockCount));

                    // Create lists for values and labels
                    List<double> values = new List<double>();
                    List<string> labels = new List<string>();

                    // Populate values and labels for the first 15 segments
                    int blocksMinedByTop15 = 0;
                    for (int i = 0; i < Math.Min(15, poolsRankingList.Count); i++)
                    {
                        var pool = poolsRankingList[i];
                        values.Add(double.Parse(pool.BlockCount));
                        blocksMinedByTop15 += Convert.ToInt32(pool.BlockCount);
                        labels.Add(pool.Name);
                    }

                    int numberOfBlocksMinedByOthers = totalBlockCount - blocksMinedByTop15;
                    values.Add(numberOfBlocksMinedByOthers);
                    labels.Add("Others");

                    // Copy values list to an array
                    double[] valuesArray = values.ToArray();
                    // Copy labels list to an array
                    string[] labelsArray = labels.ToArray();

                    string[] labelsAndValuesArray = new string[labelsArray.Length]; // this array is used to label the segments
                    for (int i = 0; i < labelsArray.Count(); i++)
                    {
                        string labelAndValue = labelsArray[i] + " (" + valuesArray[i] + ")";
                        labelsAndValuesArray[i] = labelAndValue;
                    }

                    // Define the color spectrum
                    Color[] colorSpectrum = GenerateRainbowColorSpectrum(values.Count);

                    // Method to generate a rainbow-like color spectrum
                    Color[] GenerateRainbowColorSpectrum(int segmentCount)
                    {
                        var colors = new Color[segmentCount];
                        double hueIncrement = 360.0 / segmentCount;

                        for (int i = 0; i < segmentCount; i++)
                        {
                            double hue = i * hueIncrement;
                            Color color = ColorFromHSV(hue, 0.6, 0.7);
                            colors[i] = color;
                        }

                        return colors;
                    }

                    // Method to convert HSV (Hue, Saturation, Value) to RGB
                    Color ColorFromHSV(double hue, double saturation, double value)
                    {
                        int hi = Convert.ToInt32(Math.Floor(hue / 60)) % 6;
                        double f = hue / 60 - Math.Floor(hue / 60);

                        value *= 255;
                        int v = Convert.ToInt32(value);
                        int p = Convert.ToInt32(value * (1 - saturation));
                        int q = Convert.ToInt32(value * (1 - f * saturation));
                        int t = Convert.ToInt32(value * (1 - (1 - f) * saturation));

                        if (hi == 0)
                            return Color.FromArgb(255, v, t, p);
                        else if (hi == 1)
                            return Color.FromArgb(255, q, v, p);
                        else if (hi == 2)
                            return Color.FromArgb(255, p, v, t);
                        else if (hi == 3)
                            return Color.FromArgb(255, p, q, v);
                        else if (hi == 4)
                            return Color.FromArgb(255, t, p, v);
                        else
                            return Color.FromArgb(255, v, p, q);
                    }

                    // Create the pie chart 
                    var pie = formsPlot2.Plot.AddPie(valuesArray);
                    pie.DonutSize = .3;
                    pie.DonutLabel = Convert.ToString(totalBlockCount - 1 + "\r\nblocks mined\r\n" + "period: " + chartPeriod);
                    pie.CenterFont.Color = Color.Orange;
                    pie.CenterFont.Size = (int)(13 * UIScale);
                    pie.CenterFont.Bold = false;
                    pie.SliceFillColors = colorSpectrum;
                    pie.ShowPercentages = true;
                    pie.ShowValues = false;
                    pie.ShowLabels = true;
                    pie.Size = .7;
                    pie.SliceFont.Size = (int)(11 * UIScale);
                    pie.SliceFont.Bold = false;
                    pie.SliceLabels = labelsAndValuesArray;
                    pie.SliceLabelColors = colorSpectrum;
                    pie.SliceLabelPosition = 0.60;

                    var padding = new ScottPlot.PixelPadding(
                        left: 45,
                        right: 25,
                        bottom: 15,
                        top: 27);
                    formsPlot2.Plot.ManualDataArea(padding);

                    formsPlot2.Plot.YAxis.Label("");
                    formsPlot2.Plot.XAxis.Label("");

                    // refresh the graph
                    formsPlot2.Refresh();
                    formsPlot2.Visible = true;
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating pools ranking chart");
            }
        }
        #endregion
        #region chart - fee rates
        private async void BtnChartFeeRates_Click(object sender, EventArgs e)
        {
            try
            {
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                chartType = "feerates";
                EnableAllCharts();
                btnChartFeeRates.Enabled = false;
                DisableIrrelevantTimePeriods();
                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title("Block fee rates - " + chartPeriod, size: (int)(13 * UIScale), bold: false);
                PrepareLinearScaleChart();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // Create an instance of HttpClient
                HttpClient client = new HttpClient();

                string url = NodeURL + "v1/mining/blocks/fee-rates/" + chartPeriod;
                LightUpNodeLight();
                string json = await client.GetStringAsync(url);
                if (!string.IsNullOrEmpty(json))
                {
                    List<BlockFeeRates> feeRatesList = JsonConvert.DeserializeObject<List<BlockFeeRates>>(json.ToString());

                    // set the number of points on the graph to the number of hashrates to display
                    int pointCount = feeRatesList.Count;

                    // create arrays of doubles of the hashrates and the dates
                    double[] yValues1 = feeRatesList.Select(h => (double)(h.AvgFee_100)).ToArray();
                    double[] yValues2 = feeRatesList.Select(h => (double)(h.AvgFee_90)).ToArray();
                    double[] yValues3 = feeRatesList.Select(h => (double)(h.AvgFee_75)).ToArray();
                    double[] yValues4 = feeRatesList.Select(h => (double)(h.AvgFee_50)).ToArray();
                    double[] yValues5 = feeRatesList.Select(h => (double)(h.AvgFee_25)).ToArray();
                    double[] yValues6 = feeRatesList.Select(h => (double)(h.AvgFee_10)).ToArray();
                    double[] yValues7 = feeRatesList.Select(h => (double)(h.AvgFee_0)).ToArray();
                    // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = feeRatesList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.Timestamp)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();

                    // prevent navigating beyond the data
                    double yBoundary = yValues2.Max();
                    if (yBoundary > 5000)
                    {
                        yBoundary = 5000;
                    }
                    formsPlot1.Plot.SetAxisLimits(xValues.Min(), xValues.Max(), 0, yBoundary);
                    formsPlot1.Plot.YAxis.SetBoundary(0, yBoundary);
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());
                    formsPlot1.Plot.AddFill(xValues, yValues1, 0, color: Color.FromArgb(30, Color.DarkGray));
                    formsPlot1.Plot.AddFill(xValues, yValues2, 0, color: Color.Red);
                    formsPlot1.Plot.AddFill(xValues, yValues3, 0, color: Color.Orange);
                    formsPlot1.Plot.AddFill(xValues, yValues4, 0, color: Color.Yellow);
                    formsPlot1.Plot.AddFill(xValues, yValues5, 0, color: Color.LimeGreen);
                    formsPlot1.Plot.AddFill(xValues, yValues6, 0, color: Color.Blue);
                    formsPlot1.Plot.AddFill(xValues, yValues7, 0, color: Color.Indigo);
                    // create 'pretend' (empty) scatters purely so we can generate a legend/key
                    formsPlot1.Plot.AddScatter(new double[] { 0 }, new double[] { 0 }, markerSize: 0, label: "minimum", color: Color.Indigo); 
                    formsPlot1.Plot.AddScatter(new double[] { 0 }, new double[] { 0 }, markerSize: 0, label: "10th", color: Color.Blue);
                    formsPlot1.Plot.AddScatter(new double[] { 0 }, new double[] { 0 }, markerSize: 0, label: "25th", color: Color.LimeGreen);
                    formsPlot1.Plot.AddScatter(new double[] { 0 }, new double[] { 0 }, markerSize: 0, label: "median", color: Color.Yellow);
                    formsPlot1.Plot.AddScatter(new double[] { 0 }, new double[] { 0 }, markerSize: 0, label: "75th", color: Color.Orange);
                    formsPlot1.Plot.AddScatter(new double[] { 0 }, new double[] { 0 }, markerSize: 0, label: "90th", color: Color.Red); 
                    formsPlot1.Plot.AddScatter(new double[] { 0 }, new double[] { 0 }, markerSize: 0, label: "maximum", color: Color.DarkGray);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Label("sats per v/byte", size: (int)(12 * UIScale), bold: false);
                    formsPlot1.Plot.XAxis.Label("");

                    var legend = formsPlot1.Plot.Legend();
                    legend.Location = Alignment.UpperLeft;
                    legend.FillColor = chartsBackgroundColor;
                    legend.FontColor = label77.ForeColor;
                    legend.OutlineColor = chartsBackgroundColor;
                    legend.ShadowColor = chartsBackgroundColor;

                    // Set the tick and gridline settings
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);

                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;
                    
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating fee rates chart");
            }
        }
        #endregion
        #region chart - nodes by network
        private async void BtnChartNodesByNetwork_Click(object sender, EventArgs e)
        {
            try
            {
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                chartType = "lightningnodesbynetwork";

                // if chart period too short for this chart, set it to max instead
                if (chartPeriod == "24h" || chartPeriod == "3d" || chartPeriod == "1w")
                {
                    chartPeriod = "all";
                    btnChartPeriodAll.Enabled = false;
                }
                EnableAllCharts();
                btnChartNodesByNetwork.Enabled = false;

                DisableIrrelevantTimePeriods();

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title("Number of Lightning nodes by network - " + chartPeriod, size: (int)(13 * UIScale), bold: false);

                PrepareLinearScaleChart();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // Create an instance of HttpClient
                HttpClient client = new HttpClient();

                string url = NodeURL + "v1/lightning/statistics/" + chartPeriod;
                LightUpNodeLight();
                string json = await client.GetStringAsync(url);
                if (!string.IsNullOrEmpty(json))
                {
                    List<NodesPerNetworkAndCapacity> lightningNodesPerNetworkList = JsonConvert.DeserializeObject<List<NodesPerNetworkAndCapacity>>(json.ToString());

                    // set the number of points on the graph
                    int pointCount = lightningNodesPerNetworkList.Count;

                    // create arrays of doubles
                    double[] yValues1 = lightningNodesPerNetworkList.Select(h => (double)(h.Tor_nodes)).ToArray();
                    double[] yValues2 = lightningNodesPerNetworkList.Select(h => (double)(h.Clearnet_nodes)).ToArray();
                    double[] yValues3 = lightningNodesPerNetworkList.Select(h => (double)(h.Unannounced_nodes)).ToArray();
                    double[] yValues4 = lightningNodesPerNetworkList.Select(h => (double)(h.Clearnet_tor_nodes)).ToArray();
                    // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = lightningNodesPerNetworkList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.Added)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();

                    // prevent navigating beyond the data
                    double yBoundary = yValues1.Max();
                    formsPlot1.Plot.SetAxisLimits(xValues.Min(), xValues.Max(), 0, yBoundary);
                    formsPlot1.Plot.YAxis.SetBoundary(0, yBoundary);
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());
                    formsPlot1.Plot.AddScatter(xValues, yValues1, lineWidth: 1, markerSize: 1, color: Color.IndianRed, label: "Darknet only (Tor, I2P, cjdns)");
                    formsPlot1.Plot.AddScatter(xValues, yValues2, lineWidth: 1, markerSize: 1, color: Color.OliveDrab, label: "Clearnet only (IPv4, IPv6)");
                    formsPlot1.Plot.AddScatter(xValues, yValues3, lineWidth: 1, markerSize: 1, color: Color.SteelBlue, label: "Clearnet and Darknet");
                    formsPlot1.Plot.AddScatter(xValues, yValues4, lineWidth: 1, markerSize: 1, color: Color.Gold, label: "Unknown");

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Label("lightning nodes per network", size: (int)(12 * UIScale), bold: false);
                    formsPlot1.Plot.XAxis.Label("");

                    var legend = formsPlot1.Plot.Legend();
                    legend.Location = Alignment.UpperLeft;
                    legend.FillColor = chartsBackgroundColor;
                    legend.FontColor = label77.ForeColor;
                    legend.OutlineColor = chartsBackgroundColor;
                    legend.ShadowColor = chartsBackgroundColor;

                    // Set the tick and gridline settings
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);

                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;
                    //panelFeeRatesKey.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating nodes by network chart");
            }
        }
        #endregion
        #region chart - hashrate linear and log
        private async void BtnChartHashrate_Click(object sender, EventArgs e)
        {
            try
            {
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                btnHashrateScaleLinear.Enabled = false;
                btnHashrateScaleLog.Enabled = true;
                chartType = "hashrate";
                // if chart period too short for this chart, set it to max instead
                if (chartPeriod == "24h" || chartPeriod == "3d" || chartPeriod == "1w" || chartPeriod == "1m")
                {
                    chartPeriod = "all";
                    btnChartPeriodAll.Enabled = false;
                }
                EnableAllCharts();
                btnChartHashrate.Enabled = false;
                DisableIrrelevantTimePeriods();

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title("Hashrate (exahash per second) - " + chartPeriod, size: (int)(13 * UIScale), bold: false);

                PrepareLinearScaleChart();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");
                LightUpNodeLight();
                // get a series of historic dates/hashrates/difficulties
                var HashrateAndDifficultyJson = await _hashrateAndDifficultyService.GetHashrateAndDifficultyAsync(chartPeriod);
                if (!string.IsNullOrEmpty(HashrateAndDifficultyJson))
                {
                    JObject jsonObj = JObject.Parse(HashrateAndDifficultyJson);

                    //split the data into two lists
                    List<HashrateSnapshot> hashratesList = JsonConvert.DeserializeObject<List<HashrateSnapshot>>(jsonObj["hashrates"].ToString());
                    List<DifficultySnapshot> difficultyList = JsonConvert.DeserializeObject<List<DifficultySnapshot>>(jsonObj["difficulty"].ToString());

                    // set the number of points on the graph to the number of hashrates to display
                    int pointCount = hashratesList.Count;

                    // create arrays of doubles of the hashrates and the dates
                    double[] yValues = hashratesList.Select(h => (double)(h.AvgHashrate / (decimal)1E18)).ToArray(); // divide by 1E18 to get exahash
                                                                                                                     // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = hashratesList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.Timestamp)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();

                    formsPlot1.Plot.SetAxisLimits(xValues.Min(), xValues.Max(), 0, yValues.Max() * 1.05);

                    scatter = formsPlot1.Plot.AddScatter(xValues, yValues, lineWidth: 1, markerSize: 1);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Label("EH/s", size: (int)(12 * UIScale), bold: false);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(0, yValues.Max() * 1.05);
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;

                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);

                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;

                    panelHashrateScaleButtons.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating hashrate chart");
            }
        }

        private async void BtnHashrateScaleLog_Click(object sender, EventArgs e)
        {
            try
            {
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                btnHashrateScaleLinear.Enabled = true;
                btnHashrateScaleLog.Enabled = false;
                chartType = "hashratelog";

                if (chartPeriod == "24h" || chartPeriod == "3d" || chartPeriod == "1w" || chartPeriod == "2y")
                {
                    chartPeriod = "all";
                    btnChartPeriodAll.Enabled = false;
                }

                EnableAllCharts();
                btnChartHashrate.Enabled = false;
                DisableIrrelevantTimePeriods();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title("Hashrate (terrahash per second) - " + chartPeriod + " (log scale)", size: (int)(13 * UIScale), bold: false);
                LightUpNodeLight();
                // get a series of historic dates/hashrates/difficulties
                var HashrateAndDifficultyJson = await _hashrateAndDifficultyService.GetHashrateAndDifficultyAsync(chartPeriod);
                if (!string.IsNullOrEmpty(HashrateAndDifficultyJson))
                {
                    JObject jsonObj = JObject.Parse(HashrateAndDifficultyJson);

                    //split the data into two lists
                    List<HashrateSnapshot> hashratesList = JsonConvert.DeserializeObject<List<HashrateSnapshot>>(jsonObj["hashrates"].ToString());
                    List<DifficultySnapshot> difficultyList = JsonConvert.DeserializeObject<List<DifficultySnapshot>>(jsonObj["difficulty"].ToString());

                    // set the number of points on the graph
                    int pointCount = hashratesList.Count;

                    // create arrays of doubles of the hashrates and the dates
                    double[] yValues = hashratesList.Select(h => (double)(h.AvgHashrate / (decimal)1E12)).ToArray(); // divide by 1E12 to get terrahash
                                                                                                                     // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = hashratesList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.Timestamp)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();


                    List<double> filteredYValues = new List<double>();
                    List<double> filteredXValues = new List<double>();

                    for (int i = 0; i < hashratesList.Count; i++)
                    {
                        //double yValue = (double)hashratesList[i].AvgHashrate;
                        double yValue = (double)yValues[i];
                        if (yValue > 0)
                        {
                            filteredYValues.Add(Math.Log10(yValue));
                            filteredXValues.Add(xValues[i]);
                        }
                    }

                    double[] yValues2 = filteredYValues.ToArray();
                    double[] xValuesFiltered = filteredXValues.ToArray();


                    double minY = yValues2.Min();
                    double maxY = yValues2.Max() * 1.05;
                    formsPlot1.Plot.SetAxisLimits(xValuesFiltered.Min(), xValuesFiltered.Max(), minY, maxY);
                    scatter = formsPlot1.Plot.AddScatter(xValuesFiltered, yValues2, lineWidth: 1, markerSize: 1);

                    // Use a custom formatter to control the label for each tick mark
                    static string logTickLabels(double y) => Math.Pow(10, y).ToString("N0");
                    formsPlot1.Plot.YAxis.TickLabelFormat(logTickLabels);

                    // Use log-spaced minor tick marks and grid lines
                    formsPlot1.Plot.YAxis.MinorLogScale(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MinorGrid(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Label("TH/s", size: (int)(12 * UIScale), bold: false);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(minY, maxY);
                    //formsPlot1.Plot.YAxis.SetBoundary(0, yValues.Max());
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;
                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;
                    panelHashrateScaleButtons.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating hashrate chart (log) chart");
            }
        }
        #endregion
        #region chart - lightning capacity
        private async void BtnChartLightningCapacity_Click(object sender, EventArgs e)
        {
            try
            {
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                chartType = "lightningcapacity";
                // if chart period too short for this chart, set it to max instead
                if (chartPeriod == "24h" || chartPeriod == "3d" || chartPeriod == "1w")
                {
                    chartPeriod = "all";
                    btnChartPeriodAll.Enabled = false;
                }

                EnableAllCharts();
                btnChartLightningCapacity.Enabled = false;
                DisableIrrelevantTimePeriods();

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title("Lightning network capacity - " + chartPeriod, size: (int)(13 * UIScale), bold: false);
                PrepareLinearScaleChart();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // Create an instance of HttpClient
                HttpClient client = new HttpClient();

                string url = NodeURL + "v1/lightning/statistics/" + chartPeriod;
                LightUpNodeLight();
                string json = await client.GetStringAsync(url);
                if (!string.IsNullOrEmpty(json))
                {
                    List<NodesPerNetworkAndCapacity> lightningCapacityList = JsonConvert.DeserializeObject<List<NodesPerNetworkAndCapacity>>(json.ToString());

                    // set the number of points on the graph
                    int pointCount = lightningCapacityList.Count;

                    // create arrays of doubles
                    double[] yValuesCapacity = lightningCapacityList.Select(h => (double)(h.Total_capacity / 100000000)).ToArray();

                    // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = lightningCapacityList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.Added)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();

                    formsPlot1.Plot.SetAxisLimits(xValues.Min(), xValues.Max(), 0, yValuesCapacity.Max() * 1.05);

                    scatter = formsPlot1.Plot.AddScatter(xValues, yValuesCapacity, lineWidth: 1, markerSize: 1);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Label("Capacity (BTC)", size: (int)(12 * UIScale), bold: false);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(0, yValuesCapacity.Max() * 1.05);
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;

                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);

                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating lightning capacity chart");
            }
        }
        #endregion
        #region chart - lightning channels
        private async void BtnChartLightningChannels_Click(object sender, EventArgs e)
        {
            try
            {
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                chartType = "lightningchannels";
                // if chart period too short for this chart, set it to max instead
                if (chartPeriod == "24h" || chartPeriod == "3d" || chartPeriod == "1w")
                {
                    chartPeriod = "all";
                    btnChartPeriodAll.Enabled = false;
                }

                EnableAllCharts();
                btnChartLightningChannels.Enabled = false;
                DisableIrrelevantTimePeriods();

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title("Lightning network channels - " + chartPeriod, size: (int)(13 * UIScale), bold: false);
                PrepareLinearScaleChart();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // Create an instance of HttpClient
                HttpClient client = new HttpClient();

                string url = NodeURL + "v1/lightning/statistics/" + chartPeriod;
                LightUpNodeLight();
                string json = await client.GetStringAsync(url);
                if (!string.IsNullOrEmpty(json))
                {
                    List<NodesPerNetworkAndCapacity> lightningChannelsList = JsonConvert.DeserializeObject<List<NodesPerNetworkAndCapacity>>(json.ToString());

                    // set the number of points on the graph
                    int pointCount = lightningChannelsList.Count;

                    // create arrays of doubles
                    double[] yValuesChannels = lightningChannelsList.Select(h => (double)(h.Channel_count)).ToArray();

                    // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = lightningChannelsList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.Added)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();

                    formsPlot1.Plot.SetAxisLimits(xValues.Min(), xValues.Max(), 0, yValuesChannels.Max() * 1.05);

                    scatter = formsPlot1.Plot.AddScatter(xValues, yValuesChannels, lineWidth: 1, markerSize: 1);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Label("Capacity (BTC)", size: (int)(12 * UIScale), bold: false);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(0, yValuesChannels.Max() * 1.05);
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;

                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);

                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating lightning channels chart");
            }
        }
        #endregion
        #region chart - nodes by country
        private async void BtnChartNodesByCountry_Click(object sender, EventArgs e)
        {
            try
            {
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot1.Visible = false;
                formsPlot2.Visible = false;
                chartType = "nodesbycountry";

                EnableAllCharts();
                btnChartNodesByCountry.Enabled = false;
                DisableIrrelevantTimePeriods();

                // clear any previous graph
                ClearAllChartData();
                formsPlot3.Plot.Title("Lightning nodes per country (excluding Darknet)", size: (int)(13 * UIScale), bold: false);

                // switch to linear scaling in case it was log before
                formsPlot3.Plot.YAxis.MinorLogScale(false);
                formsPlot3.Plot.YAxis.MajorGrid(false);
                formsPlot3.Plot.YAxis.MinorGrid(false);

                formsPlot3.Plot.XAxis.DateTimeFormat(false);

                // Define a new tick label formatter for the linear scale
                static string linearTickLabels(double y) => y.ToString("N0");
                formsPlot3.Plot.YAxis.TickLabelFormat(linearTickLabels);

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // Fetch data from the API
                string url = NodeURL + "v1/lightning/nodes/countries";
                HttpClient client = new HttpClient();
                LightUpNodeLight();
                string json = await client.GetStringAsync(url);
                if (!string.IsNullOrEmpty(json))
                {
                    // Deserialize the JSON response
                    var response = JsonConvert.DeserializeObject<LightningNodeCountry[]>(json);

                    // Extract the top 40 country names (En) and counts, handling nullable decimal values
                    string[] countryNames = response.Select(node => node.Name.En).Take(40).ToArray();
                    double[] counts = response.Select(node => Convert.ToDouble(node.Count)).Take(40).ToArray();
                    double[] allcounts = response.Select(node => Convert.ToDouble(node.Count)).ToArray();
                    double totalNodes = allcounts.Sum();
                    double nodesInTop40 = counts.Sum();
                    double nodesOfOtherCountries = totalNodes - nodesInTop40;
                    countryNames = countryNames.Concat(new[] { "Other" }).ToArray();
                    counts = counts.Concat(new[] { nodesOfOtherCountries }).ToArray();
                    // Create the ScottPlot bar chart
                    var bar = formsPlot3.Plot.AddBar(counts);
                    bar.Orientation = ScottPlot.Orientation.Horizontal;

                    // Generate a sequence of numbers for the Y-axis tick positions
                    double[] yPositions = Enumerable.Range(0, counts.Length).Select(y => (double)y).ToArray();

                    // Set the Y-axis tick positions and labels
                    formsPlot3.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot3.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot3.Plot.YTicks(yPositions, countryNames);
                    formsPlot3.Plot.YLabel("");
                    formsPlot3.Plot.XLabel("");
                    formsPlot3.Plot.SetAxisLimits(xMin: 0, xMax: counts.Max() * 1.05, yMin: -1, yMax: countryNames.Length + 1);
                    formsPlot3.Plot.XAxis.SetBoundary(0, counts.Max() * 1.05);
                    formsPlot3.Plot.YAxis.SetBoundary(-1, countryNames.Length +1);
                    formsPlot3.Plot.Layout(left: 100, bottom:50);

                    formsPlot3.Plot.Layout(left: 100, bottom: 50);

                    // refresh the graph
                    formsPlot3.Refresh();
                    formsPlot3.Visible = true;
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating nodes by country chart");
            }
        }
        #endregion
        #region chart - block reward
        private async void BtnChartReward_Click(object sender, EventArgs e)
        {
            try
            {
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                chartType = "reward";

                EnableAllCharts();
                btnChartReward.Enabled = false;
                DisableIrrelevantTimePeriods();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title("Block rewards (block subsidy plus fees) - " + chartPeriod, size: (int)(13 * UIScale), bold: false);
                PrepareLinearScaleChart();

                HttpClient client = new HttpClient();
                string url = NodeURL + "v1/mining/blocks/rewards/" + chartPeriod;
                LightUpNodeLight();
                string json = await client.GetStringAsync(url);
                if (!string.IsNullOrEmpty(json))
                {
                    // Deserialize JSON array into a list of HistoricRewardsAndPrice objects
                    List<HistoricRewardsAndPrice> rewardsAndPriceList = JsonConvert.DeserializeObject<List<HistoricRewardsAndPrice>>(json);

                    // set the number of points on the graph to the number of hashrates to display
                    int pointCount = rewardsAndPriceList.Count;

                    // create arrays of doubles of the rewards and the dates
                    double[] yValues = rewardsAndPriceList.Select(h => (double)(h.AvgRewards / 100000000)).ToArray();
                    // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = rewardsAndPriceList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.Timestamp)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();

                    formsPlot1.Plot.SetAxisLimits(xValues.Min(), xValues.Max(), 0, yValues.Max() * 1.05);
                    scatter = formsPlot1.Plot.AddScatter(xValues, yValues, lineWidth: 1, markerSize: 1);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Label("BTC", size: (int)(12 * UIScale), bold: false);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(0, yValues.Max() * 1.05);
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;

                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);

                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating block reward chart");
            }
        }
        #endregion
        #region chart - block fees
        private async void BtnChartBlockFees_Click(object sender, EventArgs e)
        {
            try
            {
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                chartType = "blockfees";

                EnableAllCharts();
                btnChartBlockFees.Enabled = false;
                DisableIrrelevantTimePeriods();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title("Average total fees per block - " + chartPeriod, size: (int)(13 * UIScale), bold: false);
                PrepareLinearScaleChart();

                HttpClient client = new HttpClient();
                string url = NodeURL + "v1/mining/blocks/fees/" + chartPeriod;
                LightUpNodeLight();
                string json = await client.GetStringAsync(url);
                if (!string.IsNullOrEmpty(json))
                {
                    // Deserialize JSON array into a list of HistoricFeesAndPrice objects
                    List<HistoricFeesAndPrice> feesAndPriceList = JsonConvert.DeserializeObject<List<HistoricFeesAndPrice>>(json);

                    // set the number of points on the graph to the number of hashrates to display
                    int pointCount = feesAndPriceList.Count;

                    // create arrays of doubles of the rewards and the dates
                    double[] yValues = feesAndPriceList.Select(h => (double)(h.AvgFees / 100000000)).ToArray();
                    // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = feesAndPriceList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.Timestamp)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();
                    formsPlot1.Plot.SetAxisLimits(xValues.Min(), xValues.Max(), 0, yValues.Max() * 1.05);
                    scatter = formsPlot1.Plot.AddScatter(xValues, yValues, lineWidth: 1, markerSize: 1);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Label("BTC", size: (int)(12 * UIScale), bold: false);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(0, yValues.Max() * 1.05);
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;

                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);
                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating block fees chart");
            }
        }
        #endregion
        #region chart - difficulty linear and log
        private async void BtnChartDifficulty_Click(object sender, EventArgs e)
        {
            try
            {
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                btnChartDifficultyLinear.Enabled = false;
                btnChartDifficultyLog.Enabled = true;
                chartType = "difficulty";

                // if chart period too short for this chart, set it to max instead
                if (chartPeriod == "24h" || chartPeriod == "3d" || chartPeriod == "1w" || chartPeriod == "1m")
                {
                    chartPeriod = "all";
                    btnChartPeriodAll.Enabled = false;
                }

                EnableAllCharts();
                btnChartDifficulty.Enabled = false;
                DisableIrrelevantTimePeriods();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title("Difficulty - " + chartPeriod, size: (int)(13 * UIScale), bold: false);
                PrepareLinearScaleChart();

                // get a series of historic dates/hashrates/difficulties
                LightUpNodeLight();
                var HashrateAndDifficultyJson = await _hashrateAndDifficultyService.GetHashrateAndDifficultyAsync(chartPeriod);
                if (!string.IsNullOrEmpty(HashrateAndDifficultyJson))
                {
                    JObject jsonObj = JObject.Parse(HashrateAndDifficultyJson);

                    //split the data into two lists
                    List<HashrateSnapshot> hashratesList = JsonConvert.DeserializeObject<List<HashrateSnapshot>>(jsonObj["hashrates"].ToString());
                    List<DifficultySnapshot> difficultyList = JsonConvert.DeserializeObject<List<DifficultySnapshot>>(jsonObj["difficulty"].ToString());

                    // set the number of points on the graph to the number of hashrates to display
                    int pointCount = difficultyList.Count;

                    // create arrays of doubles of the difficulties and the dates
                    double[] yValues = difficultyList.Select(h => (double)(h.Difficulty / (decimal)1E12)).ToArray(); // divide by 1E12 to convert to trillions
                                                                                                                     // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = difficultyList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.Time)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();
                    formsPlot1.Plot.SetAxisLimits(xValues.Min(), xValues.Max(), 0, yValues.Max() * 1.05);
                    scatter = formsPlot1.Plot.AddScatter(xValues, yValues, lineWidth: 1, markerSize: 1);
                    scatter.StepDisplay = true;

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Label("trillion", size: (int)(12 * UIScale), bold: false);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(0, yValues.Max() * 1.05);
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;

                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);

                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;
                    panelChartDifficultyScaleButtons.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating difficulty chart");
            }
        }

        private async void BtnChartDifficultyLog_Click(object sender, EventArgs e)
        {
            try
            {
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                btnChartDifficultyLinear.Enabled = true;
                btnChartDifficultyLog.Enabled = false;
                chartType = "difficultylog";

                if (chartPeriod == "24h" || chartPeriod == "3d" || chartPeriod == "1w" || chartPeriod == "2y")
                {
                    chartPeriod = "all";
                    btnChartPeriodAll.Enabled = false;
                }

                EnableAllCharts();
                btnChartDifficulty.Enabled = false;
                DisableIrrelevantTimePeriods();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title("Difficulty - " + chartPeriod + " (log scale)", size: (int)(13 * UIScale), bold: false);
                LightUpNodeLight();
                // get a series of historic dates/hashrates/difficulties
                var HashrateAndDifficultyJson = await _hashrateAndDifficultyService.GetHashrateAndDifficultyAsync(chartPeriod);
                if (!string.IsNullOrEmpty(HashrateAndDifficultyJson))
                {
                    JObject jsonObj = JObject.Parse(HashrateAndDifficultyJson);

                    //split the data into two lists
                    List<HashrateSnapshot> hashratesList = JsonConvert.DeserializeObject<List<HashrateSnapshot>>(jsonObj["hashrates"].ToString());
                    List<DifficultySnapshot> difficultyList = JsonConvert.DeserializeObject<List<DifficultySnapshot>>(jsonObj["difficulty"].ToString());

                    // set the number of points on the graph
                    int pointCount = difficultyList.Count;

                    // create arrays of doubles of the difficulties and the dates
                    double[] yValues = difficultyList.Select(h => (double)(h.Difficulty / (decimal)1E12)).ToArray(); // divide by 1E12 to convert to trillions
                                                                                                                     // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = difficultyList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.Time)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();


                    List<double> filteredYValues = new List<double>();
                    List<double> filteredXValues = new List<double>();

                    for (int i = 0; i < difficultyList.Count; i++)
                    {
                        //double yValue = (double)hashratesList[i].AvgHashrate;
                        double yValue = (double)yValues[i];
                        if (yValue > 0)
                        {
                            filteredYValues.Add(Math.Log10(yValue));
                            filteredXValues.Add(xValues[i]);
                        }
                    }

                    double[] yValues2 = filteredYValues.ToArray();
                    double[] xValuesFiltered = filteredXValues.ToArray();


                    double minY = yValues2.Min();
                    double maxY = yValues2.Max() * 1.05;
                    formsPlot1.Plot.SetAxisLimits(xValuesFiltered.Min(), xValuesFiltered.Max(), minY, maxY);
                    scatter = formsPlot1.Plot.AddScatter(xValuesFiltered, yValues2, lineWidth: 1, markerSize: 1);

                    // Use a custom formatter to control the label for each tick mark
                    static string logTickLabels(double y) => Math.Pow(10, y).ToString("N0");
                    formsPlot1.Plot.YAxis.TickLabelFormat(logTickLabels);

                    // Use log-spaced minor tick marks and grid lines
                    formsPlot1.Plot.YAxis.MinorLogScale(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MinorGrid(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Label("trillion", size: (int)(12 * UIScale), bold: false);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(minY, maxY);
                    //formsPlot1.Plot.YAxis.SetBoundary(0, yValues.Max());
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;
                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;
                    panelChartDifficultyScaleButtons.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating difficulty chart (log) chart");
            }
        }
        #endregion
        #region chart - unique addresses linear and log
        private async void BtnChartUniqueAddresses_Click(object sender, EventArgs e)
        {
            try
            {
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                btnChartAddressScaleLinear.Enabled = false;
                btnChartAddressScaleLog.Enabled = true;
                chartType = "addresses";

                if (chartPeriod == "24h" || chartPeriod == "3d" || chartPeriod == "1w" || chartPeriod == "2y")
                {
                    chartPeriod = "all";
                    btnChartPeriodAll.Enabled = false;
                }
                EnableAllCharts();
                btnChartUniqueAddresses.Enabled = false;
                DisableIrrelevantTimePeriods();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title("Unique addresses - " + chartPeriod, size: (int)(13 * UIScale), bold: false);
                PrepareLinearScaleChart();
                // get a series of historic price data
                var UniqueAddressesDataJson = await _uniqueAddressesDataService.GetUniqueAddressesDataAsync(chartPeriod);
                if (!string.IsNullOrEmpty(UniqueAddressesDataJson))
                {
                    JObject jsonObj = JObject.Parse(UniqueAddressesDataJson);

                    List<UniqueAddressesList> AddressesList = JsonConvert.DeserializeObject<List<UniqueAddressesList>>(jsonObj["values"].ToString());

                    // set the number of points on the graph
                    int pointCount = AddressesList.Count;

                    // create arrays of doubles of the amounts and the dates
                    double[] yValues = AddressesList.Select(h => (double)(h.Y)).ToArray();
                    // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = AddressesList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.X)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();
                    formsPlot1.Plot.SetAxisLimits(xValues.Min(), xValues.Max(), 0, yValues.Max() * 1.05);
                    scatter = formsPlot1.Plot.AddScatter(xValues, yValues, lineWidth: 1, markerSize: 1);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Label("Unique addresses", size: (int)(12 * UIScale), bold: false);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(0, yValues.Max() * 1.05);
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;

                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);

                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;
                    panelUniqueAddressesScaleButtons.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating unique addresses chart");
            }
        }

        private async void BtnChartUniqueAddressesLog_Click(object sender, EventArgs e)
        {
            try
            {
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                btnChartAddressScaleLinear.Enabled = true;
                btnChartAddressScaleLog.Enabled = false;
                chartType = "addresseslog";

                if (chartPeriod == "24h" || chartPeriod == "3d" || chartPeriod == "1w" || chartPeriod == "2y")
                {
                    chartPeriod = "all";
                    btnChartPeriodAll.Enabled = false;
                }

                EnableAllCharts();
                btnChartUniqueAddresses.Enabled = false;
                DisableIrrelevantTimePeriods();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title("Unique addresses - " + chartPeriod + " (log scale)", size: (int)(13 * UIScale), bold: false);

                // get a series of historic price data
                var UniqueAddressesDataJson = await _uniqueAddressesDataService.GetUniqueAddressesDataAsync(chartPeriod);
                if (!string.IsNullOrEmpty(UniqueAddressesDataJson))
                {
                    JObject jsonObj = JObject.Parse(UniqueAddressesDataJson);

                    List<UniqueAddressesList> AddressList = JsonConvert.DeserializeObject<List<UniqueAddressesList>>(jsonObj["values"].ToString());

                    // set the number of points on the graph
                    int pointCount = AddressList.Count;

                    // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = AddressList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.X)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();


                    List<double> filteredYValues = new List<double>();
                    List<double> filteredXValues = new List<double>();

                    for (int i = 0; i < AddressList.Count; i++)
                    {
                        double yValue = (double)AddressList[i].Y;
                        if (yValue > 0)
                        {
                            filteredYValues.Add(Math.Log10(yValue));
                            filteredXValues.Add(xValues[i]);
                        }
                    }

                    double[] yValues = filteredYValues.ToArray();
                    double[] xValuesFiltered = filteredXValues.ToArray();


                    double minY = yValues.Min();
                    double maxY = yValues.Max() * 1.05;
                    formsPlot1.Plot.SetAxisLimits(xValuesFiltered.Min(), xValuesFiltered.Max(), minY, maxY);
                    scatter = formsPlot1.Plot.AddScatter(xValuesFiltered, yValues, lineWidth: 1, markerSize: 1);

                    // Use a custom formatter to control the label for each tick mark
                    static string logTickLabels(double y) => Math.Pow(10, y).ToString("N0");
                    formsPlot1.Plot.YAxis.TickLabelFormat(logTickLabels);

                    // Use log-spaced minor tick marks and grid lines
                    formsPlot1.Plot.YAxis.MinorLogScale(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MinorGrid(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Label("Unique addresses", size: (int)(12 * UIScale), bold: false);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(minY, maxY);
                    //formsPlot1.Plot.YAxis.SetBoundary(0, yValues.Max());
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;

                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;
                    panelUniqueAddressesScaleButtons.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating unique addresses (log) chart");
            }
        }
        #endregion
        #region chart - price linear and log
        private async void BtnChartPrice_Click(object sender, EventArgs e)
        {
            try
            {
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                btnPriceChartScaleLinear.Enabled = false;
                btnPriceChartScaleLog.Enabled = true;
                chartType = "price";

                if (chartPeriod == "24h" || chartPeriod == "3d" || chartPeriod == "1w" || chartPeriod == "2y")
                {
                    chartPeriod = "all";
                    btnChartPeriodAll.Enabled = false;
                }

                EnableAllCharts();
                btnChartPrice.Enabled = false;
                DisableIrrelevantTimePeriods();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title("Average USD market price across major bitcoin exchanges - " + chartPeriod, size: (int)(13 * UIScale), bold: false);
                formsPlot1.Plot.YAxis.Label("Price (USD)", size: (int)(12 * UIScale), bold: false);
                PrepareLinearScaleChart();

                // get a series of historic price data
                var HistoricPriceDataJson = await _historicPriceDataService.GetHistoricPriceDataAsync(chartPeriod);
                if (!string.IsNullOrEmpty(HistoricPriceDataJson))
                {
                    JObject jsonObj = JObject.Parse(HistoricPriceDataJson);

                    List<PriceCoordinatesList> PriceList = JsonConvert.DeserializeObject<List<PriceCoordinatesList>>(jsonObj["values"].ToString());

                    // convert data to GBP, EUR, XAU if needed
                    decimal selectedCurrency = 0;
                    decimal exchangeRate = 1;
                    if (btnUSD.Enabled) // user has selected a currency other than USD
                    {
                        // get 
                        var (priceUSD, priceGBP, priceEUR, priceXAU) = BitcoinExplorerOrgGetPrice();
                        //var (priceUSD, priceGBP, priceEUR) = BitcoinExplorerOrgGetPrice();
                        if (!btnGBP.Enabled) //GBP is selected
                        {
                            selectedCurrency = Convert.ToDecimal(priceGBP);
                            formsPlot1.Plot.Title("Average GBP market price across major bitcoin exchanges - " + chartPeriod, size: 13, bold: true);
                            formsPlot1.Plot.YAxis.Label("Price (GBP)", size: 12, bold: false);
                        }
                        if (!btnEUR.Enabled) //EUR is selected
                        {
                            selectedCurrency = Convert.ToDecimal(priceEUR);
                            formsPlot1.Plot.Title("Average EUR market price across major bitcoin exchanges - " + chartPeriod, size: 13, bold: true);
                            formsPlot1.Plot.YAxis.Label("Price (EUR)", size: 12, bold: false);
                        }
                        if (!btnXAU.Enabled) //XAU is selected
                        {
                            selectedCurrency = Convert.ToDecimal(priceXAU);
                            formsPlot1.Plot.Title("Average XAU market price across major bitcoin exchanges - " + chartPeriod, size: 13, bold: true);
                            formsPlot1.Plot.YAxis.Label("Price (XAU)", size: 12, bold: false);
                        }
                        exchangeRate = selectedCurrency / Convert.ToDecimal(priceUSD);

                        foreach (var item in PriceList)
                        {
                            item.Y *= exchangeRate;
                        }
                    }

                    // set the number of points on the graph
                    int pointCount = PriceList.Count;

                    // create arrays of doubles of the prices and the dates
                    double[] yValues = PriceList.Select(h => (double)(h.Y)).ToArray();

                    // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = PriceList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.X)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();
                    formsPlot1.Plot.SetAxisLimits(xValues.Min(), xValues.Max(), 0, yValues.Max() * 1.05);
                    scatter = formsPlot1.Plot.AddScatter(xValues, yValues, lineWidth: 1, markerSize: 1);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(0, yValues.Max() * 1.05);
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;

                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);

                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;
                    panelPriceScaleButtons.Visible = true;
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating price chart");
            }
        }

        private async void BtnChartPriceLog_Click(object sender, EventArgs e)
        {
            try
            {
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                btnPriceChartScaleLinear.Enabled = true;
                btnPriceChartScaleLog.Enabled = false;
                chartType = "pricelog";

                if (chartPeriod == "24h" || chartPeriod == "3d" || chartPeriod == "1w" || chartPeriod == "2y")
                {
                    chartPeriod = "all";
                    btnChartPeriodAll.Enabled = false;
                }

                EnableAllCharts();
                btnChartPrice.Enabled = false;
                DisableIrrelevantTimePeriods();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title("Average USD market price across major bitcoin exchanges - " + chartPeriod + " (log scale)", size: (int)(13 * UIScale), bold: false);
                formsPlot1.Plot.YAxis.Label("Price (USD)", size: (int)(12 * UIScale), bold: false);
                // get a series of historic price data
                var HistoricPriceDataJson = await _historicPriceDataService.GetHistoricPriceDataAsync(chartPeriod);
                if (!string.IsNullOrEmpty(HistoricPriceDataJson))
                {
                    JObject jsonObj = JObject.Parse(HistoricPriceDataJson);

                    List<PriceCoordinatesList> PriceList = JsonConvert.DeserializeObject<List<PriceCoordinatesList>>(jsonObj["values"].ToString());

                    // convert data to GBP, EUR, XAU if needed
                    decimal selectedCurrency = 0;
                    decimal exchangeRate = 1;
                    if (btnUSD.Enabled) // user has selected a currency other than USD
                    {
                        // get 
                        var (priceUSD, priceGBP, priceEUR, priceXAU) = BitcoinExplorerOrgGetPrice();
                        //var (priceUSD, priceGBP, priceEUR) = BitcoinExplorerOrgGetPrice();
                        if (!btnGBP.Enabled) //GBP is selected
                        {
                            selectedCurrency = Convert.ToDecimal(priceGBP);
                            formsPlot1.Plot.Title("Average GBP market price across major bitcoin exchanges - " + chartPeriod, size: 13, bold: true);
                            formsPlot1.Plot.YAxis.Label("Price (GBP)", size: 12, bold: false);
                        }
                        if (!btnEUR.Enabled) //EUR is selected
                        {
                            selectedCurrency = Convert.ToDecimal(priceEUR);
                            formsPlot1.Plot.Title("Average EUR market price across major bitcoin exchanges - " + chartPeriod, size: 13, bold: true);
                            formsPlot1.Plot.YAxis.Label("Price (EUR)", size: 12, bold: false);
                        }
                        if (!btnXAU.Enabled) //XAU is selected
                        {
                            selectedCurrency = Convert.ToDecimal(priceXAU);
                            formsPlot1.Plot.Title("Average XAU market price across major bitcoin exchanges - " + chartPeriod, size: 13, bold: true);
                            formsPlot1.Plot.YAxis.Label("Price (XAU)", size: 12, bold: false);
                        }
                        exchangeRate = selectedCurrency / Convert.ToDecimal(priceUSD);

                        foreach (var item in PriceList)
                        {
                            item.Y *= exchangeRate;
                        }
                    }

                    // set the number of points on the graph
                    int pointCount = PriceList.Count;

                    // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = PriceList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.X)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();


                    List<double> filteredYValues = new List<double>();
                    List<double> filteredXValues = new List<double>();

                    for (int i = 0; i < PriceList.Count; i++)
                    {
                        double yValue = (double)PriceList[i].Y;
                        if (yValue > 0)
                        {
                            filteredYValues.Add(Math.Log10(yValue));
                            filteredXValues.Add(xValues[i]);
                        }
                    }

                    double[] yValues = filteredYValues.ToArray();
                    double[] xValuesFiltered = filteredXValues.ToArray();


                    double minY = yValues.Min();
                    double maxY = yValues.Max() * 1.05;
                    formsPlot1.Plot.SetAxisLimits(xValuesFiltered.Min(), xValuesFiltered.Max(), minY, maxY);
                    scatter = formsPlot1.Plot.AddScatter(xValuesFiltered, yValues, lineWidth: 1, markerSize: 1);

                    // Use a custom formatter to control the label for each tick mark
                    static string logTickLabels(double y) => Math.Pow(10, y).ToString("N0");
                    formsPlot1.Plot.YAxis.TickLabelFormat(logTickLabels);

                    // Use log-spaced minor tick marks and grid lines
                    formsPlot1.Plot.YAxis.MinorLogScale(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MinorGrid(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(minY, maxY);
                    //formsPlot1.Plot.YAxis.SetBoundary(0, yValues.Max());
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;
                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;
                    panelPriceScaleButtons.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating price (log) chart");
            }
        }
        #endregion
        #region chart - market cap linear and log
        private async void BtnChartMarketCap_Click(object sender, EventArgs e)
        {
            try
            {
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                btnPriceChartScaleLinear.Enabled = false;
                btnChartMarketCapScaleLog.Enabled = true;
                chartType = "marketcap";

                if (chartPeriod == "24h" || chartPeriod == "3d" || chartPeriod == "1w" || chartPeriod == "2y")
                {
                    chartPeriod = "all";
                    btnChartPeriodAll.Enabled = false;
                }

                EnableAllCharts();
                btnChartMarketCap.Enabled = false;
                btnChartMarketCapScaleLinear.Enabled = false;
                DisableIrrelevantTimePeriods();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title("Market capitalization in USD - " + chartPeriod, size: (int)(13 * UIScale), bold: false);
                formsPlot1.Plot.YAxis.Label("Market Capitalization (USD)", size: (int)(12 * UIScale), bold: false);
                PrepareLinearScaleChart();

                // get a series of historic price data
                var MarketCapDataJson = await _marketCapDataService.GetMarketCapDataAsync(chartPeriod);
                if (!string.IsNullOrEmpty(MarketCapDataJson))
                {
                    JObject jsonObj = JObject.Parse(MarketCapDataJson);

                    List<MarketCapCoordinatesList> MarketCapList = JsonConvert.DeserializeObject<List<MarketCapCoordinatesList>>(jsonObj["values"].ToString());

                    // convert data to GBP, EUR, XAU if needed
                    decimal selectedCurrency = 0;
                    decimal exchangeRate = 1;
                    if (btnUSD.Enabled) // user has selected a currency other than USD
                    {
                        // get 
                        var (priceUSD, priceGBP, priceEUR, priceXAU) = BitcoinExplorerOrgGetPrice();
                        //var (priceUSD, priceGBP, priceEUR) = BitcoinExplorerOrgGetPrice();
                        if (!btnGBP.Enabled) //GBP is selected
                        {
                            selectedCurrency = Convert.ToDecimal(priceGBP);
                            formsPlot1.Plot.Title("Average GBP market price across major bitcoin exchanges - " + chartPeriod, size: 13, bold: true);
                            formsPlot1.Plot.YAxis.Label("Market Capitalization (GBP)", size: 12, bold: false);
                        }
                        if (!btnEUR.Enabled) //EUR is selected
                        {
                            selectedCurrency = Convert.ToDecimal(priceEUR);
                            formsPlot1.Plot.Title("Average EUR market price across major bitcoin exchanges - " + chartPeriod, size: 13, bold: true);
                            formsPlot1.Plot.YAxis.Label("Market Capitalization (EUR)", size: 12, bold: false);
                        }
                        if (!btnXAU.Enabled) //XAU is selected
                        {
                            selectedCurrency = Convert.ToDecimal(priceXAU);
                            formsPlot1.Plot.Title("Average XAU market price across major bitcoin exchanges - " + chartPeriod, size: 13, bold: true);
                            formsPlot1.Plot.YAxis.Label("Market Capitalization (XAU)", size: 12, bold: false);
                        }
                        exchangeRate = selectedCurrency / Convert.ToDecimal(priceUSD);

                        foreach (var item in MarketCapList)
                        {
                            item.Y *= exchangeRate;
                        }
                    }

                    // set the number of points on the graph
                    int pointCount = MarketCapList.Count;

                    // create arrays of doubles of the difficulties and the dates
                    double[] yValues = MarketCapList.Select(h => (double)(h.Y)).ToArray();
                    // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = MarketCapList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.X)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();
                    formsPlot1.Plot.SetAxisLimits(xValues.Min(), xValues.Max(), 0, yValues.Max() * 1.05);
                    scatter = formsPlot1.Plot.AddScatter(xValues, yValues, lineWidth: 1, markerSize: 1);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: 10);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(0, yValues.Max() * 1.05);
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;

                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);

                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;
                    panelChartMarketCapScaleButtons.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating market cap chart");
            }
        }

        private async void BtnChartMarketCapScaleLog_Click(object sender, EventArgs e)
        {
            try
            {
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                btnChartMarketCapScaleLinear.Enabled = true;
                btnChartMarketCapScaleLog.Enabled = false;
                chartType = "marketcaplog";

                if (chartPeriod == "24h" || chartPeriod == "3d" || chartPeriod == "1w" || chartPeriod == "2y")
                {
                    chartPeriod = "all";
                    btnChartPeriodAll.Enabled = false;
                }

                EnableAllCharts();
                btnChartMarketCap.Enabled = false;
                btnChartMarketCapScaleLog.Enabled = false;
                DisableIrrelevantTimePeriods();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title("Market capitalization in USD - " + chartPeriod + " (log scale)", size: (int)(13 * UIScale), bold: false);
                formsPlot1.Plot.YAxis.Label("Market Capitalization (USD)", size: (int)(12 * UIScale), bold: false);
                // get a series of market cap data
                var MarketCapDataJson = await _marketCapDataService.GetMarketCapDataAsync(chartPeriod);
                if (!string.IsNullOrEmpty(MarketCapDataJson))
                {
                    JObject jsonObj = JObject.Parse(MarketCapDataJson);

                    List<MarketCapCoordinatesList> MarketCapList = JsonConvert.DeserializeObject<List<MarketCapCoordinatesList>>(jsonObj["values"].ToString());

                    // convert data to GBP, EUR, XAU if needed
                    decimal selectedCurrency = 0;
                    decimal exchangeRate = 1;
                    if (btnUSD.Enabled) // user has selected a currency other than USD
                    {
                        // get 
                        var (priceUSD, priceGBP, priceEUR, priceXAU) = BitcoinExplorerOrgGetPrice();
                        //var (priceUSD, priceGBP, priceEUR) = BitcoinExplorerOrgGetPrice();
                        if (!btnGBP.Enabled) //GBP is selected
                        {
                            selectedCurrency = Convert.ToDecimal(priceGBP);
                            formsPlot1.Plot.Title("Average GBP market price across major bitcoin exchanges - " + chartPeriod, size: 13, bold: true);
                            formsPlot1.Plot.YAxis.Label("Market Capitalization (GBP)", size: 12, bold: false);
                        }
                        if (!btnEUR.Enabled) //EUR is selected
                        {
                            selectedCurrency = Convert.ToDecimal(priceEUR);
                            formsPlot1.Plot.Title("Average EUR market price across major bitcoin exchanges - " + chartPeriod, size: 13, bold: true);
                            formsPlot1.Plot.YAxis.Label("Market Capitalization (EUR)", size: 12, bold: false);
                        }
                        if (!btnXAU.Enabled) //XAU is selected
                        {
                            selectedCurrency = Convert.ToDecimal(priceXAU);
                            formsPlot1.Plot.Title("Average XAU market price across major bitcoin exchanges - " + chartPeriod, size: 13, bold: true);
                            formsPlot1.Plot.YAxis.Label("Market Capitalization (XAU)", size: 12, bold: false);
                        }
                        exchangeRate = selectedCurrency / Convert.ToDecimal(priceUSD);

                        foreach (var item in MarketCapList)
                        {
                            item.Y *= exchangeRate;
                        }
                    }

                    // set the number of points on the graph
                    int pointCount = MarketCapList.Count;

                    // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = MarketCapList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.X)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();


                    List<double> filteredYValues = new List<double>();
                    List<double> filteredXValues = new List<double>();

                    for (int i = 0; i < MarketCapList.Count; i++)
                    {
                        double yValue = (double)MarketCapList[i].Y;
                        if (yValue > 0)
                        {
                            filteredYValues.Add(Math.Log10(yValue));
                            filteredXValues.Add(xValues[i]);
                        }
                    }

                    double[] yValues = filteredYValues.ToArray();
                    double[] xValuesFiltered = filteredXValues.ToArray();


                    double minY = yValues.Min();
                    double maxY = yValues.Max() * 1.05;
                    formsPlot1.Plot.SetAxisLimits(xValuesFiltered.Min(), xValuesFiltered.Max(), minY, maxY);
                    scatter = formsPlot1.Plot.AddScatter(xValuesFiltered, yValues, lineWidth: 1, markerSize: 1);

                    // Use a custom formatter to control the label for each tick mark
                    static string logTickLabels(double y) => Math.Pow(10, y).ToString("N0");
                    formsPlot1.Plot.YAxis.TickLabelFormat(logTickLabels);

                    // Use log-spaced minor tick marks and grid lines
                    formsPlot1.Plot.YAxis.MinorLogScale(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MinorGrid(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(minY, maxY);
                    //formsPlot1.Plot.YAxis.SetBoundary(0, yValues.Max());
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;
                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;
                    panelChartMarketCapScaleButtons.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating market cap (log) chart");
            }
        }
        #endregion
        #region chart - utxo count linear and log
        private async void BtnChartUTXO_Click(object sender, EventArgs e)
        {
            try
            {
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                btnChartUTXOScaleLinear.Enabled = false;
                btnChartUTXOScaleLog.Enabled = true;
                chartType = "utxo";

                if (chartPeriod == "24h" || chartPeriod == "3d" || chartPeriod == "1w" || chartPeriod == "2y")
                {
                    chartPeriod = "all";
                    btnChartPeriodAll.Enabled = false;
                }

                EnableAllCharts();
                btnChartUTXO.Enabled = false;
                DisableIrrelevantTimePeriods();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title("Total number of valid unspent transaction outputs - " + chartPeriod, size: (int)(13 * UIScale), bold: false);
                PrepareLinearScaleChart();

                // get a series of historic price data
                var UTXODataJson = await _utxoDataService.GetUTXODataAsync(chartPeriod);
                if (!string.IsNullOrEmpty(UTXODataJson))
                {
                    JObject jsonObj = JObject.Parse(UTXODataJson);

                    List<UTXOList> UTXOList = JsonConvert.DeserializeObject<List<UTXOList>>(jsonObj["values"].ToString());

                    // set the number of points on the graph
                    int pointCount = UTXOList.Count;

                    // create arrays of doubles
                    double[] yValues = UTXOList.Select(h => (double)(h.Y)).ToArray();
                    // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = UTXOList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.X)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();
                    formsPlot1.Plot.SetAxisLimits(xValues.Min(), xValues.Max(), 0, yValues.Max() * 1.05);
                    scatter = formsPlot1.Plot.AddScatter(xValues, yValues, lineWidth: 1, markerSize: 1);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Label("valid UTXO count", size: (int)(12 * UIScale), bold: false);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(0, yValues.Max() * 1.05);
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;

                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);

                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;
                    panelChartUTXOScaleButtons.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating UTXO chart");
            }
        }

        private async void BtnChartUTXOScaleLog_Click(object sender, EventArgs e)
        {
            try
            {
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                btnChartUTXOScaleLinear.Enabled = true;
                btnChartUTXOScaleLog.Enabled = false;
                chartType = "pricelog";

                if (chartPeriod == "24h" || chartPeriod == "3d" || chartPeriod == "1w" || chartPeriod == "2y")
                {
                    chartPeriod = "all";
                    btnChartPeriodAll.Enabled = false;
                }

                EnableAllCharts();
                btnChartUTXO.Enabled = false;
                DisableIrrelevantTimePeriods();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title("Total number of valid unspent transaction outputs - " + chartPeriod + " (log scale)", size: (int)(13 * UIScale), bold: false);

                // get a series of historic price data
                var UTXODataJson = await _utxoDataService.GetUTXODataAsync(chartPeriod);
                if (!string.IsNullOrEmpty(UTXODataJson))
                {
                    JObject jsonObj = JObject.Parse(UTXODataJson);

                    List<UTXOList> UTXOList = JsonConvert.DeserializeObject<List<UTXOList>>(jsonObj["values"].ToString());

                    // set the number of points on the graph
                    int pointCount = UTXOList.Count;

                    // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = UTXOList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.X)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();


                    List<double> filteredYValues = new List<double>();
                    List<double> filteredXValues = new List<double>();

                    for (int i = 0; i < UTXOList.Count; i++)
                    {
                        double yValue = (double)UTXOList[i].Y;
                        if (yValue > 0)
                        {
                            filteredYValues.Add(Math.Log10(yValue));
                            filteredXValues.Add(xValues[i]);
                        }
                    }

                    double[] yValues = filteredYValues.ToArray();
                    double[] xValuesFiltered = filteredXValues.ToArray();


                    double minY = yValues.Min();
                    double maxY = yValues.Max() * 1.05;
                    formsPlot1.Plot.SetAxisLimits(xValuesFiltered.Min(), xValuesFiltered.Max(), minY, maxY);
                    scatter = formsPlot1.Plot.AddScatter(xValuesFiltered, yValues, lineWidth: 1, markerSize: 1);

                    // Use a custom formatter to control the label for each tick mark
                    static string logTickLabels(double y) => Math.Pow(10, y).ToString("N0");
                    formsPlot1.Plot.YAxis.TickLabelFormat(logTickLabels);

                    // Use log-spaced minor tick marks and grid lines
                    formsPlot1.Plot.YAxis.MinorLogScale(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MinorGrid(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Label("valid UTXO count", size: (int)(12 * UIScale), bold: false);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(minY, maxY);
                    //formsPlot1.Plot.YAxis.SetBoundary(0, yValues.Max());
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;
                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;
                    panelChartUTXOScaleButtons.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating UTXO (log) chart");
            }
        }
        #endregion
        #region chart - block size
        private async void BtnChartBlockSize_Click(object sender, EventArgs e)
        {
            try
            {
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                chartType = "blocksize";

                EnableAllCharts();
                btnChartBlockSize.Enabled = false;
                DisableIrrelevantTimePeriods();

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title("Block size - " + chartPeriod, size: (int)(13 * UIScale), bold: false);
                PrepareLinearScaleChart();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");
                LightUpNodeLight();
                // get a series of historic dates/hashrates/difficulties
                var BlockSizeAndWeightJson = await _blockSizeAndWeightService.GetBlockSizeAndWeightServiceAsync(chartPeriod);
                if (!string.IsNullOrEmpty(BlockSizeAndWeightJson))
                {
                    JObject jsonObj = JObject.Parse(BlockSizeAndWeightJson);

                    //split the data into two lists
                    List<Sizes> blockSizeList = JsonConvert.DeserializeObject<List<Sizes>>(jsonObj["sizes"].ToString());
                    List<Weights> blockWeightList = JsonConvert.DeserializeObject<List<Weights>>(jsonObj["weights"].ToString());

                    // set the number of points on the graph to the number of records to display
                    int pointCount = blockSizeList.Count;

                    // create arrays of doubles of the hashrates and the dates

                    double[] yValues = blockSizeList.Select(h => (double)h.AvgSize / (1000 * 1000)).ToArray();
                    //double[] yValues = blockSizeList.Select(h => (double)(h.AvgSize / (decimal)1E18)).ToArray(); // divide by 1E18 to get exahash
                    // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = blockSizeList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.Timestamp)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();

                    formsPlot1.Plot.SetAxisLimits(xValues.Min(), xValues.Max(), 0, yValues.Max() * 1.05);

                    scatter = formsPlot1.Plot.AddScatter(xValues, yValues, lineWidth: 1, markerSize: 1);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Label("Block size (MB)", size: (int)(12 * UIScale), bold: false);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(0, yValues.Max() * 1.05);
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;

                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);

                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating block size chart");
            }
        }
        #endregion
        #region chart - circulation
        private async void BtnChartCirculation_Click(object sender, EventArgs e)
        {
            try
            {
                ShowChartLoadingPanel();
                HideAllChartKeysAndPanels();
                formsPlot2.Visible = false;
                formsPlot3.Visible = false;
                chartType = "circulation";

                if (chartPeriod == "24h" || chartPeriod == "3d" || chartPeriod == "1w" || chartPeriod == "2y")
                {
                    chartPeriod = "all";
                    btnChartPeriodAll.Enabled = false;
                }

                EnableAllCharts();
                btnChartCirculation.Enabled = false;
                DisableIrrelevantTimePeriods();

                ToggleLoadingAnimation("enable");
                DisableEnableChartButtons("disable");

                // clear any previous graph
                ClearAllChartData();
                formsPlot1.Plot.Title("Bitcoin circulation - " + chartPeriod, size: (int)(13 * UIScale), bold: false);
                PrepareLinearScaleChart();

                // get a series of historic dates and amounts of btc in circulation
                var CirculationJson = await _bitcoinsInCirculationDataService.GetBitcoinsInCirculationAsync(chartPeriod);
                if (!string.IsNullOrEmpty(CirculationJson))
                {
                    JObject jsonObj = JObject.Parse(CirculationJson);

                    List<BTCInCircChartCoordinates> CirculationList = JsonConvert.DeserializeObject<List<BTCInCircChartCoordinates>>(jsonObj["values"].ToString());

                    // set the number of points on the graph
                    int pointCount = CirculationList.Count;

                    // create arrays of doubles of the difficulties and the dates
                    double[] yValues = CirculationList.Select(h => (double)(h.Y)).ToArray();
                    // create a new list of the dates, this time in DateTime format
                    List<DateTime> dateTimes = CirculationList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.X)).LocalDateTime).ToList();
                    double[] xValues = dateTimes.Select(x => x.ToOADate()).ToArray();
                    formsPlot1.Plot.SetAxisLimits(xValues.Min(), xValues.Max(), 0, 22500000);
                    scatter = formsPlot1.Plot.AddScatter(xValues, yValues, lineWidth: 1, markerSize: 1, color: Color.Orange);

                    double[] yConstant = new double[xValues.Count()];
                    for (int i = 0; i < xValues.Count(); i++)
                    {
                        yConstant[i] = 21000000;
                    }

                    formsPlot1.Plot.AddFill(xValues, yConstant, 0, color: Color.FromArgb(30, Color.Orange));
                    formsPlot1.Plot.AddFill(xValues, yValues, 0, color: Color.Orange);
                    // create 'pretend' (empty) scatters purely so we can generate a legend/key
                    formsPlot1.Plot.AddScatter(new double[] { 0 }, new double[] { 0 }, markerSize: 0, label: "to be mined", color: Color.FromArgb(30, Color.Orange));
                    formsPlot1.Plot.AddScatter(new double[] { 0 }, new double[] { 0 }, markerSize: 0, label: "already mined", color: Color.Orange);

                    formsPlot1.Plot.XAxis.DateTimeFormat(true);
                    formsPlot1.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Label("Bitcoin (max. 21m)", size: (int)(12 * UIScale), bold: false);
                    formsPlot1.Plot.XAxis.Label("");

                    // prevent navigating beyond the data
                    formsPlot1.Plot.YAxis.SetBoundary(0, 22500000);
                    formsPlot1.Plot.XAxis.SetBoundary(xValues.Min(), xValues.Max());

                    // Add a red circle we can move around later as a highlighted point indicator
                    HighlightedPoint = formsPlot1.Plot.AddPoint(0, 0);
                    HighlightedPoint.Color = Color.Red;
                    HighlightedPoint.MarkerSize = (int)(10 * UIScale);
                    HighlightedPoint.MarkerShape = ScottPlot.MarkerShape.openCircle;
                    HighlightedPoint.IsVisible = false;

                    var legend = formsPlot1.Plot.Legend();
                    legend.Location = Alignment.UpperRight;
                    legend.FillColor = chartsBackgroundColor;
                    legend.FontColor = label77.ForeColor;
                    legend.OutlineColor = chartsBackgroundColor;
                    legend.ShadowColor = chartsBackgroundColor;

                    formsPlot1.Plot.XAxis.Ticks(true);
                    formsPlot1.Plot.YAxis.Ticks(true);
                    formsPlot1.Plot.XAxis.MajorGrid(true);
                    formsPlot1.Plot.YAxis.MajorGrid(true);

                    // refresh the graph
                    formsPlot1.Refresh();
                    formsPlot1.Visible = true;

                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    DisableEnableChartButtons("enable");
                    HideChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating circulation chart");
            }
        }
        #endregion
        
        #region show/hide chart loading panel
        private void ShowChartLoadingPanel()
        {
            try
            {
                pictureBoxChartLoadingAnimation.Enabled = true;
                panelChartLoading.Visible = true;
            }
            catch (WebException ex)
            {
                HandleException(ex, "ShowChartLoadingPanel");
            }
        }

        private void HideChartLoadingPanel()
        {
            try
            {
                pictureBoxChartLoadingAnimation.Enabled = false;
                panelChartLoading.Visible = false;
            }
            catch (WebException ex)
            {
                HandleException(ex, "HideChartLoadingPanel");
            }
        }
        #endregion
        #region disable/enable charts, time periods, hide panels, etc
        private void EnableAllCharts()
        {
            try
            {
                btnChartHashrate.Enabled = true;
                btnChartDifficulty.Enabled = true;
                btnChartFeeRates.Enabled = true;
                btnChartPrice.Enabled = true;
                btnChartReward.Enabled = true;
                btnChartBlockFees.Enabled = true;
                btnChartCirculation.Enabled = true;
                btnChartBlockSize.Enabled = true;
                btnChartUniqueAddresses.Enabled = true;
                btnChartNodesByNetwork.Enabled = true;
                btnChartLightningCapacity.Enabled = true;
                btnChartLightningChannels.Enabled = true;
                btnChartUTXO.Enabled = true;
                btnChartNodesByCountry.Enabled = true;
                btnChartPoolsRanking.Enabled = true;
                btnChartMarketCap.Enabled = true;
            }
            catch (WebException ex)
            {
                HandleException(ex, "EnableAllCharts");
            }
        }

        private void ClearAllChartData()
        {
            try
            {
                formsPlot1.Plot.Clear();
                formsPlot2.Plot.Clear();
                formsPlot3.Plot.Clear();
            }
            catch (WebException ex)
            {
                HandleException(ex, "ClearAllChartData");
            }
        }

        private void HideAllChartKeysAndPanels()
        {
            try
            {
                panelHashrateScaleButtons.Visible = false;
                panelChartUTXOScaleButtons.Visible = false;
                panelUniqueAddressesScaleButtons.Visible = false;
                panelPriceScaleButtons.Visible = false;
                panelChartMarketCapScaleButtons.Visible = false;
                panelChartDifficultyScaleButtons.Visible = false;
//                panelPriceConverter.Visible = false;
            }
            catch (WebException ex)
            {
                HandleException(ex, "HideAllChartKeysAndPanels");
            }
        }

        private void DisableIrrelevantTimePeriods()
        {
            try
            {
                if (chartType == "hashrate" || chartType == "hashratelog")
                {
                    btnChartPeriod24h.Enabled = false;
                    btnChartPeriod3d.Enabled = false;
                    btnChartPeriod1w.Enabled = false;
                    btnChartPeriod1m.Enabled = false;
                    if (chartPeriod != "3m")
                    {
                        btnChartPeriod3m.Enabled = true;
                    }
                    if (chartPeriod != "6m")
                    {
                        btnChartPeriod6m.Enabled = true;
                    }
                    if (chartPeriod != "1y")
                    {
                        btnChartPeriod1y.Enabled = true;
                    }
                    if (chartPeriod != "2y")
                    {
                        btnChartPeriod2y.Enabled = true;
                    }
                    if (chartPeriod != "3y")
                    {
                        btnChartPeriod3y.Enabled = true;
                    }
                    if (chartPeriod != "all")
                    {
                        btnChartPeriodAll.Enabled = true;
                    }
                }
                else
                {
                    if (chartType == "difficulty" || chartType == "difficultylog")
                    {
                        btnChartPeriod24h.Enabled = false;
                        btnChartPeriod3d.Enabled = false;
                        btnChartPeriod1w.Enabled = false;
                        btnChartPeriod1m.Enabled = false;
                        if (chartPeriod != "3m")
                        {
                            btnChartPeriod3m.Enabled = true;
                        }
                        if (chartPeriod != "6m")
                        {
                            btnChartPeriod6m.Enabled = true;
                        }
                        if (chartPeriod != "1y")
                        {
                            btnChartPeriod1y.Enabled = true;
                        }
                        if (chartPeriod != "2y")
                        {
                            btnChartPeriod2y.Enabled = true;
                        }
                        if (chartPeriod != "3y")
                        {
                            btnChartPeriod3y.Enabled = true;
                        }
                        if (chartPeriod != "all")
                        {
                            btnChartPeriodAll.Enabled = true;
                        }
                    }
                    else
                    {
                        if (chartType == "price" || chartType == "pricelog" || chartType == "circulation" || chartType == "addresses" || chartType == "addresseslog" || chartType == "utxo" || chartType == "utxolog" || chartType == "marketcap" || chartType == "marketcaplog")
                        {
                            btnChartPeriod24h.Enabled = false;
                            btnChartPeriod3d.Enabled = false;
                            btnChartPeriod1w.Enabled = false;
                            btnChartPeriod2y.Enabled = false;
                            if (chartPeriod != "1m")
                            {
                                btnChartPeriod1m.Enabled = true;
                            }
                            if (chartPeriod != "3m")
                            {
                                btnChartPeriod3m.Enabled = true;
                            }
                            if (chartPeriod != "6m")
                            {
                                btnChartPeriod6m.Enabled = true;
                            }
                            if (chartPeriod != "1y")
                            {
                                btnChartPeriod1y.Enabled = true;
                            }
                            if (chartPeriod != "3y")
                            {
                                btnChartPeriod3y.Enabled = true;
                            }
                            if (chartPeriod != "all")
                            {
                                btnChartPeriodAll.Enabled = true;
                            }
                        }
                        else
                        {
                            if (chartType == "nodesbycountry")
                            {
                                if (chartPeriod != "24h")
                                {
                                    btnChartPeriod24h.Enabled = false;
                                }
                                if (chartPeriod != "3d")
                                {
                                    btnChartPeriod3d.Enabled = false;
                                }
                                if (chartPeriod != "1w")
                                {
                                    btnChartPeriod1w.Enabled = false;
                                }
                                if (chartPeriod != "1m")
                                {
                                    btnChartPeriod1m.Enabled = false;
                                }
                                if (chartPeriod != "3m")
                                {
                                    btnChartPeriod3m.Enabled = false;
                                }
                                if (chartPeriod != "6m")
                                {
                                    btnChartPeriod6m.Enabled = false;
                                }
                                if (chartPeriod != "1y")
                                {
                                    btnChartPeriod1y.Enabled = false;
                                }
                                if (chartPeriod != "2y")
                                {
                                    btnChartPeriod2y.Enabled = false;
                                }
                                if (chartPeriod != "3y")
                                {
                                    btnChartPeriod3y.Enabled = false;
                                }
                                if (chartPeriod != "all")
                                {
                                    btnChartPeriodAll.Enabled = false;
                                }
                            }
                            else
                            {
                                if (chartType == "lightningcapacity" || chartType == "lightningchannels" || chartType == "lightningnodesbynetwork")
                                {
                                    btnChartPeriod24h.Enabled = false;
                                    btnChartPeriod3d.Enabled = false;
                                    btnChartPeriod1w.Enabled = false;
                                    if (chartPeriod != "1m")
                                    {
                                        btnChartPeriod1m.Enabled = true;
                                    }
                                    if (chartPeriod != "3m")
                                    {
                                        btnChartPeriod3m.Enabled = true;
                                    }
                                    if (chartPeriod != "6m")
                                    {
                                        btnChartPeriod6m.Enabled = true;
                                    }
                                    if (chartPeriod != "1y")
                                    {
                                        btnChartPeriod1y.Enabled = true;
                                    }
                                    if (chartPeriod != "2y")
                                    {
                                        btnChartPeriod2y.Enabled = true;
                                    }
                                    if (chartPeriod != "3y")
                                    {
                                        btnChartPeriod3y.Enabled = true;
                                    }
                                    if (chartPeriod != "all")
                                    {
                                        btnChartPeriodAll.Enabled = true;
                                    }
                                }

                                else
                                {
                                    if (chartPeriod != "24h")
                                    {
                                        btnChartPeriod24h.Enabled = true;
                                    }
                                    if (chartPeriod != "3d")
                                    {
                                        btnChartPeriod3d.Enabled = true;
                                    }
                                    if (chartPeriod != "1w")
                                    {
                                        btnChartPeriod1w.Enabled = true;
                                    }
                                    if (chartPeriod != "1m")
                                    {
                                        btnChartPeriod1m.Enabled = true;
                                    }
                                    if (chartPeriod != "3m")
                                    {
                                        btnChartPeriod3m.Enabled = true;
                                    }
                                    if (chartPeriod != "6m")
                                    {
                                        btnChartPeriod6m.Enabled = true;
                                    }
                                    if (chartPeriod != "1y")
                                    {
                                        btnChartPeriod1y.Enabled = true;
                                    }
                                    if (chartPeriod != "2y")
                                    {
                                        btnChartPeriod2y.Enabled = true;
                                    }
                                    if (chartPeriod != "3y")
                                    {
                                        btnChartPeriod3y.Enabled = true;
                                    }
                                    if (chartPeriod != "all")
                                    {
                                        btnChartPeriodAll.Enabled = true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "disabling irrelevant chart time periods");
            }
        }

        private void DisableEnableChartButtons(string enableOrDisableAllButtons)
        {
            try
            {
                if (enableOrDisableAllButtons == "disable")
                {
                    ignoreMouseMoveOnChart = true;
                    // get current state of buttons before disabling them
                    btnChartBlockFeesWasEnabled = btnChartBlockFees.Enabled;
                    btnChartDifficultyWasEnabled = btnChartDifficulty.Enabled;
                    btnChartHashrateWasEnabled = btnChartHashrate.Enabled;
                    btnChartPriceWasEnabled = btnChartPrice.Enabled;
                    btnChartRewardWasEnabled = btnChartReward.Enabled;
                    btnChartFeeRatesWasEnabled = btnChartFeeRates.Enabled;
                    btnChartCirculationWasEnabled = btnChartCirculation.Enabled;
                    btnChartBlockSizeWasEnabled = btnChartBlockSize.Enabled;
                    btnChartPeriod1mWasEnabled = btnChartPeriod1m.Enabled;
                    btnChartPeriod1wWasEnabled = btnChartPeriod1w.Enabled;
                    btnChartPeriod1yWasEnabled = btnChartPeriod1y.Enabled;
                    btnChartPeriod24hWasEnabled = btnChartPeriod24h.Enabled;
                    btnChartPeriod2yWasEnabled = btnChartPeriod2y.Enabled;
                    btnChartPeriod3dWasEnabled = btnChartPeriod3d.Enabled;
                    btnChartPeriod3mWasEnabled = btnChartPeriod3m.Enabled;
                    btnChartPeriod3yWasEnabled = btnChartPeriod3y.Enabled;
                    btnChartPeriod6mWasEnabled = btnChartPeriod6m.Enabled;
                    btnChartPeriodAllWasEnabled = btnChartPeriodAll.Enabled;
                    btnChartUniqueAddressesWasEnabled = btnChartUniqueAddresses.Enabled;
                    btnHashrateScaleLogWasEnabled = btnHashrateScaleLog.Enabled;
                    btnHashrateScaleLinearWasEnabled = btnHashrateScaleLinear.Enabled;
                    btnChartAddressScaleLinearWasEnabled = btnChartAddressScaleLinear.Enabled;
                    btnChartAddressScaleLogWasEnabled = btnChartAddressScaleLog.Enabled;
                    btnPriceChartScaleLogWasEnabled = btnPriceChartScaleLog.Enabled;
                    btnPriceChartScaleLinearWasEnabled = btnPriceChartScaleLinear.Enabled;
                    btnChartUTXOWasEnabled = btnChartUTXO.Enabled;
                    btnChartPoolsRankingWasEnabled = btnChartPoolsRanking.Enabled;
                    btnChartNodesByNetworkWasEnabled = btnChartNodesByNetwork.Enabled;
                    btnChartNodesByCountryWasEnabled = btnChartNodesByCountry.Enabled;
                    btnChartLightningCapacityWasEnabled = btnChartLightningCapacity.Enabled;
                    btnChartLightningChannelsWasEnabled = btnChartLightningChannels.Enabled;
                    btnChartMarketCapWasEnabled = btnChartMarketCap.Enabled;
                    btnChartMarketCapLogWasEnabled = btnChartMarketCapScaleLog.Enabled;
                    btnChartDifficultyLinearWasEnabled = btnChartDifficultyLinear.Enabled;
                    btnChartDifficultyLogWasEnabled = btnChartDifficultyLog.Enabled;

                    //disable them all
                    btnChartBlockFees.Enabled = false;
                    btnChartDifficulty.Enabled = false;
                    btnChartHashrate.Enabled = false;
                    btnChartPrice.Enabled = false;
                    btnChartReward.Enabled = false;
                    btnChartFeeRates.Enabled = false;
                    btnChartCirculation.Enabled = false;
                    btnChartPeriod1m.Enabled = false;
                    btnChartPeriod1w.Enabled = false;
                    btnChartPeriod1y.Enabled = false;
                    btnChartPeriod24h.Enabled = false;
                    btnChartPeriod2y.Enabled = false;
                    btnChartPeriod3d.Enabled = false;
                    btnChartPeriod3m.Enabled = false;
                    btnChartPeriod3y.Enabled = false;
                    btnChartPeriod6m.Enabled = false;
                    btnChartPeriodAll.Enabled = false;
                    btnChartBlockSize.Enabled = false;
                    btnChartUniqueAddresses.Enabled = false;
                    btnHashrateScaleLinear.Enabled = false;
                    btnHashrateScaleLog.Enabled = false;
                    btnChartAddressScaleLinear.Enabled = false;
                    btnChartAddressScaleLog.Enabled = false;
                    btnPriceChartScaleLog.Enabled = false;
                    btnPriceChartScaleLinear.Enabled = false;
                    btnChartUTXO.Enabled = false;
                    btnChartPoolsRanking.Enabled = false;
                    btnChartNodesByNetwork.Enabled = false;
                    btnChartNodesByCountry.Enabled = false;
                    btnChartLightningCapacity.Enabled = false;
                    btnChartLightningChannels.Enabled = false;
                    btnChartMarketCap.Enabled = false;
                    btnChartMarketCapScaleLog.Enabled = false;
                    btnChartDifficultyLinear.Enabled = false;
                    btnChartDifficultyLog.Enabled = false;
                }
                else
                {
                    // use previously saved states to reinstate buttons

                    btnChartBlockFees.Enabled = btnChartBlockFeesWasEnabled;
                    btnChartDifficulty.Enabled = btnChartDifficultyWasEnabled;
                    btnChartHashrate.Enabled = btnChartHashrateWasEnabled;
                    btnChartPrice.Enabled = btnChartPriceWasEnabled;
                    btnChartReward.Enabled = btnChartRewardWasEnabled;
                    btnChartFeeRates.Enabled = btnChartFeeRatesWasEnabled;
                    btnChartCirculation.Enabled = btnChartCirculationWasEnabled;
                    btnChartBlockSize.Enabled = btnChartBlockSizeWasEnabled;
                    btnChartPeriod1m.Enabled = btnChartPeriod1mWasEnabled;
                    btnChartPeriod1w.Enabled = btnChartPeriod1wWasEnabled;
                    btnChartPeriod1y.Enabled = btnChartPeriod1yWasEnabled;
                    btnChartPeriod24h.Enabled = btnChartPeriod24hWasEnabled;
                    btnChartPeriod2y.Enabled = btnChartPeriod2yWasEnabled;
                    btnChartPeriod3d.Enabled = btnChartPeriod3dWasEnabled;
                    btnChartPeriod3m.Enabled = btnChartPeriod3mWasEnabled;
                    btnChartPeriod3y.Enabled = btnChartPeriod3yWasEnabled;
                    btnChartPeriod6m.Enabled = btnChartPeriod6mWasEnabled;
                    btnChartPeriodAll.Enabled = btnChartPeriodAllWasEnabled;
                    btnChartUniqueAddresses.Enabled = btnChartUniqueAddressesWasEnabled;
                    btnChartAddressScaleLinear.Enabled = btnChartAddressScaleLinearWasEnabled;
                    btnChartAddressScaleLog.Enabled = btnChartAddressScaleLogWasEnabled;
                    btnHashrateScaleLinear.Enabled = btnHashrateScaleLinearWasEnabled;
                    btnHashrateScaleLog.Enabled = btnHashrateScaleLogWasEnabled;
                    btnPriceChartScaleLog.Enabled = btnPriceChartScaleLogWasEnabled;
                    btnPriceChartScaleLinear.Enabled = btnPriceChartScaleLinearWasEnabled;
                    btnChartUTXO.Enabled = btnChartUTXOWasEnabled;
                    btnChartPoolsRanking.Enabled = btnChartPoolsRankingWasEnabled;
                    btnChartNodesByNetwork.Enabled = btnChartNodesByNetworkWasEnabled;
                    btnChartNodesByCountry.Enabled = btnChartNodesByCountryWasEnabled;
                    btnChartLightningCapacity.Enabled = btnChartLightningCapacityWasEnabled;
                    btnChartLightningChannels.Enabled = btnChartLightningChannelsWasEnabled;
                    btnChartMarketCap.Enabled = btnChartMarketCapWasEnabled;
                    btnChartMarketCapScaleLog.Enabled = btnChartMarketCapLogWasEnabled;
                    btnChartDifficultyLinear.Enabled = btnChartDifficultyLinearWasEnabled;
                    btnChartDifficultyLog.Enabled = btnChartDifficultyLogWasEnabled;
                    ignoreMouseMoveOnChart = false;
                }
                // disable charts where corresponding API is disabled
                if (RunBlockchainInfoEndpointAPI == false)
                {
                    DisableChartsThatDontUseMempoolSpace();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "changing chart button states");
            }
        }

        private void DisableChartsThatDontUseMempoolSpace()
        {
            try
            {
                btnChartCirculation.Enabled = false;
                btnChartMarketCap.Enabled = false;
                btnChartPrice.Enabled = false;
                btnChartUniqueAddresses.Enabled = false;
                btnChartUTXO.Enabled = false;
                lblChartCirculation.Enabled = false;
                lblHeaderPriceChart.Enabled = false;
                lblPriceChart.Enabled = false;
                lblConverterChart.Enabled = false;
                lblMarketCapChart.Enabled = false;
                lblUniqueAddressesChart.Enabled = false;
                lblHeaderConverterChart.Enabled = false;
                lblHeaderMarketCapChart.Enabled = false;
            }
            catch (Exception ex)
            {
                HandleException(ex, "Disabling non-mempool.space charts");
            }

        }

        private void EnableChartsThatDontUseMempoolSpace()
        {
            try
            {
                btnChartCirculation.Enabled = true;
                btnChartMarketCap.Enabled = true;
                btnChartPrice.Enabled = true;
                btnChartUniqueAddresses.Enabled = true;
                btnChartUTXO.Enabled = true;
                lblChartCirculation.Enabled = true;
                lblConverterChart.Enabled = true;
                lblHeaderPriceChart.Enabled = true;
                lblPriceChart.Enabled = true;
                lblMarketCapChart.Enabled = true;
                lblUniqueAddressesChart.Enabled = true;
                lblHeaderConverterChart.Enabled = true;
                lblHeaderMarketCapChart.Enabled = true;
            }
            catch (Exception ex)
            {
                HandleException(ex, "Enabling non-mempool.space charts");
            }
        }

        #endregion
        #region prepare for linear scale chart
        private void PrepareLinearScaleChart()
        {
            try
            {
                // switch to linear scaling in case it was log before
                formsPlot1.Plot.YAxis.MinorLogScale(false);
                formsPlot1.Plot.YAxis.MajorGrid(false);
                formsPlot1.Plot.YAxis.MinorGrid(false);

                // Define a new tick label formatter for the linear scale
                static string linearTickLabels(double y) => y.ToString("N0");
                formsPlot1.Plot.YAxis.TickLabelFormat(linearTickLabels);

                // Revert back to automatic data area
                formsPlot1.Plot.ResetLayout();
                formsPlot1.Plot.AxisAuto();
            }
            catch (Exception ex)
            {
                HandleException(ex, "switching to linear scale chart");
            }
        }
        #endregion
        #region change chart time period
        private void BtnChartPeriod_Click(object sender, EventArgs e)
        {
            try
            {
                Control[] chartPeriodButtons = { btnChartPeriod24h, btnChartPeriod3d, btnChartPeriod1w, btnChartPeriod1m, btnChartPeriod3m, btnChartPeriod6m, btnChartPeriod1y, btnChartPeriod2y, btnChartPeriod3y, btnChartPeriodAll };

                System.Windows.Forms.Button clickedButton = (System.Windows.Forms.Button)sender;
                clickedButton.Enabled = false;

                foreach (Control control in chartPeriodButtons)
                {
                    if (control is System.Windows.Forms.Button && control == clickedButton)
                    {
                        chartPeriod = clickedButton.Text;
                    }
                    if (control is System.Windows.Forms.Button && control != clickedButton)
                    {
                        control.Enabled = true;
                    }
                }

                if (chartType == "hashrate")
                {
                    BtnChartHashrate_Click(sender, e);
                }
                if (chartType == "hashratelog")
                {
                    BtnHashrateScaleLog_Click(sender, e);
                }
                if (chartType == "blockfees")
                {
                    BtnChartBlockFees_Click(sender, e);
                }
                if (chartType == "difficulty")
                {
                    BtnChartDifficulty_Click(sender, e);
                }
                if (chartType == "difficultylog")
                {
                    BtnChartDifficultyLog_Click(sender, e);
                }
                if (chartType == "price")
                {
                    BtnChartPrice_Click(sender, e);
                }
                if (chartType == "pricelog")
                {
                    BtnChartPriceLog_Click(sender, e);
                }
                if (chartType == "reward")
                {
                    BtnChartReward_Click(sender, e);
                }
                if (chartType == "feerates")
                {
                    BtnChartFeeRates_Click(sender, e);
                }
                if (chartType == "blocksize")
                {
                    BtnChartBlockSize_Click(sender, e);
                }
                if (chartType == "addresses")
                {
                    BtnChartUniqueAddresses_Click(sender, e);
                }
                if (chartType == "addresseslog")
                {
                    BtnChartUniqueAddressesLog_Click(sender, e);
                }
                if (chartType == "poolranking")
                {
                    BtnChartPoolsRanking_Click(sender, e);
                }
                if (chartType == "lightningnodesbynetwork")
                {
                    BtnChartNodesByNetwork_Click(sender, e);
                }
                if (chartType == "lightningcapacity")
                {
                    BtnChartLightningCapacity_Click(sender, e);
                }
                if (chartType == "lightningchannels")
                {
                    BtnChartLightningChannels_Click(sender, e);
                }
                if (chartType == "marketcap")
                {
                    BtnChartMarketCap_Click(sender, e);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "switching chart time period");
            }
        }
        #endregion
        #region track mouse position to show nearest data point
        private void FormsPlot1_MouseMove(object sender, MouseEventArgs e)
        {
            try
            {
                if (!ignoreMouseMoveOnChart)
                {
                    if (chartType != "feerates" && chartType != "poolranking" && chartType != "lightningnodesbynetwork" && chartType != "nodesbycountry")
                    {
                        // determine point nearest the cursor
                        (double mouseCoordX, double mouseCoordY) = formsPlot1.GetMouseCoordinates();
                        double xyRatio = formsPlot1.Plot.XAxis.Dims.PxPerUnit / formsPlot1.Plot.YAxis.Dims.PxPerUnit;
                        (double pointX, double pointY, int pointIndex) = scatter.GetPointNearest(mouseCoordX, mouseCoordY, xyRatio);

                        // place the highlight over the point of interest
                        HighlightedPoint.X = pointX;
                        HighlightedPoint.Y = pointY;
                        HighlightedPoint.IsVisible = true;

                        // render if the highlighted point chnaged
                        if (LastHighlightedIndex != pointIndex)
                        {
                            LastHighlightedIndex = pointIndex;

                            // Convert pointX to a DateTime object
                            DateTime pointXDate = DateTime.FromOADate(pointX);

                            // Format the DateTime object using the desired format string
                            string formattedPointX = pointXDate.ToString("yyyy-MM-dd");

                            if (chartType == "pricelog" || chartType == "addresseslog" || chartType == "utxolog" || chartType == "marketcaplog" || chartType == "hashratelog" || chartType == "difficultylog")
                            {
                                double originalY = Math.Pow(10, pointY); // Convert back to the original scale
                                                                         //annotation to obscure the previous one before drawing the new one
                                var blankAnnotation = formsPlot1.Plot.AddAnnotation("████████████████████████████████████", Alignment.UpperLeft);
                                blankAnnotation.Font.Name = "Consolas";
                                blankAnnotation.Font.Size = (int)(12 * UIScale);
                                blankAnnotation.Shadow = false;
                                blankAnnotation.BorderWidth = 0;
                                blankAnnotation.BorderColor = chartsBackgroundColor;
                                blankAnnotation.MarginX = 2;
                                blankAnnotation.MarginY = 2;
                                blankAnnotation.Font.Color = chartsBackgroundColor;
                                blankAnnotation.BackgroundColor = chartsBackgroundColor;

                                var actualAnnotation = formsPlot1.Plot.AddAnnotation($"{originalY:N2} ({formattedPointX})", Alignment.UpperLeft);
                                actualAnnotation.Font.Name = "Consolas";
                                actualAnnotation.Font.Size = (int)(12 * UIScale);
                                actualAnnotation.Shadow = false;
                                actualAnnotation.BorderWidth = 0;
                                actualAnnotation.BorderColor = chartsBackgroundColor;
                                actualAnnotation.MarginX = 2;
                                actualAnnotation.MarginY = 2;
                                actualAnnotation.Font.Color = label148.ForeColor;
                                actualAnnotation.BackgroundColor = chartsBackgroundColor;
                            }
                            else
                            {
                                //annotation to obscure the previous one before drawing the new one
                                var blankAnnotation = formsPlot1.Plot.AddAnnotation("████████████████████████████████████", Alignment.UpperLeft);
                                blankAnnotation.Font.Name = "Consolas";
                                blankAnnotation.Font.Size = (int)(12 * UIScale);
                                blankAnnotation.Shadow = false;
                                blankAnnotation.BorderWidth = 0;
                                blankAnnotation.BorderColor = chartsBackgroundColor;
                                blankAnnotation.MarginX = 2;
                                blankAnnotation.MarginY = 2;
                                blankAnnotation.Font.Color = chartsBackgroundColor;
                                blankAnnotation.BackgroundColor = chartsBackgroundColor;

                                //new annotation
                                var actualAnnotation = formsPlot1.Plot.AddAnnotation($"{pointY:N2} ({formattedPointX})", Alignment.UpperLeft);
                                actualAnnotation.Font.Name = "Consolas";
                                actualAnnotation.Font.Size = (int)(12 * UIScale);
                                actualAnnotation.Shadow = false;
                                actualAnnotation.BorderWidth = 0;
                                actualAnnotation.BorderColor = chartsBackgroundColor;
                                actualAnnotation.MarginX = 2;
                                actualAnnotation.MarginY = 2;
                                actualAnnotation.Font.Color = label148.ForeColor;
                                actualAnnotation.BackgroundColor = chartsBackgroundColor;
                            }
                            formsPlot1.Render();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "rendering mouse-over chart coordinates data");
            }
        }
        #endregion
        #region save chart image
        private void BtnSaveChart_Click(object sender, EventArgs e)
        {
            try
            {
                var sfd = new SaveFileDialog
                {
                    FileName = "SATSuma.png",
                    Filter = "PNG Files (*.png)|*.png;*.png" +
                     "|JPG Files (*.jpg, *.jpeg)|*.jpg;*.jpeg" +
                     "|BMP Files (*.bmp)|*.bmp;*.bmp" +
                     "|All files (*.*)|*.*"
                };

                if (sfd.ShowDialog() == DialogResult.OK)
                {
                    if (formsPlot1.Visible == true)
                    {
                        formsPlot1.Plot.SaveFig(sfd.FileName);
                    }
                    if (formsPlot2.Visible == true)
                    {
                        formsPlot2.Plot.SaveFig(sfd.FileName);
                    }
                    if (formsPlot3.Visible == true)
                    {
                        formsPlot3.Plot.SaveFig(sfd.FileName);
                    }
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "BtnSaveChart_Click");
            }
        }
        #endregion
        #endregion

        #region ⚡ADD TO BOOKMARKS TAB⚡
        #region show, populate or hide the add bookmark tab
        private void BtnAddToBookmarks_Click(object sender, EventArgs e)
        {
            try
            {
                if (!panelAddToBookmarks.Visible)
                {
                    //panelFees.Visible = false;
                    panelAddToBookmarks.Visible = true;
                    panelAddToBookmarksBorder.Visible = true;
                    lblBookmarkSavedSuccess.Visible = false;
                    btnCommitToBookmarks.Enabled = true;
                    btnCancelAddToBookmarks.Enabled = true;
                    panelAddToBookmarks.BringToFront();
                }
                else
                {
                    panelAddToBookmarks.Visible = false;
                    panelAddToBookmarksBorder.Visible = false;
                    //panelFees.Visible = true;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnAddToBookmarks_Click");
            }
        }

        private void PanelAddToBookmarks_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                if (panelAddress.Visible)
                {
                    lblBookmarkProposalType.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkProposalType.Text = "address";
                    });
                    lblBookmarkProposalData.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkProposalData.Text = textboxSubmittedAddress.Text;
                    });

                }
                if (panelBlock.Visible)
                {
                    lblBookmarkProposalType.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkProposalType.Text = "block";
                    });
                    lblBookmarkProposalData.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkProposalData.Text = numericUpDownSubmittedBlockNumber.Text;
                    });
                }
                if (panelTransaction.Visible)
                {
                    lblBookmarkProposalType.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkProposalType.Text = "transaction";
                    });
                    lblBookmarkProposalData.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkProposalData.Text = textBoxTransactionID.Text;
                    });
                }
                if (panelXpub.Visible)
                {
                    lblBookmarkProposalType.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkProposalType.Text = "xpub";
                    });
                    lblBookmarkProposalData.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkProposalData.Text = textBoxSubmittedXpub.Text;
                    });
                }
                lblBookmarkProposalType.Invoke((MethodInvoker)delegate
                {
                    lblBookmarkProposalType.Location = new Point(label131.Location.X + label131.Width, label131.Location.Y);
                });
                lblBookmarkProposalData.Invoke((MethodInvoker)delegate
                {
                    lblBookmarkProposalData.Location = new Point(lblBookmarkProposalType.Location.X + lblBookmarkProposalType.Width, lblBookmarkProposalType.Location.Y);
                    lblBookmarkProposalData.Width = panelAddToBookmarks.Width - label131.Width - lblBookmarkProposalType.Width - 5;
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "PanelAddToBookmarks_Paint");
            }
        }

        private void BtnCancelAddToBookmarks_Click(object sender, EventArgs e)
        {
            try
            {
                HideBookmarksShowFees(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnCancelAddToBookmarks_Click");
            }
        }

        private void HideBookmarksShowFees(object sender, EventArgs e)
        {
            try
            {
                panelAddToBookmarks.Visible = false;
                panelAddToBookmarksBorder.Visible = false;
                //panelFees.Visible = true;
            }
            catch (Exception ex)
            {
                HandleException(ex, "HideBookmarksShowFees");
            }
        }
        #endregion
        #region create bookmark record to be saved
        private void BtnCommitToBookmarks_Click(object sender, EventArgs e)
        {
            try
            {
                DateTime today = DateTime.Today;
                bool toBeEncrypted = false;
                if (textBoxBookmarkEncryptionKey.Text == "" || textBoxBookmarkEncryptionKey.Text == "optional encryption key")
                {
                    toBeEncrypted = false;
                }
                else
                {
                    toBeEncrypted = true;
                }

                string bookmarkNote;
                if (textBoxBookmarkProposedNote.Text == "optional notes" || textBoxBookmarkProposedNote.Text == "")
                {
                    bookmarkNote = "";
                }
                else
                {
                    bookmarkNote = textBoxBookmarkProposedNote.Text;
                }

                string bookmarkData;
                string keyCheck = "21m";
                if (toBeEncrypted)
                {
                    // Encrypt the new bookmark using the encryption key
                    string encryptionKey = textBoxBookmarkEncryptionKey.Text;
                    string unencryptedBookmarkData = lblBookmarkProposalData.Text;
                    string unencryptedBookmarkNote = bookmarkNote;
                    string unencryptedKeyCheck = "21m";
                    string encryptedKeyCheck = Encrypt(unencryptedKeyCheck, encryptionKey);
                    string encryptedBookmarkData = Encrypt(unencryptedBookmarkData, encryptionKey);
                    string encryptedBookmarkNote = Encrypt(unencryptedBookmarkNote, encryptionKey);
                    bookmarkNote = encryptedBookmarkNote;
                    bookmarkData = encryptedBookmarkData;
                    keyCheck = encryptedKeyCheck;
                }
                else
                {
                    bookmarkData = lblBookmarkProposalData.Text;
                }

                var newBookmark = new Bookmark { DateAdded = today, Type = lblBookmarkProposalType.Text, Data = bookmarkData, Note = bookmarkNote, Encrypted = toBeEncrypted, KeyCheck = keyCheck };

                // Read the existing bookmarks from the JSON file
                var bookmarks = ReadBookmarksFromJsonFile();

                // Add the new bookmark to the list
                bookmarks.Add(newBookmark);

                // Write the updated list of bookmarks back to the JSON file
                WriteBookmarksToJsonFile(bookmarks);
                lblBookmarkSavedSuccess.Visible = true;
                btnCommitToBookmarks.Enabled = false;
                btnCancelAddToBookmarks.Enabled = false;
                hideAddToBookmarksTimer.Start();

                textBoxBookmarkProposedNote.Text = "";
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnCommitToBookmarks_Click");
            }
        }
        #endregion
        #region read bookmarks from file
        private static List<Bookmark> ReadBookmarksFromJsonFile()
        {
            string bookmarksFileName = "SATSuma_bookmarks.json";
            string appDataDirectory = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
            string applicationDirectory = Path.Combine(appDataDirectory, "SATSuma");
            // Create the application directory if it doesn't exist
            Directory.CreateDirectory(applicationDirectory);
            string bookmarksFilePath = Path.Combine(applicationDirectory, bookmarksFileName);
            string filePath = bookmarksFilePath;

            if (!System.IO.File.Exists(filePath))
            {
                System.IO.File.Create(filePath).Dispose();
            }
            // Read the contents of the JSON file into a string
            string json = System.IO.File.ReadAllText(filePath);

            // Deserialize the JSON string into a list of bookmark objects
            var bookmarks = JsonConvert.DeserializeObject<List<Bookmark>>(json);

            // If the JSON file doesn't exist or is empty, return an empty list
            bookmarks ??= new List<Bookmark>();
            bookmarks = bookmarks.OrderByDescending(b => b.DateAdded).ToList();
            return bookmarks;
        }
        #endregion
        #region write bookmarks to file
        private static void WriteBookmarksToJsonFile(List<Bookmark> bookmarks)
        {
            // Serialize the list of bookmark objects into a JSON string
            string json = JsonConvert.SerializeObject(bookmarks);

            string bookmarksFileName = "SATSuma_bookmarks.json";
            string appDataDirectory = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
            string applicationDirectory = Path.Combine(appDataDirectory, "SATSuma");
            // Create the application directory if it doesn't exist
            Directory.CreateDirectory(applicationDirectory);
            string bookmarksFilePath = Path.Combine(applicationDirectory, bookmarksFileName);
            string filePath = bookmarksFilePath;

            // Write the JSON string to the bookmarks.json file
            System.IO.File.WriteAllText(filePath, json);
        }
        #endregion
        #region user input
        private void TextBoxBookmarkProposedNote_Enter(object sender, EventArgs e)
        {
            try
            {
                if (isBookmarkNoteWatermarkTextDisplayed)
                {
                    textBoxBookmarkProposedNote.Invoke((MethodInvoker)delegate
                    {
                        textBoxBookmarkProposedNote.Text = "";
                        textBoxBookmarkProposedNote.ForeColor = Color.White;
                    });
                    isBookmarkNoteWatermarkTextDisplayed = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxBookmarkProposedNote_Enter");
            }
        }

        private void TextBoxBookmarkProposedNote_Leave(object sender, EventArgs e)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(textBoxBookmarkProposedNote.Text))
                {
                    textBoxBookmarkProposedNote.Invoke((MethodInvoker)delegate
                    {
                        textBoxBookmarkProposedNote.Text = "optional notes";
                        textBoxBookmarkProposedNote.ForeColor = Color.Gray;
                    });
                    isBookmarkNoteWatermarkTextDisplayed = true;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxBookmarkProposedNote_Leave");
            }
        }

        private void TextBoxBookmarkProposedNote_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (isBookmarkNoteWatermarkTextDisplayed)
                {
                    textBoxBookmarkProposedNote.ForeColor = Color.White;
                    isBookmarkNoteWatermarkTextDisplayed = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxBookmarkProposedNote_Leave");
            }
        }

        private void TextBoxBookmarkProposedNote_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (isBookmarkNoteWatermarkTextDisplayed)
                {
                    textBoxBookmarkProposedNote.Invoke((MethodInvoker)delegate
                    {
                        textBoxBookmarkProposedNote.Text = "";
                        textBoxBookmarkProposedNote.ForeColor = Color.White;
                    });
                    isBookmarkNoteWatermarkTextDisplayed = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxBookmarkProposedNote_Leave");
            }
        }

        private void TextBoxBookmarkEncryptionKey_Enter(object sender, EventArgs e)
        {
            try
            {
                if (isEncryptionKeyWatermarkTextDisplayed)
                {
                    textBoxBookmarkEncryptionKey.Invoke((MethodInvoker)delegate
                    {
                        textBoxBookmarkEncryptionKey.Text = "";
                        textBoxBookmarkEncryptionKey.ForeColor = Color.White;
                    });
                    isEncryptionKeyWatermarkTextDisplayed = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxBookmarkEncryptionKey_Enter");
            }
        }

        private void TextBoxBookmarkEncryptionKey_Leave(object sender, EventArgs e)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(textBoxBookmarkEncryptionKey.Text))
                {
                    textBoxBookmarkEncryptionKey.Invoke((MethodInvoker)delegate
                    {
                        textBoxBookmarkEncryptionKey.Text = "optional encryption key";
                        textBoxBookmarkEncryptionKey.ForeColor = Color.Gray;
                    });
                    isEncryptionKeyWatermarkTextDisplayed = true;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxBookmarkEncryptionKey_Leave");
            }
        }

        private void TextBoxBookmarkEncryptionKey_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (isEncryptionKeyWatermarkTextDisplayed)
                {
                    textBoxBookmarkEncryptionKey.ForeColor = Color.White;
                    isEncryptionKeyWatermarkTextDisplayed = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxBookmarkEncryptionKey_TextChanged");
            }
        }

        private void TextBoxBookmarkEncryptionKey_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (isEncryptionKeyWatermarkTextDisplayed)
                {
                    textBoxBookmarkEncryptionKey.Invoke((MethodInvoker)delegate
                    {
                        textBoxBookmarkEncryptionKey.Text = "";
                        textBoxBookmarkEncryptionKey.ForeColor = Color.White;
                    });
                    isEncryptionKeyWatermarkTextDisplayed = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxBookmarkEncryptionKey_KeyPress");
            }
        }
        #endregion
        #region timer to hide add bookmark panel after adding
        private void HideAddToBookmarks_Tick(object sender, EventArgs e)
        {
            try
            {
                panelAddToBookmarks.Visible = false;
                panelAddToBookmarksBorder.Visible = false;
                //panelFees.Visible = true;
                hideAddToBookmarksTimer.Stop();
            }
            catch (Exception ex)
            {
                HandleException(ex, "HideAddToBookmarks_Tick");
            }
        }

        private void HideDeletedBookmarkMessageTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                lblBookmarkStatusMessage.Visible = false;
                hideBookmarkStatusMessageTimer.Stop();
            }
            catch (Exception ex)
            {
                HandleException(ex, "HideDeletedBookmarkMessageTimer_Tick");
            }
        }
        #endregion
        #endregion

        #region ⚡BOOKMARKS SCREEN⚡
        #region set up bookmarks screen
        private void SetupBookmarksScreen()
        {
            try
            {
                bool bookmarkFound = false;
                var bookmarks = ReadBookmarksFromJsonFile();

                foreach (var bookmark in bookmarks)
                {
                    if (bookmark.Type != "node" && bookmark.Type != "defaulttheme" && bookmark.Type != "settings")
                    {
                        // there is at least one bookmark
                        panel32.Visible = true;
                        panel33.Visible = true;
                        panel100.Visible = true;
                        listViewBookmarks.Visible = true;
                        btnDeleteAllBookmarks.Enabled = true;
                        bookmarkFound = true;
                    }
                }
                if (!bookmarkFound) // there are no bookmarks
                {
                    lblBookmarkDataInFull.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkDataInFull.Text = "";
                    });
                    lblBookmarkNoteInFull.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkNoteInFull.Text = "";
                    });
                    panel32.Visible = false;
                    panel33.Visible = false;
                    panel100.Visible = false;
                    listViewBookmarks.Visible = false;
                    btnDeleteAllBookmarks.Enabled = false;
                    lblBookmarkTotalCount.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkTotalCount.Text = "0";
                    });
                    lblBookmarkAddressCount.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkAddressCount.Text = "0";
                    });
                    lblBookmarkBlocksCount.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkBlocksCount.Text = "0";
                    });
                    lblBookmarkTransactionsCount.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkTransactionsCount.Text = "0";
                    });
                    lblBookmarkXpubsCount.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkXpubsCount.Text = "0";
                    });
                    return;
                }

                btnViewBookmark.Enabled = false;
                btnDeleteBookmark.Enabled = false;
                lblBookmarkDataInFull.Invoke((MethodInvoker)delegate
                {
                    lblBookmarkDataInFull.Text = "";
                });
                lblBookmarkNoteInFull.Invoke((MethodInvoker)delegate
                {
                    lblBookmarkNoteInFull.Text = "";
                });
                label138.Invoke((MethodInvoker)delegate
                {
                    label138.Text = "";
                });
                lblSelectedBookmarkType.Invoke((MethodInvoker)delegate
                {
                    lblSelectedBookmarkType.Text = "";
                });
                //LIST VIEW
                listViewBookmarks.Invoke((MethodInvoker)delegate
                {
                    listViewBookmarks.Items.Clear(); // remove any data that may be there already
                });
                listViewBookmarks.GetType().InvokeMember("DoubleBuffered", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.SetProperty, null, listViewBookmarks, new object[] { true });
                // Check if the column header already exists
                if (listViewBookmarks.Columns.Count == 0)
                {
                    // If not, add the column header
                    listViewBookmarks.Invoke((MethodInvoker)delegate
                    {
                        listViewBookmarks.Columns.Add(" Date added", (int)(100 * UIScale));
                    });
                }

                if (listViewBookmarks.Columns.Count == 1)
                {
                    listViewBookmarks.Invoke((MethodInvoker)delegate
                    {
                        listViewBookmarks.Columns.Add("Type", (int)(95 * UIScale));
                    });
                }

                if (listViewBookmarks.Columns.Count == 2)
                {
                    listViewBookmarks.Invoke((MethodInvoker)delegate
                    {
                        listViewBookmarks.Columns.Add("", (int)(20 * UIScale));
                    });
                }
                if (listViewBookmarks.Columns.Count == 3)
                {
                    listViewBookmarks.Invoke((MethodInvoker)delegate
                    {
                        listViewBookmarks.Columns.Add("Bookmark", (int)(233 * UIScale));
                    });
                }
                if (listViewBookmarks.Columns.Count == 4)
                {
                    listViewBookmarks.Invoke((MethodInvoker)delegate
                    {
                        listViewBookmarks.Columns.Add("Note", (int)(600 * UIScale));
                    });
                }
                if (listViewBookmarks.Columns.Count == 5)
                {
                    listViewBookmarks.Invoke((MethodInvoker)delegate
                    {
                        listViewBookmarks.Columns.Add("HiddenColumn", (int)(600 * UIScale)); //used to store the KeyCheck string.
                    });
                }
                // Add the items to the ListView
                int counterAllBookmarks = 0; // used to count rows in list as they're added
                int counterBlocks = 0;
                int counterAddresses = 0;
                int counterXpubs = 0;
                int counterTransactions = 0;

                foreach (var bookmark in bookmarks)
                {
                    if (bookmark.Type != "node" && bookmark.Type != "defaulttheme" && bookmark.Type != "settings")
                    {
                        ListViewItem item = new ListViewItem(Convert.ToString(bookmark.DateAdded)); // create new row
                        item.SubItems.Add(bookmark.Type);
                        if (bookmark.Encrypted == true)
                        {
                            item.SubItems.Add("🔒");
                        }
                        else
                        {
                            item.SubItems.Add("");
                        }
                        item.SubItems.Add(bookmark.Data);
                        item.SubItems.Add(bookmark.Note);
                        item.SubItems.Add(bookmark.KeyCheck);
                        listViewBookmarks.Invoke((MethodInvoker)delegate
                        {
                            listViewBookmarks.Items.Add(item); // add row
                        });

                        if (listViewBookmarks.Items.Count > 21)
                        {
                            btnBookmarksListUp.Visible = true;
                            btnBookmarksListDown.Visible = true;
                        }
                        else
                        {
                            btnBookmarksListUp.Visible = false;
                            btnBookmarksListDown.Visible = false;

                        }

                        // Get the height of each item to set height of whole listview
                        int rowHeight = listViewBookmarks.Margin.Vertical + listViewBookmarks.Padding.Vertical + listViewBookmarks.GetItemRect(0).Height;
                        int itemCount = listViewBookmarks.Items.Count; // Get the number of items in the ListBox
                        int listBoxHeight = (itemCount + 2) * rowHeight; // Calculate the height of the ListBox (the extra 2 gives room for the header)

                        listViewBookmarks.Height = listBoxHeight; // Set the height of the ListBox

                        if (bookmark.Type == "block")
                        {
                            counterBlocks++;
                        }
                        if (bookmark.Type == "address")
                        {
                            counterAddresses++;
                        }
                        if (bookmark.Type == "xpub")
                        {
                            counterXpubs++;
                        }
                        if (bookmark.Type == "transaction")
                        {
                            counterTransactions++;
                        }
                        counterAllBookmarks++;
                    }
                }


                listViewBookmarks.Items[0].Selected = true;

                lblBookmarkTotalCount.Invoke((MethodInvoker)delegate
                {
                    lblBookmarkTotalCount.Text = counterAllBookmarks.ToString();
                });
                label144.Invoke((MethodInvoker)delegate
                {
                    label144.Location = new Point(lblBookmarkTotalCount.Location.X + lblBookmarkTotalCount.Width, label144.Location.Y);
                });
                lblBookmarkAddressCount.Invoke((MethodInvoker)delegate
                {
                    lblBookmarkAddressCount.Text = counterAddresses.ToString();
                    lblBookmarkAddressCount.Location = new Point(label144.Location.X + label144.Width, lblBookmarkAddressCount.Location.Y);
                });
                label153.Invoke((MethodInvoker)delegate
                {
                    label153.Location = new Point(lblBookmarkAddressCount.Location.X + lblBookmarkAddressCount.Width, label153.Location.Y);
                });
                lblBookmarkBlocksCount.Invoke((MethodInvoker)delegate
                {
                    lblBookmarkBlocksCount.Text = counterBlocks.ToString();
                    lblBookmarkBlocksCount.Location = new Point(label153.Location.X + label153.Width, lblBookmarkBlocksCount.Location.Y);
                });
                label151.Invoke((MethodInvoker)delegate
                {
                    label151.Location = new Point(lblBookmarkBlocksCount.Location.X + lblBookmarkBlocksCount.Width, label151.Location.Y);
                });
                lblBookmarkTransactionsCount.Invoke((MethodInvoker)delegate
                {
                    lblBookmarkTransactionsCount.Text = counterTransactions.ToString();
                    lblBookmarkTransactionsCount.Location = new Point(label151.Location.X + label151.Width, lblBookmarkTransactionsCount.Location.Y);
                });
                label147.Invoke((MethodInvoker)delegate
                {
                    label147.Location = new Point(lblBookmarkTransactionsCount.Location.X + lblBookmarkTransactionsCount.Width, label147.Location.Y);
                });
                lblBookmarkXpubsCount.Invoke((MethodInvoker)delegate
                {
                    lblBookmarkXpubsCount.Text = counterXpubs.ToString();
                    lblBookmarkXpubsCount.Location = new Point(label147.Location.X + label147.Width, lblBookmarkXpubsCount.Location.Y);
                });
                label142.Invoke((MethodInvoker)delegate
                {
                    label142.Location = new Point(lblBookmarkXpubsCount.Location.X + lblBookmarkXpubsCount.Width, label142.Location.Y);
                });

                lblBookmarkStatusMessage.Invoke((MethodInvoker)delegate
                {
                    lblBookmarkStatusMessage.Location = new Point(btnDecryptBookmark.Location.X + btnDecryptBookmark.Width + (int)(10 * UIScale), lblBookmarkStatusMessage.Location.Y);
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "SetupBookmarksScreen");
            }
        }
        #endregion
        #region view and unlock bookmarks
        private void ListViewBookmarks_ItemSelectionChanged(object sender, ListViewItemSelectionChangedEventArgs e)
        {
            try
            {
                textBoxBookmarkKey.Visible = false;
                panelBookmarkKeyContainer.Visible = false;
                btnDecryptBookmark.Visible = false;
                foreach (ListViewItem item in listViewBookmarks.Items)
                {
                    if (item != null)
                    {
                        if (item.Selected)
                        {
                            item.EnsureVisible();
                            if (item.SubItems[1].Text == "xpub")
                            {
                                if (lblXpubScreenOwnNodeStatusLight.ForeColor == Color.OliveDrab)
                                {
                                    btnViewBookmark.Enabled = true;
                                }
                                else
                                {
                                    ShowAlertSymbol();
                                    lblErrorMessage.Invoke((MethodInvoker)delegate
                                    {
                                        lblErrorMessage.Text = "you need to connect to a full node before the selected Xpub can be viewed.";
                                    });
                                }
                            }

                            btnDeleteBookmark.Enabled = true;
                            item.BackColor = Color.Blue;
                            item.ForeColor = MakeColorLighter(tableTextColor, 20);
                            item.SubItems[2].ForeColor = MakeColorLighter(tableTextColor, 20);
                            item.SubItems[3].ForeColor = MakeColorLighter(tableTextColor, 20);
                            item.SubItems[4].ForeColor = MakeColorLighter(tableTextColor, 20);
                            lblSelectedBookmarkType.Invoke((MethodInvoker)delegate
                            {
                                lblSelectedBookmarkType.Text = item.SubItems[1].Text;
                            });
                            label138.Invoke((MethodInvoker)delegate
                            {
                                label138.Text = "note";
                            });
                            lblSelectedBookmarkType.Invoke((MethodInvoker)delegate
                            {
                                lblBookmarkDataInFull.Location = new Point(lblSelectedBookmarkType.Location.X + lblSelectedBookmarkType.Width, lblSelectedBookmarkType.Location.Y);
                                lblBookmarkDataInFull.Text = item.SubItems[3].Text;
                                bookmarkDataInFullPreserved = item.SubItems[3].Text;
                            });
                            lblBookmarkNoteInFull.Invoke((MethodInvoker)delegate
                            {
                                lblBookmarkNoteInFull.Location = new Point(label138.Location.X + label138.Width, label138.Location.Y);
                                lblBookmarkNoteInFull.Text = item.SubItems[4].Text;
                                bookmarkNoteInFullPreserved = item.SubItems[4].Text;
                            });
                            if (item.SubItems[2].Text == "🔒")
                            {
                                btnBookmarkUnlock.Enabled = true;
                                bookmarkKeyCheckPreserved = item.SubItems[5].Text;
                                btnViewBookmark.Enabled = false;
                            }
                            else
                            {
                                btnBookmarkUnlock.Enabled = false;
                                btnViewBookmark.Enabled = true;
                            }
                        }
                        else
                        {
                            item.ForeColor = tableTextColor;
                            item.SubItems[2].ForeColor = tableTextColor;
                            item.SubItems[3].ForeColor = tableTextColor;
                            item.SubItems[4].ForeColor = tableTextColor;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewBookmarks_ItemSelectionChanged");
            }
        }

        private void BtnBookmarkUnlock_Click(object sender, EventArgs e)
        {
            try
            {
                if (textBoxBookmarkKey.Visible)
                {
                    textBoxBookmarkKey.Visible = false;
                    panelBookmarkKeyContainer.Visible = false;
                    btnDecryptBookmark.Visible = false;
                }
                else
                {
                    textBoxBookmarkKey.Visible = true;
                    panelBookmarkKeyContainer.Visible = true;
                    btnDecryptBookmark.Visible = true;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnBookmarkUnlock_Click");
            }
        }

        private void BtnViewBookmark_Click(object sender, EventArgs e)
        {
            try
            {
                CheckNetworkStatus();
                if (lblSelectedBookmarkType.Text == "block")
                {
                    numericUpDownSubmittedBlockNumber.Invoke((MethodInvoker)delegate
                    {
                        numericUpDownSubmittedBlockNumber.Text = lblBookmarkDataInFull.Text;
                    });
                    try
                    {
                        LookupBlock();
                    }
                    catch (Exception ex)
                    {
                        HandleException(ex, "btnViewBookmark_Click");
                    }
                    //show the block screen
                    BtnMenuBlock_Click(sender, e);
                }
                if (lblSelectedBookmarkType.Text == "address")
                {
                    textboxSubmittedAddress.Invoke((MethodInvoker)delegate
                    {
                        textboxSubmittedAddress.Text = lblBookmarkDataInFull.Text;
                    });
                    //show the address screen
                    BtnMenuAddress_Click(sender, e);
                }
                if (lblSelectedBookmarkType.Text == "transaction")
                {
                    textBoxTransactionID.Invoke((MethodInvoker)delegate
                    {
                        textBoxTransactionID.Text = lblBookmarkDataInFull.Text;
                    });
                    //show the transaction screen
                    BtnMenuTransaction_Click(sender, e);
                }
                if (lblSelectedBookmarkType.Text == "xpub")
                {
                    textBoxSubmittedXpub.Invoke((MethodInvoker)delegate
                    {
                        textBoxSubmittedXpub.Text = lblBookmarkDataInFull.Text;
                    });
                    BtnMenuXpub_Click(sender, e);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnViewBookmark_Click");
            }
        }
        #endregion
        #region delete bookmark
        private void BtnDeleteBoookmark_Click(object sender, EventArgs e)
        {
            try
            {
                string bookmarkDataToDelete = "";

                foreach (ListViewItem item in listViewBookmarks.Items)
                {
                    if (item != null && item.Selected)
                    {
                        bookmarkDataToDelete = item.SubItems[3].Text;
                    }
                }
                DeleteBookmarkFromJsonFile(bookmarkDataToDelete);
                lblBookmarkStatusMessage.ForeColor = Color.IndianRed;
                lblBookmarkStatusMessage.Text = "bookmark deleted";
                lblBookmarkStatusMessage.Visible = true;
                hideBookmarkStatusMessageTimer.Start();
                SetupBookmarksScreen();
                lblBookmarkDataInFull.Invoke((MethodInvoker)delegate
                {
                    lblBookmarkDataInFull.Text = "";
                });
                lblBookmarkNoteInFull.Invoke((MethodInvoker)delegate
                {
                    lblBookmarkNoteInFull.Text = "";
                });
                label138.Invoke((MethodInvoker)delegate
                {
                    label138.Text = "";
                });
                lblSelectedBookmarkType.Invoke((MethodInvoker)delegate
                {
                    lblSelectedBookmarkType.Text = "";
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnDeleteBookmark_Click");
            }
        }

        private static void DeleteBookmarkFromJsonFile(string bookmarkDataToDelete)
        {
            // Read the existing bookmarks from the JSON file
            var bookmarks = ReadBookmarksFromJsonFile();

            // Find the index of the bookmark with the specified data
            int index = bookmarks.FindIndex(bookmark =>
                bookmark.Data == bookmarkDataToDelete);

            // If a matching bookmark was found, remove it from the list
            if (index >= 0)
            {
                bookmarks.RemoveAt(index);

                // Write the updated list of bookmarks back to the JSON file
                WriteBookmarksToJsonFile(bookmarks);
            }
        }

        private void BtnDeleteAllBookmarks_Click(object sender, EventArgs e)
        {
            try
            {
                panelDeleteAllBookmarks.Visible = false;
                panelDeleteAllBookmarksConfirm.Visible = true;
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDeleteAllBookmarks_Click");
            }
        }

        private void BtnDeleteAllBookmarksNo_Click(object sender, EventArgs e)
        {
            try
            {
                panelDeleteAllBookmarks.Visible = true;
                panelDeleteAllBookmarksConfirm.Visible = false;
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDeleteAllBookmarksNo_Click");
            }
        }

        private void BtnDeleteAllBookmarksYes_Click(object sender, EventArgs e)
        {
            try
            {
                DeleteAllBookmarksFromJsonFile();
                panelDeleteAllBookmarks.Visible = true;
                panelDeleteAllBookmarksConfirm.Visible = false;
                SetupBookmarksScreen();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDeleteAllBookmarksYes_Click");
            }
        }

        private void DeleteAllBookmarksFromJsonFile()
        {
            try
            {
                string bookmarkDataToDelete = "";

                foreach (ListViewItem item in listViewBookmarks.Items)
                {
                    bookmarkDataToDelete = item.SubItems[3].Text;
                    DeleteBookmarkFromJsonFile(bookmarkDataToDelete);
                }
                lblBookmarkStatusMessage.Invoke((MethodInvoker)delegate
                {
                    lblBookmarkStatusMessage.ForeColor = Color.IndianRed;
                    lblBookmarkStatusMessage.Text = "bookmarks deleted";
                    lblBookmarkStatusMessage.Visible = true;
                });
                hideBookmarkStatusMessageTimer.Start();
                SetupBookmarksScreen();
                lblBookmarkDataInFull.Invoke((MethodInvoker)delegate
                {
                    lblBookmarkDataInFull.Text = "";
                });
                lblBookmarkNoteInFull.Invoke((MethodInvoker)delegate
                {
                    lblBookmarkNoteInFull.Text = "";
                });
                label138.Invoke((MethodInvoker)delegate
                {
                    label138.Text = "";
                });
                lblSelectedBookmarkType.Invoke((MethodInvoker)delegate
                {
                    lblSelectedBookmarkType.Text = "";
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnDeleteBookmark_Click");
            }
        }

        #endregion
        #region listview appearance
        private void ListViewBookmarks_ColumnWidthChanging(object sender, ColumnWidthChangingEventArgs e)
        {
            try
            {
                if (e.ColumnIndex == 0)
                {
                    if (listViewBookmarks.Columns[e.ColumnIndex].Width < (int)(100 * UIScale)) // min width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(100 * UIScale);
                    }
                    if (listViewBookmarks.Columns[e.ColumnIndex].Width > (int)(150 * UIScale)) // max width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(150 * UIScale);
                    }
                }

                if (e.ColumnIndex == 1)
                {
                    if (listViewBookmarks.Columns[e.ColumnIndex].Width != (int)(95 * UIScale)) // don't allow this one to change
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(95 * UIScale);
                    }
                }


                if (e.ColumnIndex == 2)
                {
                    if (listViewBookmarks.Columns[e.ColumnIndex].Width != (int)(20 * UIScale)) // don't allow this one to change
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(20 * UIScale);
                    }
                }

                if (e.ColumnIndex == 3)
                {
                    if (listViewBookmarks.Columns[e.ColumnIndex].Width < (int)(100 * UIScale)) // min width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(100 * UIScale);
                    }
                    if (listViewBookmarks.Columns[e.ColumnIndex].Width > (int)(400 * UIScale)) // max width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(400 * UIScale);
                    }
                }
                if (e.ColumnIndex == 4)
                {
                    if (listViewBookmarks.Columns[e.ColumnIndex].Width < (int)(100 * UIScale)) // min width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(100 * UIScale);
                    }
                    if (listViewBookmarks.Columns[e.ColumnIndex].Width > (int)(600 * UIScale)) // max width
                    {
                        e.Cancel = true;
                        e.NewWidth = (int)(600 * UIScale);
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewBookmarks_ColumnWidthChanging");
            }
        }

        private void ListViewBookmarks_DrawSubItem(object sender, DrawListViewSubItemEventArgs e)
        {
            try
            {
                var text = e.SubItem.Text;

                if (e.ColumnIndex == 1)
                {
                    if (text == "address")
                    {
                        e.SubItem.ForeColor = Color.DarkSlateBlue;
                    }
                    if (text == "block")
                    {
                        e.SubItem.ForeColor = Color.PaleVioletRed;
                    }
                    if (text == "transaction")
                    {
                        e.SubItem.ForeColor = Color.OliveDrab;
                    }
                    if (text == "xpub")
                    {
                        e.SubItem.ForeColor = Color.Peru;
                    }
                }
                if (e.ColumnIndex == 2)
                {
                    if (text == "")
                    {
                        e.SubItem.ForeColor = Color.OliveDrab;
                    }
                    else
                    {
                        e.SubItem.ForeColor = Color.IndianRed;
                    }
                }
                var font = listViewBookmarks.Font;
                var columnWidth = e.Header.Width;
                var textWidth = TextRenderer.MeasureText(text, font).Width;
                if (textWidth > columnWidth)
                {
                    // Truncate the text
                    var maxText = text.Substring(0, text.Length * columnWidth / textWidth - 3) + "...";
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);
                    // Clear the background
                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                        TextRenderer.DrawText(e.Graphics, maxText, font, bounds, MakeColorLighter(e.Item.ForeColor,40), TextFormatFlags.EndEllipsis | TextFormatFlags.Left);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewBookmarks.BackColor), bounds);
                        TextRenderer.DrawText(e.Graphics, maxText, font, bounds, e.Item.ForeColor, TextFormatFlags.EndEllipsis | TextFormatFlags.Left);
                    }
                }
                else if (textWidth < columnWidth)
                {
                    // Clear the background
                    var bounds = new Rectangle(e.SubItem.Bounds.Left, e.SubItem.Bounds.Top, columnWidth, e.SubItem.Bounds.Height);

                    if (e.Item.Selected)
                    {
                        e.Graphics.FillRectangle(new SolidBrush(subItemBackColor), bounds);
                        TextRenderer.DrawText(e.Graphics, text, font, bounds, MakeColorLighter(e.SubItem.ForeColor, 40), TextFormatFlags.Left);
                    }
                    else
                    {
                        e.Graphics.FillRectangle(new SolidBrush(listViewBookmarks.BackColor), bounds);
                        TextRenderer.DrawText(e.Graphics, text, font, bounds, e.SubItem.ForeColor, TextFormatFlags.Left);
                    }

                    TextRenderer.DrawText(e.Graphics, text, font, bounds, e.SubItem.ForeColor, TextFormatFlags.Left);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ListViewBookmarks_DrawSubItem");
            }
        }
        #endregion
        #region scroll listview
        private void BtnDecryptBookmark_Click(object sender, EventArgs e)
        {
            try
            {
                string decryptedBookmarkData = Decrypt(bookmarkDataInFullPreserved, textBoxBookmarkKey.Text);
                string decryptedBookmarkNote = Decrypt(bookmarkNoteInFullPreserved, textBoxBookmarkKey.Text);
                string decryptedBookmarkKeyCheck = Decrypt(bookmarkKeyCheckPreserved, textBoxBookmarkKey.Text);
                if (decryptedBookmarkKeyCheck == "21m") // correct key
                {
                    lblBookmarkDataInFull.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkDataInFull.Text = decryptedBookmarkData;
                        lblBookmarkNoteInFull.Text = decryptedBookmarkNote;
                    });
                    textBoxBookmarkKey.Invoke((MethodInvoker)delegate
                    {
                        textBoxBookmarkKey.Text = "";
                    });
                    lblBookmarkStatusMessage.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkStatusMessage.ForeColor = Color.OliveDrab;
                        lblBookmarkStatusMessage.Text = "bookmark unlocked";
                        lblBookmarkStatusMessage.Visible = true;
                    });
                    hideBookmarkStatusMessageTimer.Start();
                    btnViewBookmark.Enabled = true;
                }
                else // wrong key
                {
                    lblBookmarkStatusMessage.Invoke((MethodInvoker)delegate
                    {
                        lblBookmarkStatusMessage.ForeColor = Color.IndianRed;
                        lblBookmarkStatusMessage.Text = "incorrect key";
                        lblBookmarkStatusMessage.Visible = true;
                    });
                    hideBookmarkStatusMessageTimer.Start();
                    btnViewBookmark.Enabled = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "decrypting bookmark");
            }
        }

        private void BtnBookmarksListDown_Click(object sender, EventArgs e)
        {
            try
            {
                if (panelBookmarksContainer.VerticalScroll.Value < panelBookmarksContainer.VerticalScroll.Maximum)
                {
                    panelBookmarksContainer.VerticalScroll.Value++;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnBookmarksListDown_Click");
            }
        }

        private void BtnBookmarksListDown_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isBookmarksButtonPressed = true;
                bookmarksDownButtonPressed = true;
                BookmarksScrollTimer.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnBookmarksListDown_MouseDown");
            }
        }

        private void BtnBookmarksListDown_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isBookmarksButtonPressed = false;
                bookmarksDownButtonPressed = false;
                BookmarksScrollTimer.Stop();
                BookmarksScrollTimer.Interval = 50; // reset the interval to its original value
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnBookmarksListDown_MouseUp");
            }
        }

        private void BtnBookmarksListUp_Click(object sender, EventArgs e)
        {
            try
            {
                if (panelBookmarksContainer.VerticalScroll.Value > panelBookmarksContainer.VerticalScroll.Minimum)
                {
                    panelBookmarksContainer.VerticalScroll.Value--;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnBookmarksListUp_Click");
            }
        }

        private void BtnBookmarksListUp_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isBookmarksButtonPressed = true;
                bookmarksUpButtonPressed = true;
                BookmarksScrollTimer.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnBookmarksListUp_MouseDown");
            }
        }

        private void BtnBookmarksListUp_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isBookmarksButtonPressed = false;
                bookmarksUpButtonPressed = false;
                BookmarksScrollTimer.Stop();
                BookmarksScrollTimer.Interval = 50; // reset the interval to its original value
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnBookmarksListUp_MouseUp");
            }
        }

        private void BookmarksScrollTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                if (isBookmarksButtonPressed)
                {
                    if (bookmarksDownButtonPressed)
                    {
                        if (panelBookmarksContainer.VerticalScroll.Value < panelBookmarksContainer.VerticalScroll.Maximum - 5)
                        {
                            panelBookmarksContainer.VerticalScroll.Value = panelBookmarksContainer.VerticalScroll.Value + 5;
                            bookmarksScrollPosition = panelBookmarksContainer.VerticalScroll.Value; // store the scroll position to reposition on the paint event
                        }
                        BookmarksScrollTimer.Interval = 1; // set a faster interval while the button is held down
                    }
                    else if (bookmarksUpButtonPressed)
                    {
                        if (panelBookmarksContainer.VerticalScroll.Value > panelBookmarksContainer.VerticalScroll.Minimum + 5)
                        {
                            panelBookmarksContainer.VerticalScroll.Value = panelBookmarksContainer.VerticalScroll.Value - 5;
                            bookmarksScrollPosition = panelBookmarksContainer.VerticalScroll.Value; // store the scroll position to reposition on the paint event
                        }
                        BookmarksScrollTimer.Interval = 1; // set a faster interval while the button is held down
                    }
                }
                else
                {
                    BookmarksScrollTimer.Stop();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BookmarksScrollTimer_Tick");
            }
        }

        private void PanelBookmarksContainer_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                if (btnViewBookmark.Enabled)
                {
                    panelBookmarksContainer.VerticalScroll.Value = bookmarksScrollPosition;

                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "PanelBookmarksContainer_Paint");
            }
        }
        #endregion
        #region user input
        private void TextBoxBookmarkKey_Enter(object sender, EventArgs e)
        {
            try
            {
                if (isBookmarkKeyWatermarkTextDisplayed)
                {
                    textBoxBookmarkKey.Invoke((MethodInvoker)delegate
                    {
                        textBoxBookmarkKey.Text = "";
                        textBoxBookmarkKey.ForeColor = Color.White;
                    });
                    isBookmarkKeyWatermarkTextDisplayed = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxBookmarkKey_Enter");
            }
        }

        private void TextBoxBookmarkKey_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (isBookmarkKeyWatermarkTextDisplayed)
                {
                    textBoxBookmarkKey.Invoke((MethodInvoker)delegate
                    {
                        textBoxBookmarkKey.Text = "";
                        textBoxBookmarkKey.ForeColor = Color.White;
                    });
                    isBookmarkKeyWatermarkTextDisplayed = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxBookmarkKey_KeyPress");
            }
        }

        private void TextBoxBookmarkKey_Leave(object sender, EventArgs e)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(textBoxBookmarkKey.Text))
                {
                    textBoxBookmarkKey.Invoke((MethodInvoker)delegate
                    {
                        textBoxBookmarkKey.Text = "enter key to unlock";
                        textBoxBookmarkKey.ForeColor = Color.Gray;
                        isBookmarkKeyWatermarkTextDisplayed = true;
                    });

                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxBookmarkKey_Leave");
            }
        }

        private void TextBoxBookmarkKey_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (isBookmarkKeyWatermarkTextDisplayed)
                {
                    textBoxBookmarkKey.ForeColor = Color.White;
                    isBookmarkKeyWatermarkTextDisplayed = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxBookmarkKey_TextChanged");
            }
        }
        #endregion
        #endregion

        #region ⚡DCA CALCULATOR⚡

        private async void PopulateDCACalculator()
        {
            try
            {
                ShowDCAChartLoadingPanel();

                formsPlotDCA.Visible = true;

                ToggleLoadingAnimation("enable");

                // clear any previous graph
                ClearAllDCAChartData();
                formsPlotDCA.Plot.Title("", size: (int)(13 * UIScale), bold: false);
                formsPlotDCA.Plot.YAxis.Label("Price (USD)", size: (int)(12 * UIScale), bold: false);
                PrepareLinearScaleDCAChart();

                // get a series of historic price data
                var HistoricPriceDataJson = await _historicPriceDataService.GetHistoricPriceDataAsync(chartPeriod);
                var HistoricPriceDataJsonForDCA = HistoricPriceDataJson;
                if (!string.IsNullOrEmpty(HistoricPriceDataJson))
                {
                    JObject jsonObj = JObject.Parse(HistoricPriceDataJson);

                    List<PriceCoordinatesList> PriceList = JsonConvert.DeserializeObject<List<PriceCoordinatesList>>(jsonObj["values"].ToString());

                    // convert data to GBP, EUR, XAU if needed
                    decimal selectedCurrency = 0;
                    decimal exchangeRate = 1;
                    if (btnUSD.Enabled) // user has selected a currency other than USD
                    {
                        // get 
                        var (priceUSD, priceGBP, priceEUR, priceXAU) = BitcoinExplorerOrgGetPrice();
                        //var (priceUSD, priceGBP, priceEUR) = BitcoinExplorerOrgGetPrice();
                        if (!btnGBP.Enabled) //GBP is selected
                        {
                            selectedCurrency = Convert.ToDecimal(priceGBP);
                            //formsPlotDCA.Plot.Title("GBP/BTC DCA illustration", size: 13, bold: true);
                            formsPlotDCA.Plot.YAxis.Label("Price (GBP)", size: 12, bold: false);
                        }
                        if (!btnEUR.Enabled) //EUR is selected
                        {
                            selectedCurrency = Convert.ToDecimal(priceEUR);
                            //formsPlotDCA.Plot.Title("EUR market price across major bitcoin exchanges with DCA illustration", size: 13, bold: true);
                            formsPlotDCA.Plot.YAxis.Label("Price (EUR)", size: 12, bold: false);
                        }
                        if (!btnXAU.Enabled) //XAU is selected
                        {
                            selectedCurrency = Convert.ToDecimal(priceXAU);
                            //formsPlotDCA.Plot.Title("Average XAU market price across major bitcoin exchanges with DCA illustration", size: 13, bold: true);
                            formsPlotDCA.Plot.YAxis.Label("Price (XAU)", size: 12, bold: false);
                        }
                        exchangeRate = selectedCurrency / Convert.ToDecimal(priceUSD);

                        foreach (var item in PriceList)
                        {
                            item.Y *= exchangeRate;
                        }
                    }
                    // set the number of points on the graph
                    int pointCount = PriceList.Count;

                    //create the arrays for the price scatter graph
                    double[] yPriceChartPrices = PriceList.Select(h => (double)(h.Y)).ToArray(); // create array of doubles of the prices
                    List<DateTime> dateList = PriceList.Select(h => DateTimeOffset.FromUnixTimeSeconds(long.Parse(h.X)).LocalDateTime).ToList(); // create a new list of the dates, this time in DateTime format
                    double[] xPriceChartDates = dateList.Select(x => x.ToOADate()).ToArray(); // create array doubles of the dates

                    #region set up variables used for DCA calculation
                    double DCAAmount = Convert.ToDouble(textBoxDCAAmountInput.Text);

                    Dictionary<int, double> screenMap = new Dictionary<int, double>
                    {
                        { 0, 1 },
                        { 1, 7 },
                        { 2, 30 }
                    };
                    if (screenMap.ContainsKey(comboBoxDCAFrequency.SelectedIndex))
                    {
                        DCAFrequencyDays = screenMap[comboBoxDCAFrequency.SelectedIndex];
                    }
                    DateTime DCAStartDate = rjDatePickerDCAStartDate.Value;
                    DateTime DCAEndDate = rjDatePickerDCAEndDate.Value;
                    #endregion

                    #region create list of dates that DCA purchases occurred
                    List<DateTime> DCADateList = new List<DateTime>
                    {
                        // Add the start date
                        DCAStartDate
                    };

                    // Add the dates in between
                    DateTime nextDCADate = DCAStartDate;
                    while (nextDCADate < DCAEndDate)
                    {
                        nextDCADate = nextDCADate.AddDays(DCAFrequencyDays);
                        DCADateList.Add(nextDCADate);
                    }

                    if (!DCADateList.Contains(DCAEndDate))
                    {
                        DCADateList.Add(DCAEndDate);
                    }
                    #endregion

                    #region create arrays for the DCA graph
                    double[] xDCAChartDates = DCADateList.Select(x => x.ToOADate()).ToArray(); // create array doubles of the dates
                    #endregion

                    #region create list of prices for the corresponding dca dates
                    List<double> DCABitcoinAmountList = new List<double>();
                    List<double> DCABitcoinAmountRunningTotalList = new List<double>();
                    double bitcoinBoughtRunningTotal = 0;
                    double lastAmountBought = 0;

                    foreach (double xDCADate in xDCAChartDates)
                    {
                        // Cast both values to integers to compare only the whole number part
                        int xDCADateWhole = (int)xDCADate;

                        // Find the index of xDCAValue in xValues
                        int index = Array.FindIndex(xPriceChartDates, x => (int)x == xDCADateWhole);



                        if (index != -1)
                        {
                            // Corresponding price found
                            DCABitcoinAmountList.Add(DCAAmount / yPriceChartPrices[index]);
                            lastAmountBought = DCAAmount / yPriceChartPrices[index]; // store this value in case we don't have a price available to calculate with for the next date
                        }
                        else
                        {
                            // Date not found in the original data
                            DCABitcoinAmountList.Add(lastAmountBought);
                        }
                        bitcoinBoughtRunningTotal += lastAmountBought;
                        DCABitcoinAmountRunningTotalList.Add(bitcoinBoughtRunningTotal);
                    }
                    #endregion

                    double[] yDCAChartBitcoinAmounts = DCABitcoinAmountList.ToArray();
                    double[] yDCAChartBitcoinRunningTotal = DCABitcoinAmountRunningTotalList.ToArray();

                    // set axis limits
                    formsPlotDCA.Plot.SetAxisLimits(xMin: xPriceChartDates.Min(), xMax: xPriceChartDates.Max()); // date
                    formsPlotDCA.Plot.SetAxisLimits(yMin: 0, yMax: yPriceChartPrices.Max() * 1.05, yAxisIndex: 0); // price
                    formsPlotDCA.Plot.SetAxisLimits(yMin: 0, yMax: yDCAChartBitcoinRunningTotal.Max() * 1.05, yAxisIndex: 1);  // bitcoin acquired


                    scatter = formsPlotDCA.Plot.AddScatter(xPriceChartDates, yPriceChartPrices, lineWidth: 1, markerSize: 1, color: Color.DarkOrange, label: "Market price of 1 BTC");

                    // plot another set of data to show amount bought per purchase using the additional axis
                    //var BTCscatter = formsPlotDCA.Plot.AddScatter(xDCAChartDates, yDCAChartBitcoinAmounts, color: Color.Green, lineWidth: 1, markerSize: 1, label: "BTC purchased");
                    //BTCscatter.YAxisIndex = 1;
                    formsPlotDCA.Plot.YAxis2.Label("Accumulated bitcoin (BTC)");
                    formsPlotDCA.Plot.YAxis2.Color(label77.ForeColor);

                    // plot another set of data to show running total bought using the additional axis
                    var BTCRunningTotalscatter = formsPlotDCA.Plot.AddScatter(xDCAChartDates, yDCAChartBitcoinRunningTotal, color: Color.Purple, lineWidth: 1, markerSize: 1, label: "BTC purchased over time");
                    BTCRunningTotalscatter.YAxisIndex = 1;

                    formsPlotDCA.Plot.XAxis.DateTimeFormat(true);
                    formsPlotDCA.Plot.XAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlotDCA.Plot.YAxis.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlotDCA.Plot.YAxis2.TickLabelStyle(fontSize: (int)(10 * UIScale), color: label77.ForeColor);
                    formsPlotDCA.Plot.XAxis.Ticks(true);
                    formsPlotDCA.Plot.XAxis.Label("");


                    var legend = formsPlotDCA.Plot.Legend();
                    legend.Location = Alignment.UpperLeft;
                    legend.FillColor = chartsBackgroundColor;
                    legend.FontColor = label77.ForeColor;
                    legend.OutlineColor = chartsBackgroundColor;
                    legend.ShadowColor = chartsBackgroundColor;

                    // prevent navigating beyond the data
                    formsPlotDCA.Plot.YAxis.SetBoundary(0, yPriceChartPrices.Max() * 1.05);
                    formsPlotDCA.Plot.XAxis.SetBoundary(xPriceChartDates.Min(), xPriceChartDates.Max());
                    formsPlotDCA.Plot.YAxis2.SetBoundary(0, yDCAChartBitcoinRunningTotal.Max() * 1.05);

                    formsPlotDCA.Plot.XAxis.Ticks(true);
                    formsPlotDCA.Plot.YAxis.Ticks(true);
                    formsPlotDCA.Plot.YAxis2.Ticks(true);
                    formsPlotDCA.Plot.XAxis.MajorGrid(true);
                    formsPlotDCA.Plot.YAxis.MajorGrid(true);


                    // refresh the graph
                    formsPlotDCA.Refresh();
                    formsPlotDCA.Visible = true;

                    string currencyName = "D";
                    string currencySymbol = "$";
                    if (currencySelected == "D")
                    {
                        currencyName = "USD";
                        currencySymbol = "$";
                    }
                    else
                    {
                        if (currencySelected == "P")
                        {
                            currencyName = "GBP";
                            currencySymbol = "£";
                        }
                        else
                        {
                            if (currencySelected == "E")
                            {
                                currencyName = "EUR";
                                currencySymbol = "€";
                            }
                            else
                            {
                                if (currencySelected == "G")
                                {
                                    currencyName = "XAU";
                                    currencySymbol = "\U0001fa99";
                                }
                            }
                        }
                    }

                    double xDCAChartDatesCount = xDCAChartDates.Count();
                    double percentageChange = (bitcoinBoughtRunningTotal * Convert.ToDouble(OneBTCinSelectedCurrency)) / (xDCAChartDatesCount * DCAAmount) * 100;

                    lblDCABTCPurchases.Invoke((MethodInvoker)delegate
                    {
                        lblDCABTCPurchases.Text = Convert.ToString(xDCAChartDates.Count());
                    });
                    label206.Invoke((MethodInvoker)delegate
                    {
                        label206.Text = currencyName + " spent";
                    });
                    lblDCAAmountSpent.Invoke((MethodInvoker)delegate
                    {
                        lblDCAAmountSpent.Text = currencySymbol + Convert.ToString(xDCAChartDates.Count() * DCAAmount);
                    });
                    lblDCABTCPurchased.Invoke((MethodInvoker)delegate
                    {
                        lblDCABTCPurchased.Text = bitcoinBoughtRunningTotal.ToString("0.00000000");
                    });
                    lblDCACurrentValue.Invoke((MethodInvoker)delegate
                    {
                        lblDCACurrentValue.Text = currencySymbol + (Convert.ToDecimal(bitcoinBoughtRunningTotal) * OneBTCinSelectedCurrency).ToString("N2");
                    });
                    lblDCAPercentageChange.Invoke((MethodInvoker)delegate
                    {
                        lblDCAPercentageChange.Text = percentageChange.ToString("0.00");
                    });
                    panelDCASummary.Visible = true;

                    ToggleLoadingAnimation("disable");
                    HideDCAChartLoadingPanel();
                }
                else
                {
                    ToggleLoadingAnimation("disable");
                    HideDCAChartLoadingPanel();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "Generating DCA chart");
            }
        }

        #region show/hide DCA chart loading panel
        private void ShowDCAChartLoadingPanel()
        {
            try
            {
                pictureBoxDCAChartLoadingAnimation.Enabled = true;
                panelDCAChartLoadingPanel.Visible = true;
            }
            catch (WebException ex)
            {
                HandleException(ex, "ShowDCAChartLoadingPanel");
            }
        }

        private void HideDCAChartLoadingPanel()
        {
            try
            {
                pictureBoxDCAChartLoadingAnimation.Enabled = false;
                panelDCAChartLoadingPanel.Visible = false;
            }
            catch (WebException ex)
            {
                HandleException(ex, "HideDCAChartLoadingPanel");
            }
        }
        #endregion

        private void ClearAllDCAChartData()
        {
            try
            {
                formsPlotDCA.Plot.Clear();
            }
            catch (WebException ex)
            {
                HandleException(ex, "ClearAllDCAChartData");
            }
        }

        private void PrepareLinearScaleDCAChart()
        {
            try
            {
                // switch to linear scaling in case it was log before
                formsPlotDCA.Plot.YAxis.MinorLogScale(false);
                formsPlotDCA.Plot.YAxis.MajorGrid(false);
                formsPlotDCA.Plot.YAxis.MinorGrid(false);

                // Define a new tick label formatter for the linear scale
                static string linearTickLabels(double y) => y.ToString("N0");
                formsPlotDCA.Plot.YAxis.TickLabelFormat(linearTickLabels);

                // Revert back to automatic data area
                formsPlotDCA.Plot.ResetLayout();
                formsPlotDCA.Plot.AxisAuto();
            }
            catch (Exception ex)
            {
                HandleException(ex, "switching to linear scale chart");
            }
        }

        private void RjDatePickerDCAStartDate_ValueChanged(object sender, EventArgs e)
        {
            rjDatePickerDCAEndDate.MinDate = rjDatePickerDCAStartDate.Value;
            ValidateDCAInputs();
        }

        private void RjDatePickerDCAEndDate_ValueChanged(object sender, EventArgs e)
        {
            rjDatePickerDCAStartDate.MaxDate = rjDatePickerDCAEndDate.Value;
            ValidateDCAInputs();
        }

        private void TextBoxDCAAmountInput_Leave(object sender, EventArgs e)
        {
            try
            {
                if (textBoxDCAAmountInput.Text == "")
                {
                    textBoxDCAAmountInput.Invoke((MethodInvoker)delegate
                    {
                        textBoxDCAAmountInput.Text = "1.00";
                    });
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "textBoxDCAAmountInput_Leave");
            }
        }

        private void BtnCalculateDCA_Click(object sender, EventArgs e)
        {
            if (lblBlockchainInfoEndpoints.Text == "✔️")
            {
                PopulateDCACalculator();
            }
        }

        private void ValidateDCAInputs()
        {
            try
            {
                lblDCAMessage.Text = "";
                double amountDCA = Convert.ToDouble(textBoxDCAAmountInput.Text);
                if (amountDCA <= 0)
                {
                    btnCalculateDCA.Enabled = false;
                    panelDCASummary.Visible = false;
                    panelDCAMessages.Visible = true;
                    lblDCAMessage.Invoke((MethodInvoker)delegate
                    {
                        lblDCAMessage.Text = "You need to provide an amount that you wish to DCA in to bitcoin on a regular basis";
                    });
                    return;
                }
            }
            catch
            {
                btnCalculateDCA.Enabled = false;
                panelDCASummary.Visible = false;
                panelDCAMessages.Visible = true;
                lblDCAMessage.Invoke((MethodInvoker)delegate
                {
                    lblDCAMessage.Text = "You need to provide an amount that you wish to DCA in to bitcoin on a regular basis";
                });
                return;
            }
            DateTime endDate = rjDatePickerDCAEndDate.Value;
            DateTime startDate = rjDatePickerDCAStartDate.Value;

            TimeSpan dateDifference = endDate - startDate;

            int DCACalcMinimumPeriod = 0;
            if (DCAFrequencyDays == 1)
            {
                DCACalcMinimumPeriod = 14;
            }
            else
            {
                if (DCAFrequencyDays == 7)
                {
                    DCACalcMinimumPeriod = 30;
                }
                else
                {
                    if (DCAFrequencyDays == 30)
                    {
                        DCACalcMinimumPeriod = 120;
                    }
                }
            }

            if (dateDifference.Days < DCACalcMinimumPeriod)
            {
                btnCalculateDCA.Enabled = false;
                panelDCAMessages.Visible = true;
                lblDCAMessage.Invoke((MethodInvoker)delegate
                {
                    lblDCAMessage.Text = "There should be at least " + DCACalcMinimumPeriod + " days between the start date and the end date for the selected DCA frequency";
                });
                return;
            }

            btnCalculateDCA.Enabled = true;
            panelDCAMessages.Visible = false;
            panelDCASummary.Visible = false;
            lblDCAMessage.Text = "";
        }

        private void TextBoxDCAAmountInput_TextChanged(object sender, EventArgs e)
        {
            ValidateDCAInputs();
        }
        #endregion

        #region ⚡BTC/FIAT CONVERTER⚡
        #region populate data
        private void PopulateConverterScreen()
        {
            try
            {
                if (!offlineMode && !testNet)
                {
                    var (priceUSD, priceGBP, priceEUR, priceXAU) = BitcoinExplorerOrgGetPrice();

                    #region USD list
                    if (string.IsNullOrEmpty(priceUSD) || !double.TryParse(priceUSD, out _))
                    {
                        priceUSD = "0";
                    }
                    labelPCUSD1.Invoke((MethodInvoker)delegate
                    {
                        labelPCUSD1.Text = (Convert.ToDecimal(priceUSD) / 100000000).ToString("0.00");
                    });
                    labelPCUSD2.Invoke((MethodInvoker)delegate
                    {
                        labelPCUSD2.Text = (Convert.ToDecimal(priceUSD) / 10000000).ToString("0.00");
                    });
                    labelPCUSD3.Invoke((MethodInvoker)delegate
                    {
                        labelPCUSD3.Text = (Convert.ToDecimal(priceUSD) / 1000000).ToString("0.00");
                    });
                    labelPCUSD4.Invoke((MethodInvoker)delegate
                    {
                        labelPCUSD4.Text = (Convert.ToDecimal(priceUSD) / 100000).ToString("0.00");
                    });
                    labelPCUSD5.Invoke((MethodInvoker)delegate
                    {
                        labelPCUSD5.Text = (Convert.ToDecimal(priceUSD) / 10000).ToString("0.00");
                    });
                    labelPCUSD6.Invoke((MethodInvoker)delegate
                    {
                        labelPCUSD6.Text = (Convert.ToDecimal(priceUSD) / 1000).ToString("0.00");
                    });
                    labelPCUSD7.Invoke((MethodInvoker)delegate
                    {
                        labelPCUSD7.Text = (Convert.ToDecimal(priceUSD) / 100).ToString("0.00");
                    });
                    labelPCUSD8.Invoke((MethodInvoker)delegate
                    {
                        labelPCUSD8.Text = (Convert.ToDecimal(priceUSD) / 10).ToString("0.00");
                    });
                    labelPCUSD9.Invoke((MethodInvoker)delegate
                    {
                        labelPCUSD9.Text = (Convert.ToDecimal(priceUSD)).ToString("0.00");
                    });
                    labelPCUSD10.Invoke((MethodInvoker)delegate
                    {
                        labelPCUSD10.Text = (Convert.ToDecimal(priceUSD) * 10).ToString("0.00");
                    });
                    labelPCUSD11.Invoke((MethodInvoker)delegate
                    {
                        labelPCUSD11.Text = (Convert.ToDecimal(priceUSD) * 100).ToString("0.00");
                    });
                    labelPCUSD12.Invoke((MethodInvoker)delegate
                    {
                        labelPCUSD12.Text = (Convert.ToDecimal(priceUSD) * 1000).ToString("0.00");
                    });
                    labelPCUSD13.Invoke((MethodInvoker)delegate
                    {
                        labelPCUSD13.Text = (Convert.ToDecimal(priceUSD) * 10000).ToString("0.00");
                    });
                    labelPCUSD14.Invoke((MethodInvoker)delegate
                    {
                        labelPCUSD14.Text = (Convert.ToDecimal(priceUSD) * 100000).ToString("0.00");
                    });
                    labelPCUSD15.Invoke((MethodInvoker)delegate
                    {
                        labelPCUSD15.Text = (Convert.ToDecimal(priceUSD) * 1000000).ToString("0.00");
                    });
                    labelPCUSD16.Invoke((MethodInvoker)delegate
                    {
                        labelPCUSD16.Text = (Convert.ToDecimal(priceUSD) * 10000000).ToString("0.00");
                    });
                    labelPCUSD17.Invoke((MethodInvoker)delegate
                    {
                        labelPCUSD17.Text = (Convert.ToDecimal(priceUSD) * 21000000).ToString("0.00");
                    });
                    #endregion
                    #region EUR list
                    if (string.IsNullOrEmpty(priceEUR) || !double.TryParse(priceEUR, out _))
                    {
                        priceEUR = "0";
                    }
                    labelPCEUR1.Invoke((MethodInvoker)delegate
                    {
                        labelPCEUR1.Text = (Convert.ToDecimal(priceEUR) / 100000000).ToString("0.00");
                    });
                    labelPCEUR2.Invoke((MethodInvoker)delegate
                    {
                        labelPCEUR2.Text = (Convert.ToDecimal(priceEUR) / 10000000).ToString("0.00");
                    });
                    labelPCEUR3.Invoke((MethodInvoker)delegate
                    {
                        labelPCEUR3.Text = (Convert.ToDecimal(priceEUR) / 1000000).ToString("0.00");
                    });
                    labelPCEUR4.Invoke((MethodInvoker)delegate
                    {
                        labelPCEUR4.Text = (Convert.ToDecimal(priceEUR) / 100000).ToString("0.00");
                    });
                    labelPCEUR5.Invoke((MethodInvoker)delegate
                    {
                        labelPCEUR5.Text = (Convert.ToDecimal(priceEUR) / 10000).ToString("0.00");
                    });
                    labelPCEUR6.Invoke((MethodInvoker)delegate
                    {
                        labelPCEUR6.Text = (Convert.ToDecimal(priceEUR) / 1000).ToString("0.00");
                    });
                    labelPCEUR7.Invoke((MethodInvoker)delegate
                    {
                        labelPCEUR7.Text = (Convert.ToDecimal(priceEUR) / 100).ToString("0.00");
                    });
                    labelPCEUR8.Invoke((MethodInvoker)delegate
                    {
                        labelPCEUR8.Text = (Convert.ToDecimal(priceEUR) / 10).ToString("0.00");
                    });
                    labelPCEUR9.Invoke((MethodInvoker)delegate
                    {
                        labelPCEUR9.Text = (Convert.ToDecimal(priceEUR)).ToString("0.00");
                    });
                    labelPCEUR10.Invoke((MethodInvoker)delegate
                    {
                        labelPCEUR10.Text = (Convert.ToDecimal(priceEUR) * 10).ToString("0.00");
                    });
                    labelPCEUR11.Invoke((MethodInvoker)delegate
                    {
                        labelPCEUR11.Text = (Convert.ToDecimal(priceEUR) * 100).ToString("0.00");
                    });
                    labelPCEUR12.Invoke((MethodInvoker)delegate
                    {
                        labelPCEUR12.Text = (Convert.ToDecimal(priceEUR) * 1000).ToString("0.00");
                    });
                    labelPCEUR13.Invoke((MethodInvoker)delegate
                    {
                        labelPCEUR13.Text = (Convert.ToDecimal(priceEUR) * 10000).ToString("0.00");
                    });
                    labelPCEUR14.Invoke((MethodInvoker)delegate
                    {
                        labelPCEUR14.Text = (Convert.ToDecimal(priceEUR) * 100000).ToString("0.00");
                    });
                    labelPCEUR15.Invoke((MethodInvoker)delegate
                    {
                        labelPCEUR15.Text = (Convert.ToDecimal(priceEUR) * 1000000).ToString("0.00");
                    });
                    labelPCEUR16.Invoke((MethodInvoker)delegate
                    {
                        labelPCEUR16.Text = (Convert.ToDecimal(priceEUR) * 10000000).ToString("0.00");
                    });
                    labelPCEUR17.Invoke((MethodInvoker)delegate
                    {
                        labelPCEUR17.Text = (Convert.ToDecimal(priceEUR) * 21000000).ToString("0.00");
                    });
                    #endregion
                    #region GBP list
                    if (string.IsNullOrEmpty(priceGBP) || !double.TryParse(priceGBP, out _))
                    {
                        priceGBP = "0";
                    }
                    labelPCGBP1.Invoke((MethodInvoker)delegate
                    {
                        labelPCGBP1.Text = (Convert.ToDecimal(priceGBP) / 100000000).ToString("0.00");
                    });
                    labelPCGBP2.Invoke((MethodInvoker)delegate
                    {
                        labelPCGBP2.Text = (Convert.ToDecimal(priceGBP) / 10000000).ToString("0.00");
                    });
                    labelPCGBP3.Invoke((MethodInvoker)delegate
                    {
                        labelPCGBP3.Text = (Convert.ToDecimal(priceGBP) / 1000000).ToString("0.00");
                    });
                    labelPCGBP4.Invoke((MethodInvoker)delegate
                    {
                        labelPCGBP4.Text = (Convert.ToDecimal(priceGBP) / 100000).ToString("0.00");
                    });
                    labelPCGBP5.Invoke((MethodInvoker)delegate
                    {
                        labelPCGBP5.Text = (Convert.ToDecimal(priceGBP) / 10000).ToString("0.00");
                    });
                    labelPCGBP6.Invoke((MethodInvoker)delegate
                    {
                        labelPCGBP6.Text = (Convert.ToDecimal(priceGBP) / 1000).ToString("0.00");
                    });
                    labelPCGBP7.Invoke((MethodInvoker)delegate
                    {
                        labelPCGBP7.Text = (Convert.ToDecimal(priceGBP) / 100).ToString("0.00");
                    });
                    labelPCGBP8.Invoke((MethodInvoker)delegate
                    {
                        labelPCGBP8.Text = (Convert.ToDecimal(priceGBP) / 10).ToString("0.00");
                    });
                    labelPCGBP9.Invoke((MethodInvoker)delegate
                    {
                        labelPCGBP9.Text = (Convert.ToDecimal(priceGBP)).ToString("0.00");
                    });
                    labelPCGBP10.Invoke((MethodInvoker)delegate
                    {
                        labelPCGBP10.Text = (Convert.ToDecimal(priceGBP) * 10).ToString("0.00");
                    });
                    labelPCGBP11.Invoke((MethodInvoker)delegate
                    {
                        labelPCGBP11.Text = (Convert.ToDecimal(priceGBP) * 100).ToString("0.00");
                    });
                    labelPCGBP12.Invoke((MethodInvoker)delegate
                    {
                        labelPCGBP12.Text = (Convert.ToDecimal(priceGBP) * 1000).ToString("0.00");
                    });
                    labelPCGBP13.Invoke((MethodInvoker)delegate
                    {
                        labelPCGBP13.Text = (Convert.ToDecimal(priceGBP) * 10000).ToString("0.00");
                    });
                    labelPCGBP14.Invoke((MethodInvoker)delegate
                    {
                        labelPCGBP14.Text = (Convert.ToDecimal(priceGBP) * 100000).ToString("0.00");
                    });
                    labelPCGBP15.Invoke((MethodInvoker)delegate
                    {
                        labelPCGBP15.Text = (Convert.ToDecimal(priceGBP) * 1000000).ToString("0.00");
                    });
                    labelPCGBP16.Invoke((MethodInvoker)delegate
                    {
                        labelPCGBP16.Text = (Convert.ToDecimal(priceGBP) * 10000000).ToString("0.00");
                    });
                    labelPCGBP17.Invoke((MethodInvoker)delegate
                    {
                        labelPCGBP17.Text = (Convert.ToDecimal(priceGBP) * 21000000).ToString("0.00");
                    });
                    #endregion
                    #region XAU list
                    if (string.IsNullOrEmpty(priceXAU) || !double.TryParse(priceXAU, out _))
                    {
                        priceXAU = "0";
                    }
                    labelPCXAU1.Invoke((MethodInvoker)delegate
                    {
                        labelPCXAU1.Text = (Convert.ToDecimal(priceXAU) / 100000000).ToString("0.00");
                    });
                    labelPCXAU2.Invoke((MethodInvoker)delegate
                    {
                        labelPCXAU2.Text = (Convert.ToDecimal(priceXAU) / 10000000).ToString("0.00");
                    });
                    labelPCXAU3.Invoke((MethodInvoker)delegate
                    {
                        labelPCXAU3.Text = (Convert.ToDecimal(priceXAU) / 1000000).ToString("0.00");
                    });
                    labelPCXAU4.Invoke((MethodInvoker)delegate
                    {
                        labelPCXAU4.Text = (Convert.ToDecimal(priceXAU) / 100000).ToString("0.00");
                    });
                    labelPCXAU5.Invoke((MethodInvoker)delegate
                    {
                        labelPCXAU5.Text = (Convert.ToDecimal(priceXAU) / 10000).ToString("0.00");
                    });
                    labelPCXAU6.Invoke((MethodInvoker)delegate
                    {
                        labelPCXAU6.Text = (Convert.ToDecimal(priceXAU) / 1000).ToString("0.00");
                    });
                    labelPCXAU7.Invoke((MethodInvoker)delegate
                    {
                        labelPCXAU7.Text = (Convert.ToDecimal(priceXAU) / 100).ToString("0.00");
                    });
                    labelPCXAU8.Invoke((MethodInvoker)delegate
                    {
                        labelPCXAU8.Text = (Convert.ToDecimal(priceXAU) / 10).ToString("0.00");
                    });
                    labelPCXAU9.Invoke((MethodInvoker)delegate
                    {
                        labelPCXAU9.Text = (Convert.ToDecimal(priceXAU)).ToString("0.00");
                    });
                    labelPCXAU10.Invoke((MethodInvoker)delegate
                    {
                        labelPCXAU10.Text = (Convert.ToDecimal(priceXAU) * 10).ToString("0.00");
                    });
                    labelPCXAU11.Invoke((MethodInvoker)delegate
                    {
                        labelPCXAU11.Text = (Convert.ToDecimal(priceXAU) * 100).ToString("0.00");
                    });
                    labelPCXAU12.Invoke((MethodInvoker)delegate
                    {
                        labelPCXAU12.Text = (Convert.ToDecimal(priceXAU) * 1000).ToString("0.00");
                    });
                    labelPCXAU13.Invoke((MethodInvoker)delegate
                    {
                        labelPCXAU13.Text = (Convert.ToDecimal(priceXAU) * 10000).ToString("0.00");
                    });
                    labelPCXAU14.Invoke((MethodInvoker)delegate
                    {
                        labelPCXAU14.Text = (Convert.ToDecimal(priceXAU) * 100000).ToString("0.00");
                    });
                    labelPCXAU15.Invoke((MethodInvoker)delegate
                    {
                        labelPCXAU15.Text = (Convert.ToDecimal(priceXAU) * 1000000).ToString("0.00");
                    });
                    labelPCXAU16.Invoke((MethodInvoker)delegate
                    {
                        labelPCXAU16.Text = (Convert.ToDecimal(priceXAU) * 10000000).ToString("0.00");
                    });
                    labelPCXAU17.Invoke((MethodInvoker)delegate
                    {
                        labelPCXAU17.Text = (Convert.ToDecimal(priceXAU) * 21000000).ToString("0.00");
                    });
                    #endregion
                    #region calculate fields derived from user input
                    SetCalculatedFiatAmounts();
                    SetCalculatedUSDAmount();
                    SetCalculatedEURAmount();
                    SetCalculatedGBPAmount();
                    SetCalculatedXAUAmount();
                    #endregion
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "PopulateConverterScreen");
            }
        }
        #endregion
        #region set textboxes to 0 if left empty by user
        private void TextBoxConvertUSDtoBTC_Leave(object sender, EventArgs e)
        {
            try
            {
                if (textBoxConvertUSDtoBTC.Text == "")
                {
                    textBoxConvertUSDtoBTC.Invoke((MethodInvoker)delegate
                    {
                        textBoxConvertUSDtoBTC.Text = "1.00";
                    });
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "TextBoxConvertUSDtoBTC_Leave");
            }
        }

        private void TextBoxConvertEURtoBTC_Leave(object sender, EventArgs e)
        {
            try
            {
                if (textBoxConvertEURtoBTC.Text == "")
                {
                    textBoxConvertEURtoBTC.Invoke((MethodInvoker)delegate
                    {
                        textBoxConvertEURtoBTC.Text = "1.00";
                    });
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "TextBoxConvertEURtoBTC_Leave");
            }
        }

        private void TextBoxConvertGBPtoBTC_Leave(object sender, EventArgs e)
        {
            try
            {
                if (textBoxConvertGBPtoBTC.Text == "")
                {
                    textBoxConvertGBPtoBTC.Invoke((MethodInvoker)delegate
                    {
                        textBoxConvertGBPtoBTC.Text = "1.00";
                    });
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "TextBoxConvertGBPtoBTC_Leave");
            }
        }

        private void TextBoxConvertXAUtoBTC_Leave(object sender, EventArgs e)
        {
            try
            {
                if (textBoxConvertXAUtoBTC.Text == "")
                {
                    textBoxConvertXAUtoBTC.Invoke((MethodInvoker)delegate
                    {
                        textBoxConvertXAUtoBTC.Text = "1.00";
                    });
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "TextBoxConvertXAUtoBTC_Leave");
            }
        }

        private void TextBoxConvertBTCtoFiat_Leave(object sender, EventArgs e)
        {
            try
            {
                if (textBoxConvertBTCtoFiat.Text == "")
                {
                    textBoxConvertBTCtoFiat.Invoke((MethodInvoker)delegate
                    {
                        textBoxConvertBTCtoFiat.Text = "1.00000000";
                    });
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "TextBoxConvertBTCtoFiat_Leave");
            }
        }
        #endregion
        #region validate user inputs
        private void CurrencyTextBoxes_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                System.Windows.Forms.TextBox textBox = sender as System.Windows.Forms.TextBox;
                string text = textBox.Text;

                // Allow digits, backspace, and decimal point
                if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar) && (e.KeyChar != '.'))
                {
                    e.Handled = true;
                    return;
                }

                // Only allow one decimal point
                if (e.KeyChar == '.' && text.Contains('.'))
                {
                    e.Handled = true;
                    return;
                }

                // Get the current caret position
                int caretPos = textBox.SelectionStart;

                // Check if the new character is being inserted after the decimal point
                if (text.Contains('.') && caretPos > text.IndexOf('.'))
                {
                    // Allow two digits after the decimal point
                    int decimalPlaces = text.Length - text.IndexOf('.') - 1;
                    if (decimalPlaces >= 2)
                    {
                        e.Handled = true;
                        return;
                    }
                }

                // Combine the current text with the newly typed character
                string newText = text.Substring(0, caretPos) + e.KeyChar + text.Substring(caretPos);

                // Remove any commas in the text
                string strippedText = newText.Replace(",", "");

                // max = 100 trillion
                if (!string.IsNullOrEmpty(strippedText) && decimal.TryParse(strippedText, out decimal value))
                {
                    if (value > 100000000000000)
                    {
                        e.Handled = true;
                        return;
                    }
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "CurrencyTextBoxes_KeyPress - validating currency input");
            }
        }

        private void TextBoxConvertBTCtoFiat_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                System.Windows.Forms.TextBox textBox = sender as System.Windows.Forms.TextBox;
                string text = textBox.Text;

                // Allow digits, backspace, and decimal point
                if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar) && (e.KeyChar != '.'))
                {
                    e.Handled = true;
                    return;
                }

                // Only allow one decimal point
                if (e.KeyChar == '.' && text.Contains('.'))
                {
                    e.Handled = true;
                    return;
                }

                // Get the current caret position
                int caretPos = textBox.SelectionStart;

                // Check if the new character is being inserted after the decimal point
                if (text.Contains('.') && caretPos > text.IndexOf('.'))
                {
                    // Allow 8 digits after the decimal point
                    int decimalPlaces = text.Length - text.IndexOf('.') - 1;
                    if (decimalPlaces >= 8)
                    {
                        e.Handled = true;
                        return;
                    }
                }

                // Combine the current text with the newly typed character
                string newText = text.Substring(0, caretPos) + e.KeyChar + text.Substring(caretPos);

                // Remove any commas in the text
                string strippedText = newText.Replace(",", "");

                // max = 21 million
                if (!string.IsNullOrEmpty(strippedText) && decimal.TryParse(strippedText, out decimal value))
                {
                    if (value > 21000000)
                    {
                        e.Handled = true;
                        return;
                    }
                }

            }
            catch (WebException ex)
            {
                HandleException(ex, "textBoxConvertBTCtoFiat_KeyPress - validating BTC input");
            }
        }
        #endregion
        #region respond to and calculate from user inputs
        private void TextBoxConvertBTCtoFiat_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (textBoxConvertBTCtoFiat.Text != "")
                {
                    SetCalculatedFiatAmounts();
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "TextBoxConvertBTCtoFiat_TextChanged");
            }
        }

        private void SetCalculatedFiatAmounts()
        {
            try
            {
                labelPCUSDcustom.Invoke((MethodInvoker)delegate
                {
                    labelPCUSDcustom.Text = (Convert.ToDecimal(textBoxConvertBTCtoFiat.Text) * Convert.ToDecimal(labelPCUSD9.Text)).ToString("0.00");
                });
                labelPCEURcustom.Invoke((MethodInvoker)delegate
                {
                    labelPCEURcustom.Text = (Convert.ToDecimal(textBoxConvertBTCtoFiat.Text) * Convert.ToDecimal(labelPCEUR9.Text)).ToString("0.00");
                });
                labelPCGBPcustom.Invoke((MethodInvoker)delegate
                {
                    labelPCGBPcustom.Text = (Convert.ToDecimal(textBoxConvertBTCtoFiat.Text) * Convert.ToDecimal(labelPCGBP9.Text)).ToString("0.00");
                });
                labelPCXAUcustom.Invoke((MethodInvoker)delegate
                {
                    labelPCXAUcustom.Text = (Convert.ToDecimal(textBoxConvertBTCtoFiat.Text) * Convert.ToDecimal(labelPCXAU9.Text)).ToString("0.00");
                });
            }
            catch (WebException ex)
            {
                HandleException(ex, "SetCalculatedFiatAmounts");
            }
        }

        private void FiatAmountTextBoxes_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (textBoxConvertUSDtoBTC.Text != "")
                {
                    SetCalculatedUSDAmount();
                }
                if (textBoxConvertEURtoBTC.Text != "")
                {
                    SetCalculatedEURAmount();
                }
                if (textBoxConvertGBPtoBTC.Text != "")
                {
                    SetCalculatedGBPAmount();
                }
                if (textBoxConvertXAUtoBTC.Text != "")
                {
                    SetCalculatedXAUAmount();
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "FiatAmountTextBoxes_TextChanged");
            }
        }

        private void SetCalculatedUSDAmount()
        {
            try
            {
                if (decimal.TryParse(labelPCUSD9.Text, out decimal pcusd9text) && decimal.TryParse(textBoxConvertUSDtoBTC.Text, out decimal usdtobtctext))
                {
                    if (labelPCUSD9.Text != "USD" && pcusd9text > 0)
                    {
                        lblCalculatedUSDFromBTCAmount.Invoke((MethodInvoker)delegate
                        {
                            lblCalculatedUSDFromBTCAmount.Text = (usdtobtctext / pcusd9text).ToString("0.00000000");
                        });
                        label267.Invoke((MethodInvoker)delegate
                        {
                            label267.Text = "$" + textBoxConvertUSDtoBTC.Text + " USD (US dollar) =";
                        });
                        lblCalculatedUSDFromBTCAmount.Invoke((MethodInvoker)delegate
                        {
                            lblCalculatedUSDFromBTCAmount.Location = new Point(label267.Location.X + label267.Width - (int)(4 * UIScale), lblCalculatedUSDFromBTCAmount.Location.Y);
                        });
                        label273.Invoke((MethodInvoker)delegate
                        {
                            label273.Location = new Point(lblCalculatedUSDFromBTCAmount.Location.X + lblCalculatedUSDFromBTCAmount.Width, label273.Location.Y);
                        });
                    }
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "SetCalculatedUSDAmount");
            }
        }
        private void SetCalculatedEURAmount()
        {
            try
            {
                if (decimal.TryParse(labelPCEUR9.Text, out decimal pceur9text) && decimal.TryParse(textBoxConvertEURtoBTC.Text, out decimal eurtobtctext))
                {
                    if (labelPCEUR9.Text != "EUR" && pceur9text > 0)
                    {
                        lblCalculatedEURFromBTCAmount.Invoke((MethodInvoker)delegate
                        {
                            lblCalculatedEURFromBTCAmount.Text = (eurtobtctext / pceur9text).ToString("0.00000000");
                        });
                        label270.Invoke((MethodInvoker)delegate
                        {
                            label270.Text = "€" + textBoxConvertEURtoBTC.Text + " EUR (European euro) =";
                        });
                        lblCalculatedEURFromBTCAmount.Invoke((MethodInvoker)delegate
                        {
                            lblCalculatedEURFromBTCAmount.Location = new Point(label270.Location.X + label270.Width - (int)(4 * UIScale), lblCalculatedEURFromBTCAmount.Location.Y);
                        });
                        label274.Invoke((MethodInvoker)delegate
                        {
                            label274.Location = new Point(lblCalculatedEURFromBTCAmount.Location.X + lblCalculatedEURFromBTCAmount.Width, label274.Location.Y);
                        });
                    }
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "SetCalculatedEURAmount");
            }
        }
        private void SetCalculatedGBPAmount()
        {
            try
            {
                if (decimal.TryParse(labelPCGBP9.Text, out decimal pcgbp9text) && decimal.TryParse(textBoxConvertGBPtoBTC.Text, out decimal gbptobtctext))
                {
                    if (labelPCGBP9.Text != "GBP" && pcgbp9text > 0)
                    {
                        lblCalculatedGBPFromBTCAmount.Invoke((MethodInvoker)delegate
                        {
                            lblCalculatedGBPFromBTCAmount.Text = (gbptobtctext / pcgbp9text).ToString("0.00000000");
                        });
                        label269.Invoke((MethodInvoker)delegate
                        {
                            label269.Text = "£" + textBoxConvertGBPtoBTC.Text + " GBP (British pound sterling) =";
                        });
                        lblCalculatedGBPFromBTCAmount.Invoke((MethodInvoker)delegate
                        {
                            lblCalculatedGBPFromBTCAmount.Location = new Point(label269.Location.X + label269.Width - (int)(4 * UIScale), lblCalculatedGBPFromBTCAmount.Location.Y);
                        });
                        label276.Invoke((MethodInvoker)delegate
                        {
                            label276.Location = new Point(lblCalculatedGBPFromBTCAmount.Location.X + lblCalculatedGBPFromBTCAmount.Width, label276.Location.Y);
                        });
                    }
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "SetCalculatedGBPAmount");
            }
        }
        private void SetCalculatedXAUAmount()
        {
            try
            {
                if (decimal.TryParse(labelPCXAU9.Text, out decimal pcxau9text) && decimal.TryParse(textBoxConvertXAUtoBTC.Text, out decimal xautobtctext))
                {
                    if (labelPCXAU9.Text != "XAU" && pcxau9text > 0)
                    {
                        lblCalculatedXAUFromBTCAmount.Invoke((MethodInvoker)delegate
                        {
                            lblCalculatedXAUFromBTCAmount.Text = (xautobtctext / pcxau9text).ToString("0.00000000");
                        });
                        label268.Invoke((MethodInvoker)delegate
                        {
                            label268.Text = "🪙" + textBoxConvertXAUtoBTC.Text + " XAU (ounce of gold) =";
                        });
                        lblCalculatedXAUFromBTCAmount.Invoke((MethodInvoker)delegate
                        {
                            lblCalculatedXAUFromBTCAmount.Location = new Point(label268.Location.X + label268.Width - 4, lblCalculatedXAUFromBTCAmount.Location.Y);
                        });
                        label275.Invoke((MethodInvoker)delegate
                        {
                            label275.Location = new Point(lblCalculatedXAUFromBTCAmount.Location.X + lblCalculatedXAUFromBTCAmount.Width, label275.Location.Y);
                        });
                    }
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "SetCalculatedXAUAmount");
            }
        }
        #endregion
        #endregion

        #region ⚡DIRECTORY SCREEN⚡
        #region load the directory page
        private void LoadAndStyleDirectoryBrowser()
        {
            try
            {
                if (!offlineMode && enableDirectory)
                {

                    webBrowserDirectory.Visible = true;
                    string directoryURL = "https://btcdir.org/satsuma-dir/";
                    webBrowserDirectory.Navigate(new Uri(directoryURL));
                }
                else
                {
                    webBrowserDirectory.Visible = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "LoadAndStyleDirectoryBrowser");
            }
        }
        #endregion
        #region manipulate colours to match theme and subscribe links to LinkElement_Click to use default browser
        private void WebBrowserDirectory_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)
        {
            try
            {
                // Get the page
                var document = webBrowserDirectory.Document;
                if (document != null)
                {
                    var navElements = document.GetElementsByTagName("nav");
                    var categoryWidth = (int)(160 * UIScale);
                    // set width of category column
                    foreach (HtmlElement navElement in navElements)
                    {
                        if (navElement.GetAttribute("className") == "floating-menu")
                        {
                            navElement.Style = $"width: {categoryWidth}px;";
                        }
                    }


                    var spanElements2 = document.GetElementsByTagName("div");
                    var linksPadding = (int)(170 * UIScale);
                    foreach (HtmlElement spanElement in spanElements2)
                    {
                        // set font
                        if (spanElement.GetAttribute("className") == "site-content")
                        {
                            spanElement.Style = "font-family: Century Gothic;";
                        }

                        // set width of links column
                        if (spanElement.GetAttribute("className") == "linklist")
                        {
                            spanElement.Style = $"padding-left: {linksPadding}px; width: 98%;";
                        }

                    }


                    // Modify background color
                    var backgroundColor = panel88.BackColor;
                    var backgroundColorString = ColorTranslator.ToHtml(backgroundColor);
                    document.Body.Style = $"background-color: {backgroundColorString};";

                    // Modify links color
                    var linkColor = lblHeaderMarketCap.ForeColor;
                    var linkColorString = ColorTranslator.ToHtml(linkColor);

                    var AdjfontSize = 0.76 * UIScale;
                    document.InvokeScript("execScript", new object[] { $"var links = document.getElementsByTagName('a');" +
                                $"for (var i = 0; i < links.length; i++) {{" +
                                    $"links[i].style.color = '{linkColorString}';" +
                                $"}}" });
                    // Make all div elements transparent
                    document.InvokeScript("execScript", new object[] { $"var divs = document.getElementsByTagName('div');" +
                                                $"for (var i = 0; i < divs.length; i++) {{" +
                                                    $"divs[i].style.backgroundColor = 'transparent';" +
                                                $"}}" });

                    // Change the color of all category titles
                    var spanColor = btnTransactionOutputsUp.ForeColor;
                    var spanColorString = ColorTranslator.ToHtml(spanColor);
                    var spanElements = document.GetElementsByTagName("span");
                    var adjustedFontSize = 11 * UIScale;
                    foreach (HtmlElement spanElement in spanElements)
                    {
                        if (spanElement.GetAttribute("className") == "linklistcatclass")
                        {
                            spanElement.Style = $"color: {spanColorString}; font-weight: bold; font-size: {adjustedFontSize}pt;";
                        }
                    }

                    var titleDivBGColor = btnTransactionOutputsUp.BackColor;
                    var titleDivBGColorString = ColorTranslator.ToHtml(titleDivBGColor);
                    var titleDivBGColorElements = document.GetElementsByTagName("div");
                    var adjustedFontSize2 = 10 * UIScale;
                    foreach (HtmlElement titleDivBGColorElement in titleDivBGColorElements)
                    {
                        if (titleDivBGColorElement.GetAttribute("className") == "linklistcatname")
                        {
                            titleDivBGColorElement.Style = $"background: {titleDivBGColorString};";
                        }
                        if (titleDivBGColorElement.GetAttribute("className") == "linklistindex")
                        {
                            var backgroundColor2 = panel16.BackColor;
                            var lighterBackgroundColor = MakeColorLighter(backgroundColor2, 10);
                            var lighterBackgroundColorString = ColorTranslator.ToHtml(lighterBackgroundColor);
                            titleDivBGColorElement.Style = $"border: 1px solid {titleDivBGColorString}; background-color: {lighterBackgroundColorString}; font-size: {adjustedFontSize}pt;";
                        }
                    }

                    // Change the color of all other text
                    var textColor = label77.ForeColor;
                    var textColorString = ColorTranslator.ToHtml(textColor);
                    var textElements = document.GetElementsByTagName("span");
                    var adjustedFontSize3 = 0.76 * UIScale;
                    foreach (HtmlElement textElement in textElements)
                    {
                        if (textElement.GetAttribute("className") == "linklistdesc")
                        {
                            textElement.Style = $"color: {textColorString}; font-size: {adjustedFontSize3}em";
                        }
                    }

                    // Attach a custom event handler to all anchor (<a>) elements in the loaded document
                    // to enable links to open in default browser rather than IE
                    foreach (HtmlElement linkElement in webBrowserDirectory.Document.Links)
                    {
                        linkElement.Click += LinkElement_Click;
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "WebBrowserDirectory_DocumentCompleted");
            }
        }
        #endregion
        #region scroll the directory
        private Timer scrollTimer;
        private readonly int scrollStep = 6;

        private void BtnDirectoryScrollUp_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                scrollTimer = new Timer
                {
                    Interval = 1 // scrolling speed
                };
                scrollTimer.Tick += (s, ev) =>
                {
                    // Inject JavaScript to scroll up
                    InjectJavaScript($"window.scrollBy(0, -{scrollStep});");
                };
                scrollTimer.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDirectoryScrollUp_MouseDown");
            }
        }

        private void BtnDirectoryScrollDown_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                scrollTimer = new Timer
                {
                    Interval = 1 // scrolling speed
                };
                scrollTimer.Tick += (s, ev) =>
                {
                    // Inject JavaScript to scroll down
                    InjectJavaScript($"window.scrollBy(0, {scrollStep});");
                };
                scrollTimer.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDirectoryScrollDown_MouseDown");
            }
        }

        private void BtnDirectoryScrollUp_Click(object sender, EventArgs e)
        {
            try
            {
                if (webBrowserDirectory.Document != null)
                {
                    InjectJavaScript("window.scrollBy(0, -4);");
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDirectoryScrollUp_Click");
            }
        }

        private void BtnDirectoryScrollDown_Click(object sender, EventArgs e)
        {
            try
            {
                if (webBrowserDirectory.Document != null)
                {
                    InjectJavaScript("window.scrollBy(0, 4);");
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDirectoryScrollDown_Click");
            }
        }

        private void ScrollButton_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                // Stop the timer when the mouse button is released
                scrollTimer.Stop();
                scrollTimer.Dispose();
            }
            catch (Exception ex)
            {
                HandleException(ex, "ScrollButton_MouseUp");
            }
        }

        private void InjectJavaScript(string script)
        {
            try
            {
                if (webBrowserDirectory.Document != null)
                {
                    HtmlElement head = webBrowserDirectory.Document.GetElementsByTagName("head")[0];
                    HtmlElement scriptElement = webBrowserDirectory.Document.CreateElement("script");
                    scriptElement.SetAttribute("text", script);
                    head.AppendChild(scriptElement);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "InjectJavaScript");
            }
        }
        #endregion
        #region use default browser for external links
        private void LinkElement_Click(object sender, HtmlElementEventArgs e)
        {
            try
            {
                if (linkClicked) return; // If the link was already clicked less than a second ago, do nothing (linkClicked resets to false 1 sec after clicking link. Not doing this spawns multiple tabs)

                HtmlElement linkElement = sender as HtmlElement;
                if (linkElement != null)
                {
                    string url = linkElement.GetAttribute("href");

                    // Check if the URL starts with "https://btcdir.org/satsuma-dir"
                    if (url.StartsWith("https://btcdir.org/satsuma-dir"))
                    {
                        // do nothing (open these links in webbrowser control)
                        return;
                    }

                    // External links open in the default browser
                    try
                    {
                        Process.Start(new ProcessStartInfo
                        {
                            FileName = url,
                            UseShellExecute = true
                        });
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("Error opening link: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }

                    // Set the linkClicked flag to true to avoid multiple tabs for a single click
                    linkClicked = true;
                    externalLinksTimer.Start();

                    // Cancel the default behavior for the link click to stop IE opening
                    e.ReturnValue = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "LinkElement_Click");
            }
        }

        private void ExternalLinksTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                linkClicked = false;
                externalLinksTimer.Stop();
            }
            catch (Exception ex)
            {
                HandleException(ex, "ExternalLinksTimer_Tick");
            }
        }
        #endregion
        #endregion

        #region ⚡SETTINGS SCREEN⚡
        #region user input own node url
        private void TextBoxSettingsOwnNodeURL_Enter(object sender, EventArgs e)
        {
            try
            {
                if (isTextBoxSettingsOwnNodeURLWatermarkTextDisplayed)
                {
                    textBoxSettingsOwnNodeURL.Invoke((MethodInvoker)delegate
                    {
                        textBoxSettingsOwnNodeURL.Text = "";
                        textBoxSettingsOwnNodeURL.ForeColor = Color.White;
                    });
                    isTextBoxSettingsOwnNodeURLWatermarkTextDisplayed = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxSettingsOwnNodeURL_Enter");
            }
        }

        private void TextBoxSettingsOwnNodeURL_Leave(object sender, EventArgs e)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(textBoxSettingsOwnNodeURL.Text))
                {
                    textBoxSettingsOwnNodeURL.Invoke((MethodInvoker)delegate
                    {
                        textBoxSettingsOwnNodeURL.Invoke((MethodInvoker)delegate
                        {
                            textBoxSettingsOwnNodeURL.Text = "e.g http://umbrel.local:3006/api/";
                            textBoxSettingsOwnNodeURL.ForeColor = Color.Gray;
                        });
                    });
                    isTextBoxSettingsOwnNodeURLWatermarkTextDisplayed = true;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxSettingsOwnNodeURL_Leave");
            }
        }

        private void TextBoxSettingsOwnNodeURL_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (isTextBoxSettingsOwnNodeURLWatermarkTextDisplayed)
                {
                    textBoxSettingsOwnNodeURL.ForeColor = Color.White;
                    isTextBoxSettingsOwnNodeURLWatermarkTextDisplayed = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxSettingsOwnNodeURL_TextChanged");
            }
        }

        private void TextBoxSettingsOwnNodeURL_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (isTextBoxSettingsOwnNodeURLWatermarkTextDisplayed)
                {
                    textBoxSettingsOwnNodeURL.Invoke((MethodInvoker)delegate
                    {
                        textBoxSettingsOwnNodeURL.Text = "";
                        textBoxSettingsOwnNodeURL.ForeColor = Color.White;
                    });
                    isTextBoxSettingsOwnNodeURLWatermarkTextDisplayed = false;
                }
                else
                {
                    previousXpubScreenOwnNodeURLStringToCompare = textBoxSettingsOwnNodeURL.Text;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxSettingsOwnNodeURL_KeyPress");
            }
        }

        private void TextBoxSettingsOwnNodeURL_KeyUp(object sender, KeyEventArgs e)
        {
            try
            {
                if (previousXpubScreenOwnNodeURLStringToCompare != textBoxSettingsOwnNodeURL.Text)
                {
                    textBoxSubmittedXpub.Enabled = false;
                    lblXpubScreenOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                    {
                        lblXpubScreenOwnNodeStatusLight.ForeColor = Color.IndianRed;
                    });
                    lblSettingsOwnNodeSelected.Enabled = false;
                    label174.Invoke((MethodInvoker)delegate
                    {
                        label174.Text = "your node (not connected)";
                    });
                    MoveNodeSelections();
                    lblXpubScreenOwnNodeStatus.Invoke((MethodInvoker)delegate
                    {
                        lblXpubScreenOwnNodeStatus.Text = "invalid / node offline";
                    });
                    lblSettingsOwnNodeStatus.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsOwnNodeStatus.Text = "invalid / node offline";
                        lblSettingsOwnNodeStatus.Location = new Point((int)(755 * UIScale) - lblSettingsOwnNodeStatus.Width, lblSettingsOwnNodeStatus.Location.Y);
                    });
                    lblSettingsOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsOwnNodeStatusLight.ForeColor = Color.IndianRed;
                        lblSettingsOwnNodeStatusLight.Location = new Point(lblSettingsOwnNodeStatus.Location.X - lblSettingsOwnNodeStatusLight.Width, lblSettingsOwnNodeStatusLight.Location.Y);
                    });

                    textBoxSubmittedXpub.Invoke((MethodInvoker)delegate
                    {
                        textBoxSubmittedXpub.Text = "";
                    });
                    previousXpubScreenOwnNodeURLStringToCompare = textBoxSettingsOwnNodeURL.Text;
                    textBoxXpubScreenOwnNodeURL.Invoke((MethodInvoker)delegate
                    {
                        textBoxXpubScreenOwnNodeURL.Text = textBoxSettingsOwnNodeURL.Text;
                    });
                    CheckOwnNodeIsOnline();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxSettingsOwnNodeURL_KeyUp");
            }
        }
        #endregion
        #region node selection
        private void LblSettingsNodeMainnet_Click(object sender, EventArgs e)
        {
            try
            {
                if (lblSettingsNodeMainnetSelected.Text == "❌")
                {
                    lblSettingsNodeMainnetSelected.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsNodeMainnetSelected.ForeColor = Color.Green;
                        lblSettingsNodeMainnetSelected.Text = "✔️";
                    });
                    testNet = false;
                    lblSettingsNodeTestnetSelected.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsNodeTestnetSelected.ForeColor = Color.IndianRed;
                        lblSettingsNodeTestnetSelected.Text = "❌";
                    });
                    lblSettingsOwnNodeSelected.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsOwnNodeSelected.ForeColor = Color.IndianRed;
                        lblSettingsOwnNodeSelected.Text = "❌";
                    });
                    NodeURL = "https://mempool.space/api/";
                    RunMempoolSpaceLightningAPI = true;
                    CheckNetworkStatus();
                    CreateDataServices();
                    SaveSettingsToBookmarksFile();
                    if (RunBlockchainInfoEndpointAPI)
                    {
                        EnableChartsThatDontUseMempoolSpace();
                    }
                    GetBlockTip();
                    LookupBlockList();
                    EnableFunctionalityForMainNet();
                    UpdateBitcoinAndLightningDashboards();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "LblSettingsNodeMainnet_Click");
            }
        }

        private void LblSettingsNodeTestnet_Click(object sender, EventArgs e)
        {
            try
            {
                if (lblSettingsNodeTestnetSelected.Text == "❌")
                {
                    lblSettingsNodeTestnetSelected.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsNodeTestnetSelected.ForeColor = Color.Green;
                        lblSettingsNodeTestnetSelected.Text = "✔️";
                    });
                    testNet = true;
                    lblSettingsNodeMainnetSelected.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsNodeMainnetSelected.ForeColor = Color.IndianRed;
                        lblSettingsNodeMainnetSelected.Text = "❌";
                    });
                    lblSettingsOwnNodeSelected.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsOwnNodeSelected.ForeColor = Color.IndianRed;
                        lblSettingsOwnNodeSelected.Text = "❌";
                    });
                    NodeURL = "https://mempool.space/testnet/api/";
                    RunMempoolSpaceLightningAPI = true;
                    CheckNetworkStatus();
                    CreateDataServices();
                    SaveSettingsToBookmarksFile();
                    DisableFunctionalityForTestNet();
                    GetBlockTip();
                    LookupBlockList();
                    UpdateBitcoinAndLightningDashboards();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "LblSettingsNodeTestnet_Click");
            }
        }

        private void LblSettingsNodeCustom_Click(object sender, EventArgs e)
        {
            try
            {
                if (lblSettingsOwnNodeSelected.Text == "❌")
                {
                    lblSettingsOwnNodeSelected.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsOwnNodeSelected.ForeColor = Color.Green;
                        lblSettingsOwnNodeSelected.Text = "✔️";
                    });
                    testNet = false;
                    lblSettingsNodeMainnetSelected.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsNodeMainnetSelected.ForeColor = Color.IndianRed;
                        lblSettingsNodeMainnetSelected.Text = "❌";
                    });
                    lblSettingsNodeTestnetSelected.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsNodeTestnetSelected.ForeColor = Color.IndianRed;
                        lblSettingsNodeTestnetSelected.Text = "❌";
                    });
                    lblSettingsSelectedNodeStatus.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsSelectedNodeStatus.Text = "invalid / node offline";
                        lblSettingsSelectedNodeStatus.Location = new Point((int)(755 * UIScale) - lblSettingsSelectedNodeStatus.Width, lblSettingsSelectedNodeStatus.Location.Y);
                    });
                    lblSettingsSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                    {
                        lblSettingsSelectedNodeStatusLight.ForeColor = Color.IndianRed;
                        lblSettingsSelectedNodeStatusLight.Location = new Point(lblSettingsSelectedNodeStatus.Location.X - lblSettingsSelectedNodeStatusLight.Width, lblSettingsSelectedNodeStatusLight.Location.Y);
                    });
                    previousXpubScreenOwnNodeURLStringToCompare = textBoxSettingsOwnNodeURL.Text;
                    RunMempoolSpaceLightningAPI = false;
                    CheckOwnNodeIsOnline();
                    NodeURL = textBoxSettingsOwnNodeURL.Text;
                    CheckNetworkStatus();

                    if (lblSettingsOwnNodeStatusLight.ForeColor == Color.OliveDrab)
                    {
                        CreateDataServices();
                        SaveSettingsToBookmarksFile();
                        GetBlockTip();
                        LookupBlockList();
                        UpdateBitcoinAndLightningDashboards();

                        // write the node url to the bookmarks file for auto retrieval next time (only if it's different to the one that might already be there)
                        DateTime today = DateTime.Today;
                        string bookmarkData;
                        string keyCheck = "21m";
                        bookmarkData = textBoxSettingsOwnNodeURL.Text;
                        var newBookmark = new Bookmark { DateAdded = today, Type = "node", Data = bookmarkData, Note = "", Encrypted = false, KeyCheck = keyCheck };
                        if (!xpubNodeURLAlreadySavedInFile)
                        {
                            // Read the existing bookmarks from the JSON file
                            var bookmarks = ReadBookmarksFromJsonFile();

                            // Add the new bookmark to the list
                            bookmarks.Add(newBookmark);

                            // Write the updated list of bookmarks back to the JSON file
                            WriteBookmarksToJsonFile(bookmarks);
                            xpubNodeURLAlreadySavedInFile = true;
                            xpubNodeURLInFile = bookmarkData;
                        }
                        else
                        {
                            if (xpubNodeURLInFile != textBoxSettingsOwnNodeURL.Text)
                            {
                                //delete the currently saved node url
                                DeleteBookmarkFromJsonFile(xpubNodeURLInFile);
                                // Read the existing bookmarks from the JSON file
                                var bookmarks = ReadBookmarksFromJsonFile();
                                // Add the new bookmark to the list
                                bookmarks.Add(newBookmark);
                                // Write the updated list of bookmarks back to the JSON file
                                WriteBookmarksToJsonFile(bookmarks);
                                xpubNodeURLAlreadySavedInFile = true;
                                xpubNodeURLInFile = bookmarkData;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "LblSettingsNodeCustom_Click");
            }
        }

        private void MoveNodeSelections()
        {
            try
            {
                lblSettingsNodeMainnetSelected.Invoke((MethodInvoker)delegate
                {
                    lblSettingsNodeMainnetSelected.Location = new Point(label174.Location.X + label174.Width + (int)(20 * UIScale), lblSettingsNodeMainnetSelected.Location.Y);
                });
                label157.Invoke((MethodInvoker)delegate
                {
                    label157.Location = new Point(lblSettingsNodeMainnetSelected.Location.X + lblSettingsNodeMainnetSelected.Width, label157.Location.Y);
                });
                lblSettingsNodeTestnetSelected.Invoke((MethodInvoker)delegate
                {
                    lblSettingsNodeTestnetSelected.Location = new Point(label157.Location.X + label157.Width + (int)(20 * UIScale), lblSettingsNodeTestnetSelected.Location.Y);
                });
                label172.Invoke((MethodInvoker)delegate
                {
                    label172.Location = new Point(lblSettingsNodeTestnetSelected.Location.X + lblSettingsNodeTestnetSelected.Width, label172.Location.Y);
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "MoveNodeSelections");
            }
        }            

        #endregion
        #region enable/disable directory
        private void LblEnableDirectory_Click(object sender, EventArgs e)
        {
            try
            {
                if (lblEnableDirectory.Text == "✔️")
                {
                    lblEnableDirectory.Invoke((MethodInvoker)delegate
                    {
                        lblEnableDirectory.ForeColor = Color.IndianRed;
                        lblEnableDirectory.Text = "❌";
                    });
                    enableDirectory = false;
                    directoryEnabled = "0"; // for settings file
                }
                else
                {
                    lblEnableDirectory.Invoke((MethodInvoker)delegate
                    {
                        lblEnableDirectory.ForeColor = Color.Green;
                        lblEnableDirectory.Text = "✔️";
                    });
                    enableDirectory = true;
                    directoryEnabled = "1"; // for settings file
                }
                LoadAndStyleDirectoryBrowser();
                SaveSettingsToBookmarksFile();
            }
            catch (Exception ex)
            {
                HandleException(ex, "LblEnableDirectory_Click");
            }

        }
        #endregion
        #region enable/disable api's
        private void LblBlockchairComJSON_Click(object sender, EventArgs e)
        {
            try
            {
                if (lblBlockchairComJSON.Text == "✔️")
                {
                    lblBlockchairComJSON.Invoke((MethodInvoker)delegate
                    {
                        lblBlockchairComJSON.ForeColor = Color.IndianRed;
                        lblBlockchairComJSON.Text = "❌";
                    });
                    RunBlockchairComJSONAPI = false;
                    blockchairComJSONSelected = "0";
//                  DisableChartsThatDontUseMempoolSpace();
                }
                else
                {
                    lblBlockchairComJSON.Invoke((MethodInvoker)delegate
                    {
                        lblBlockchairComJSON.ForeColor = Color.Green;
                        lblBlockchairComJSON.Text = "✔️";
                    });
                    RunBlockchairComJSONAPI = true;
                    blockchairComJSONSelected = "1";
//                  EnableChartsThatDontUseMempoolSpace();
                }
                SaveSettingsToBookmarksFile();
                TimerAPIRefreshPeriod_Tick(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "LblBlockchairComJSON_Click");
            }
        }

        private void LblBitcoinExplorerEndpoints_Click(object sender, EventArgs e)
        {
            try
            {
                if (lblBitcoinExplorerEndpoints.Text == "✔️")
                {
                    lblBitcoinExplorerEndpoints.Invoke((MethodInvoker)delegate
                    {
                        lblBitcoinExplorerEndpoints.ForeColor = Color.IndianRed;
                        lblBitcoinExplorerEndpoints.Text = "❌";
                    });
                    RunBitcoinExplorerEndpointAPI = false;
                    RunBitcoinExplorerOrgJSONAPI = false;
                    bitcoinExplorerEnpointsSelected = "0";
//                  DisableChartsThatDontUseMempoolSpace();
                    btnMenuPriceConverter.Enabled = false;
                    HideAllFiatConversionFields();
                }
                else
                {
                    lblBitcoinExplorerEndpoints.Invoke((MethodInvoker)delegate
                    {
                        lblBitcoinExplorerEndpoints.ForeColor = Color.Green;
                        lblBitcoinExplorerEndpoints.Text = "✔️";
                    });
                    RunBitcoinExplorerEndpointAPI = true;
                    RunBitcoinExplorerOrgJSONAPI = true;
                    btnMenuPriceConverter.Enabled = true;
                    bitcoinExplorerEnpointsSelected = "1";
//                  EnableChartsThatDontUseMempoolSpace();
                    ShowAllFiatConversionFields();
                }
                SaveSettingsToBookmarksFile();
                TimerAPIRefreshPeriod_Tick(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "LblBitcoinExplorerEndpoints_Click");
            }
        }

        private void LblBlockchainInfoEndpoints_Click(object sender, EventArgs e)
        {
            try
            {
                if (lblBlockchainInfoEndpoints.Text == "✔️")
                {
                    lblBlockchainInfoEndpoints.Invoke((MethodInvoker)delegate
                    {
                        lblBlockchainInfoEndpoints.ForeColor = Color.IndianRed;
                        lblBlockchainInfoEndpoints.Text = "❌";
                    });
                    RunBlockchainInfoEndpointAPI = false;
                    blockchainInfoEndpointsSelected = "0";
                    btnMenuDCACalculator.Enabled = false;
                    DisableChartsThatDontUseMempoolSpace();
                }
                else
                {
                    lblBlockchainInfoEndpoints.Invoke((MethodInvoker)delegate
                    {
                        lblBlockchainInfoEndpoints.ForeColor = Color.Green;
                        lblBlockchainInfoEndpoints.Text = "✔️";
                    });
                    RunBlockchainInfoEndpointAPI = true;
                    blockchainInfoEndpointsSelected = "1";
                    btnMenuDCACalculator.Enabled = true;
                    EnableChartsThatDontUseMempoolSpace();
                }
                SaveSettingsToBookmarksFile();
                TimerAPIRefreshPeriod_Tick(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "LblBlockchainInfoEndpoints_Click");
            }
        }
        #endregion
        #region always on top settings

        private void LblAlwaysOnTop_Click(object sender, EventArgs e)
        {
            try
            {
                if (lblAlwaysOnTop.Text == "✔️")
                {
                    lblAlwaysOnTop.Invoke((MethodInvoker)delegate
                    {
                        lblAlwaysOnTop.ForeColor = Color.IndianRed;
                        lblAlwaysOnTop.Text = "❌";
                    });
                    this.TopMost = false;
                }
                else
                {
                    lblAlwaysOnTop.Invoke((MethodInvoker)delegate
                    {
                        lblAlwaysOnTop.ForeColor = Color.Green;
                        lblAlwaysOnTop.Text = "✔️";
                    });
                    this.TopMost = true;
                }
                SaveSettingsToBookmarksFile();
            }
            catch (Exception ex)
            {
                HandleException(ex, "LblAlwaysOnTop_Click");
            }
        }
        #endregion
        #region enable/disable offline mode
        private void LblOfflineMode_Click(object sender, EventArgs e)
        {
            try
            {
                if (lblOfflineMode.Text == "❌")
                {
                    EnableOfflineMode();
                }
                else
                {
                    DisableOfflineMode();
                }
                SaveSettingsToBookmarksFile();
            }
            catch (Exception ex)
            {
                HandleException(ex, "LblOfflineMode_Click");
            }
        }

        private void DisableOfflineMode()
        {
            try
            {
                offlineMode = false;
                lblHelpOffline.Visible = false;
                btnMenuHelp.Enabled = true;
                btnMenuPriceConverter.Enabled = true;
                btnMenuDCACalculator.Enabled = true;
                btnHelp.Enabled = true;
                lblOfflineModeLight.Invoke((MethodInvoker)delegate
                {
                    lblOfflineModeLight.Text = "🟢";
                    lblOfflineModeLight.ForeColor = Color.OliveDrab;
//                  lblOfflineModeLight.Location = new Point(lblSaveSettingsLight.Location.X, lblOfflineModeActive.Location.Y + (int)(2 * UIScale));
                });
                lblOfflineModeActive.Invoke((MethodInvoker)delegate
                {
                    lblOfflineModeActive.Text = "Online mode";
                });
                lblOfflineMode.Invoke((MethodInvoker)delegate
                {
                    lblOfflineMode.ForeColor = Color.IndianRed;
                    lblOfflineMode.Text = "❌";
                });
                lblBlockchairComJSON.Invoke((MethodInvoker)delegate
                {
                    lblBlockchairComJSON.ForeColor = Color.IndianRed;
                    lblBlockchairComJSON.Text = "❌";
                    lblBlockchairComJSON.Enabled = true;
                });
                RunBlockchairComJSONAPI = false;
                lblBitcoinExplorerEndpoints.Invoke((MethodInvoker)delegate
                {
                    lblBitcoinExplorerEndpoints.ForeColor = Color.IndianRed;
                    lblBitcoinExplorerEndpoints.Text = "❌";
                    lblBitcoinExplorerEndpoints.Enabled = true;
                });
                RunBitcoinExplorerEndpointAPI = false;
                RunBitcoinExplorerOrgJSONAPI = false;
                lblBlockchainInfoEndpoints.Invoke((MethodInvoker)delegate
                {
                    lblBlockchainInfoEndpoints.ForeColor = Color.IndianRed;
                    lblBlockchainInfoEndpoints.Text = "❌";
                    lblBlockchainInfoEndpoints.Enabled = true;
                });
                RunBlockchainInfoEndpointAPI = false;
                lblEnableDirectory.Invoke((MethodInvoker)delegate
                {
                    lblEnableDirectory.ForeColor = Color.IndianRed;
                    lblEnableDirectory.Text = "❌";
                    lblEnableDirectory.Enabled = true;
                });
                enableDirectory = false;
                directoryEnabled = "0"; // for settings file
                OfflineModeSelected = "0";
                blockchairComJSONSelected = "0";
                bitcoinExplorerEnpointsSelected = "0";
                blockchainInfoEndpointsSelected = "0";

                lblSettingsNodeTestnetSelected.Invoke((MethodInvoker)delegate
                {
                    lblSettingsNodeTestnetSelected.Text = "❌";
                    lblSettingsNodeTestnetSelected.ForeColor = Color.IndianRed;
                    lblSettingsNodeTestnetSelected.Enabled = true;
                });
                lblSettingsNodeMainnetSelected.Invoke((MethodInvoker)delegate
                {
                    lblSettingsNodeMainnetSelected.Text = "❌";
                    lblSettingsNodeMainnetSelected.ForeColor = Color.IndianRed;
                    lblSettingsNodeMainnetSelected.Enabled = true;
                });
                ShowAllFiatConversionFields();
            }
            catch (Exception ex)
            {
                HandleException(ex, "DisableOfflineMode");
            }
        }

        private void EnableOfflineMode()
        {
            try
            {
                offlineMode = true;
                lblHelpOffline.Visible = true;
                btnMenuHelp.Enabled = false;
                btnMenuPriceConverter.Enabled = false;
                btnMenuDCACalculator.Enabled = false;
                btnHelp.Enabled = false;
                lblOfflineModeLight.Invoke((MethodInvoker)delegate
                {
                    lblOfflineModeLight.Text = "🟢";
                    lblOfflineModeLight.ForeColor = Color.IndianRed;
                    //lblOfflineModeLight.Location = new Point(lblSaveSettingsLight.Location.X, lblOfflineModeActive.Location.Y + 1);
                });
                lblOfflineModeActive.Invoke((MethodInvoker)delegate
                {
                    lblOfflineModeActive.Text = "Offline mode";
                });
                lblOfflineMode.Invoke((MethodInvoker)delegate
                {
                    lblOfflineMode.ForeColor = Color.Green;
                    lblOfflineMode.Text = "✔️";
                });
                lblBlockchairComJSON.Invoke((MethodInvoker)delegate
                {
                    lblBlockchairComJSON.ForeColor = Color.Gray;
                    lblBlockchairComJSON.Text = "❌";
                    lblBlockchairComJSON.Enabled = false;
                });
                RunBlockchairComJSONAPI = false;
                lblBitcoinExplorerEndpoints.Invoke((MethodInvoker)delegate
                {
                    lblBitcoinExplorerEndpoints.ForeColor = Color.Gray;
                    lblBitcoinExplorerEndpoints.Text = "❌";
                    lblBitcoinExplorerEndpoints.Enabled = false;
                });
                RunBitcoinExplorerEndpointAPI = false;
                RunBitcoinExplorerOrgJSONAPI = false;
                lblBlockchainInfoEndpoints.Invoke((MethodInvoker)delegate
                {
                    lblBlockchainInfoEndpoints.ForeColor = Color.Gray;
                    lblBlockchainInfoEndpoints.Text = "❌";
                    lblBlockchainInfoEndpoints.Enabled = false;
                });
                lblEnableDirectory.Invoke((MethodInvoker)delegate
                {
                    lblEnableDirectory.ForeColor = Color.IndianRed;
                    lblEnableDirectory.Text = "❌";
                    lblEnableDirectory.Enabled = false;
                });
                enableDirectory = false;
                directoryEnabled = "0"; // for settings file
                RunBlockchainInfoEndpointAPI = false;
                RunMempoolSpaceLightningAPI = false;
                OfflineModeSelected = "1";
                blockchairComJSONSelected = "0";
                bitcoinExplorerEnpointsSelected = "0";
                blockchainInfoEndpointsSelected = "0";

                lblSettingsOwnNodeSelected.Invoke((MethodInvoker)delegate
                {
                    lblSettingsOwnNodeSelected.ForeColor = Color.Green;
                    lblSettingsOwnNodeSelected.Text = "✔️";
                });
                testNet = false;

                lblSettingsSelectedNodeStatus.Invoke((MethodInvoker)delegate
                {
                    lblSettingsSelectedNodeStatus.Text = "invalid / node offline";
                    lblSettingsSelectedNodeStatus.Location = new Point((int)(755 * UIScale) - lblSettingsSelectedNodeStatus.Width, lblSettingsSelectedNodeStatus.Location.Y);
                });
                lblSettingsSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                {
                    lblSettingsSelectedNodeStatusLight.ForeColor = Color.IndianRed;
                    lblSettingsSelectedNodeStatusLight.Location = new Point(lblSettingsSelectedNodeStatus.Location.X - lblSettingsSelectedNodeStatusLight.Width, lblSettingsSelectedNodeStatusLight.Location.Y);
                });
                previousXpubScreenOwnNodeURLStringToCompare = textBoxSettingsOwnNodeURL.Text;

                CheckOwnNodeIsOnline();
                NodeURL = textBoxSettingsOwnNodeURL.Text;
                CheckNetworkStatus();

                lblSettingsNodeTestnetSelected.Invoke((MethodInvoker)delegate
                {
                    lblSettingsNodeTestnetSelected.ForeColor = Color.Gray;
                    lblSettingsNodeTestnetSelected.Text = "❌";
                    lblSettingsNodeTestnetSelected.Enabled = false;
                });
                lblSettingsNodeMainnetSelected.Invoke((MethodInvoker)delegate
                {
                    lblSettingsNodeMainnetSelected.ForeColor = Color.Gray;
                    lblSettingsNodeMainnetSelected.Text = "❌";
                    lblSettingsNodeMainnetSelected.Enabled = false;
                });
                DisableChartsThatDontUseMempoolSpace();
                HideAllFiatConversionFields();
            }
            catch (Exception ex)
            {
                HandleException(ex, "EnableOfflineMode");
            }
        }
        #endregion
        #region numeric up/down control changes
        private void NumericUpDownDashboardRefresh_ValueChanged(object sender, EventArgs e)
        {
            try
            {
                APIGroup1DisplayTimerIntervalSecsConstant = (int)numericUpDownDashboardRefresh.Value * 60;
                intAPIGroup1TimerIntervalMillisecsConstant = (((int)numericUpDownDashboardRefresh.Value * 60) * 1000);
                intDisplayCountdownToRefresh = APIGroup1DisplayTimerIntervalSecsConstant;
                timerAPIRefreshPeriod.Stop();
                timerAPIRefreshPeriod.Interval = intAPIGroup1TimerIntervalMillisecsConstant;
                timerAPIRefreshPeriod.Start();
                SaveSettingsToBookmarksFile();
            }
            catch (Exception ex)
            {
                HandleException(ex, "NumericUpDownDashboardRefresh_ValueChanged");
            }
        }

        private void BtnDashBoardRefreshUp_Click(object sender, EventArgs e)
        {
            try
            {
                if (numericUpDownDashboardRefresh.Value < 1440)
                {
                    numericUpDownDashboardRefresh.Value++;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDashBoardRefreshUp_Click");
            }
        }

        private void BtnDashboardRefreshDown_Click(object sender, EventArgs e)
        {
            try
            {
                if (numericUpDownDashboardRefresh.Value > 1)
                {
                    numericUpDownDashboardRefresh.Value--;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDashboardRefreshDown_Click");
            }
        }

        #region continuous increment/decrement of numericUpDown controls when mouse button held down
        private void BtnDataRefreshPeriodUp_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isDataRefreshPeriodUpHeldDown = true;
                timerNumUpDownContinuous.Enabled = true;
                timerNumUpDownContinuous.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDataRefreshPeriodUp_MouseDown");
            }
        }

        private void BtnDataRefreshPeriodUp_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isDataRefreshPeriodUpHeldDown = false;
                timerNumUpDownContinuous.Stop();
                timerNumUpDownContinuous.Enabled = false;
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDataRefreshPeriodUp_MouseUp");
            }
        }

        private void BtnDataRefreshPeriodDown_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isDataRefreshPeriodDownHeldDown = true;
                timerNumUpDownContinuous.Enabled = true;
                timerNumUpDownContinuous.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDataRefreshPeriodDown_MouseDown");
            }
        }

        private void BtnDataRefreshPeriodDown_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isDataRefreshPeriodDownHeldDown = false;
                timerNumUpDownContinuous.Stop();
                timerNumUpDownContinuous.Enabled = false;
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDataRefreshPeriodDown_MouseUp");
            }
        }
        #endregion
        #endregion
        #region enable/disable functionality depending on mainnet/testnet
        private void DisableFunctionalityForTestNet()
        {
            try
            {
                Control[] DisableThisStuffForTestnet = { lblLightningChannelsChart, btnMenuCharts, lblBlockListFeeChart2, lblHeaderPriceChart, lblHeaderMarketCapChart, lblHeaderConverterChart, lblHeaderHashRateChart, lblBlockListDifficultyChart, lblHeaderFeeRatesChart, lblBlockListFeeRangeChart2, lblBlockListHashrateChart, lblBlockListBlockSizeChart, lblBlockListPoolRanking, lblBlockListFeeChart, 
                    lblBlockListRewardChart, lblBlockListFeeRangeChart, lblHeaderBlockSizeChart, lblBlockScreenChartBlockSize, lblBlockFeeChart, lblBlockScreenChartReward, lblBlockScreenChartFeeRange, lblBlockScreenPoolRankingChart, lblPriceChart, lblMarketCapChart, lblChartCirculation, lblUniqueAddressesChart, lblPoolRankingChart, lblBlockFeesChart, lblFeeRangeChart, lblHashrateChart, lblDifficultyChart, lblLightningCapacityChart, lblLightningNodesChart
            };
                foreach (Control control in DisableThisStuffForTestnet)
                {
                    control.Enabled = false;
                }
                HideAllFiatConversionFields();
            }
            catch (Exception ex)
            {
                HandleException(ex, "DisableFunctionalityForTestNet");
            }
        }

        private void EnableFunctionalityForMainNet()
        {
            try
            {
                btnMenuCharts.Enabled = true;
                if (RunBlockchainInfoEndpointAPI == true && offlineMode == false)
                {
                    EnableChartsThatDontUseMempoolSpace();
                }
                Control[] EnableThisStuffForMainnet = { lblLightningChannelsChart, lblBlockListDifficultyChart, lblHeaderHashRateChart, lblHeaderFeeRatesChart, lblBlockListFeeRangeChart2, lblBlockListHashrateChart, lblBlockListFeeChart2, lblBlockListBlockSizeChart, lblBlockListPoolRanking, lblBlockListFeeChart, lblBlockListRewardChart, lblBlockListFeeRangeChart, lblHeaderBlockSizeChart, lblBlockScreenChartBlockSize,
                    lblBlockFeeChart, lblBlockScreenChartReward, lblBlockScreenChartFeeRange, lblBlockScreenPoolRankingChart, lblPoolRankingChart, lblBlockFeesChart, lblFeeRangeChart, lblHashrateChart, lblDifficultyChart, lblLightningCapacityChart, lblLightningNodesChart
            };
                foreach (Control control in EnableThisStuffForMainnet)
                {
                    control.Enabled = true;
                }
                ShowAllFiatConversionFields();
            }
            catch (Exception ex)
            {
                HandleException(ex, "EnableFunctionalityForMainNet");
            }
        }
        #endregion
        #region save chosen startup screen
        private void ComboBoxStartupScreen_OnSelectedIndexChanged(object sender, EventArgs e)
        {
            // Define a dictionary to map indices to their corresponding strings
            Dictionary<int, string> screenMap = new Dictionary<int, string>
            {
                { 0, "blocks----" },
                { 1, "block-----" },
                { 2, "address---" },
                { 3, "transactio" },
                { 4, "xpub------" },
                { 5, "bitcoindas" },
                { 6, "lightndash" },
                { 7, "bookmarks-" },
                { 8, "directory-" },
                { 9, "chtfeerate" },
                { 10, "chtblkfees" },
                { 11, "chtblkrwrd" },
                { 12, "chtblksize" },
                { 13, "chthashrte" },
                { 14, "chtdffclty" },
                { 15, "chtcirclat" },
                { 16, "chtaddrrss" },
                { 17, "chtutxo---" },
                { 18, "chtplranks" },
                { 19, "chtnetwork" },
                { 20, "chtcntries" },
                { 21, "chtcapcity" },
                { 22, "chtchannls" },
                { 23, "chtprice--" },
                { 24, "chtmrktcap" },
                { 25, "btcconvert" },
                { 26, "dcacalcrtr" }
            };

            if (screenMap.ContainsKey(comboBoxStartupScreen.SelectedIndex))
            {
                startupScreenToSave = screenMap[comboBoxStartupScreen.SelectedIndex];
                SaveSettingsToBookmarksFile();
            }
        }
        #endregion
        #region save settings (to bookmarks file)
        private void SaveSettingsToBookmarksFile()
        {
            // settings entry in the bookmark file = DM111111nnnnnnnnnxxxxxxxxxxn.
            //
            // 1st char P(ound), D(ollar), E(uro), G(old) = GBP, USD, EUR, XAU.
            // 2nd char M, T, C = Mainnet, Testnet, Custom,
            // then 6 bools = blockchairComJSON, BitcoinExplorerEndpoints, BlockchainInfoEndpoints, Privacy Mode, enable directory, always on top,
            // nnnn = refresh freq,
            // nn = max number of consecutive zero balance addresses on xpub scan,
            // nnn = number of derivation paths to check,
            // xxxxxxxxxx = startup screen,
            // n = UIScale (1 = 100%, 2 = 125%, 3 = 150%, 4 = 175%, 5 = 200%).
            try
            {
                if (btnUSD.Enabled == false)
                {
                    currencySelected = "D";
                }
                if (btnGBP.Enabled == false)
                {
                    currencySelected = "P";
                }
                if (btnEUR.Enabled == false)
                {
                    currencySelected = "E";
                }
                if (btnXAU.Enabled == false)
                {
                    currencySelected = "G";
                }
                if (testNet == false && RunMempoolSpaceLightningAPI == true)
                {
                    selectedNetwork = "M";
                }
                if (testNet == true && RunMempoolSpaceLightningAPI == true)
                {
                    selectedNetwork = "T";
                }
                if (testNet == false && RunMempoolSpaceLightningAPI == false)
                {
                    selectedNetwork = "C";
                }
                if (lblOfflineMode.Text == "✔️")
                {
                    OfflineModeSelected = "1";
                }
                else
                {
                    OfflineModeSelected = "0";
                }
                if (RunBlockchairComJSONAPI)
                {
                    blockchairComJSONSelected = "1";
                }
                else
                {
                    blockchairComJSONSelected = "0";
                }
                if (RunBitcoinExplorerEndpointAPI)
                {
                    bitcoinExplorerEnpointsSelected = "1";
                }
                else
                {
                    bitcoinExplorerEnpointsSelected = "0";
                }
                if (RunBlockchainInfoEndpointAPI)
                {
                    blockchainInfoEndpointsSelected = "1";
                }
                else
                {
                    blockchainInfoEndpointsSelected = "0";
                }
                if (enableDirectory)
                {
                    directoryEnabled = "1";
                }
                else
                {
                    directoryEnabled = "0";
                }
                if (lblAlwaysOnTop.Text == "✔️")
                {
                    alwaysOnTop = "1";
                }
                else
                {
                    alwaysOnTop = "0";
                }
                if (startupScreenToSave == "")
                {
                    startupScreenToSave = "blocks----";
                }
                if (lblScaleAmount.Text == "100%")
                {
                    UIScaleToBeSavedToSettings = 1;
                }
                else
                {
                    if (lblScaleAmount.Text == "125%")
                    {
                        UIScaleToBeSavedToSettings = 2;
                    }
                    else
                    {
                        if (lblScaleAmount.Text == "150%")
                        {
                            UIScaleToBeSavedToSettings = 3;
                        }
                        else
                        {
                            if (lblScaleAmount.Text == "175%")
                            {
                                UIScaleToBeSavedToSettings = 4;
                            }
                            else
                            {
                                if (lblScaleAmount.Text == "200%")
                                {
                                    UIScaleToBeSavedToSettings = 5;
                                }
                                else
                                {
                                    UIScaleToBeSavedToSettings = 3;
                                }
                            }
                        }
                    }
                }
                // write the settings to the bookmarks file for auto retrieval next time
                DateTime today = DateTime.Today;
                string bookmarkData = currencySelected + selectedNetwork + blockchairComJSONSelected + bitcoinExplorerEnpointsSelected + blockchainInfoEndpointsSelected + OfflineModeSelected + directoryEnabled + alwaysOnTop + numericUpDownDashboardRefresh.Value.ToString().PadLeft(4, '0') + numericUpDownMaxNumberOfConsecutiveUnusedAddresses.Value.ToString().PadLeft(2, '0') + numberUpDownDerivationPathsToCheck.Value.ToString().PadLeft(3, '0') + startupScreenToSave + Convert.ToString(UIScaleToBeSavedToSettings);
                string keyCheck = "21m";
                var newBookmark = new Bookmark { DateAdded = today, Type = "settings", Data = bookmarkData, Note = "", Encrypted = false, KeyCheck = keyCheck };
                if (!settingsAlreadySavedInFile)
                {
                    // Read the existing bookmarks from the JSON file
                    var bookmarks = ReadBookmarksFromJsonFile();
                    // Add the new bookmark to the list
                    bookmarks.Add(newBookmark);
                    // Write the updated list of bookmarks back to the JSON file
                    WriteBookmarksToJsonFile(bookmarks);
                    settingsAlreadySavedInFile = true;
                    settingsInFile = bookmarkData;
                    labelSettingsSaved.Invoke((MethodInvoker)delegate
                    {
                        labelSettingsSaved.Text = "Saving settings";
                    });
                    lblSaveSettingsLight.Invoke((MethodInvoker)delegate
                    {
                        lblSaveSettingsLight.ForeColor = Color.Lime;
                    });
                    timerHideSettingsSaved.Start();
                }
                else
                {
                    //delete the currently saved settings
                    DeleteBookmarkFromJsonFile(settingsInFile);
                    // Read the existing settings from the JSON file
                    var bookmarks = ReadBookmarksFromJsonFile();
                    // Add the new bookmark to the list
                    bookmarks.Add(newBookmark);
                    // Write the updated list of bookmarks back to the JSON file
                    WriteBookmarksToJsonFile(bookmarks);
                    settingsAlreadySavedInFile = true;
                    settingsInFile = bookmarkData;
                    labelSettingsSaved.Invoke((MethodInvoker)delegate
                    {
                        labelSettingsSaved.Text = "Saving settings";
                    });
                    lblSaveSettingsLight.Invoke((MethodInvoker)delegate
                    {
                        lblSaveSettingsLight.ForeColor = Color.Lime;
                    });
                    timerHideSettingsSaved.Start();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "SaveSettingsToBookmarksFile");
            }
        }

        private void TimerHideSettingsSaved_Tick(object sender, EventArgs e)
        {
            try
            {
                labelSettingsSaved.Invoke((MethodInvoker)delegate
                {
                    labelSettingsSaved.Text = "Settings saved";
                });
                lblSaveSettingsLight.Invoke((MethodInvoker)delegate
                {
                    lblSaveSettingsLight.ForeColor = Color.OliveDrab;
                });
                timerHideSettingsSaved.Stop();
            }
            catch (Exception ex)
            {
                HandleException(ex, "TimerHideSettingsSaved_Tick");
            }
        }
        #endregion
        #region restore settings
        private void RestoreSavedSettings()
        {
            try
            {
                var bookmarks = ReadBookmarksFromJsonFile();
                #region determine startup screen (needs to occur before rest of settings screen is restored)
                foreach (var bookmark in bookmarks)
                {
                    // Define a dictionary to map strings to their corresponding values
                    Dictionary<string, string> screenMap = new Dictionary<string, string>
                    {
                        { "blocks----", "blocks" },
                        { "block-----", "block" },
                        { "address---", "address" },
                        { "transactio", "transaction" },
                        { "xpub------", "xpub" },
                        { "bitcoindas", "bitcoin dashboard" },
                        { "lightndash", "lightning dashboard" },
                        { "bookmarks-", "bookmarks" },
                        { "directory-", "directory" },
                        { "chtfeerate", "chart - fee rates" },
                        { "chtblkfees", "chart - block fees" },
                        { "chtblkrwrd", "chart - block reward" },
                        { "chtblksize", "chart - block size" },
                        { "chthashrte", "chart - hashrate" },
                        { "chtdffclty", "chart - difficulty" },
                        { "chtcirclat", "chart - circulation" },
                        { "chtaddrrss", "chart - addresses" },
                        { "chtutxo---", "chart - UTXO's" },
                        { "chtplranks", "chart - pools ranking" },
                        { "chtnetwork", "chart - ⚡nodes by network" },
                        { "chtcntries", "chart - ⚡nodes by country" },
                        { "chtcapcity", "chart - ⚡nodes by capacity" },
                        { "chtchannls", "chart - ⚡channels" },
                        { "chtprice--", "chart - price" },
                        { "chtmrktcap", "chart - market cap." },
                        { "btcconvert", "btc/fiat converter" },
                        { "dcacalcrtr", "dca calculator" }
                        
                    };

                    if (bookmark.Type == "settings")
                    {
                        settingsAlreadySavedInFile = true;
                        settingsInFile = bookmark.Data;

                        string substring = bookmark.Data.Substring(17, 10);
                        if (screenMap.ContainsKey(substring))
                        {
                            startupScreenToSave = substring;
                            comboBoxStartupScreen.Texts = screenMap[substring];
                        }
                        break;
                    }
                }
                #endregion
                #region restore own node url
                // check if there is a node address saved in the bookmarks file
                foreach (var bookmark in bookmarks)
                {
                    if (bookmark.Type == "node")
                    {
                        textBoxXpubScreenOwnNodeURL.Invoke((MethodInvoker)delegate
                        {
                            textBoxXpubScreenOwnNodeURL.Text = bookmark.Data; // move node url string to the form
                        });
                        textBoxSettingsOwnNodeURL.Invoke((MethodInvoker)delegate
                        {
                            textBoxSettingsOwnNodeURL.Text = bookmark.Data; // and to the settings screen
                        });
                        CheckOwnNodeIsOnline();
                        xpubNodeURLInFile = bookmark.Data;
                        xpubNodeURLAlreadySavedInFile = true;
                        break;
                    }
                    xpubNodeURLAlreadySavedInFile = false;
                }
                #endregion
                #region restore remainder of settings
                // check if settings are already saved in the bookmarks file and either restore them or use defaults and save a settings entry in bookmarks file
                foreach (var bookmark in bookmarks)
                {
                    if (bookmark.Type == "settings")
                    {
                        settingsAlreadySavedInFile = true;
                        settingsInFile = bookmark.Data;
                        #region restore default fiat currency
                        if (Convert.ToString(bookmark.Data[0]) == "P")
                        {
                            //GBP
                            lblCurrencyMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                            {
                                lblCurrencyMenuHighlightedButtonText.Text = "GBP £";
                                lblCurrencyMenuHighlightedButtonText.Location = new Point(btnGBP.Location.X + (int)(11 * UIScale), btnGBP.Location.Y + (int)(5 * UIScale));
                            });
                            ClearCurrencyMenuMarkers();
                            btnGBP.Invoke((MethodInvoker)delegate
                            {
                                btnGBP.BackgroundImage = Resources.marker;
                            });
                            btnGBP.Enabled = false;
                            btnUSD.Enabled = true;
                            btnEUR.Enabled = true;
                            btnXAU.Enabled = true;
                            btnCurrency.Text = "   currency (GBP)  ▼";
                        }
                        if (Convert.ToString(bookmark.Data[0]) == "D")
                        {
                            //USD
                            lblCurrencyMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                            {
                                lblCurrencyMenuHighlightedButtonText.Text = "USD $";
                                lblCurrencyMenuHighlightedButtonText.Location = new Point(btnUSD.Location.X + (int)(11 * UIScale), btnUSD.Location.Y + (int)(5 * UIScale));
                            });
                            ClearCurrencyMenuMarkers();
                            btnUSD.Invoke((MethodInvoker)delegate
                            {
                                btnUSD.BackgroundImage = Resources.marker;
                            });
                            btnGBP.Enabled = true;
                            btnUSD.Enabled = false;
                            btnEUR.Enabled = true;
                            btnXAU.Enabled = true;
                            btnCurrency.Text = "   currency (USD)  ▼";
                        }
                        if (Convert.ToString(bookmark.Data[0]) == "E")
                        {
                            //EUR
                            lblCurrencyMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                            {
                                lblCurrencyMenuHighlightedButtonText.Text = "EUR €";
                                lblCurrencyMenuHighlightedButtonText.Location = new Point(btnEUR.Location.X + (int)(11 * UIScale), btnEUR.Location.Y + (int)(5 * UIScale));
                            });
                            ClearCurrencyMenuMarkers();
                            btnEUR.Invoke((MethodInvoker)delegate
                            {
                                btnEUR.BackgroundImage = Resources.marker;
                            });
                            btnGBP.Enabled = true;
                            btnUSD.Enabled = true;
                            btnEUR.Enabled = false;
                            btnXAU.Enabled = true;
                            btnCurrency.Text = "   currency (EUR)  ▼";
                        }
                        if (Convert.ToString(bookmark.Data[0]) == "G")
                        {
                            //XAU
                            lblCurrencyMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                            {
                                lblCurrencyMenuHighlightedButtonText.Text = "XAU 🪙";
                                lblCurrencyMenuHighlightedButtonText.Location = new Point(btnXAU.Location.X + (int)(11 * UIScale), btnXAU.Location.Y + (int)(5 * UIScale));
                            });
                            ClearCurrencyMenuMarkers();
                            btnXAU.Invoke((MethodInvoker)delegate
                            {
                                btnXAU.BackgroundImage = Resources.marker;
                            });
                            btnGBP.Enabled = true;
                            btnUSD.Enabled = true;
                            btnEUR.Enabled = true;
                            btnXAU.Enabled = false;
                            btnCurrency.Text = "   currency (XAU)  ▼";
                        }
                        #endregion
                        #region restore offline mode settings
                        if (Convert.ToString(bookmark.Data[5]) == "1")
                        {
                            lblOfflineMode.Invoke((MethodInvoker)delegate
                            {
                                lblOfflineMode.Enabled = true;
                                lblOfflineMode.Text = "✔️";
                                lblOfflineMode.ForeColor = Color.Green;
                            });
                            EnableOfflineMode();
                        }
                        else
                        {
                            offlineMode = false;
                            lblOfflineMode.Invoke((MethodInvoker)delegate
                            {
                                lblOfflineMode.Text = "❌";
                                lblOfflineMode.ForeColor = Color.IndianRed;
                            });
                            DisableOfflineMode();
                            lblBlockchairComJSON.Enabled = true;
                            lblBitcoinExplorerEndpoints.Enabled = true;
                            lblBlockchainInfoEndpoints.Enabled = true;
                            lblSettingsNodeMainnetSelected.Enabled = true;
                            lblSettingsNodeTestnetSelected.Enabled = true;
                            lblEnableDirectory.Enabled = true;
                            lblHelpOffline.Visible = false;
                            btnMenuHelp.Enabled = true;
                            btnHelp.Enabled = true;
                        }
                        #endregion
                        #region restore network
                        if (Convert.ToString(bookmark.Data[1]) == "M")
                        {
                            //mainnet
                            testNet = false;
                            NodeURL = "https://mempool.space/api/";
                            RunMempoolSpaceLightningAPI = true;
                            CreateDataServices();
                            lblSettingsNodeMainnetSelected.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsNodeMainnetSelected.Text = "✔️";
                                lblSettingsNodeMainnetSelected.ForeColor = Color.Green;
                            });
                            lblSettingsNodeTestnetSelected.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsNodeTestnetSelected.Text = "❌";
                                lblSettingsNodeTestnetSelected.ForeColor = Color.IndianRed;
                            });
                            lblSettingsOwnNodeSelected.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsOwnNodeSelected.Text = "❌";
                                lblSettingsOwnNodeSelected.ForeColor = Color.IndianRed;
                            });
                        }
                        if (Convert.ToString(bookmark.Data[1]) == "T")
                        {
                            //testnet
                            testNet = true;
                            NodeURL = "https://mempool.space/testnet/api/";
                            RunMempoolSpaceLightningAPI = true;
                            CreateDataServices();
                            DisableFunctionalityForTestNet();
                            lblSettingsNodeMainnetSelected.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsNodeMainnetSelected.Text = "❌";
                                lblSettingsNodeMainnetSelected.ForeColor = Color.IndianRed;
                            });
                            lblSettingsNodeTestnetSelected.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsNodeTestnetSelected.Text = "✔️";
                                lblSettingsNodeTestnetSelected.ForeColor = Color.Green;
                            });
                            lblSettingsOwnNodeSelected.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsOwnNodeSelected.Text = "❌";
                                lblSettingsOwnNodeSelected.ForeColor = Color.IndianRed;
                            });
                        }
                        if (Convert.ToString(bookmark.Data[1]) == "C")
                        {
                            //custom
                            RunMempoolSpaceLightningAPI = false;
                            NodeURL = textBoxSettingsOwnNodeURL.Text;
                            CreateDataServices();
                            lblSettingsNodeMainnetSelected.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsNodeMainnetSelected.Text = "❌";
                                lblSettingsNodeMainnetSelected.ForeColor = Color.IndianRed;
                            });
                            lblSettingsNodeTestnetSelected.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsNodeTestnetSelected.Text = "❌";
                                lblSettingsNodeTestnetSelected.ForeColor = Color.IndianRed;
                            });
                            lblSettingsOwnNodeSelected.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsOwnNodeSelected.Text = "✔️";
                                lblSettingsOwnNodeSelected.ForeColor = Color.Green;
                            });
                        }
                        #endregion
                        #region restore API settings
                        if (!offlineMode)
                        {
                            if (Convert.ToString(bookmark.Data[2]) == "1")
                            {
                                RunBlockchairComJSONAPI = true;
                                lblBlockchairComJSON.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockchairComJSON.Text = "✔️";
                                    lblBlockchairComJSON.ForeColor = Color.Green;
                                });
                            }
                            else
                            {
                                RunBlockchairComJSONAPI = false;
                                lblBlockchairComJSON.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockchairComJSON.Text = "❌";
                                    lblBlockchairComJSON.ForeColor = Color.IndianRed;
                                });
                            }
                            if (Convert.ToString(bookmark.Data[3]) == "1")
                            {
                                RunBitcoinExplorerEndpointAPI = true;
                                RunBitcoinExplorerOrgJSONAPI = true;
                                lblBitcoinExplorerEndpoints.Invoke((MethodInvoker)delegate
                                {
                                    lblBitcoinExplorerEndpoints.Text = "✔️";
                                    lblBitcoinExplorerEndpoints.ForeColor = Color.Green;
                                });
                            }
                            else
                            {
                                RunBitcoinExplorerEndpointAPI = false;
                                RunBitcoinExplorerOrgJSONAPI = false;
                                HideAllFiatConversionFields();
                                lblBitcoinExplorerEndpoints.Invoke((MethodInvoker)delegate
                                {
                                    lblBitcoinExplorerEndpoints.Text = "❌";
                                    lblBitcoinExplorerEndpoints.ForeColor = Color.IndianRed;
                                });
                            }
                            if (Convert.ToString(bookmark.Data[4]) == "1")
                            {
                                RunBlockchainInfoEndpointAPI = true;
                                lblBlockchainInfoEndpoints.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockchainInfoEndpoints.Text = "✔️";
                                    lblBlockchainInfoEndpoints.ForeColor = Color.Green;
                                });
                            }
                            else
                            {
                                RunBlockchainInfoEndpointAPI = false;
                                lblBlockchainInfoEndpoints.Invoke((MethodInvoker)delegate
                                {
                                    lblBlockchainInfoEndpoints.Text = "❌";
                                    lblBlockchainInfoEndpoints.ForeColor = Color.IndianRed;
                                });
                            }
                        }
                        #endregion
                        #region restore directory settings
                        if (!offlineMode)
                        {
                            if (Convert.ToString(bookmark.Data[6]) == "1")
                            {
                                lblEnableDirectory.Invoke((MethodInvoker)delegate
                                {
                                    lblEnableDirectory.Text = "✔️";
                                    lblEnableDirectory.ForeColor = Color.Green;
                                });
                                enableDirectory = true;
                                LoadAndStyleDirectoryBrowser();
                            }
                            else
                            {
                                lblEnableDirectory.Invoke((MethodInvoker)delegate
                                {
                                    lblEnableDirectory.Text = "❌";
                                    lblEnableDirectory.ForeColor = Color.IndianRed;
                                });
                                enableDirectory = false;
                                LoadAndStyleDirectoryBrowser();
                            }
                        }
                        #endregion
                        #region restore always on top setting
                        if (Convert.ToString(bookmark.Data[7]) == "1")
                        {
                            lblAlwaysOnTop.Invoke((MethodInvoker)delegate
                            {
                                lblAlwaysOnTop.Text = "✔️";
                                lblAlwaysOnTop.ForeColor = Color.Green;
                                this.TopMost = true;
                            });
                        }
                        else
                        {
                            lblAlwaysOnTop.Invoke((MethodInvoker)delegate
                            {
                                lblAlwaysOnTop.Text = "❌";
                                lblAlwaysOnTop.ForeColor = Color.IndianRed;
                                this.TopMost = false;
                            });
                        }
                        #endregion
                        numericUpDownDashboardRefresh.Value = Convert.ToInt32(bookmark.Data.Substring(8, 4));
                        numericUpDownMaxNumberOfConsecutiveUnusedAddresses.Value = Convert.ToInt32(bookmark.Data.Substring(12, 2));
                        numberUpDownDerivationPathsToCheck.Value = Convert.ToInt32(bookmark.Data.Substring(14, 3));

                        break;
                    }
                }
                #endregion
                #region determine default theme
                // check if there is a default theme saved in the bookmarks file
                foreach (var bookmark in bookmarks)
                {
                    if (bookmark.Type == "defaulttheme")
                    {
                        var themes = ReadThemesFromJsonFile();
                        foreach (Theme theme in themes)
                        {
                            if (theme.ThemeName == bookmark.Data)
                            {
                                if (theme.ThemeName == "Genesis (preset)")
                                {
                                    BtnMenuThemeGenesis.Enabled = false;
                                    btnMenuThemeFranklin.Enabled = true;
                                    btnMenuThemeSatsuma.Enabled = true;
                                    btnMenuThemeSymbol.Enabled = true;
                                    btnMenuThemeStackSats.Enabled = true;
                                    btnMenuThemeHoneyBadger.Enabled = true;
                                    lblThemeMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                                    {
                                        lblThemeMenuHighlightedButtonText.Text = "genesis";
                                        lblThemeMenuHighlightedButtonText.Location = new Point(BtnMenuThemeGenesis.Location.X + (int)(11 * UIScale), BtnMenuThemeGenesis.Location.Y + (int)(5 * UIScale));
                                    });
                                    ClearThemeMenuMarkers();
                                    BtnMenuThemeGenesis.Invoke((MethodInvoker)delegate
                                    {
                                        BtnMenuThemeGenesis.BackgroundImage = Resources.marker;
                                    });
                                    btnMenuApplyCustomTheme.Invoke((MethodInvoker)delegate
                                    {
                                        btnMenuApplyCustomTheme.Text = "apply theme";
                                    });
                                }
                                else
                                {
                                    if (theme.ThemeName == "Franklin (preset)")
                                    {
                                        BtnMenuThemeGenesis.Enabled = true;
                                        btnMenuThemeFranklin.Enabled = false;
                                        btnMenuThemeSatsuma.Enabled = true;
                                        btnMenuThemeSymbol.Enabled = true;
                                        btnMenuThemeStackSats.Enabled = true;
                                        btnMenuThemeHoneyBadger.Enabled = true;
                                        lblThemeMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                                        {
                                            lblThemeMenuHighlightedButtonText.Text = "franklin";
                                            lblThemeMenuHighlightedButtonText.Location = new Point(btnMenuThemeFranklin.Location.X + (int)(11 * UIScale), btnMenuThemeFranklin.Location.Y + (int)(5 * UIScale));
                                        });
                                        ClearThemeMenuMarkers();
                                        btnMenuThemeFranklin.Invoke((MethodInvoker)delegate
                                        {
                                            btnMenuThemeFranklin.BackgroundImage = Resources.marker;
                                        });
                                        btnMenuApplyCustomTheme.Invoke((MethodInvoker)delegate
                                        {
                                            btnMenuApplyCustomTheme.Text = "apply theme";
                                        });
                                    }
                                    else
                                    {
                                        if (theme.ThemeName == "Satsuma (preset)")
                                        {
                                            BtnMenuThemeGenesis.Enabled = true;
                                            btnMenuThemeFranklin.Enabled = true;
                                            btnMenuThemeSatsuma.Enabled = false;
                                            btnMenuThemeSymbol.Enabled = true;
                                            btnMenuThemeStackSats.Enabled = true;
                                            btnMenuThemeHoneyBadger.Enabled = true;
                                            lblThemeMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                                            {
                                                lblThemeMenuHighlightedButtonText.Text = "satsuma";
                                                lblThemeMenuHighlightedButtonText.Location = new Point(btnMenuThemeSatsuma.Location.X + (int)(11 * UIScale), btnMenuThemeSatsuma.Location.Y + (int)(5 * UIScale));
                                            });
                                            ClearThemeMenuMarkers();
                                            btnMenuThemeSatsuma.Invoke((MethodInvoker)delegate
                                            {
                                                btnMenuThemeSatsuma.BackgroundImage = Resources.marker;
                                            });
                                            btnMenuApplyCustomTheme.Invoke((MethodInvoker)delegate
                                            {
                                                btnMenuApplyCustomTheme.Text = "apply theme";
                                            });
                                        }
                                        else
                                        {
                                            if (theme.ThemeName == "StackSats (preset)")
                                            {
                                                BtnMenuThemeGenesis.Enabled = true;
                                                btnMenuThemeFranklin.Enabled = true;
                                                btnMenuThemeSatsuma.Enabled = true;
                                                btnMenuThemeSymbol.Enabled = true;
                                                btnMenuThemeStackSats.Enabled = false;
                                                btnMenuThemeHoneyBadger.Enabled = true;
                                                lblThemeMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                                                {
                                                    lblThemeMenuHighlightedButtonText.Text = "stack sats";
                                                    lblThemeMenuHighlightedButtonText.Location = new Point(btnMenuThemeStackSats.Location.X + (int)(11 * UIScale), btnMenuThemeStackSats.Location.Y + (int)(5 * UIScale));
                                                });
                                                ClearThemeMenuMarkers();
                                                btnMenuThemeStackSats.Invoke((MethodInvoker)delegate
                                                {
                                                    btnMenuThemeStackSats.BackgroundImage = Resources.marker;
                                                });
                                                btnMenuApplyCustomTheme.Invoke((MethodInvoker)delegate
                                                {
                                                    btnMenuApplyCustomTheme.Text = "apply theme";
                                                });
                                            }
                                            else
                                            {
                                                if (theme.ThemeName == "HoneyBadger (preset)")
                                                {
                                                    BtnMenuThemeGenesis.Enabled = true;
                                                    btnMenuThemeFranklin.Enabled = true;
                                                    btnMenuThemeSatsuma.Enabled = true;
                                                    btnMenuThemeSymbol.Enabled = true;
                                                    btnMenuThemeStackSats.Enabled = true;
                                                    btnMenuThemeHoneyBadger.Enabled = false;
                                                    lblThemeMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                                                    {
                                                        lblThemeMenuHighlightedButtonText.Text = "honey badger";
                                                        lblThemeMenuHighlightedButtonText.Location = new Point(btnMenuThemeHoneyBadger.Location.X + (int)(11 * UIScale), btnMenuThemeHoneyBadger.Location.Y + (int)(5 * UIScale));
                                                    });
                                                    ClearThemeMenuMarkers();
                                                    btnMenuThemeHoneyBadger.Invoke((MethodInvoker)delegate
                                                    {
                                                        btnMenuThemeHoneyBadger.BackgroundImage = Resources.marker;
                                                    });
                                                    btnMenuApplyCustomTheme.Invoke((MethodInvoker)delegate
                                                    {
                                                        btnMenuApplyCustomTheme.Text = "apply theme";
                                                    });
                                                }
                                                else
                                                {
                                                    if (theme.ThemeName == "Symbol (preset)")
                                                    {
                                                        BtnMenuThemeGenesis.Enabled = true;
                                                        btnMenuThemeFranklin.Enabled = true;
                                                        btnMenuThemeSatsuma.Enabled = true;
                                                        btnMenuThemeSymbol.Enabled = false;
                                                        btnMenuThemeStackSats.Enabled = true;
                                                        btnMenuThemeHoneyBadger.Enabled = true;
                                                        lblThemeMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                                                        {
                                                            lblThemeMenuHighlightedButtonText.Text = "symbol";
                                                            lblThemeMenuHighlightedButtonText.Location = new Point(btnMenuThemeSymbol.Location.X + (int)(11 * UIScale), btnMenuThemeSymbol.Location.Y + (int)(5 * UIScale));
                                                        });
                                                        ClearThemeMenuMarkers();
                                                        btnMenuThemeSymbol.Invoke((MethodInvoker)delegate
                                                        {
                                                            btnMenuThemeSymbol.BackgroundImage = Resources.marker;
                                                        });
                                                        btnMenuApplyCustomTheme.Invoke((MethodInvoker)delegate
                                                        {
                                                            btnMenuApplyCustomTheme.Text = "apply theme";
                                                        });
                                                    }
                                                    else
                                                    {
                                                        lblThemeMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                                                        {
                                                            lblThemeMenuHighlightedButtonText.Visible = false;
                                                            lblThemeMenuHighlightedButtonText.Text = theme.ThemeName + "!";
                                                            lblThemeMenuHighlightedButtonText.Location = new Point(btnMenuApplyCustomTheme.Location.X + (int)(14 * UIScale), btnMenuApplyCustomTheme.Location.Y + (int)(5 * UIScale));
                                                        });
                                                        ClearThemeMenuMarkers();
                                                        btnMenuApplyCustomTheme.Invoke((MethodInvoker)delegate
                                                        {
                                                            btnMenuApplyCustomTheme.BackgroundImage = Resources.marker;
                                                        });
                                                        btnMenuApplyCustomTheme.Invoke((MethodInvoker)delegate
                                                        {
                                                            btnMenuApplyCustomTheme.Text = theme.ThemeName;
                                                        });
                                                        BtnMenuThemeGenesis.Enabled = true;
                                                        btnMenuThemeFranklin.Enabled = true;
                                                        btnMenuThemeSatsuma.Enabled = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                RestoreTheme(theme);
                                defaultThemeInFile = bookmark.Data;
                                defaultThemeAlreadySavedInFile = true;
                                return;
                            }
                        }
                    }
                }
                #endregion
            }
            catch (Exception ex)
            {
                HandleException(ex, "RestoreSavedSettings");
            }
        }
        #endregion
        #region UI Scaling

        #region restore UIScale
        private void RestoreUIScale()
        {
            try
            {
                var bookmarks = ReadBookmarksFromJsonFile();
                // check if settings are already saved in the bookmarks file and restore UIScale
                foreach (var bookmark in bookmarks)
                {
                    if (bookmark.Type == "settings")
                    {
                        //UIScale didn't exist in earlier versions of SATSuma, so check whether it is set in the settings file or not before applying, or set a default.
                        string settingsData = Convert.ToString(bookmark.Data);
                        if (settingsData.Length > 27)
                        {
                            UIScaleInFile = Convert.ToString(bookmark.Data[27]);
                        }
                        else
                        {
                            UIScaleInFile = "3";
                        }

                        UIScaleAlreadySavedInFile = true;

                        break;
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "RestoreUIScale");
            }
        }
        #endregion
        private void StoreOriginalDimensions(Control parentControl)
        {
            try
            {
                foreach (Control control in parentControl.Controls)
                {
                    control.Tag = new Size(control.Width, control.Height);

                    // Store the original font size of each control
                    if (control.Font != null)
                    {
                        control.Tag = new Tuple<Size, Font>((Size)control.Tag, control.Font);
                    }

                    // Recursively handle controls within panels
                    if (control.HasChildren)
                    {
                        StoreOriginalDimensions(control);
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "storeOriginalDimensions");
            }
        }

        private void ScaleAllElements_Click(object sender, EventArgs e)
        {
            BtnScaleApply(this);
        }

        private void BtnScaleApply(Control parentControl)
        {
            try
            {
                // Resize each control within the provided parentControl
                foreach (Control control in parentControl.Controls)
                {
                    Size originalSize = ((Tuple<Size, Font>)control.Tag).Item1;

                    // apply a scaled radius to buttons to keep them fully rounded
                    if (control.GetType() == typeof(RJButton))
                    {
                        RJButton rjButton = (RJButton)control;
                        // Set the borderRadius to a different value for each RJButton
                        rjButton.BorderRadius = (int)(11 * UIScale);
                    }

                    control.Width = (int)(originalSize.Width * UIScale);
                    control.Left = (int)(control.Left * UIScale);
                    control.Top = (int)(control.Top * UIScale);
                    control.Height = (int)(originalSize.Height * UIScale);

                    // Resize font size
                    if (control.Font != null)
                    {
                        Font originalControlFont = ((Tuple<Size, Font>)control.Tag).Item2;
                        float scaledFontSize = (float)(originalControlFont.Size * UIScale);
                        control.Font = new Font(originalControlFont.FontFamily, scaledFontSize - 1, originalControlFont.Style);
                    }

                    // Recursively handle controls within panels
                    if (control.HasChildren)
                    {
                        BtnScaleApply(control);
                    }
                }

                // Trigger layout update for child controls
                parentControl.PerformLayout();
                parentControl.Invalidate();
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnScaleApply");
            }
        }

        private void BtnBiggerScale_Click(object sender, EventArgs e)
        {
            try
            {
                if (lblScaleAmount.Text == "100%")
                {
                    lblScaleAmount.Invoke((MethodInvoker)delegate
                    {
                        lblScaleAmount.Text = "125%";
                    });
                    UIScaleToBeSavedToSettings = 2;

                    // enable the shrink button
                    btnSmallerScale.Invoke((MethodInvoker)delegate
                    {
                        btnSmallerScale.Enabled = true;
                    });
                    if (UIScaleInFile != Convert.ToString(UIScaleToBeSavedToSettings))
                    {
                        SaveSettingsToBookmarksFile();
                    }
                }
                else
                {
                    if (lblScaleAmount.Text == "125%")
                    {
                        lblScaleAmount.Invoke((MethodInvoker)delegate
                        {
                            lblScaleAmount.Text = "150%";
                        });
                        UIScaleToBeSavedToSettings = 3;
                        if (UIScaleInFile != Convert.ToString(UIScaleToBeSavedToSettings))
                        {
                            SaveSettingsToBookmarksFile();
                        }
                    }
                    else
                    {
                        if (lblScaleAmount.Text == "150%")
                        {
                            lblScaleAmount.Invoke((MethodInvoker)delegate
                            {
                                lblScaleAmount.Text = "175%";
                            });
                            UIScaleToBeSavedToSettings = 4;
                            if (UIScaleInFile != Convert.ToString(UIScaleToBeSavedToSettings))
                            {
                                SaveSettingsToBookmarksFile();
                            }
                        }
                        else
                        {
                            if (lblScaleAmount.Text == "175%")
                            {
                                lblScaleAmount.Invoke((MethodInvoker)delegate
                                {
                                    lblScaleAmount.Text = "200%";
                                });
                                UIScaleToBeSavedToSettings = 5;

                                // disable the enlarge button
                                btnBiggerScale.Invoke((MethodInvoker)delegate
                                {
                                    btnBiggerScale.Enabled = false;
                                });

                                if (UIScaleInFile != Convert.ToString(UIScaleToBeSavedToSettings))
                                {
                                    SaveSettingsToBookmarksFile();
                                }
                            }
                            else
                            {
                                return;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnBiggerScale_Click");
            }
        }

        private void BtnSmallerScale_Click(object sender, EventArgs e)
        {
            try
            {
                if (lblScaleAmount.Text == "200%")
                {
                    lblScaleAmount.Invoke((MethodInvoker)delegate
                    {
                        lblScaleAmount.Text = "175%";
                    });
                    UIScaleToBeSavedToSettings = 4;

                    // enable the enlarge button
                    btnBiggerScale.Invoke((MethodInvoker)delegate
                    {
                        btnBiggerScale.Enabled = true;
                    });

                    if (UIScaleInFile != Convert.ToString(UIScaleToBeSavedToSettings))
                    {
                        SaveSettingsToBookmarksFile();
                    }
                }
                else
                {
                    if (lblScaleAmount.Text == "175%")
                    {
                        lblScaleAmount.Invoke((MethodInvoker)delegate
                        {
                            lblScaleAmount.Text = "150%";
                        });
                        UIScaleToBeSavedToSettings = 3;
                        if (UIScaleInFile != Convert.ToString(UIScaleToBeSavedToSettings))
                        {
                            SaveSettingsToBookmarksFile();
                        }
                    }
                    else
                    {
                        if (lblScaleAmount.Text == "150%")
                        {
                            lblScaleAmount.Invoke((MethodInvoker)delegate
                            {
                                lblScaleAmount.Text = "125%";
                            });
                            UIScaleToBeSavedToSettings = 2;
                            if (UIScaleInFile != Convert.ToString(UIScaleToBeSavedToSettings))
                            {
                                SaveSettingsToBookmarksFile();
                            }
                        }
                        else
                        {
                            if (lblScaleAmount.Text == "125%")
                            {
                                lblScaleAmount.Invoke((MethodInvoker)delegate
                                {
                                    lblScaleAmount.Text = "100%";
                                });
                                UIScaleToBeSavedToSettings = 1;

                                // disable the shrink button
                                btnSmallerScale.Invoke((MethodInvoker)delegate
                                {
                                    btnSmallerScale.Enabled = false;
                                });

                                if (UIScaleInFile != Convert.ToString(UIScaleToBeSavedToSettings))
                                {
                                    SaveSettingsToBookmarksFile();
                                }
                            }
                            else
                            {
                                return;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnBiggerScale_Click");
            }
        }

        #endregion

        private void LblConfirmReset_Click(object sender, EventArgs e)
        {
            if (lblConfirmReset.Text == "❌")
            {
                lblConfirmReset.Invoke((MethodInvoker)delegate
                {
                    lblConfirmReset.ForeColor = Color.Green;
                    lblConfirmReset.Text = "✔️";
                });
                label302.Invoke((MethodInvoker)delegate
                {
                    label302.Text = "Yes, reset anyway. Press to confirm 👉";
                });
                btnResetAll.Enabled = true;
            }
            else
            {
                lblConfirmReset.Invoke((MethodInvoker)delegate
                {
                    lblConfirmReset.ForeColor = Color.IndianRed;
                    lblConfirmReset.Text = "❌";
                });
                label302.Invoke((MethodInvoker)delegate
                {
                    label302.Text = "Yes, reset anyway";
                });
                btnResetAll.Enabled = false;
            }
        }

        private void BtnResetAll_Click(object sender, EventArgs e)
        {
            // files to be checked
            string appDataFolder = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
            string bookmarkFilePath = Path.Combine(appDataFolder, "SATSuma", "SATSuma_bookmarks.json");
            string themeFilePath = Path.Combine(appDataFolder, "SATSuma", "SATSuma_themes.json");
            // files to be restored if necessary
            string backupFolder = Path.Combine(Application.StartupPath, "Restore");
            string backupBookmarkFilePath = Path.Combine(backupFolder, "SATSuma_bookmarks.json");
            string backupThemeFilePath = Path.Combine(backupFolder, "SATSuma_themes.json");
            // restore files
            if (File.Exists(bookmarkFilePath))
            {
                File.Delete(bookmarkFilePath);
            }

            if (File.Exists(themeFilePath))
            {
                File.Delete(themeFilePath);
            }

            // Ensure the directory exists before copying the file
            Directory.CreateDirectory(Path.GetDirectoryName(bookmarkFilePath));
            Directory.CreateDirectory(Path.GetDirectoryName(themeFilePath));

            File.Copy(backupBookmarkFilePath, bookmarkFilePath, true);
            File.Copy(backupThemeFilePath, themeFilePath, true);

            BtnExit_Click(sender, e);
        }

        #endregion

        #region ⚡CREATE THEME SCREEN⚡
        #region main menu theme switching buttons
        private void BtnThemeMenu_Click(object sender, EventArgs e)
        {
            try
            {
                CloseCurrencyMenu();
                panelThemeMenu.BringToFront();
                btnThemeMenu.BringToFront();
                if (panelThemeMenu.Height == 0)
                {
                    //expand the panel
                    currentHeightExpandingPanel = panelThemeMenu.Height;
                    StartExpandingPanelVert(panelThemeMenu);
                }
                else
                {
                    CloseThemeMenu();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnThemeMenu_Click");
            }
        }

        private void ComboBoxHeaderCustomThemes_OnSelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (!firstTimeCustomThemeIndexChanged)
                {
                    btnMenuApplyCustomTheme.Invoke((MethodInvoker)delegate
                    {
                        btnMenuApplyCustomTheme.Enabled = true;
                        btnMenuApplyCustomTheme.Text = "apply theme";
                    });
                    lblApplyThemeButtonDisabledMask.Invoke((MethodInvoker)delegate
                    {
                        lblApplyThemeButtonDisabledMask.Visible = false;
                    });
                    if (lblThemeMenuHighlightedButtonText.Visible)
                    {
                        lblThemeMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                        {
                            lblThemeMenuHighlightedButtonText.Visible = false;
                        });
                    }

                }
                
                firstTimeCustomThemeIndexChanged = false;
            }
            catch (Exception ex)
            {
                HandleException(ex, "ComboBoxHeaderCustomThemes_OnSelectedIndexChanged");
            }
        }

        private void BtnMenuThemeGenesis_Click(object sender, EventArgs e)
        {
            try
            {
                CloseThemeMenu();
                BtnMenuThemeGenesis.Enabled = false;
                btnMenuThemeFranklin.Enabled = true;
                btnMenuThemeHoneyBadger.Enabled = true;
                btnMenuThemeStackSats.Enabled = true;
                btnMenuThemeSymbol.Enabled = true;
                btnMenuThemeSatsuma.Enabled = true;
                lblApplyThemeButtonDisabledMask.Invoke((MethodInvoker)delegate
                {
                    lblApplyThemeButtonDisabledMask.Visible = true;
                });
                lblThemeMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblThemeMenuHighlightedButtonText.Visible = true;
                    lblThemeMenuHighlightedButtonText.Text = "genesis";
                    lblThemeMenuHighlightedButtonText.Location = new Point(BtnMenuThemeGenesis.Location.X + (int)(11 * UIScale), BtnMenuThemeGenesis.Location.Y + (int)(5 * UIScale));
                });
                ClearThemeMenuMarkers();
                BtnMenuThemeGenesis.Invoke((MethodInvoker)delegate
                {
                    BtnMenuThemeGenesis.BackgroundImage = Resources.marker;
                });
                ResetCustomThemeCombos();
                var themes = ReadThemesFromJsonFile();
                foreach (Theme theme in themes)
                {
                    if (theme.ThemeName == "Genesis (preset)")
                    {
                        RestoreTheme(theme);
                        SaveThemeAsDefault(theme.ThemeName);
                        ReloadScreensWithListviews();
                        labelSettingsSaved.Invoke((MethodInvoker)delegate
                        {
                            labelSettingsSaved.Text = "Saving settings";
                        });
                        lblSaveSettingsLight.Invoke((MethodInvoker)delegate
                        {
                            lblSaveSettingsLight.ForeColor = Color.Lime;
                        });
                        timerHideSettingsSaved.Start();
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnMenuThemeGenesis_Click");
            }
        }

        private void BtnMenuThemeFranklin_Click(object sender, EventArgs e)
        {
            try
            {
                CloseThemeMenu();
                BtnMenuThemeGenesis.Enabled = true;
                btnMenuThemeFranklin.Enabled = false;
                btnMenuThemeSatsuma.Enabled = true;
                btnMenuThemeStackSats.Enabled = true;
                btnMenuThemeSymbol.Enabled = true;
                btnMenuThemeHoneyBadger.Enabled = true;
                lblApplyThemeButtonDisabledMask.Invoke((MethodInvoker)delegate
                {
                    lblApplyThemeButtonDisabledMask.Visible = true;
                });
                lblThemeMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblThemeMenuHighlightedButtonText.Visible = true;
                    lblThemeMenuHighlightedButtonText.Text = "franklin";
                    lblThemeMenuHighlightedButtonText.Location = new Point(btnMenuThemeFranklin.Location.X + (int)(11 * UIScale), btnMenuThemeFranklin.Location.Y + (int)(5 * UIScale));
                });
                ClearThemeMenuMarkers();
                btnMenuThemeFranklin.Invoke((MethodInvoker)delegate
                {
                    btnMenuThemeFranklin.BackgroundImage = Resources.marker;
                });
                ResetCustomThemeCombos();
                var themes = ReadThemesFromJsonFile();
                foreach (Theme theme in themes)
                {
                    if (theme.ThemeName == "Franklin (preset)")
                    {
                        RestoreTheme(theme);
                        SaveThemeAsDefault(theme.ThemeName);
                        ReloadScreensWithListviews();
                        labelSettingsSaved.Invoke((MethodInvoker)delegate
                        {
                            labelSettingsSaved.Text = "Saving settings";
                        });
                        lblSaveSettingsLight.Invoke((MethodInvoker)delegate
                        {
                            lblSaveSettingsLight.ForeColor = Color.Lime;
                        });
                        timerHideSettingsSaved.Start();
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnMenuThemeFranklin_Click");
            }
        }

        private void BtnMenuThemeSatsuma_Click(object sender, EventArgs e)
        {
            try
            {
                CloseThemeMenu();
                BtnMenuThemeGenesis.Enabled = true;
                btnMenuThemeFranklin.Enabled = true;
                btnMenuThemeHoneyBadger.Enabled = true;
                btnMenuThemeStackSats.Enabled = true;
                btnMenuThemeSymbol.Enabled = true;
                btnMenuThemeSatsuma.Enabled = false;
                lblApplyThemeButtonDisabledMask.Invoke((MethodInvoker)delegate
                {
                    lblApplyThemeButtonDisabledMask.Visible = true;
                });
                lblThemeMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblThemeMenuHighlightedButtonText.Visible = true;
                    lblThemeMenuHighlightedButtonText.Text = "satsuma";
                    lblThemeMenuHighlightedButtonText.Location = new Point(btnMenuThemeSatsuma.Location.X + (int)(11 * UIScale), btnMenuThemeSatsuma.Location.Y + (int)(5 * UIScale));
                });
                ClearThemeMenuMarkers();
                btnMenuThemeSatsuma.Invoke((MethodInvoker)delegate
                {
                    btnMenuThemeSatsuma.BackgroundImage = Resources.marker;
                });
                ResetCustomThemeCombos();
                var themes = ReadThemesFromJsonFile();
                foreach (Theme theme in themes)
                {
                    if (theme.ThemeName == "Satsuma (preset)")
                    {
                        RestoreTheme(theme);
                        SaveThemeAsDefault(theme.ThemeName);
                        ReloadScreensWithListviews();
                        labelSettingsSaved.Invoke((MethodInvoker)delegate
                        {
                            labelSettingsSaved.Text = "Saving settings";
                        });
                        lblSaveSettingsLight.Invoke((MethodInvoker)delegate
                        {
                            lblSaveSettingsLight.ForeColor = Color.Lime;
                        });
                        timerHideSettingsSaved.Start();
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnMenuThemeSatsuma_Click");
            }
        }

        private void BtnMenuThemeHoneyBadger_Click(object sender, EventArgs e)
        {
            try
            {
                CloseThemeMenu();
                BtnMenuThemeGenesis.Enabled = true;
                btnMenuThemeFranklin.Enabled = true;
                btnMenuThemeHoneyBadger.Enabled = false;
                btnMenuThemeStackSats.Enabled = true;
                btnMenuThemeSymbol.Enabled = true;
                btnMenuThemeSatsuma.Enabled = true;
                lblApplyThemeButtonDisabledMask.Invoke((MethodInvoker)delegate
                {
                    lblApplyThemeButtonDisabledMask.Visible = true;
                });
                lblThemeMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblThemeMenuHighlightedButtonText.Visible = true;
                    lblThemeMenuHighlightedButtonText.Text = "honey badger";
                    lblThemeMenuHighlightedButtonText.Location = new Point(btnMenuThemeHoneyBadger.Location.X + (int)(11 * UIScale), btnMenuThemeHoneyBadger.Location.Y + (int)(5 * UIScale));
                });
                ClearThemeMenuMarkers();
                btnMenuThemeHoneyBadger.Invoke((MethodInvoker)delegate
                {
                    btnMenuThemeHoneyBadger.BackgroundImage = Resources.marker;
                });
                ResetCustomThemeCombos();
                var themes = ReadThemesFromJsonFile();
                foreach (Theme theme in themes)
                {
                    if (theme.ThemeName == "HoneyBadger (preset)")
                    {
                        RestoreTheme(theme);
                        SaveThemeAsDefault(theme.ThemeName);
                        ReloadScreensWithListviews();
                        labelSettingsSaved.Invoke((MethodInvoker)delegate
                        {
                            labelSettingsSaved.Text = "Saving settings";
                        });
                        lblSaveSettingsLight.Invoke((MethodInvoker)delegate
                        {
                            lblSaveSettingsLight.ForeColor = Color.Lime;
                        });
                        timerHideSettingsSaved.Start();
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuThemeHoneyBadger_Click");
            }
        }

        private void BtnMenuThemeStackSats_Click(object sender, EventArgs e)
        {
            try
            {
                CloseThemeMenu();
                BtnMenuThemeGenesis.Enabled = true;
                btnMenuThemeFranklin.Enabled = true;
                btnMenuThemeHoneyBadger.Enabled = true;
                btnMenuThemeStackSats.Enabled = false;
                btnMenuThemeSymbol.Enabled = true;
                btnMenuThemeSatsuma.Enabled = true;
                lblApplyThemeButtonDisabledMask.Invoke((MethodInvoker)delegate
                {
                    lblApplyThemeButtonDisabledMask.Visible = true;
                });
                lblThemeMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblThemeMenuHighlightedButtonText.Visible = true;
                    lblThemeMenuHighlightedButtonText.Text = "stack sats";
                    lblThemeMenuHighlightedButtonText.Location = new Point(btnMenuThemeStackSats.Location.X + (int)(11 * UIScale), btnMenuThemeStackSats.Location.Y + (int)(5 * UIScale));
                });
                ClearThemeMenuMarkers();
                btnMenuThemeStackSats.Invoke((MethodInvoker)delegate
                {
                    btnMenuThemeStackSats.BackgroundImage = Resources.marker;
                });
                ResetCustomThemeCombos();
                var themes = ReadThemesFromJsonFile();
                foreach (Theme theme in themes)
                {
                    if (theme.ThemeName == "StackSats (preset)")
                    {
                        RestoreTheme(theme);
                        SaveThemeAsDefault(theme.ThemeName);
                        ReloadScreensWithListviews();
                        labelSettingsSaved.Invoke((MethodInvoker)delegate
                        {
                            labelSettingsSaved.Text = "Saving settings";
                        });
                        lblSaveSettingsLight.Invoke((MethodInvoker)delegate
                        {
                            lblSaveSettingsLight.ForeColor = Color.Lime;
                        });
                        timerHideSettingsSaved.Start();
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuThemeStackSats_Click");
            }
        }
        
        private void BtnMenuThemeSymbol_Click(object sender, EventArgs e)
        {
            try
            {
                CloseThemeMenu();
                BtnMenuThemeGenesis.Enabled = true;
                btnMenuThemeFranklin.Enabled = true;
                btnMenuThemeHoneyBadger.Enabled = true;
                btnMenuThemeStackSats.Enabled = true;
                btnMenuThemeSymbol.Enabled = false;
                btnMenuThemeSatsuma.Enabled = true;
                lblApplyThemeButtonDisabledMask.Invoke((MethodInvoker)delegate
                {
                    lblApplyThemeButtonDisabledMask.Visible = true;
                });
                lblThemeMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblThemeMenuHighlightedButtonText.Visible = true;
                    lblThemeMenuHighlightedButtonText.Text = "symbol";
                    lblThemeMenuHighlightedButtonText.Location = new Point(btnMenuThemeSymbol.Location.X + (int)(11 * UIScale), btnMenuThemeSymbol.Location.Y + (int)(5 * UIScale));
                });
                ClearThemeMenuMarkers();
                btnMenuThemeSymbol.Invoke((MethodInvoker)delegate
                {
                    btnMenuThemeSymbol.BackgroundImage = Resources.marker;
                });
                ResetCustomThemeCombos();
                var themes = ReadThemesFromJsonFile();
                foreach (Theme theme in themes)
                {
                    if (theme.ThemeName == "Symbol (preset)")
                    {
                        RestoreTheme(theme);
                        SaveThemeAsDefault(theme.ThemeName);
                        ReloadScreensWithListviews();
                        labelSettingsSaved.Invoke((MethodInvoker)delegate
                        {
                            labelSettingsSaved.Text = "Saving settings";
                        });
                        lblSaveSettingsLight.Invoke((MethodInvoker)delegate
                        {
                            lblSaveSettingsLight.ForeColor = Color.Lime;
                        });
                        timerHideSettingsSaved.Start();
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuThemeSymbol_Click");
            }
        }

        private void ResetCustomThemeCombos()
        {
            try
            {
                btnMenuApplyCustomTheme.Invoke((MethodInvoker)delegate
                {
                    btnMenuApplyCustomTheme.Text = "apply theme";
                });
                comboBoxHeaderCustomThemes.Invoke((MethodInvoker)delegate
                {
                    comboBoxHeaderCustomThemes.Texts = "   select theme ▼";
                });
                comboBoxCustomizeScreenThemeList.Invoke((MethodInvoker)delegate
                {
                    comboBoxCustomizeScreenThemeList.Texts = "select theme";
                });
                lblApplyThemeButtonDisabledMask.Visible = true;
                btnMenuApplyCustomTheme.Enabled = false;
            }
            catch (Exception ex)
            {
                HandleException(ex, "ResetCustomThemeCombos");
            }
        }

        private async void BtnAppearance_Click(object sender, EventArgs e)
        {
            try
            {
                lblMenuArrow.Visible = false;
                CloseThemeMenu();
                lblMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblMenuHighlightedButtonText.Visible = false;
                });
                btnMenuXpub.Enabled = true;
                btnMenuBlockList.Enabled = true;
                btnMenuTransaction.Enabled = true;
                btnMenuBookmarks.Enabled = true;
                btnMenuBlock.Enabled = true;
                btnMenuAddress.Enabled = true;
                btnMenuDirectory.Enabled = true;
                btnMenuBitcoinDashboard.Enabled = true;
                btnMenuLightningDashboard.Enabled = true;
                if (!testNet)
                {
                    btnMenuCharts.Enabled = true;
                }
                btnMenuBookmarks.Enabled = true;
                btnMenuSettings.Enabled = true;
                SuspendLayout();
                #region display loading screen
                // work out the position to place the loading form
                Point panelScreenLocation = lblNowViewing.PointToScreen(Point.Empty);
                panelScreenLocation.Y -= (int)(161 * UIScale);
                panelScreenLocation.X -= (int)(13 * UIScale);

                Form loadingScreen = new loadingScreen(UIScale)
                {
                    Owner = this, 
                    StartPosition = FormStartPosition.Manual, // Set the start position manually
                    FormBorderStyle = FormBorderStyle.None, 
                    BackColor = panel84.BackColor, // Set the background color to match panel colours
                    Opacity = 1, // Set the opacity to 100%
                    Location = panelScreenLocation // Set the location of the loadingScreen form
                };
                loadingScreen.Show(this);
                await BriefPause(100);
                #endregion
                btnMenuCreateTheme.Invoke((MethodInvoker)delegate
                {
                    btnMenuCreateTheme.BackgroundImage = Resources.marker;
                });
                panelBlockList.Visible = false;
                panelDirectory.Visible = false;
                panelBitcoinDashboard.Visible = false;
                panelBookmarks.Visible = false;
                panelLightningDashboard.Visible = false;
                panelCharts.Visible = false;
                panelAddress.Visible = false;
                panelTransaction.Visible = false;
                panelXpub.Visible = false;
                panelBlock.Visible = false;
                panelBookmarks.Visible = false;
                panelSettings.Visible = false;
                panelAppearance.Visible = true;
                #region close loading screen
                //wait a moment to give time for screen to paint
                await BriefPause(700);
                //close the loading screen
                loadingScreen.Close();
                #endregion
                ResumeLayout();
                CheckNetworkStatus();
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnAppearance_Click");
            }
        }

        private void BtnMenuApplyCustomTheme_Click(object sender, EventArgs e)
        {
            try
            {
                if (comboBoxHeaderCustomThemes.Texts != "   select theme ▼")
                {

                    CloseThemeMenu();
                    var themes = ReadThemesFromJsonFile();
                    foreach (Theme theme in themes)
                    {
                        if (theme.ThemeName == comboBoxHeaderCustomThemes.Texts)
                        {
                            BtnMenuThemeGenesis.Enabled = true;
                            btnMenuThemeFranklin.Enabled = true;
                            btnMenuThemeSatsuma.Enabled = true;
                            btnMenuThemeSymbol.Enabled = true;
                            btnMenuThemeStackSats.Enabled = true;
                            btnMenuThemeHoneyBadger.Enabled = true;
                            btnMenuApplyCustomTheme.Enabled = false;
                            lblThemeMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                            {
                                lblThemeMenuHighlightedButtonText.Text = theme.ThemeName;
                                lblThemeMenuHighlightedButtonText.Location = new Point(btnMenuApplyCustomTheme.Location.X + (int)(14 * UIScale), btnMenuApplyCustomTheme.Location.Y + (int)(5 * UIScale));
                            });
                            ClearThemeMenuMarkers();
                            btnMenuApplyCustomTheme.Invoke((MethodInvoker)delegate
                            {
                                btnMenuApplyCustomTheme.BackgroundImage = Resources.marker;
                            });
                            btnMenuApplyCustomTheme.Invoke((MethodInvoker)delegate
                            {
                                btnMenuApplyCustomTheme.Text = theme.ThemeName;
                            });
                            comboBoxHeaderCustomThemes.Invoke((MethodInvoker)delegate
                            {
                                comboBoxHeaderCustomThemes.Texts = "   select theme ▼";
                            });
                            comboBoxCustomizeScreenThemeList.Invoke((MethodInvoker)delegate
                            {
                                comboBoxCustomizeScreenThemeList.Texts = "select theme";
                            });
                            RestoreTheme(theme);
                            SaveThemeAsDefault(theme.ThemeName);
                            ReloadScreensWithListviews();
                            labelSettingsSaved.Invoke((MethodInvoker)delegate
                            {
                                labelSettingsSaved.Text = "Saving settings";
                            });
                            lblSaveSettingsLight.Invoke((MethodInvoker)delegate
                            {
                                lblSaveSettingsLight.ForeColor = Color.Lime;
                            });
                            timerHideSettingsSaved.Start();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnLoadTheme_Click");
            }
        }

        #endregion
        #region select colours
        private void BtnColorDataFields_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForDataFields = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = label154.ForeColor
                };

                if (colorDlgForDataFields.ShowDialog() == DialogResult.OK)
                {
                    ColorDataFields(colorDlgForDataFields.Color);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnColorDataFields_Click");
            }
        }

        private void BtnColorLabels_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForLabels = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = label73.ForeColor
                };

                if (colorDlgForLabels.ShowDialog() == DialogResult.OK)
                {
                    ColorLabels(colorDlgForLabels.Color);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnColorLabels_Click");
            }
        }

        private void BtnColorFiatConversionText_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForFiatConversions = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = label288.ForeColor
                };

                if (colorDlgForFiatConversions.ShowDialog() == DialogResult.OK)
                {
                    ColorFiatConversionText(colorDlgForFiatConversions.Color);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnColorFiatConversionText_Click");
            }
        }

        private void BtnColorPanels_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForPanels = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = panel73.BackColor
                };

                if (colorDlgForPanels.ShowDialog() == DialogResult.OK)
                {
                    ColorPanels(colorDlgForPanels.Color);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnColorPanels_Click");
            }
        }

        private void BtnColorHeadings_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForHeadings = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = label156.ForeColor
                };

                if (colorDlgForHeadings.ShowDialog() == DialogResult.OK)
                {
                    ColorHeadings(colorDlgForHeadings.Color);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnColorHeadings_Click");
            }
        }

        private void BtnColorProgressBars_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForProgressBars = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = colorProgressBar1.BarColor
                };

                if (colorDlgForProgressBars.ShowDialog() == DialogResult.OK)
                {
                    ColorProgressBars(colorDlgForProgressBars.Color);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnColorProgressBars_Click");
            }
        }

        private void BtnColorButtons_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForButtons = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = button1.BackColor
                };

                if (colorDlgForButtons.ShowDialog() == DialogResult.OK)
                {
                    ColorButtons(colorDlgForButtons.Color);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnColorButtons_Click");
            }
        }

        private void BtnColorButtonText_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForButtonText = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = button1.ForeColor
                };

                if (colorDlgForButtonText.ShowDialog() == DialogResult.OK)
                {
                    ColorButtonText(colorDlgForButtonText.Color);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnColorButtonText_Click");
            }
        }

        private void BtnColorLines_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForLines = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = panel61.BackColor
                };

                if (colorDlgForLines.ShowDialog() == DialogResult.OK)
                {
                    ColorLines(colorDlgForLines.Color);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnColorLines_Click");
            }
        }

        private void BtnColorTableText_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForTableText = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = label170.ForeColor
                };

                if (colorDlgForTableText.ShowDialog() == DialogResult.OK)
                {
                    ColorTables(colorDlgForTableText.Color);
                    // reload the listviews to apply the new color
                    LookupBlockList();
                    LookupBlock();
                    SetupBookmarksScreen();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnColorTableText_Click");
            }
        }

        private void BtnColorOtherText_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForOtherText = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = label173.ForeColor
                };

                if (colorDlgForOtherText.ShowDialog() == DialogResult.OK)
                {
                    ColorOtherText(colorDlgForOtherText.Color);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnColorOtherText_Click");
            }
        }

        private void BtnColorTextBox_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForTextBoxes = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = textBox1.BackColor
                };

                if (colorDlgForTextBoxes.ShowDialog() == DialogResult.OK)
                {
                    ColorTextBoxes(colorDlgForTextBoxes.Color);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnColorTextBox_Click");
            }
        }

        private void BtnColorPriceBlock_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForPriceBlock = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = label175.ForeColor
                };

                if (colorDlgForPriceBlock.ShowDialog() == DialogResult.OK)
                {
                    ColorPriceBlock(colorDlgForPriceBlock.Color);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnColorPriceBlock_Click");
            }
        }

        private void BtnColorStatusError_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForStatusError = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = label176.ForeColor
                };

                if (colorDlgForStatusError.ShowDialog() == DialogResult.OK)
                {
                    ColorStatusError(colorDlgForStatusError.Color);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnColorStatusError_Click");
            }
        }

        private void BtnColorTableBackground_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForTableBackgrounds = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = panel66.BackColor
                };

                if (colorDlgForTableBackgrounds.ShowDialog() == DialogResult.OK)
                {
                    ColorTableBackgrounds(colorDlgForTableBackgrounds.Color);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnColorTableBackground_Click");
            }
        }

        private void BtnColorTableTitleBar_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForlistViewTitleBarBG = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = panel67.BackColor
                };

                if (colorDlgForlistViewTitleBarBG.ShowDialog() == DialogResult.OK)
                {
                    ColorTableTitleBars(colorDlgForlistViewTitleBarBG.Color);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnColorTableTitleBar_Click");
            }
        }

        private void BtnListViewHeadingColor_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForTableHeadings = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = label190.ForeColor
                };

                if (colorDlgForTableHeadings.ShowDialog() == DialogResult.OK)
                {
                    ColorTableHeadings(colorDlgForTableHeadings.Color);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnListViewHeadingColor_Click");
            }
        }

        #endregion
        #region enable/disable realtime clock in genesis background
        private void LblShowClock_Click(object sender, EventArgs e)
        {
            try
            {
                if (lblShowClock.Text == "✔️")
                {
                    lblShowClock.Invoke((MethodInvoker)delegate
                    {
                        lblShowClock.ForeColor = Color.IndianRed;
                        lblShowClock.Text = "❌";
                    });
                    lblTime.Visible = false;
                }
                else
                {
                    lblShowClock.Invoke((MethodInvoker)delegate
                    {
                        lblShowClock.ForeColor = Color.Green;
                        lblShowClock.Text = "✔️";
                    });
                    if (lblBackgroundGenesisSelected.Visible == true)
                    {
                        lblTime.Font = new Font(lblTime.Font.FontFamily, (int)(14 * UIScale), lblTime.Font.Style);
                        lblTime.Location = new Point((int)(840 * UIScale), (int)(44 * UIScale));
                        lblTime.Visible = true;
                        lblTime.BringToFront();
                    }
                    else
                    {
                        lblTime.Visible = false;
                    }

                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "LblShowClock_Click");
            }
        }
        #endregion
        #region preview loading animations
        private void BtnPreviewAnimations_Click(object sender, EventArgs e)
        {
            try
            {
                if (pictureBox2.Enabled == false)
                {
                    btnPreviewAnimations.Text = "⏸️";
                    pictureBox4.Enabled = true;
                    pictureBox2.Enabled = true;
                    pictureBox3.Enabled = true;
                }
                else
                {
                    btnPreviewAnimations.Text = "▶️";
                    pictureBox4.Enabled = false;
                    pictureBox2.Enabled = false;
                    pictureBox3.Enabled = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnPreviewAnimations_Click");
            }
        }
        #endregion
        #region select loading animation
        private void LabelInfinity1_Click(object sender, EventArgs e)
        {
            try
            {
                if (lblInfinity1.Text == "❌")
                {
                    lblInfinity1.Invoke((MethodInvoker)delegate
                    {
                        lblInfinity1.ForeColor = Color.Green;
                        lblInfinity1.Text = "✔️";
                    });
                    lblInfinity2.Invoke((MethodInvoker)delegate
                    {
                        lblInfinity2.ForeColor = Color.IndianRed;
                        lblInfinity2.Text = "❌";
                    });
                    lblInfinity3.Invoke((MethodInvoker)delegate
                    {
                        lblInfinity3.ForeColor = Color.IndianRed;
                        lblInfinity3.Text = "❌";
                    });
                    pictureBoxChartLoadingAnimation.Invoke((MethodInvoker)delegate
                    {
                        pictureBoxChartLoadingAnimation.Image = Properties.Resources.InfinityTrans;
                    });
                }
            }

            catch (Exception ex)
            {
                HandleException(ex, "lblInfinity1_Click");
            }
        }

        private void LblInfinity2_Click(object sender, EventArgs e)
        {
            try
            {
                if (lblInfinity2.Text == "❌")
                {
                    lblInfinity2.Invoke((MethodInvoker)delegate
                    {
                        lblInfinity2.ForeColor = Color.Green;
                        lblInfinity2.Text = "✔️";
                    });
                    lblInfinity1.Invoke((MethodInvoker)delegate
                    {
                        lblInfinity1.ForeColor = Color.IndianRed;
                        lblInfinity1.Text = "❌";
                    });
                    lblInfinity3.Invoke((MethodInvoker)delegate
                    {
                        lblInfinity3.ForeColor = Color.IndianRed;
                        lblInfinity3.Text = "❌";
                    });
                    pictureBoxChartLoadingAnimation.Invoke((MethodInvoker)delegate
                    {
                        pictureBoxChartLoadingAnimation.Image = Properties.Resources.OrangeInfinity;
                    });
                }
            }

            catch (Exception ex)
            {
                HandleException(ex, "lblInfinity2_Click");
            }
        }

        private void LblInfinity3_Click(object sender, EventArgs e)
        {
            try
            {
                if (lblInfinity3.Text == "❌")
                {
                    lblInfinity3.Invoke((MethodInvoker)delegate
                    {
                        lblInfinity3.ForeColor = Color.Green;
                        lblInfinity3.Text = "✔️";
                    });
                    lblInfinity1.Invoke((MethodInvoker)delegate
                    {
                        lblInfinity1.ForeColor = Color.IndianRed;
                        lblInfinity1.Text = "❌";
                    });
                    lblInfinity2.Invoke((MethodInvoker)delegate
                    {
                        lblInfinity2.ForeColor = Color.IndianRed;
                        lblInfinity2.Text = "❌";
                    });
                    pictureBoxChartLoadingAnimation.Invoke((MethodInvoker)delegate
                    {
                        pictureBoxChartLoadingAnimation.Image = Properties.Resources.infinityspectrum;
                    });
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "lblInfinity3_Click");
            }
        }
        #endregion
        #region select border radius

        private void BtnSquareCorners_Click(object sender, EventArgs e)
        {
            try
            {
                panelErrorMessage.Invoke((MethodInvoker)delegate
                {
                    panelErrorMessage.Width = 0;
                });
                btnSquareCorners.Enabled = false;
                btnPartialCorners.Enabled = true;
                btnRoundCorners.Enabled = true;
                SetButtonAndPanelRadius(1);
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnSquareCorners_Click");
            }
        }

        private void BtnPartialCorners_Click(object sender, EventArgs e)
        {
            try
            {
                panelErrorMessage.Invoke((MethodInvoker)delegate
                {
                    panelErrorMessage.Width = 0;
                });
                btnSquareCorners.Enabled = true;
                btnPartialCorners.Enabled = false;
                btnRoundCorners.Enabled = true;
                SetButtonAndPanelRadius(6);
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnPartialCorners_Click");
            }
        }

        private void BtnRoundCorners_Click(object sender, EventArgs e)
        {
            try
            {
                panelErrorMessage.Invoke((MethodInvoker)delegate
                {
                    panelErrorMessage.Width = 0;
                });
                btnSquareCorners.Enabled = true;
                btnPartialCorners.Enabled = true;
                btnRoundCorners.Enabled = false;
                SetButtonAndPanelRadius(12);
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnRoundCorners_Click");
            }
        }
        #endregion
        #region charts background colour
        private void LblChartsLightBackground_Click(object sender, EventArgs e)
        {
            try
            {
                if (lblChartsLightBackground.Text == "✔️")
                {
                    lblChartsLightBackground.Invoke((MethodInvoker)delegate
                    {
                        lblChartsLightBackground.ForeColor = Color.IndianRed;
                        lblChartsLightBackground.Text = "❌";
                    });
                    lblChartsDarkBackground.Invoke((MethodInvoker)delegate
                    {
                        lblChartsDarkBackground.ForeColor = Color.Green;
                        lblChartsDarkBackground.Text = "✔️";
                    });
                    chartsBackgroundColor = Color.FromArgb(20, 20, 20);
                    panelLoadingAnimationContainer.Invoke((MethodInvoker)delegate
                    {
                        panelLoadingAnimationContainer.BackColor = Color.FromArgb(20, 20, 20);
                    });
                    pictureBoxLoadingAnimation.Invoke((MethodInvoker)delegate
                    {
                        pictureBoxLoadingAnimation.Image = Properties.Resources.SatsumaAnimated;
                    });
                }
                else
                {
                    lblChartsLightBackground.Invoke((MethodInvoker)delegate
                    {
                        lblChartsLightBackground.ForeColor = Color.Green;
                        lblChartsLightBackground.Text = "✔️";
                    });
                    lblChartsDarkBackground.Invoke((MethodInvoker)delegate
                    {
                        lblChartsDarkBackground.ForeColor = Color.IndianRed;
                        lblChartsDarkBackground.Text = "❌";
                    });
                    chartsBackgroundColor = Color.FromArgb(255, 255, 255);
                    panelLoadingAnimationContainer.Invoke((MethodInvoker)delegate
                    {
                        panelLoadingAnimationContainer.BackColor = Color.FromArgb(255, 255, 255);
                    });
                    pictureBoxLoadingAnimation.Invoke((MethodInvoker)delegate
                    {
                        pictureBoxLoadingAnimation.Image = Properties.Resources.SatsumaAnimatedWhite;
                    });
                }
                CustomiseCharts(lblHeaderPrice.ForeColor);

                ColorMenuAndHeaderButtons();
            }

            catch (Exception ex)
            {
                HandleException(ex, "lblChartsLightBackground_Click");
            }
        }

        private void LblChartsDarkBackground_Click(object sender, EventArgs e)
        {
            try
            {
                if (lblChartsDarkBackground.Text == "✔️")
                {
                    lblChartsDarkBackground.Invoke((MethodInvoker)delegate
                    {
                        lblChartsDarkBackground.ForeColor = Color.IndianRed;
                        lblChartsDarkBackground.Text = "❌";
                    });
                    lblChartsLightBackground.Invoke((MethodInvoker)delegate
                    {
                        lblChartsLightBackground.ForeColor = Color.Green;
                        lblChartsLightBackground.Text = "✔️";
                    });
                    chartsBackgroundColor = Color.FromArgb(255, 255, 255);
                    panelLoadingAnimationContainer.Invoke((MethodInvoker)delegate
                    {
                        panelLoadingAnimationContainer.BackColor = Color.FromArgb(255, 255, 255);
                    });
                    pictureBoxLoadingAnimation.Invoke((MethodInvoker)delegate
                    {
                        pictureBoxLoadingAnimation.Image = Properties.Resources.SatsumaAnimatedWhite;
                    });
                }
                else
                {
                    lblChartsDarkBackground.Invoke((MethodInvoker)delegate
                    {
                        lblChartsDarkBackground.ForeColor = Color.Green;
                        lblChartsDarkBackground.Text = "✔️";
                    });
                    lblChartsLightBackground.Invoke((MethodInvoker)delegate
                    {
                        lblChartsLightBackground.ForeColor = Color.IndianRed;
                        lblChartsLightBackground.Text = "❌";
                    });
                    chartsBackgroundColor = Color.FromArgb(20, 20, 20);
                    panelLoadingAnimationContainer.Invoke((MethodInvoker)delegate
                    {
                        panelLoadingAnimationContainer.BackColor = Color.FromArgb(20, 20, 20);
                    });
                    pictureBoxLoadingAnimation.Invoke((MethodInvoker)delegate
                    {
                        pictureBoxLoadingAnimation.Image = Properties.Resources.SatsumaAnimated;
                    });
                }
                CustomiseCharts(lblHeaderPrice.ForeColor);
                ColorMenuAndHeaderButtons();

            }
            catch (Exception ex)
            {
                HandleException(ex, "lblChartsDarkBackground_Click");
            }
        }

        private async void ColorMenuAndHeaderButtons()
        {
            #region display loading screen
            // display semi-transparent overlay form
            Form loadingTheme = new loadingTheme(UIScale)
            {
                Owner = this, 
                StartPosition = FormStartPosition.CenterParent, 
                FormBorderStyle = FormBorderStyle.None, 
                BackColor = panel84.BackColor, // Set the background color to match panel colours
                Opacity = 1, 
            };
            loadingTheme.StartPosition = FormStartPosition.CenterParent;

            // Calculate the overlay form's location to place it in the center of the parent form
            loadingTheme.StartPosition = FormStartPosition.Manual;
            int parentCenterX = this.Location.X + this.Width / 2;
            int parentCenterY = this.Location.Y + this.Height / 2;
            int overlayX = parentCenterX - loadingTheme.Width / 2;
            int overlayY = parentCenterY - loadingTheme.Height / 2;
            loadingTheme.Location = new Point(overlayX, overlayY);
            loadingTheme.Show(this);
            #endregion


            Control[] listHeaderButtonsToColor = { btnAnimation, btnAddToBookmarks, btnHelp, btnMinimise, btnShowGlobalSearch, btnMoveWindow, btnExit, btnMenuCreateTheme, btnMenuThemeFranklin, btnMenuThemeSatsuma, btnMenuThemeHoneyBadger, btnMenuThemeStackSats, btnMenuThemeSymbol, BtnMenuThemeGenesis, btnUSD, btnEUR, btnGBP, btnXAU, btnHideErrorMessage, btnCopyErrorMessage };
            foreach (Control control in listHeaderButtonsToColor)
            {
                control.BackColor = chartsBackgroundColor;
            }
            lblHelpOffline.BackColor = chartsBackgroundColor;
            lblCurrencyMenuHighlightedButtonText.BackColor = chartsBackgroundColor;
            lblThemeMenuHighlightedButtonText.BackColor = chartsBackgroundColor;
            lblApplyThemeButtonDisabledMask.BackColor = chartsBackgroundColor;
            comboBoxHeaderCustomThemes.BackColor = chartsBackgroundColor;
            comboBoxHeaderCustomThemes.ListBackColor = chartsBackgroundColor;
            btnMenuApplyCustomTheme.BackColor = chartsBackgroundColor;
            btnMenuSplash.FlatAppearance.BorderColor = chartsBackgroundColor;
            btnMenuHelp.FlatAppearance.BorderColor = chartsBackgroundColor;

            Control[] listHeaderButtonTextToColor = { btnCurrency, btnAddToBookmarks, btnHelp, btnMinimise, btnShowGlobalSearch, btnMoveWindow, btnExit, btnCommitToBookmarks, btnCancelAddToBookmarks, btnMenuAddress, btnMenuCreateTheme, btnMenuBitcoinDashboard, btnMenuBlock, btnMenuBlockList, btnMenuDirectory, btnMenuBookmarks, btnMenuCharts, btnMenuHelp, btnMenuLightningDashboard, btnMenuSettings, btnMenuSplash, btnMenuTransaction, btnMenuXpub, btnThemeMenu, btnMenuDCACalculator, btnMenuThemeFranklin, btnMenuThemeSatsuma, BtnMenuThemeGenesis, btnMenuThemeStackSats, btnMenuThemeSymbol, btnMenuThemeHoneyBadger, btnUSD, btnEUR, btnGBP, btnXAU, btnHideErrorMessage, btnCopyErrorMessage };
            if (lblChartsDarkBackground.Text == "✔️")
            {
                //header

                foreach (Control control in listHeaderButtonTextToColor)
                {
                    control.ForeColor = Color.Silver;
                }
                comboBoxHeaderCustomThemes.ForeColor = Color.Silver;
                comboBoxHeaderCustomThemes.ListTextColor = Color.Silver;
                btnMenuApplyCustomTheme.ForeColor = Color.Silver;
                lblCurrencyMenuHighlightedButtonText.ForeColor = Color.DimGray;
                lblMenuHighlightedButtonText.ForeColor = Color.DimGray;
                lblHelpOffline.ForeColor = Color.DimGray;
                lblThemeMenuHighlightedButtonText.ForeColor = Color.DimGray;
                lblApplyThemeButtonDisabledMask.ForeColor = Color.DimGray;
            }
            else
            {
                //header
                foreach (Control control in listHeaderButtonTextToColor)
                {
                    control.ForeColor = Color.DimGray;
                }
                comboBoxHeaderCustomThemes.ForeColor = Color.DimGray;
                comboBoxHeaderCustomThemes.ListTextColor = Color.DimGray;
                btnMenuApplyCustomTheme.ForeColor = Color.DimGray;
                lblCurrencyMenuHighlightedButtonText.ForeColor = Color.Silver;
                lblMenuHighlightedButtonText.ForeColor = Color.Silver;
                lblHelpOffline.ForeColor = Color.Silver;
                lblThemeMenuHighlightedButtonText.ForeColor = Color.Silver;
                lblApplyThemeButtonDisabledMask.ForeColor = Color.Silver;
            }

            //wait 2 secs 
            await Wait2Secs();
            //close the loading screen
            loadingTheme.Close();
        }
        #endregion
        #region select opacity
        private void NumericUpDownOpacity_ValueChanged(object sender, EventArgs e)
        {
            try
            {
                this.Opacity = Convert.ToDouble(numericUpDownOpacity.Value / 100);
            }
            catch (Exception ex)
            {
                HandleException(ex, "NumericUpDownOpacity_ValueChanged");
            }
        }

        private void BtnOpacityUp_Click(object sender, EventArgs e)
        {
            try
            {
                if (numericUpDownOpacity.Value < 100)
                {
                    numericUpDownOpacity.Value++;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnOpacityUp_Click");
            }
        }

        private void BtnOpacityDown_Click(object sender, EventArgs e)
        {
            try
            {
                if (numericUpDownOpacity.Value > 10)
                {
                    numericUpDownOpacity.Value--;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnOpacityDown_Click");
            }
        }

        private void BtnOpacityUp_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isOpacityUpHeldDown = true;
                timerNumUpDownContinuous.Enabled = true;
                timerNumUpDownContinuous.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnOpacityUp_MouseDown");
            }
        }

        private void BtnOpacityUp_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isOpacityUpHeldDown = false;
                timerNumUpDownContinuous.Stop();
                timerNumUpDownContinuous.Enabled = false;
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnOpacityUp_MouseUp");
            }
        }

        private void BtnOpacityDown_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                isOpacityDownHeldDown = true;
                timerNumUpDownContinuous.Enabled = true;
                timerNumUpDownContinuous.Start();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnOpacityDown_MouseDown");
            }
        }

        private void BtnOpacityDown_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                isOpacityDownHeldDown = false;
                timerNumUpDownContinuous.Stop();
                timerNumUpDownContinuous.Enabled = false;
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnOpacityDown_MouseUp");
            }
        }
        #endregion
        #region background picture/colour
        private async void PictureBoxGenesis_Click(object sender, EventArgs e)
        {
            try
            {
                #region display loading screen
                Form loadingTheme = new loadingTheme(UIScale)
                {
                    Owner = this, 
                    StartPosition = FormStartPosition.CenterParent, 
                    FormBorderStyle = FormBorderStyle.None, 
                    BackColor = panel84.BackColor, // Set the background color to match panel colours
                    Opacity = 1, 
                };
                loadingTheme.StartPosition = FormStartPosition.CenterParent;

                // Calculate the overlay form's location to place it in the center of the parent form
                loadingTheme.StartPosition = FormStartPosition.Manual;
                int parentCenterX = this.Location.X + this.Width / 2;
                int parentCenterY = this.Location.Y + this.Height / 2;
                int overlayX = parentCenterX - loadingTheme.Width / 2;
                int overlayY = parentCenterY - loadingTheme.Height / 2;
                loadingTheme.Location = new Point(overlayX, overlayY);
                loadingTheme.Show(this);
                await BriefPause(100);
                #endregion
                lblShowClock.Enabled = true;
                this.Invoke((MethodInvoker)delegate
                {
                    this.BackgroundImage = Properties.Resources.Genesis;
                });
                lblBackgroundGenesisSelected.Visible = true;
                lblBackgroundFranklinSelected.Visible = false;
                lblBackgroundHoneyBadgerSelected.Visible = false;
                lblBackgroundSymbolSelected.Visible = false;
                lblBackgroundStackSatsSelected.Visible = false;
                lblBackgroundSatsumaSelected.Visible = false;
                lblBackgroundCustomColorSelected.Visible = false;
                lblBackgroundCustomImageSelected.Visible = false;
                lblTime.Visible = true;
                lblThemeImage.Invoke((MethodInvoker)delegate
                {
                    lblThemeImage.Text = "no custom image selected";
                });
                pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                //wait a sec 
                await BriefPause(500);
                //close the loading screen
                loadingTheme.Close();
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxGenesis_Click");
            }
        }

        private async void PictureBoxFranklin_Click(object sender, EventArgs e)
        {
            try
            {
                #region display loading screen
                Form loadingTheme = new loadingTheme(UIScale)
                {
                    Owner = this, 
                    StartPosition = FormStartPosition.CenterParent, 
                    FormBorderStyle = FormBorderStyle.None, 
                    BackColor = panel84.BackColor, // Set the background color to match panel colours
                    Opacity = 1, 
                };
                loadingTheme.StartPosition = FormStartPosition.CenterParent;

                // Calculate the overlay form's location to place it in the center of the parent form
                loadingTheme.StartPosition = FormStartPosition.Manual;
                int parentCenterX = this.Location.X + this.Width / 2;
                int parentCenterY = this.Location.Y + this.Height / 2;
                int overlayX = parentCenterX - loadingTheme.Width / 2;
                int overlayY = parentCenterY - loadingTheme.Height / 2;
                loadingTheme.Location = new Point(overlayX, overlayY);
                loadingTheme.Show(this);
                await BriefPause(100);
                #endregion
                lblShowClock.Enabled = false;
                this.Invoke((MethodInvoker)delegate
                {
                    this.BackgroundImage = Properties.Resources.Franklin;
                });
                lblTime.Visible = false;
                lblBackgroundGenesisSelected.Visible = false;
                lblBackgroundSatsumaSelected.Visible = false;
                lblBackgroundHoneyBadgerSelected.Visible = false;
                lblBackgroundSymbolSelected.Visible = false;
                lblBackgroundStackSatsSelected.Visible = false;
                lblBackgroundFranklinSelected.Visible = true;
                lblBackgroundCustomColorSelected.Visible = false;
                lblBackgroundCustomImageSelected.Visible = false;
                lblThemeImage.Invoke((MethodInvoker)delegate
                {
                    lblThemeImage.Text = "no custom image selected";
                });
                pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                //wait a sec 
                await BriefPause(500);
                //close the loading screen
                loadingTheme.Close();
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxFranklin_Click");
            }
        }

        private async void PictureBoxSatsuma_Click(object sender, EventArgs e)
        {
            try
            {
                #region display loading screen
                Form loadingTheme = new loadingTheme(UIScale)
                {
                    Owner = this, 
                    StartPosition = FormStartPosition.CenterParent, 
                    FormBorderStyle = FormBorderStyle.None, 
                    BackColor = panel84.BackColor, // Set the background color to match panel colours
                    Opacity = 1, 
                };
                loadingTheme.StartPosition = FormStartPosition.CenterParent;

                // Calculate the overlay form's location to place it in the center of the parent form
                loadingTheme.StartPosition = FormStartPosition.Manual;
                int parentCenterX = this.Location.X + this.Width / 2;
                int parentCenterY = this.Location.Y + this.Height / 2;
                int overlayX = parentCenterX - loadingTheme.Width / 2;
                int overlayY = parentCenterY - loadingTheme.Height / 2;
                loadingTheme.Location = new Point(overlayX, overlayY);
                loadingTheme.Show(this);
                await BriefPause(100);
                #endregion
                lblShowClock.Enabled = false;
                this.Invoke((MethodInvoker)delegate
                {
                    this.BackgroundImage = Properties.Resources.Satsuma;
                });
                lblTime.Visible = false;
                lblBackgroundGenesisSelected.Visible = false;
                lblBackgroundFranklinSelected.Visible = false;
                lblBackgroundHoneyBadgerSelected.Visible = false;
                lblBackgroundSymbolSelected.Visible = false;
                lblBackgroundStackSatsSelected.Visible = false;
                lblBackgroundSatsumaSelected.Visible = true;
                lblBackgroundCustomColorSelected.Visible = false;
                lblBackgroundCustomImageSelected.Visible = false;
                lblThemeImage.Invoke((MethodInvoker)delegate
                {
                    lblThemeImage.Text = "no custom image selected";
                });
                pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                //wait a sec 
                await BriefPause(500);
                //close the loading screen
                loadingTheme.Close();
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxSatsuma_Click");
            }
        }

        private async void PictureBoxHoneyBadger_Click(object sender, EventArgs e)
        {
            try
            {
                #region display loading screen
                Form loadingTheme = new loadingTheme(UIScale)
                {
                    Owner = this, 
                    StartPosition = FormStartPosition.CenterParent, 
                    FormBorderStyle = FormBorderStyle.None, 
                    BackColor = panel84.BackColor, // Set the background color to match panel colours
                    Opacity = 1, 
                };
                loadingTheme.StartPosition = FormStartPosition.CenterParent;

                // Calculate the overlay form's location to place it in the center of the parent form
                loadingTheme.StartPosition = FormStartPosition.Manual;
                int parentCenterX = this.Location.X + this.Width / 2;
                int parentCenterY = this.Location.Y + this.Height / 2;
                int overlayX = parentCenterX - loadingTheme.Width / 2;
                int overlayY = parentCenterY - loadingTheme.Height / 2;
                loadingTheme.Location = new Point(overlayX, overlayY);
                loadingTheme.Show(this);
                await BriefPause(100);
                #endregion
                lblShowClock.Enabled = false;
                this.Invoke((MethodInvoker)delegate
                {
                    this.BackgroundImage = Properties.Resources.HoneyBadger;
                });
                lblTime.Visible = false;
                lblBackgroundGenesisSelected.Visible = false;
                lblBackgroundFranklinSelected.Visible = false;
                lblBackgroundSatsumaSelected.Visible = false;
                lblBackgroundSymbolSelected.Visible = false;
                lblBackgroundStackSatsSelected.Visible = false;
                lblBackgroundHoneyBadgerSelected.Visible = true;
                lblBackgroundCustomColorSelected.Visible = false;
                lblBackgroundCustomImageSelected.Visible = false;
                lblThemeImage.Invoke((MethodInvoker)delegate
                {
                    lblThemeImage.Text = "no custom image selected";
                });
                pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                //wait a sec 
                await BriefPause(500);
                //close the loading screen
                loadingTheme.Close();
            }
            catch (Exception ex)
            {
                HandleException(ex, "pictureBoxHoneyBadger_Click");
            }
        }

        private async void PictureBoxSymbol_Click(object sender, EventArgs e)
        {
            try
            {
                #region display loading screen
                Form loadingTheme = new loadingTheme(UIScale)
                {
                    Owner = this, 
                    StartPosition = FormStartPosition.CenterParent, 
                    FormBorderStyle = FormBorderStyle.None, 
                    BackColor = panel84.BackColor, // Set the background color to match panel colours
                    Opacity = 1, 
                };
                loadingTheme.StartPosition = FormStartPosition.CenterParent;

                // Calculate the overlay form's location to place it in the center of the parent form
                loadingTheme.StartPosition = FormStartPosition.Manual;
                int parentCenterX = this.Location.X + this.Width / 2;
                int parentCenterY = this.Location.Y + this.Height / 2;
                int overlayX = parentCenterX - loadingTheme.Width / 2;
                int overlayY = parentCenterY - loadingTheme.Height / 2;
                loadingTheme.Location = new Point(overlayX, overlayY);
                loadingTheme.Show(this);
                await BriefPause(100);
                #endregion
                lblShowClock.Enabled = false;
                this.Invoke((MethodInvoker)delegate
                {
                    this.BackgroundImage = Properties.Resources.Symbol;
                });
                lblTime.Visible = false;
                lblBackgroundGenesisSelected.Visible = false;
                lblBackgroundFranklinSelected.Visible = false;
                lblBackgroundSatsumaSelected.Visible = false;
                lblBackgroundSymbolSelected.Visible = true;
                lblBackgroundStackSatsSelected.Visible = false;
                lblBackgroundHoneyBadgerSelected.Visible = false;
                lblBackgroundCustomColorSelected.Visible = false;
                lblBackgroundCustomImageSelected.Visible = false;
                lblThemeImage.Invoke((MethodInvoker)delegate
                {
                    lblThemeImage.Text = "no custom image selected";
                });
                pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                //wait a sec 
                await BriefPause(500);
                //close the loading screen
                loadingTheme.Close();

            }
            catch (Exception ex)
            {
                HandleException(ex, "pictureBoxSymbol_Click");
            }
        }

        private async void PictureBoxStackSats_Click(object sender, EventArgs e)
        {
            try
            {
                #region display loading screen
                Form loadingTheme = new loadingTheme(UIScale)
                {
                    Owner = this, 
                    StartPosition = FormStartPosition.CenterParent, 
                    FormBorderStyle = FormBorderStyle.None, 
                    BackColor = panel84.BackColor, // Set the background color to match panel colours
                    Opacity = 1, 
                };
                loadingTheme.StartPosition = FormStartPosition.CenterParent;

                // Calculate the overlay form's location to place it in the center of the parent form
                loadingTheme.StartPosition = FormStartPosition.Manual;
                int parentCenterX = this.Location.X + this.Width / 2;
                int parentCenterY = this.Location.Y + this.Height / 2;
                int overlayX = parentCenterX - loadingTheme.Width / 2;
                int overlayY = parentCenterY - loadingTheme.Height / 2;
                loadingTheme.Location = new Point(overlayX, overlayY);
                loadingTheme.Show(this);
                await BriefPause(100);
                #endregion
                lblShowClock.Enabled = false;
                this.Invoke((MethodInvoker)delegate
                {
                    this.BackgroundImage = Properties.Resources.StackSats;
                });
                lblTime.Visible = false;
                lblBackgroundGenesisSelected.Visible = false;
                lblBackgroundFranklinSelected.Visible = false;
                lblBackgroundSatsumaSelected.Visible = false;
                lblBackgroundSymbolSelected.Visible = false;
                lblBackgroundStackSatsSelected.Visible = true;
                lblBackgroundHoneyBadgerSelected.Visible = false;
                lblBackgroundCustomColorSelected.Visible = false;
                lblBackgroundCustomImageSelected.Visible = false;
                lblThemeImage.Invoke((MethodInvoker)delegate
                {
                    lblThemeImage.Text = "no custom image selected";
                });
                pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                //wait a sec 
                await BriefPause(500);
                //close the loading screen
                loadingTheme.Close();

            }
            catch (Exception ex)
            {
                HandleException(ex, "pictureBoxStackSats_Click");
            }
        }

        private async void PictureBoxCustomImage_Click(object sender, EventArgs e)
        {
            try
            {
                System.Windows.Forms.OpenFileDialog openFileDialog1 = new System.Windows.Forms.OpenFileDialog
                {
                    Filter = "Images (*.BMP;*.JPG;*.GIF,*.PNG)|*.BMP;*.JPG;*.GIF;*.PNG;|" + "All files (*.*)|*.*"
                };

                if (openFileDialog1.ShowDialog() == DialogResult.OK)
                {
                    #region display loading screen
                    Form loadingTheme = new loadingTheme(UIScale)
                    {
                        Owner = this, 
                        StartPosition = FormStartPosition.CenterParent, 
                        FormBorderStyle = FormBorderStyle.None, 
                        BackColor = panel84.BackColor, // Set the background color to match panel colours
                        Opacity = 1, 
                    };
                    loadingTheme.StartPosition = FormStartPosition.CenterParent;

                    // Calculate the overlay form's location to place it in the center of the parent form
                    loadingTheme.StartPosition = FormStartPosition.Manual;
                    int parentCenterX = this.Location.X + this.Width / 2;
                    int parentCenterY = this.Location.Y + this.Height / 2;
                    int overlayX = parentCenterX - loadingTheme.Width / 2;
                    int overlayY = parentCenterY - loadingTheme.Height / 2;
                    loadingTheme.Location = new Point(overlayX, overlayY);
                    loadingTheme.Show(this);
                    await BriefPause(100);
                    #endregion
                    lblShowClock.Enabled = false;
                    string selectedFilePath = openFileDialog1.FileName;
                    lblThemeImage.Text = selectedFilePath;
                    this.BackgroundImage = System.Drawing.Image.FromFile(selectedFilePath);
                    pictureBoxCustomImage.Image = System.Drawing.Image.FromFile(selectedFilePath);
                    lblBackgroundGenesisSelected.Visible = false;
                    lblBackgroundSatsumaSelected.Visible = false;
                    lblBackgroundSymbolSelected.Visible = false;
                    lblBackgroundFranklinSelected.Visible = false;
                    lblBackgroundHoneyBadgerSelected.Visible = false;
                    lblBackgroundStackSatsSelected.Visible = false;
                    lblBackgroundCustomColorSelected.Visible = false;
                    lblBackgroundCustomImageSelected.Visible = true;
                    lblTime.Visible = false;

                    //wait a sec 
                    await BriefPause(500);
                    //close the loading screen
                    loadingTheme.Close();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxCustomImage_Click");
            }
        }

        private async void PictureBoxCustomColor_Click(object sender, EventArgs e)
        {
            try
            {
                ColorDialog colorDlgForFormBackground = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = Color.Red
                };

                if (colorDlgForFormBackground.ShowDialog() == DialogResult.OK)
                {
                    #region display loading screen
                    Form loadingTheme = new loadingTheme(UIScale)
                    {
                        Owner = this, 
                        StartPosition = FormStartPosition.CenterParent, 
                        FormBorderStyle = FormBorderStyle.None, 
                        BackColor = panel84.BackColor, // Set the background color to match panel colours
                        Opacity = 1, 
                    };
                    loadingTheme.StartPosition = FormStartPosition.CenterParent;

                    // Calculate the overlay form's location to place it in the center of the parent form
                    loadingTheme.StartPosition = FormStartPosition.Manual;
                    int parentCenterX = this.Location.X + this.Width / 2;
                    int parentCenterY = this.Location.Y + this.Height / 2;
                    int overlayX = parentCenterX - loadingTheme.Width / 2;
                    int overlayY = parentCenterY - loadingTheme.Height / 2;
                    loadingTheme.Location = new Point(overlayX, overlayY);
                    loadingTheme.Show(this);
                    await BriefPause(100);
                    #endregion
                    lblShowClock.Enabled = false;
                    this.Invoke((MethodInvoker)delegate
                    {
                        this.BackColor = colorDlgForFormBackground.Color;
                        panel33.BackColor = colorDlgForFormBackground.Color;
                        panel30.BackColor = colorDlgForFormBackground.Color;
                        panel24.BackColor = colorDlgForFormBackground.Color;
                        panel25.BackColor = colorDlgForFormBackground.Color;
                        this.BackgroundImage = null;
                    });
                    lblTime.Visible = false;
                    lblBackgroundStackSatsSelected.Visible = false;
                    lblBackgroundSymbolSelected.Visible = false;
                    lblBackgroundGenesisSelected.Visible = false;
                    lblBackgroundFranklinSelected.Visible = false;
                    lblBackgroundSatsumaSelected.Visible = false;
                    lblBackgroundCustomColorSelected.Visible = true;
                    lblBackgroundCustomImageSelected.Visible = false;
                    lblThemeImage.Invoke((MethodInvoker)delegate
                    {
                        lblThemeImage.Text = "no custom image selected";
                    });
                    pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                    //wait a sec 
                    await BriefPause(500);
                    //close the loading screen
                    loadingTheme.Close();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxCustomColor_Click");
            }
        }
        #endregion
        #region title backgrounds
        private void ComboBoxSelectHeadingBackground_OnSelectedIndexChanged(object sender, EventArgs e)
        {
            if (lblTitlesBackgroundImage.Text == "✔️")
            {
                HeadingBackgroundsToImage();
            }
        }

        private void LblTitleBackgroundNone_Click(object sender, EventArgs e)
        {
            try
            {
                comboBoxTitlesBackgroundImage.Enabled = false;
                if (lblTitleBackgroundNone.Text != "✔️")
                {
                    HeadingBackgroundsToNone();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "LblTitleBackgroundNone_Click");
            }
        }

        private void LblTitleBackgroundDefault_Click(object sender, EventArgs e)
        {
            try
            {
                lblTitlesBackgroundImage.Invoke((MethodInvoker)delegate
                {
                    lblTitlesBackgroundImage.ForeColor = Color.Green;
                    lblTitlesBackgroundImage.Text = "✔️";
                });
                lblTitleBackgroundNone.Invoke((MethodInvoker)delegate
                {
                    lblTitleBackgroundNone.ForeColor = Color.IndianRed;
                    lblTitleBackgroundNone.Text = "❌";
                });
                lblTitleBackgroundCustom.Invoke((MethodInvoker)delegate
                {
                    lblTitleBackgroundCustom.ForeColor = Color.IndianRed;
                    lblTitleBackgroundCustom.Text = "❌";
                });
                if (lblTitlesBackgroundImage.Text == "✔️")
                {
                    comboBoxTitlesBackgroundImage.Enabled = true;
                }
                HeadingBackgroundsToImage();
            }
            catch (Exception ex)
            {
                HandleException(ex, "LblTitleBackgroundDefault_Click");
            }
        }

        private void BtnColorTitleBackgrounds_Click(object sender, EventArgs e)
        {
            try
            {
                comboBoxTitlesBackgroundImage.Enabled = false;
                ColorDialog colorDlgForTitleBackgrounds = new ColorDialog
                {
                    AllowFullOpen = true,
                    AnyColor = true,
                    SolidColorOnly = true,
                    Color = panel58.BackColor
                };

                if (colorDlgForTitleBackgrounds.ShowDialog() == DialogResult.OK)
                {
                    titleBackgroundColor = colorDlgForTitleBackgrounds.Color;
                    lblTitleBackgroundCustom.ForeColor = Color.Green;
                    lblTitleBackgroundCustom.Invoke((MethodInvoker)delegate
                    {
                        lblTitleBackgroundCustom.Text = "✔️";
                    });
                    lblTitleBackgroundNone.ForeColor = Color.IndianRed;
                    lblTitleBackgroundNone.Invoke((MethodInvoker)delegate
                    {
                        lblTitleBackgroundNone.Text = "❌";
                    });
                    lblTitlesBackgroundImage.ForeColor = Color.IndianRed;
                    lblTitlesBackgroundImage.Invoke((MethodInvoker)delegate
                    {
                        lblTitlesBackgroundImage.Text = "❌";
                    });

                    SetCustomTitleBackgroundColor();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnColorTitleBackgrounds_Click");
            }
        }

        private void LblTitleBackgroundCustom_Click(object sender, EventArgs e)
        {
            try
            {
                if (lblTitleBackgroundCustom.Text != "✔️")
                {
                    comboBoxTitlesBackgroundImage.Enabled = false;
                    lblTitleBackgroundCustom.Invoke((MethodInvoker)delegate
                    {
                        lblTitleBackgroundCustom.Text = "✔️";
                        lblTitleBackgroundCustom.ForeColor = Color.Green;
                    });
                    lblTitleBackgroundNone.Invoke((MethodInvoker)delegate
                    {
                        lblTitleBackgroundNone.Text = "❌";
                        lblTitleBackgroundNone.ForeColor = Color.IndianRed;
                    });
                    lblTitlesBackgroundImage.Invoke((MethodInvoker)delegate
                    {
                        lblTitlesBackgroundImage.Text = "❌";
                        lblTitlesBackgroundImage.ForeColor = Color.IndianRed;
                    });
                    SetCustomTitleBackgroundColor();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "LblTitleBackgroundCustom_Click");
            }
        }

        private void SetCustomTitleBackgroundColor()
        {
            try
            {
                HeadingBackgroundsToCustomColor();
            }
            catch (Exception ex)
            {
                HandleException(ex, "SetCustomTitleBackgroundColor");
            }
        }
        #endregion
        #region read theme from file
        private static List<Theme> ReadThemesFromJsonFile()
        {
            string themesFileName = "SATSuma_themes.json";
            string appDataDirectory = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
            string applicationDirectory = Path.Combine(appDataDirectory, "SATSuma");
            // Create the application directory if it doesn't exist
            Directory.CreateDirectory(applicationDirectory);
            string themesFilePath = Path.Combine(applicationDirectory, themesFileName);
            string filePath = themesFilePath;

            if (!System.IO.File.Exists(filePath))
            {
                System.IO.File.Create(filePath).Dispose();
            }
            // Read the contents of the JSON file into a string
            string json = System.IO.File.ReadAllText(filePath);

            // Deserialize the JSON string into a list of bookmark objects
            var themes = JsonConvert.DeserializeObject<List<Theme>>(json);

            // If the JSON file doesn't exist or is empty, return an empty list
            themes ??= new List<Theme>();

            return themes;
        }
        #endregion
        #region construct theme record to be saved
        private void TextBoxThemeName_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (textBoxThemeName.Text.Length > 0)
                {
                    btnSaveTheme.Enabled = true;
                }
                else
                {
                    btnSaveTheme.Enabled = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "TextBoxThemeName_TextChanged");
            }
        }

        private void BtnSaveTheme_Click(object sender, EventArgs e)
        {
            try
            {
                //take the selected color values from examples on the appearance screen
                Color datafields = label154.ForeColor;
                Color labels = label73.ForeColor;
                Color fiatconversions = label288.ForeColor;
                Color headings = label156.ForeColor;
                Color tables = label170.ForeColor;
                Color tableheadings = label190.ForeColor;
                Color othertext = label173.ForeColor;
                Color priceblock = label175.ForeColor;
                Color statuserrors = label176.ForeColor;
                Color buttons = button1.BackColor;
                Color buttontext = button2.ForeColor;
                Color lines = panel61.BackColor;
                Color textboxes = textBox1.BackColor;
                Color progressbars = colorProgressBar1.BarColor;
                Color tablebackgrounds = panel66.BackColor;
                Color tabletitlebars = panel67.BackColor;
                Color panels = panel73.BackColor;
                bool chartsDark = false;
                if (lblChartsDarkBackground.Text == "✔️")
                {
                    chartsDark = true;
                }

                bool showtime = lblTime.Visible;
                bool headingbgdefault = false;
                if (lblTitlesBackgroundImage.Text == "✔️")
                {
                    headingbgdefault = true;
                }
                bool headingbgnone = false;
                if (lblTitleBackgroundNone.Text == "✔️")
                {
                    headingbgnone = true;
                }
                bool headingbgcustom = false;
                if (lblTitleBackgroundCustom.Text == "✔️")
                {
                    headingbgcustom = true;
                }
                bool backgroundgenesis = false;
                if (lblBackgroundGenesisSelected.Visible == true)
                {
                    backgroundgenesis = true;
                }
                bool backgroundFranklin = false;
                if (lblBackgroundFranklinSelected.Visible == true)
                {
                    backgroundFranklin = true;
                }
                bool backgroundSatsuma = false;
                if (lblBackgroundSatsumaSelected.Visible == true)
                {
                    backgroundSatsuma = true;
                }
                bool backgroundHoneyBadger = false;
                if (lblBackgroundHoneyBadgerSelected.Visible == true)
                {
                    backgroundHoneyBadger = true;
                }
                bool backgroundSymbol = false;
                if (lblBackgroundSymbolSelected.Visible == true)
                {
                    backgroundSymbol = true;
                }
                bool backgroundStackSats = false;
                if (lblBackgroundStackSatsSelected.Visible == true)
                {
                    backgroundStackSats = true;
                }
                bool backgroundcustomcolor = false;
                if (lblBackgroundCustomColorSelected.Visible == true)
                {
                    backgroundcustomcolor = true;
                }
                bool backgroundcustomimage = false;
                if (lblBackgroundCustomImageSelected.Visible == true)
                {
                    backgroundcustomimage = true;
                }
                Color headingbackgrounds = panel64.BackColor;
                Color windowbackground = this.BackColor;
                string windowimage = "";
                if (lblBackgroundGenesisSelected.Visible)
                {
                    windowimage = "Genesis.png";
                }
                else
                {
                    if (lblBackgroundFranklinSelected.Visible)
                    {
                        windowimage = "Franklin.png";
                    }
                    else
                    {
                        if (lblBackgroundSatsumaSelected.Visible)
                        {
                            windowimage = "Satsuma.png";
                        }
                        else
                        {
                            if (this.BackgroundImage != null && lblThemeImage.Text.Length > 0)
                            {
                                windowimage = lblThemeImage.Text;
                            }
                            else
                            {
                                windowimage = "";
                            }
                        }
                    }
                }
                int orangeinfinity = 1;
                if (lblInfinity1.Text == "✔️")
                {
                    orangeinfinity = 1;
                }
                if (lblInfinity2.Text == "✔️")
                {
                    orangeinfinity = 2;
                }
                if (lblInfinity3.Text == "✔️")
                {
                    orangeinfinity = 3;
                }

                int borderradius = 12;
                if (btnSquareCorners.Enabled == false)
                {
                    borderradius = 1;
                }
                else
                {
                    if (btnPartialCorners.Enabled == false)
                    {
                        borderradius = 6;
                    }
                    else
                    {
                        if (btnRoundCorners.Enabled == false)
                        {
                            borderradius = 12;
                        }
                    }
                }

                decimal opacity = numericUpDownOpacity.Value;

                int titlesBackgroundImage = comboBoxTitlesBackgroundImage.SelectedIndex;
                

                var newTheme = new Theme { ThemeName = textBoxThemeName.Text, DataFields = datafields, Labels = labels, Headings = headings, Tables = tables, TableHeadings = tableheadings, OtherText = othertext, PriceBlock = priceblock, StatusErrors = statuserrors, Buttons = buttons, ButtonText = buttontext, Lines = lines, TextBoxes = textboxes, ProgressBars = progressbars, TableBackgrounds = tablebackgrounds, TableTitleBars = tabletitlebars, ShowTime = showtime, HeadingBGDefault = headingbgdefault, HeadingBGNone = headingbgnone, HeadingBGCustom = headingbgcustom, HeadingBackgrounds = headingbackgrounds, WindowBackground = windowbackground, WindowImage = windowimage, BackgroundGenesis = backgroundgenesis, BackgroundFranklin = backgroundFranklin, BackgroundSatsuma = backgroundSatsuma, BackgroundHoneyBadger = backgroundHoneyBadger, BackgroundSymbol = backgroundSymbol, BackgroundStackSats = backgroundStackSats, BackgroundCustomColor = backgroundcustomcolor, BackgroundCustomImage = backgroundcustomimage, Panels = panels, ChartsDark = chartsDark, OrangeInfinity = orangeinfinity, BorderRadius = borderradius, FiatConversionText = fiatconversions, Opacity = opacity, TitlesBackgroundImage = titlesBackgroundImage };

                // Read the existing themes from the JSON file
                var themes = ReadThemesFromJsonFile();

                // check here for duplicate themename
                foreach (Theme theme in themes)
                {
                    if (theme.ThemeName == newTheme.ThemeName)
                    {
                        lblThemeNameInUse.Visible = true;
                        timerHideThemeNameInUse.Start();
                        return;
                    }
                }

                // Add the new theme to the list
                themes.Add(newTheme);

                // Write the updated list of themes back to the JSON file
                WriteThemeToJsonFile(themes);

                SaveThemeAsDefault(textBoxThemeName.Text);
                currentlyActiveTheme = newTheme.ThemeName;
                PopulateThemeComboboxes();
                lblThemeSaved.Visible = true;
                hideThemeSavedTimer.Start();
                textBoxThemeName.Invoke((MethodInvoker)delegate
                {
                    textBoxThemeName.Text = "";
                });

            }
            catch (Exception ex)
            {
                HandleException(ex, "btnSaveTheme_Click");
            }
        }
        #endregion
        #region write theme to file
        private static void WriteThemeToJsonFile(List<Theme> themes)
        {
            // Serialize the list of bookmark objects into a JSON string
            string json = JsonConvert.SerializeObject(themes);

            string themesFileName = "SATSuma_themes.json";
            string appDataDirectory = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
            string applicationDirectory = Path.Combine(appDataDirectory, "SATSuma");
            // Create the application directory if it doesn't exist
            Directory.CreateDirectory(applicationDirectory);
            string themesFilePath = Path.Combine(applicationDirectory, themesFileName);
            string filePath = themesFilePath;

            // Write the JSON string to the themes.json file
            System.IO.File.WriteAllText(filePath, json);
        }
        #endregion
        #region select previously saved theme from list (doesn't apply to list embedded in main menu)
        private void BtnLoadTheme_Click(object sender, EventArgs e)
        {
            try
            {
                var themes = ReadThemesFromJsonFile();
                foreach (Theme theme in themes)
                {
                    if (theme.ThemeName == comboBoxCustomizeScreenThemeList.Texts)
                    {
                        if (comboBoxCustomizeScreenThemeList.Texts != "select theme")
                        {
                            try
                            {
                                if (theme.ThemeName == comboBoxCustomizeScreenThemeList.Texts)
                                {
                                    BtnMenuThemeGenesis.Enabled = true;
                                    btnMenuThemeFranklin.Enabled = true;
                                    btnMenuThemeSatsuma.Enabled = true;
                                    lblThemeMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                                    {
                                        lblThemeMenuHighlightedButtonText.Text = theme.ThemeName;
                                        lblThemeMenuHighlightedButtonText.Location = new Point(btnMenuApplyCustomTheme.Location.X + (int)(14 * UIScale), btnMenuApplyCustomTheme.Location.Y + (int)(5 * UIScale));
                                    });
                                    ClearThemeMenuMarkers();
                                    btnMenuApplyCustomTheme.Invoke((MethodInvoker)delegate
                                    {
                                        btnMenuApplyCustomTheme.BackgroundImage = Resources.marker;
                                    });
                                    btnMenuApplyCustomTheme.Invoke((MethodInvoker)delegate
                                    {
                                        btnMenuApplyCustomTheme.Text = theme.ThemeName;
                                    });
                                    comboBoxHeaderCustomThemes.Invoke((MethodInvoker)delegate
                                    {
                                        comboBoxHeaderCustomThemes.Texts = "   select theme ▼";
                                    });
                                    comboBoxCustomizeScreenThemeList.Invoke((MethodInvoker)delegate
                                    {
                                        comboBoxCustomizeScreenThemeList.Texts = "select theme";
                                    });
                                    CloseThemeMenu();
                                    RestoreTheme(theme);
                                    SaveThemeAsDefault(theme.ThemeName);
                                    // reload the listviews to apply the new color
                                    LookupBlockList();
                                    LookupBlock();
                                    SetupBookmarksScreen();
                                    labelSettingsSaved.Invoke((MethodInvoker)delegate
                                    {
                                        labelSettingsSaved.Text = "Saving settings";
                                    });
                                    lblSaveSettingsLight.Invoke((MethodInvoker)delegate
                                    {
                                        lblSaveSettingsLight.ForeColor = Color.Lime;
                                    });
                                    timerHideSettingsSaved.Start();
                                }
                            }
                            catch (Exception ex)
                            {
                                HandleException(ex, "btnLoadTheme_Click");
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnLoadTheme_Click");
            }
        }
        #endregion
        #region restore theme
        private async void RestoreTheme(Theme theme)
        {
            try
            {
                #region display loading screen
                Form loadingTheme = new loadingTheme(UIScale)
                {
                    Owner = this, 
                    StartPosition = FormStartPosition.CenterParent, 
                    FormBorderStyle = FormBorderStyle.None, 
                    BackColor = panel84.BackColor, // Set the background color to match panel colours
                    Opacity = 1, 
                };
                loadingTheme.StartPosition = FormStartPosition.CenterParent;
                
                // Calculate the overlay form's location to place it in the center of the parent form
                loadingTheme.StartPosition = FormStartPosition.Manual;
                int parentCenterX = this.Location.X + this.Width / 2;
                int parentCenterY = this.Location.Y + this.Height / 2;
                int overlayX = parentCenterX - loadingTheme.Width / 2;
                int overlayY = parentCenterY - loadingTheme.Height / 2;
                loadingTheme.Location = new Point(overlayX, overlayY);
                loadingTheme.Show(this);
                #endregion 

                currentlyActiveTheme = theme.ThemeName;
                if (theme.BackgroundGenesis)
                {
                    lblShowClock.Enabled = true;
                }
                else
                {
                    lblShowClock.Enabled = false;
                }
                if (theme.ThemeName.Contains("(preset)"))
                {
                    btnMenuApplyCustomTheme.Text = "apply theme";
                    lblApplyThemeButtonDisabledMask.Visible = true;
                }
                else
                {
                    btnMenuApplyCustomTheme.Text = theme.ThemeName;
                    lblThemeMenuHighlightedButtonText.Text = theme.ThemeName;
                    lblThemeMenuHighlightedButtonText.Visible = true;
                    lblApplyThemeButtonDisabledMask.Visible = false;
                }
                try
                {
                    if (theme.ChartsDark == true)
                    {
                        chartsBackgroundColor = Color.FromArgb(20, 20, 20);

                        panelLoadingAnimationContainer.BackColor = Color.FromArgb(20, 20, 20);
                        pictureBoxLoadingAnimation.Invoke((MethodInvoker)delegate
                        {
                            pictureBoxLoadingAnimation.Image = Properties.Resources.SatsumaAnimated;
                        });
                        lblChartsLightBackground.Invoke((MethodInvoker)delegate
                        {
                            lblChartsLightBackground.ForeColor = Color.IndianRed;
                            lblChartsLightBackground.Text = "❌";
                        });
                        lblChartsDarkBackground.Invoke((MethodInvoker)delegate
                        {
                            lblChartsDarkBackground.ForeColor = Color.Green;
                            lblChartsDarkBackground.Text = "✔️";
                        });
                        panelCustomThemeMenuTitleBG.Invoke((MethodInvoker)delegate
                        {
                            panelCustomThemeMenuTitleBG.BackColor = Color.Black;
                        });
                        panelPresetThemeMenuTitleBG.Invoke((MethodInvoker)delegate
                        {
                            panelPresetThemeMenuTitleBG.BackColor = Color.Black;
                        });
                    }
                    else
                    {
                        chartsBackgroundColor = Color.FromArgb(255, 255, 255);
                        panelLoadingAnimationContainer.BackColor = Color.FromArgb(255, 255, 255);
                        pictureBoxLoadingAnimation.Invoke((MethodInvoker)delegate
                        {
                            pictureBoxLoadingAnimation.Image = Properties.Resources.SatsumaAnimatedWhite;
                        });
                        lblChartsLightBackground.Invoke((MethodInvoker)delegate
                        {
                            lblChartsLightBackground.ForeColor = Color.Green;
                            lblChartsLightBackground.Text = "✔️";
                        });
                        lblChartsDarkBackground.Invoke((MethodInvoker)delegate
                        {
                            lblChartsDarkBackground.ForeColor = Color.IndianRed;
                            lblChartsDarkBackground.Text = "❌";
                        });
                        panelCustomThemeMenuTitleBG.Invoke((MethodInvoker)delegate
                        {
                            panelCustomThemeMenuTitleBG.BackColor = Color.Gainsboro;
                        });
                        panelPresetThemeMenuTitleBG.Invoke((MethodInvoker)delegate
                        {
                            panelPresetThemeMenuTitleBG.BackColor = Color.Gainsboro;
                        });
                    }

                    comboBoxTitlesBackgroundImage.SelectedIndex = (theme.TitlesBackgroundImage);

                    ColorDataFields(theme.DataFields);
                    labelColor = theme.Labels; // (only used for poolranking chart title)
                    ColorLabels(theme.Labels);
                    CustomiseCharts(theme.PriceBlock);
                    ColorFiatConversionText(theme.FiatConversionText);
                    ColorHeadings(theme.Headings);
                    ColorTables(theme.Tables);
                    ColorTableHeadings(theme.TableHeadings);
                    ColorOtherText(theme.OtherText);
                    ColorPriceBlock(theme.PriceBlock);
                    ColorStatusError(theme.StatusErrors);
                    ColorButtons(theme.Buttons);
                    ColorButtonText(theme.ButtonText);
                    ColorLines(theme.Lines);
                    ColorTextBoxes(theme.TextBoxes);
                    ColorProgressBars(theme.ProgressBars);
                    ColorTableBackgrounds(theme.TableBackgrounds);
                    ColorTableTitleBars(theme.TableTitleBars);
                    ColorPanels(theme.Panels);
                    SetButtonAndPanelRadius(theme.BorderRadius);
                    SetOpacity(theme.Opacity);


                    if (theme.HeadingBGDefault == true)
                    {
                        lblTitleBackgroundCustom.Invoke((MethodInvoker)delegate
                        {
                            lblTitleBackgroundCustom.ForeColor = Color.IndianRed;
                            lblTitleBackgroundCustom.Text = "❌";
                        });
                        lblTitleBackgroundNone.Invoke((MethodInvoker)delegate
                        {
                            lblTitleBackgroundNone.ForeColor = Color.IndianRed;
                            lblTitleBackgroundNone.Text = "❌";
                        });
                        lblTitlesBackgroundImage.Invoke((MethodInvoker)delegate
                        {
                            lblTitlesBackgroundImage.ForeColor = Color.Green;
                            lblTitlesBackgroundImage.Text = "✔️";
                        });
                        comboBoxTitlesBackgroundImage.Enabled = true;
                        HeadingBackgroundsToImage();
                    }
                    if (theme.HeadingBGNone == true)
                    {
                        lblTitleBackgroundCustom.Invoke((MethodInvoker)delegate
                        {
                            lblTitleBackgroundCustom.ForeColor = Color.IndianRed;
                            lblTitleBackgroundCustom.Text = "❌";
                        });
                        lblTitleBackgroundNone.Invoke((MethodInvoker)delegate
                        {
                            lblTitleBackgroundNone.ForeColor = Color.Green;
                            lblTitleBackgroundNone.Text = "✔️";
                        });
                        lblTitlesBackgroundImage.Invoke((MethodInvoker)delegate
                        {
                            lblTitlesBackgroundImage.ForeColor = Color.IndianRed;
                            lblTitlesBackgroundImage.Text = "❌";
                        });
                        comboBoxTitlesBackgroundImage.Enabled = false;
                        HeadingBackgroundsToNone();
                    }
                    if (theme.HeadingBGCustom == true)
                    {
                        comboBoxTitlesBackgroundImage.Enabled = false;
                        lblTitleBackgroundCustom.Invoke((MethodInvoker)delegate
                        {
                            lblTitleBackgroundCustom.ForeColor = Color.Green;
                            lblTitleBackgroundCustom.Text = "✔️";
                        });
                        lblTitleBackgroundNone.Invoke((MethodInvoker)delegate
                        {
                            lblTitleBackgroundNone.ForeColor = Color.IndianRed;
                            lblTitleBackgroundNone.Text = "❌";
                        });
                        lblTitlesBackgroundImage.Invoke((MethodInvoker)delegate
                        {
                            lblTitlesBackgroundImage.ForeColor = Color.IndianRed;
                            lblTitlesBackgroundImage.Text = "❌";
                        });
                        titleBackgroundColor = theme.HeadingBackgrounds;
                        HeadingBackgroundsToCustomColor();
                    }
                    if (theme.BackgroundFranklin == true)
                    {
                        lblBackgroundFranklinSelected.Visible = true;
                        lblBackgroundSatsumaSelected.Visible = false;
                        lblBackgroundGenesisSelected.Visible = false;
                        lblBackgroundSymbolSelected.Visible = false;
                        lblBackgroundStackSatsSelected.Visible = false;
                        lblBackgroundHoneyBadgerSelected.Visible = false;
                        lblBackgroundCustomColorSelected.Visible = false;
                        lblBackgroundCustomImageSelected.Visible = false;
                        this.BackgroundImage = Properties.Resources.Franklin;
                        lblThemeImage.Text = "no custom image selected";
                        pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                    }
                    if (theme.BackgroundGenesis == true)
                    {
                        lblBackgroundFranklinSelected.Visible = false;
                        lblBackgroundSatsumaSelected.Visible = false;
                        lblBackgroundHoneyBadgerSelected.Visible = false;
                        lblBackgroundSymbolSelected.Visible = false;
                        lblBackgroundStackSatsSelected.Visible = false;
                        lblBackgroundGenesisSelected.Visible = true;
                        lblBackgroundCustomColorSelected.Visible = false;
                        lblBackgroundCustomImageSelected.Visible = false;
                        this.BackgroundImage = Properties.Resources.Genesis;
                        lblThemeImage.Text = "no custom image selected";
                        pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                    }
                    if (theme.BackgroundSatsuma == true)
                    {
                        lblBackgroundSatsumaSelected.Visible = true;
                        lblBackgroundFranklinSelected.Visible = false;
                        lblBackgroundGenesisSelected.Visible = false;
                        lblBackgroundSymbolSelected.Visible = false;
                        lblBackgroundStackSatsSelected.Visible = false;
                        lblBackgroundHoneyBadgerSelected.Visible = false;
                        lblBackgroundCustomColorSelected.Visible = false;
                        lblBackgroundCustomImageSelected.Visible = false;
                        this.BackgroundImage = Properties.Resources.Satsuma;
                        lblThemeImage.Text = "no custom image selected";
                        pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                    }
                    if (theme.BackgroundHoneyBadger == true)
                    {
                        lblBackgroundSatsumaSelected.Visible = false;
                        lblBackgroundFranklinSelected.Visible = false;
                        lblBackgroundGenesisSelected.Visible = false;
                        lblBackgroundSymbolSelected.Visible = false;
                        lblBackgroundStackSatsSelected.Visible = false;
                        lblBackgroundHoneyBadgerSelected.Visible = true;
                        lblBackgroundCustomColorSelected.Visible = false;
                        lblBackgroundCustomImageSelected.Visible = false;
                        this.BackgroundImage = Properties.Resources.HoneyBadger;
                        lblThemeImage.Text = "no custom image selected";
                        pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                    }
                    if (theme.BackgroundSymbol == true)
                    {
                        lblBackgroundSatsumaSelected.Visible = false;
                        lblBackgroundFranklinSelected.Visible = false;
                        lblBackgroundGenesisSelected.Visible = false;
                        lblBackgroundSymbolSelected.Visible = true;
                        lblBackgroundStackSatsSelected.Visible = false;
                        lblBackgroundHoneyBadgerSelected.Visible = false;
                        lblBackgroundCustomColorSelected.Visible = false;
                        lblBackgroundCustomImageSelected.Visible = false;
                        this.BackgroundImage = Properties.Resources.Symbol;
                        lblThemeImage.Text = "no custom image selected";
                        pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                    }
                    if (theme.BackgroundStackSats == true)
                    {
                        lblBackgroundSatsumaSelected.Visible = false;
                        lblBackgroundFranklinSelected.Visible = false;
                        lblBackgroundGenesisSelected.Visible = false;
                        lblBackgroundSymbolSelected.Visible = false;
                        lblBackgroundStackSatsSelected.Visible = true;
                        lblBackgroundHoneyBadgerSelected.Visible = false;
                        lblBackgroundCustomColorSelected.Visible = false;
                        lblBackgroundCustomImageSelected.Visible = false;
                        this.BackgroundImage = Properties.Resources.StackSats;
                        lblThemeImage.Text = "no custom image selected";
                        pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                    }
                    if (theme.BackgroundCustomColor == true)
                    {
                        lblBackgroundFranklinSelected.Visible = false;
                        lblBackgroundSatsumaSelected.Visible = false;
                        lblBackgroundGenesisSelected.Visible = false;
                        lblBackgroundSymbolSelected.Visible = false;
                        lblBackgroundStackSatsSelected.Visible = false;
                        lblBackgroundHoneyBadgerSelected.Visible = false;
                        lblBackgroundCustomColorSelected.Visible = true;
                        lblBackgroundCustomImageSelected.Visible = false;
                        this.BackgroundImage = null;
                        this.BackColor = theme.WindowBackground;
                        lblThemeImage.Text = "no custom image selected";
                        pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                    }
                    if (theme.BackgroundCustomImage == true)
                    {
                        lblBackgroundFranklinSelected.Visible = false;
                        lblBackgroundSatsumaSelected.Visible = false;
                        lblBackgroundGenesisSelected.Visible = false;
                        lblBackgroundSymbolSelected.Visible = false;
                        lblBackgroundStackSatsSelected.Visible = false;
                        lblBackgroundHoneyBadgerSelected.Visible = false;
                        lblBackgroundCustomColorSelected.Visible = false;
                        lblBackgroundCustomImageSelected.Visible = true;
                        lblThemeImage.Text = theme.WindowImage;
                        this.BackgroundImage = System.Drawing.Image.FromFile(theme.WindowImage);
                    }
                    if (theme.OrangeInfinity == 1)
                    {
                        lblInfinity1.Invoke((MethodInvoker)delegate
                        {
                            lblInfinity1.ForeColor = Color.Green;
                            lblInfinity1.Text = "✔️";
                        });
                        lblInfinity2.Invoke((MethodInvoker)delegate
                        {
                            lblInfinity2.ForeColor = Color.IndianRed;
                            lblInfinity2.Text = "❌";
                        });
                        lblInfinity3.Invoke((MethodInvoker)delegate
                        {
                            lblInfinity3.ForeColor = Color.IndianRed;
                            lblInfinity3.Text = "❌";
                        });
                        pictureBoxChartLoadingAnimation.Image = Properties.Resources.InfinityTrans;
                    }
                    if (theme.OrangeInfinity == 2)
                    {
                        lblInfinity1.Invoke((MethodInvoker)delegate
                        {
                            lblInfinity1.ForeColor = Color.IndianRed;
                            lblInfinity1.Text = "❌";
                        });
                        lblInfinity2.Invoke((MethodInvoker)delegate
                        {
                            lblInfinity2.ForeColor = Color.Green;
                            lblInfinity2.Text = "✔️";
                        });
                        lblInfinity3.Invoke((MethodInvoker)delegate
                        {
                            lblInfinity3.ForeColor = Color.IndianRed;
                            lblInfinity3.Text = "❌";
                        });
                        pictureBoxChartLoadingAnimation.Image = Properties.Resources.OrangeInfinity;
                    }
                    if (theme.OrangeInfinity == 3)
                    {
                        lblInfinity1.Invoke((MethodInvoker)delegate
                        {
                            lblInfinity1.ForeColor = Color.IndianRed;
                            lblInfinity1.Text = "❌";
                        });
                        lblInfinity2.Invoke((MethodInvoker)delegate
                        {
                            lblInfinity2.ForeColor = Color.IndianRed;
                            lblInfinity2.Text = "❌";
                        });
                        lblInfinity3.Invoke((MethodInvoker)delegate
                        {
                            lblInfinity3.ForeColor = Color.Green;
                            lblInfinity3.Text = "✔️";
                        });
                        pictureBoxChartLoadingAnimation.Image = Properties.Resources.infinityspectrum;
                    }

                    if (theme.BackgroundCustomImage == true && theme.WindowImage.Length > 0)
                    {
                        lblThemeImage.Text = theme.WindowImage;
                        pictureBoxCustomImage.Image = System.Drawing.Image.FromFile(theme.WindowImage);
                    }
                    else
                    {
                        lblThemeImage.Text = "no custom image selected";
                        pictureBoxCustomImage.Image = Properties.Resources.CustomImage;
                    }

                    ReloadScreensWithListviews();
                    LoadAndStyleDirectoryBrowser();
                    formsPlot1.Render();
                    if (theme.ShowTime == false)
                    {
                        lblShowClock.Invoke((MethodInvoker)delegate
                        {
                            lblShowClock.ForeColor = Color.IndianRed;
                            lblShowClock.Text = "❌";
                        });
                        lblTime.Visible = false;
                    }
                    else
                    {
                        lblShowClock.Invoke((MethodInvoker)delegate
                        {
                            lblShowClock.ForeColor = Color.Green;
                            lblShowClock.Text = "✔️";
                        });
                        if (theme.BackgroundGenesis == true)
                        {
                            lblTime.Font = new Font(lblTime.Font.FontFamily, (int)(14 * UIScale), lblTime.Font.Style);
                            lblTime.Location = new Point((int)(840 * UIScale), (int)(42 * UIScale));
                            lblTime.Visible = true;
                            lblTime.BringToFront();
                        }
                    }

                }
                catch (Exception ex)
                {
                    HandleException(ex, "RestoreTheme");
                }

                //wait 2 secs to give time for theme to be applied
                await Wait2Secs();
                //close the loading screen
                loadingTheme.Close();


            }
            catch (Exception ex)
            {
                HandleException(ex, "RestoreTheme");
            }
        }

        private async Task Wait2Secs()
        {
            if (firstTimeLoadingScreen)
            {
                firstTimeLoadingScreen = false;
                await Task.Delay(8000);
            }
            else
            {
                await Task.Delay(2500);
            }
        }

        #endregion
        #region apply changes to lists of controls
        private void SetButtonAndPanelRadius(int radius)
        {
            try
            {
                // main menu
                RJButton[] mainMenuButtonBordersToColor = { btnMinimise, btnShowGlobalSearch, btnMoveWindow, btnExit, btnHelp, btnAddToBookmarks, btnUniversalSearch, btnShowGlobalSearch, btnHideErrorMessage };
                foreach (RJButton button in mainMenuButtonBordersToColor)
                {
                    button.BorderRadius = (int)(radius * UIScale);
                }

                // block
                RJButton[] blockButtonBordersToColor = { btnLookUpBlock, btnPreviousBlock, btnNextBlock, btnPreviousBlockTransactions, btnNextBlockTransactions };
                foreach (RJButton button in blockButtonBordersToColor)
                {
                    button.BorderRadius = radius;
                }
                btnNumericUpDownSubmittedBlockNumberUp.BorderRadius = 0;
                btnNumericUpDownSubmittedBlockNumberDown.BorderRadius = 0;

                // blocks
                RJButton[] blocksButtonBordersToColor = { btnLookUpBlockList, btnNewer15Blocks, btnOlder15Blocks };
                foreach (RJButton button in blocksButtonBordersToColor)
                {
                    button.BorderRadius = (int)(radius * UIScale);
                }
                btnNumericUpDownBlockHeightToStartListFromUp.BorderRadius = 0;
                btnNumericUpDownBlockHeightToStartListFromDown.BorderRadius = 0;

                btnNonZeroBalancesUp.BorderRadius = 0;
                btnNonZeroBalancesDown.BorderRadius = 0;
                btnDerivationPathsUp.BorderRadius = 0;
                btnDerivationPathsDown.BorderRadius = 0;
                btnOpacityUp.BorderRadius = 0;
                btnOpacityDown.BorderRadius = 0;
                btnDataRefreshPeriodUp.BorderRadius = 0;
                btnDataRefreshPeriodDown.BorderRadius = 0;
                btnBiggerScale.BorderRadius = 0;
                btnSmallerScale.BorderRadius = 0;
                btnThemeMenu.BorderRadius = 0;
                btnCurrency.BorderRadius = 0;
                btnCopyErrorMessage.BorderRadius = 0;

                // address
                RJButton[] addressButtonBordersToColor = { btnShowAllTX, btnShowConfirmedTX, btnShowUnconfirmedTX, btnFirstAddressTransaction, btnNextAddressTransactions };
                foreach (RJButton button in addressButtonBordersToColor)
                {
                    button.BorderRadius = (int)(radius * UIScale);
                }

                // appearance & settings
                RJButton[] appearanceButtonBordersToColor = { btnResetAll, button1, button2, btnLoadTheme, btnSaveTheme, btnDeleteTheme, btnSquareCorners, btnPartialCorners, btnRoundCorners, btnColorDataFields, btnColorLabels, btnColorHeadings, btnColorTableText, btnColorFiatConversionText, btnListViewHeadingColor, btnColorOtherText, btnColorPriceBlock, btnColorStatusError, btnColorButtonText, btnColorButtons, btnColorLines, btnColorTextBox, btnColorPanels, btnColorProgressBars, btnColorTableTitleBar, btnColorTableBackground, btnColorTitleBackgrounds, btnPreviewAnimations };
                foreach (RJButton button in appearanceButtonBordersToColor)
                {
                    button.BorderRadius = (int)(radius * UIScale);
                }

                if (radius == 1)
                {
                    btnSquareCorners.Enabled = false;
                    btnPartialCorners.Enabled = true;
                    btnRoundCorners.Enabled = true;
                }
                else
                {
                    if (radius == 6)
                    {
                        btnSquareCorners.Enabled = true;
                        btnPartialCorners.Enabled = false;
                        btnRoundCorners.Enabled = true;
                    }
                    else
                    {
                        if (radius == 12)
                        {
                            btnSquareCorners.Enabled = true;
                            btnPartialCorners.Enabled = true;
                            btnRoundCorners.Enabled = false;
                        }
                    }
                }

                // chart
                RJButton[] chartButtonBordersToColor = { btnChartFeeRates, btnChartBlockFees, btnChartReward, btnChartBlockSize, btnChartHashrate, btnChartDifficulty, btnChartCirculation, btnChartUniqueAddresses, btnChartUTXO, btnChartPoolsRanking, btnChartNodesByNetwork, btnChartNodesByCountry, btnChartLightningCapacity, btnChartLightningChannels, btnChartPrice, btnChartMarketCap, btnSaveChart, btnChartPeriod24h, btnChartPeriod3d, btnChartPeriod1w, btnChartPeriod1m, btnChartPeriod3m, btnChartPeriod6m, btnChartPeriod1y, btnChartPeriod2y, btnChartPeriod3y, btnChartPeriodAll, btnChartDifficultyLog, btnChartDifficultyLinear, btnHashrateScaleLog, btnHashrateScaleLinear, btnChartMarketCapScaleLog, btnChartMarketCapScaleLinear, btnPriceChartScaleLog, btnPriceChartScaleLinear, btnChartUTXOScaleLog, btnChartUTXOScaleLinear, btnChartAddressScaleLog, btnChartAddressScaleLinear };
                foreach (RJButton button in chartButtonBordersToColor)
                {
                    button.BorderRadius = (int)(radius * UIScale);
                }

                // bookmarks
                RJButton[] bookmarkButtonBordersToColor = { btnBookmarkUnlock, btnDecryptBookmark, btnDeleteBookmark, btnViewBookmark, btnCommitToBookmarks, btnCancelAddToBookmarks };
                foreach (RJButton button in bookmarkButtonBordersToColor)
                {
                    button.BorderRadius = (int)(radius * UIScale);
                }

                // directory
                RJButton[] directoryButtonBordersToColor = { btnDirectoryScrollDown, btnDirectoryScrollUp };
                foreach (RJButton button in directoryButtonBordersToColor)
                {
                    button.BorderRadius = (int)(radius * UIScale);
                }

                //dca calculator
                btnCalculateDCA.BorderRadius = (int)(radius * UIScale);
                // force refresh of panels
                PanelsRepaint();
            }
            catch (Exception ex)
            {
                HandleException(ex, "SetButtonAndPanelRadius");
            }
        }

        private void SetOpacity(decimal opacity)
        {
            try
            {
                if (opacity < 1 || opacity > 100)
                {
                    opacity = 100;
                }
                numericUpDownOpacity.Value = opacity;
                this.Opacity = Convert.ToDouble(numericUpDownOpacity.Value / 100);
            }
            catch (Exception ex)
            {
                HandleException(ex, "SetOpacity");
            }
        }

        private void PanelsRepaint()
        {
            try
            {
                #region rounded panels
                panel92.Invalidate();
                panel32.Invalidate();
                panel74.Invalidate();
                panel76.Invalidate();
                panel77.Invalidate();
                panel99.Invalidate();
                panel84.Invalidate();
                panel88.Invalidate();
                panel89.Invalidate();
                panel90.Invalidate();
                panel86.Invalidate();
                panel87.Invalidate();
                panel103.Invalidate();
                panel46.Invalidate();
                panel51.Invalidate();
                panel91.Invalidate();
                panel70.Invalidate();
                panel71.Invalidate();
                panel16.Invalidate();
                panel21.Invalidate();
                panel85.Invalidate();
                panel53.Invalidate();
                panel96.Invalidate();
                panel106.Invalidate();
                panel107.Invalidate();
                panelAddToBookmarks.Invalidate();
                panelAddToBookmarksBorder.Invalidate();
                panelOwnNodeAddressTXInfo.Invalidate();
                panelOwnNodeBlockTXInfo.Invalidate();
                panelTransactionMiddle.Invalidate();
                panelErrorMessage.Invalidate();
                panelDCAMessages.Invalidate();
                panelDCASummary.Invalidate();
                panel117.Invalidate();
                panel119.Invalidate();
                panelPriceConvert.Invalidate();
                #endregion
                #region panels (textbox containers)
                panelThemeNameContainer.Invalidate();
                panelOptionalNotesContainer.Invalidate();
                panelEncryptionKeyContainer.Invalidate();
                panelSubmittedAddressContainer.Invalidate();
                panelBlockHeightToStartFromContainer.Invalidate();
                panelTransactionIDContainer.Invalidate();
                panelSubmittedXpubContainer.Invalidate();
                panelXpubScreenOwnNodeURLContainer.Invalidate();
                panelBookmarkKeyContainer.Invalidate();
                panelConvertBTCToFiatContainer.Invalidate();
                panelConvertUSDToBTCContainer.Invalidate();
                panelConvertEURToBTCContainer.Invalidate();
                panelConvertGBPToBTCContainer.Invalidate();
                panelConvertXAUToBTCContainer.Invalidate();
                panelSettingsOwnNodeURLContainer.Invalidate();
                panelSettingsUIScaleContainer.Invalidate();
                panelAppearanceTextbox1Container.Invalidate();
                panelComboBoxStartupScreenContainer.Invalidate();
                panelCustomizeThemeListContainer.Invalidate();
                panelHeadingBackgroundSelect.Invalidate();
                panelSelectBlockNumberContainer.Invalidate();
                panelUniversalSearchContainer.Invalidate();
                panel75.Invalidate();
                panel95.Invalidate();
                panel93.Invalidate();
                panel98.Invalidate();
                panel111.Invalidate();
                panel113.Invalidate();
                panel114.Invalidate();
                panel115.Invalidate();
                #endregion
                #region panels (heading containers)
                panel1.Invalidate();
                panel2.Invalidate();
                panel3.Invalidate();
                panel4.Invalidate();
                panel5.Invalidate();
                panel6.Invalidate();
                panel7.Invalidate();
                panel8.Invalidate();
                panel9.Invalidate();
                panel10.Invalidate();
                panel11.Invalidate();
                panel12.Invalidate();
                panel20.Invalidate();
                panel23.Invalidate();
                panel26.Invalidate();
                panel29.Invalidate();
                panel27.Invalidate();
                panel28.Invalidate();
                panel31.Invalidate();
                panel38.Invalidate();
                panel39.Invalidate();
                panel40.Invalidate();
                panel41.Invalidate();
                panel42.Invalidate();
                panel43.Invalidate();
                panel44.Invalidate();
                panel45.Invalidate();
                panel54.Invalidate();
                panel57.Invalidate();
                panel78.Invalidate();
                panel79.Invalidate();
                panel80.Invalidate();
                panel81.Invalidate();
                panel82.Invalidate();
                panel83.Invalidate();
                panel94.Invalidate();
                panel105.Invalidate();
                panel22.Invalidate();
                panel34.Invalidate();
                panel37.Invalidate();
                panel97.Invalidate();
                panel98.Invalidate();
                panel108.Invalidate();
                panel109.Invalidate();
                #endregion
            }
            catch (Exception ex)
            {
                HandleException(ex, "PanelsRepaint");
            }
        }

        private void CustomiseCharts(Color thisColor)
        {
            try
            {
                formsPlot1.Plot.Margins(x: .1, y: .1);
                formsPlot1.Plot.Style(ScottPlot.Style.Black);
                formsPlot1.RightClicked -= formsPlot1.DefaultRightClickEvent; // disable default right-click event
                formsPlot1.Configuration.DoubleClickBenchmark = false;
                formsPlot1.Plot.Palette = ScottPlot.Palette.Amber;
                formsPlot1.Plot.YAxis.AxisLabel.IsVisible = false;

                formsPlot2.Plot.Margins(x: .1, y: .1);
                formsPlot2.Plot.Style(ScottPlot.Style.Black);
                formsPlot2.RightClicked -= formsPlot2.DefaultRightClickEvent; // disable default right-click event
                formsPlot2.Configuration.DoubleClickBenchmark = false;
                formsPlot2.Configuration.Pan = false;
                formsPlot2.Configuration.RightClickDragZoom = false;
                formsPlot2.Configuration.LeftClickDragPan = false;
                formsPlot2.Configuration.Zoom = false;

                formsPlot3.Plot.Margins(x: .1, y: .1);
                formsPlot3.Plot.Style(ScottPlot.Style.Black);
                formsPlot3.RightClicked -= formsPlot3.DefaultRightClickEvent; // disable default right-click event
                formsPlot3.Configuration.DoubleClickBenchmark = false;
                formsPlot3.Plot.Palette = ScottPlot.Palette.Amber;
                formsPlot3.Plot.YAxis.AxisLabel.IsVisible = false;

                formsPlotDCA.Plot.Margins(x: .1, y: .1);
                formsPlotDCA.Plot.Style(ScottPlot.Style.Black);
                formsPlotDCA.RightClicked -= formsPlot1.DefaultRightClickEvent; // disable default right-click event
                formsPlotDCA.Configuration.DoubleClickBenchmark = false;
                formsPlotDCA.Plot.Palette = ScottPlot.Palette.Amber;
                formsPlotDCA.Plot.YAxis.AxisLabel.IsVisible = false;

                formsPlot1.Plot.Style(
                    figureBackground: Color.Transparent,
                    dataBackground: chartsBackgroundColor,
                    titleLabel: thisColor,
                    axisLabel: label148.ForeColor); // using any random label to get the color from
                formsPlot2.Plot.Style(
                    figureBackground: Color.Transparent,
                    dataBackground: chartsBackgroundColor,
                    titleLabel: thisColor,
                    axisLabel: label148.ForeColor); // using any random label to get the color from
                formsPlot3.Plot.Style(
                    figureBackground: Color.Transparent,
                    dataBackground: chartsBackgroundColor,
                    titleLabel: thisColor,
                    axisLabel: label148.ForeColor); // using any random label to get the color from
                formsPlotDCA.Plot.Style(
                    figureBackground: Color.Transparent,
                    dataBackground: chartsBackgroundColor,
                    titleLabel: thisColor,
                    axisLabel: label148.ForeColor); // using any random label to get the color from

                panelPriceScaleButtons.BackColor = chartsBackgroundColor;
                panelChartMarketCapScaleButtons.BackColor = chartsBackgroundColor;
                panelChartUTXOScaleButtons.BackColor = chartsBackgroundColor;
                panelChartDifficultyScaleButtons.BackColor = chartsBackgroundColor;
                panelHashrateScaleButtons.BackColor = chartsBackgroundColor;
                panelUniqueAddressesScaleButtons.BackColor = chartsBackgroundColor;
//              panelPriceConvert.BackColor = chartsBackgroundColor;
                panelCurrencyMenuFiller.BackColor = chartsBackgroundColor;
                panelThemeMenuFiller.BackColor = chartsBackgroundColor;
                Color newGridlineColor = Color.FromArgb(40, 40, 40);
                if (lblChartsLightBackground.Text == "✔️")
                {
                    newGridlineColor = Color.FromArgb(220, 220, 220);
                }
                // Update the Grid color
                formsPlot1.Plot.Style(grid: newGridlineColor);
                formsPlot1.Refresh();
                formsPlot2.Refresh();
                formsPlot3.Refresh();
                formsPlotDCA.Refresh();
            }
            catch (Exception ex)
            {
                HandleException(ex, "CustomiseCharts");
            }
        }

        private void ColorDataFields(Color thisColor) // and numericupdown button text
        {
            try
            {
                //header
                Control[] listHeaderDataFieldsToColor = { lblHeaderMarketCap, lblHeaderMoscowTime, lblHeaderTransactions, lblHeaderBlockSize, lblHeaderfeesHighPriority, lblHeaderFeesMediumPriority, lblHeaderFeesLowPriority, lblHeaderFeesNoPriority, lblHeaderHashrate };
                foreach (Control control in listHeaderDataFieldsToColor)
                {
                    control.ForeColor = thisColor;
                }
                //bitcoindashboard
                Control[] listBitcoinDashboardDataFieldsToColor = { lblPriceUSD, lblMoscowTime, lblMarketCapUSD, lblBTCInCirc, lblHodlingAddresses, lblAvgNoTransactions, lblBlocksIn24Hours, lbl24HourTransCount, lbl24HourBTCSent, lblTXInMempool, lblNextBlockMinMaxFee, lblNextBlockTotalFees, lblTransInNextBlock, lblHashesToSolve, lblAvgTimeBetweenBlocks, lblEstHashrate, lblNextDiffAdjBlock, lblDifficultyAdjEst, lblBlockReward, lblProgressNextDiffAdjPercentage, lblBlocksUntilDiffAdj, lblEstDiffAdjDate, lblNodes, lblBlockchainSize, lblProgressToHalving, lblEstimatedHalvingDate, lblHalvingSecondsRemaining, lblBlockRewardAfterHalving, lblBTCToBeIssued, lblPercentIssued, lblDifficultyEpoch, lblNetworkAge, lblSubsidyEpoch };
                foreach (Control control in listBitcoinDashboardDataFieldsToColor)
                {
                    control.ForeColor = thisColor;
                }
                //lightningdashboard
                Control[] listLightningDashboardDataFieldsToColor = { lblTotalCapacity, lblClearnetCapacity, lblTorCapacity, lblUnknownCapacity, lblNodeCount, lblTorNodes, lblClearnetNodes, lblClearnetTorNodes, lblUnannouncedNodes, lblChannelCount, lblAverageCapacity, lblAverageFeeRate, lblAverageBaseFeeMtokens, lblMedCapacity, lblMedFeeRate, lblMedBaseFeeTokens, aliasLabel1, aliasLabel2, aliasLabel3, aliasLabel4, aliasLabel5, aliasLabel6, aliasLabel7, aliasLabel8, aliasLabel9, aliasLabel10, capacityLabel1, capacityLabel2, capacityLabel3, capacityLabel4, capacityLabel5, capacityLabel6, capacityLabel7, capacityLabel8, capacityLabel9, capacityLabel10, aliasConnLabel1, aliasConnLabel2, aliasConnLabel3, aliasConnLabel4, aliasConnLabel5, aliasConnLabel6, aliasConnLabel7, aliasConnLabel8, aliasConnLabel9, aliasConnLabel10, channelLabel1, channelLabel2, channelLabel3, channelLabel4, channelLabel5, channelLabel6, channelLabel7, channelLabel8, channelLabel9, channelLabel10 };
                foreach (Control control in listLightningDashboardDataFieldsToColor)
                {
                    control.ForeColor = thisColor;
                }
                //address
                Control[] listAddressDataFieldsToColor = { lblAddressType, lblAddressConfirmedUnspent, lblAddressConfirmedUnspentOutputs, lblAddressConfirmedTransactionCount, lblAddressConfirmedReceived, lblAddressConfirmedReceivedOutputs, lblAddressConfirmedSpent, lblAddressConfirmedSpentOutputs };
                foreach (Control control in listAddressDataFieldsToColor)
                {
                    control.ForeColor = thisColor;
                }
                //block
                Control[] listBlockDataFieldsToColor = { btnNumericUpDownSubmittedBlockNumberUp, btnNumericUpDownSubmittedBlockNumberDown, btnNextBlock, btnPreviousBlock, btnOpacityUp, btnOpacityDown, lblBlockHash, lblBlockTime, lblNumberOfTXInBlock, lblSizeOfBlock, lblBlockWeight, lblTotalFees, lblReward, lblBlockFeeRangeAndMedianFee, lblBlockAverageFee, lblNonce, lblMiner, lblBlockBlockHeight };
                foreach (Control control in listBlockDataFieldsToColor)
                {
                    control.ForeColor = thisColor;
                }
                btnNumericUpDownSubmittedBlockNumberDown.ForeColor = thisColor;
                btnNumericUpDownSubmittedBlockNumberUp.ForeColor = thisColor;
                //blocklist
                Control[] listBlocklistDataFieldsToColor = { lblBlockListTXInMempool, lblBlockListTXInNextBlock, lblBlockListMinMaxInFeeNextBlock, lblBlockListTotalFeesInNextBlock, lblBlockListAttemptsToSolveBlock, lblBlockListNextDiffAdjBlock, lblBlockListAvgTimeBetweenBlocks, lblBlockListNextDifficultyAdjustment, lblBlockListProgressNextDiffAdjPercentage, lblBlockListEstHashRate, lblBlockListBlockReward, lblBlockListHalvingBlockAndRemaining, lblBlockListBlockHash, lblBlockListBlockTime, lblBlockListBlockSize, lblBlockListBlockWeight, lblBlockListNonce, lblBlockListMiner, lblBlockListTransactionCount, lblBlockListVersion, lblBlockListTotalFees, lblBlockListReward, lblBlockListBlockFeeRangeAndMedianFee, lblBlockListAverageFee, lblBlockListTotalInputs, lblBlockListTotalOutputs, lblBlockListAverageTransactionSize };
                foreach (Control control in listBlocklistDataFieldsToColor)
                {
                    control.ForeColor = thisColor;
                }
                btnNumericUpDownBlockHeightToStartListFromUp.ForeColor = thisColor;
                btnNumericUpDownBlockHeightToStartListFromDown.ForeColor = thisColor;
                //transaction
                Control[] listTransactionDataFieldsToColor = { lblTransactionBlockHeight, lblTransactionBlockTime, lblTransactionConfirmations, lblTransactionLockTime, lblTransactionVersion, lblTransactionInputCount, lblCoinbase, lblTransactionFee, lblTransactionOutputCount, lblTotalInputValue, lblTotalOutputValue, lblTransactionSize, lblTransactionWeight };
                foreach (Control control in listTransactionDataFieldsToColor)
                {
                    control.ForeColor = thisColor;
                }
                //xpub
                Control[] listXpubDataFieldsToColor = { lblCheckEachAddressTypeCount, lblCheckAllAddressTypesCount, lblSegwitUsedAddresses, lblSegwitSummary, lblLegacyUsedAddresses, lblLegacySummary, lblSegwitP2SHUsedAddresses, lblSegwitP2SHSummary, lblP2SHUsedAddresses, lblP2SHSummary, lblXpubConfirmedReceived, lblXpubConfirmedSpent, lblXpubConfirmedUnspent };
                foreach (Control control in listXpubDataFieldsToColor)
                {
                    control.ForeColor = thisColor;
                }
                btnNonZeroBalancesUp.ForeColor = thisColor;
                btnNonZeroBalancesDown.ForeColor = thisColor;
                btnDerivationPathsDown.ForeColor = thisColor;
                btnDerivationPathsUp.ForeColor = thisColor;

                //bookmarks
                Control[] listBookmarksDataFieldsToColor = { lblBookmarkTotalCount, lblBookmarkAddressCount, lblBookmarkBlocksCount, lblBookmarkTransactionsCount, lblBookmarkXpubsCount, lblBookmarkDataInFull, lblBookmarkNoteInFull, lblBookmarkProposalData };
                foreach (Control control in listBookmarksDataFieldsToColor)
                {
                    control.ForeColor = thisColor;
                }
                //settings
                Control[] listSettingsDataFieldsToColor = { label154 };
                foreach (Control control in listSettingsDataFieldsToColor)
                {
                    control.ForeColor = thisColor;
                }
                btnDataRefreshPeriodDown.ForeColor = thisColor;
                btnDataRefreshPeriodUp.ForeColor = thisColor;
                btnBiggerScale.ForeColor = thisColor;
                btnSmallerScale.ForeColor = thisColor;

                //charts
                Control[] listChartsDataFieldsToColor = { labelPCUSD1, labelPCUSD2, labelPCUSD3, labelPCUSD4, labelPCUSD5, labelPCUSD6, labelPCUSD7, labelPCUSD8, labelPCUSD9, labelPCUSD10, labelPCUSD11, labelPCUSD12, labelPCUSD13, labelPCUSD14, labelPCUSD15, labelPCUSD16, labelPCUSD17, labelPCUSDcustom, labelPCEUR1, labelPCEUR2, labelPCEUR3, labelPCEUR4, labelPCEUR5, labelPCEUR6, labelPCEUR7, labelPCEUR8, labelPCEUR9, labelPCEUR10, labelPCEUR11, labelPCEUR12, labelPCEUR13, labelPCEUR14, labelPCEUR15, labelPCEUR16, labelPCEUR17, labelPCEURcustom, labelPCGBP1, labelPCGBP2, labelPCGBP3, labelPCGBP4, labelPCGBP5, labelPCGBP6, labelPCGBP7, labelPCGBP8, labelPCGBP9, labelPCGBP10, labelPCGBP11, labelPCGBP12, labelPCGBP13, labelPCGBP14, labelPCGBP15, labelPCGBP16, labelPCGBP17, labelPCGBPcustom, labelPCXAU1, labelPCXAU2, labelPCXAU3, labelPCXAU4, labelPCXAU5, labelPCXAU6, labelPCXAU7, labelPCXAU8, labelPCXAU9, labelPCXAU10, labelPCXAU11, labelPCXAU12, labelPCXAU13, labelPCXAU14, labelPCXAU15, labelPCXAU16, labelPCXAU17, labelPCXAUcustom, lblCalculatedUSDFromBTCAmount, lblCalculatedEURFromBTCAmount, lblCalculatedGBPFromBTCAmount, lblCalculatedXAUFromBTCAmount };
                foreach (Control control in listChartsDataFieldsToColor)
                {
                    control.ForeColor = thisColor;
                }
                //dca calculator
                Control[] listDCADataFieldsToColor = { lblDCAAmountSpent, lblDCABTCPurchased, lblDCABTCPurchases, lblDCACurrentValue, lblDCAPercentageChange };
                foreach (Control control in listDCADataFieldsToColor)
                {
                    control.ForeColor = thisColor;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorDataFields");
            }
        }

        private void ColorLabels(Color thiscolor)
        {
            try
            {
                //header
                Control[] listHeaderLabelsToColor = { label77, lblHeaderMoscowTimeLabel, label148, label149, label15, label25, label28, label29, lblSatsumaTitle, lblHeaderBlockAge, lblHeaderPriceChart, lblHeaderMarketCapChart, lblHeaderConverterChart, lblHeaderBlockSizeChart, lblHeaderHashRateChart, lblHeaderFeeRatesChart };
                foreach (Control control in listHeaderLabelsToColor)
                {
                    control.ForeColor = thiscolor;
                }
                //settings and appearance
                Control[] listSettingsLabelsToColor = { label302, label171, label291, label199, label298, label204, label289, lblThemeImage, label287, label290, label282, label243, label246, label242, label239, label240, label201, label198, lblSettingsOwnNodeStatus, lblSettingsSelectedNodeStatus, label193, label194, label196, label73, label161, label168, label157, label172, label174, label4, lblWhatever, label152, label171, label167, label178, label177, label179, label180, label188, label187, label191, label197, lblScaleAmount };
                foreach (Control control in listSettingsLabelsToColor)
                {
                    control.ForeColor = thiscolor;
                }
                //bitcoindashboard
                Control[] listBitcoinDashboardLabelsToColor = { lblPoolRankingChart, lblDifficultyChart, lblHashrateChart, lblFeeRangeChart, lblBlockFeesChart, lblUniqueAddressesChart, lblChartCirculation, lblMarketCapChart, lblConverterChart, label296, label297, label301, label292, label294, lblPriceLabel, lblMoscowTimeLabel, lblMarketCapLabel, label7, label30, label14, label31, label10, label12, label11, label21, label20, label17, label8, label27, label13, label9, label3, label2, label23, label134, label137, label32, label33, label57, label19, label85, lblPriceChart };
                foreach (Control control in listBitcoinDashboardLabelsToColor)
                {
                    control.ForeColor = thiscolor;
                }
                //lightningdashboard
                Control[] listLightningDashboardLabelsToColor = { lblLightningChannelsChart, lblLightningNodesChart, lblLightningCapacityChart, label38, label47, label48, label49, label40, label36, label35, label45, label46, label34, label37, label39, label41, label42, label44, label43, label51, label52, label56, label55 };
                foreach (Control control in listLightningDashboardLabelsToColor)
                {
                    control.ForeColor = thiscolor;
                }
                //address
                Control[] listAddressLabelsToColor = { label58, lblAddressTXPositionInList };
                foreach (Control control in listAddressLabelsToColor)
                {
                    control.ForeColor = thiscolor;
                }
                //block
                Control[] listBlockLabelsToColor = { label64, lblBlockTXPositionInList, label145, label69, label68, label74, label72, label66, label70, label62, label65, label71, lblBlockScreenChartBlockSize, lblBlockFeeChart, lblBlockScreenChartReward, lblBlockScreenChartFeeRange, lblBlockScreenPoolRankingChart };
                foreach (Control control in listBlockLabelsToColor)
                {
                    control.ForeColor = thiscolor;
                }
                //transaction
                Control[] listTransactionLabelsToColor = { label136, label113, label126, label125, label128, label98, label104, label130, label132 };
                foreach (Control control in listTransactionLabelsToColor)
                {
                    control.ForeColor = thiscolor;
                }
                //blocklist
                Control[] listBlockListLabelsToColor = { label87, label100, label106, label108, label110, label112, label115, label116, label16, label118, label120, label122, lblBlockListPositionInList, label109, label90, label91, label105, label103, label24, label95, label99, label96, label88, label101, label93, label97, label89, label94, label92, lblBlockListFeeRangeChart, lblBlockListRewardChart, lblBlockListFeeChart, lblBlockListPoolRanking, lblBlockListBlockSizeChart, lblBlockListHashrateChart, lblBlockListFeeRangeChart2, lblBlockListFeeChart2, lblBlockListDifficultyChart };
                foreach (Control control in listBlockListLabelsToColor)
                {
                    control.ForeColor = thiscolor;
                }
                //xpub
                Control[] listXpubLabelsToColor = { label114, label238, label139, label146, lblXpubScreenOwnNodeStatus, label140, label141, label123, label111, label119, label135, label133, label129, label121, lblXpubStatus };
                foreach (Control control in listXpubLabelsToColor)
                {
                    control.ForeColor = thiscolor;
                }
                //bookmarks
                Control[] listBookmarksLabelsToColor = { label144, label153, label151, label147, label142, lblSelectedBookmarkType, label138, lblBookmarkProposalType, label284, label285 };
                foreach (Control control in listBookmarksLabelsToColor)
                {
                    control.ForeColor = thiscolor;
                }
                //charts
                Control[] listChartsLabelsToColor = { label233, label232, label262, label263, label264, label265, label266, label245, label241, label189, label256, label255, label254, label253, label252, label251, label250, label249, label247, label261, label260, label259, label258, label257, label277, label278, label279, label280, label267, label270, label269, label268, label273, label274, label275, label276 };
                foreach (Control control in listChartsLabelsToColor)
                {
                    control.ForeColor = thiscolor;
                }
                //directory
                Control[] listDirectoryLabelsToColor = { label286 };
                foreach (Control control in listDirectoryLabelsToColor)
                {
                    control.ForeColor = thiscolor;
                }
                //dca calculator
                Control[] listDCALabelsToColor = { label304, label305, label306, label307, lblDCAMessage, label202, label203, label205, label206, label207, labelDCADefinition };
                foreach (Control control in listDCALabelsToColor)
                {
                    control.ForeColor = thiscolor;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorLabels");
            }
        }
        
        private void ColorFiatConversionText(Color thiscolor)
        {
            try
            {
                Control[] listFiatConversionsToColor = { label288, lblNextBlockTotalFeesFiat, lblBlockListTotalFeesInNextBlockFiat, lblBlockRewardFiat, lblBlockRewardAfterHalvingFiat, lblBlockListBlockRewardFiat, lbl24HourBTCSentFiat, lblAddressConfirmedReceivedFiat, lblAddressConfirmedSpentFiat, lblAddressConfirmedUnspentFiat, lblTotalFeesFiat, lblRewardFiat, lblTransactionFeeFiat, lblTotalInputValueFiat, lblTotalOutputValueFiat, lblXpubConfirmedReceivedFiat, lblXpubConfirmedSpentFiat, lblXpubConfirmedUnspentFiat };
                foreach (Control control in listFiatConversionsToColor)
                {
                    control.ForeColor = thiscolor;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorFiatConversionText");
            }
        }

        private void ColorHeadings(Color thiscolor)
        {
            try
            {
                //header
                Control[] listHeaderHeadingsToColor = { label26, label22, label1, label150, lblCurrentVersion, lblNowViewing };
                foreach (Control control in listHeaderHeadingsToColor)
                {
                    control.ForeColor = thiscolor;
                }
                //settings & appearance
                Control[] listSettingsHeadingsToColor = { label300, label200, label293, label295, label283, label248, label162, label163, label155, label5, label156, label166, label181, label182, label183, label184, label192, label195, label234, label237, label244, label169 };
                foreach (Control control in listSettingsHeadingsToColor)
                {
                    control.ForeColor = thiscolor;
                }
                //bitcoindashboard
                Control[] listBitcoinDashboardHeadingsToColor = { label79, label84, label80, label81, label83, label299, label86, label82 };
                foreach (Control control in listBitcoinDashboardHeadingsToColor)
                {
                    control.ForeColor = thiscolor;
                }
                //lightningdashboard
                Control[] listLightningDashboardHeadingsToColor = { label76, label78, label75, label53, label54 };
                foreach (Control control in listLightningDashboardHeadingsToColor)
                {
                    control.ForeColor = thiscolor;
                }
                //address
                Control[] listAddressHeadingsToColor = { label61, label59, label67, label63 };
                foreach (Control control in listAddressHeadingsToColor)
                {
                    control.ForeColor = thiscolor;
                }
                //blocklist
                Control[] listBlockListHeadingsToColor = { label143, lblBlockListBlockHeight, label6 };
                foreach (Control control in listBlockListHeadingsToColor)
                {
                    control.ForeColor = thiscolor;
                }
                //block
                Control[] listBlockHeadingsToColor = { lblBlockBlockHeight, label18 };
                foreach (Control control in listBlockHeadingsToColor)
                {
                    control.ForeColor = thiscolor;
                }
                //transaction
                Control[] listTransactionHeadingsToColor = { label102, label107 };
                foreach (Control control in listTransactionHeadingsToColor)
                {
                    control.ForeColor = thiscolor;
                }
                //xpub
                Control[] listXpubHeadingsToColor = { label124, label117, label127 };
                foreach (Control control in listXpubHeadingsToColor)
                {
                    control.ForeColor = thiscolor;
                }
                //bookmarks
                Control[] listBookmarksHeadingsToColor = { label131 };
                foreach (Control control in listBookmarksHeadingsToColor)
                {
                    control.ForeColor = thiscolor;
                }
                //charts
                Control[] listChartsHeadingsToColor = { label228, label218, label231, label217, label271, label272 };
                foreach (Control control in listChartsHeadingsToColor)
                {
                    control.ForeColor = thiscolor;
                }
                // also use this colour to set the bordercolor of the top row of buttons (menus, exit, etc)
                RJButton[] mainMenuButtonBordersToColor = { btnMinimise, btnShowGlobalSearch, btnMoveWindow, btnExit, btnHelp, btnAddToBookmarks, btnAnimation, btnShowGlobalSearch, btnHideErrorMessage, btnCopyErrorMessage };
                foreach (RJButton button in mainMenuButtonBordersToColor)
                {
                    button.BorderSize = 1;
                    button.BorderColor = thiscolor;
                }
                //dca
                label208.ForeColor = thiscolor;
                label209.ForeColor = thiscolor;
            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorHeadings");
            }
        }

        private void ColorTables(Color thiscolor)
        {
            try
            {
                Control[] listTableTextToColor = { label170, listViewAddressTransactions, listViewBlockTransactions, listViewBlockList, listViewTransactionInputs, listViewTransactionOutputs, listViewXpubAddresses, listViewBookmarks, label186 };
                foreach (Control control in listTableTextToColor)
                {
                    control.ForeColor = thiscolor;
                }
                tableTextColor = thiscolor;
                #region force refresh listviews to update their text colours
                if (numericUpDownBlockHeightToStartListFrom != null)
                {
                    LookupBlockList();
                }
                if (numericUpDownSubmittedBlockNumber != null)
                {
                    LookupBlock();
                }
                if (lblInvalidTransaction.Text == "✔️ valid transaction ID")
                {
                    LookupTransaction();
                }
                if (lblInvalidAddressIndicator.Text == "✔️ valid address")
                {
                    string addressString = textboxSubmittedAddress.Text;
                    textboxSubmittedAddress.Text = "";
                    textboxSubmittedAddress.Text = addressString;
                }
                SetupBookmarksScreen();
                #endregion
            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorTables");
            }
        }

        private void ColorTableHeadings(Color thiscolor)
        {
            try
            {
                listViewHeaderTextColor = thiscolor;
                label188.ForeColor = thiscolor;
                label190.ForeColor = thiscolor;
            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorTableHeadings");
            }
        }

        private void ColorOtherText(Color thiscolor)
        {
            try
            {
                Control[] listOtherTextToColor = { label185, numericUpDownOpacity, label235, label160, label159, label158, label165, label173, label167, textBoxXpubScreenOwnNodeURL, textBoxSubmittedXpub, numberUpDownDerivationPathsToCheck, textboxSubmittedAddress, textBoxTransactionID, textBoxBookmarkEncryptionKey, textBoxBookmarkKey, textBoxBookmarkProposedNote, textBoxSettingsOwnNodeURL, numericUpDownDashboardRefresh, numericUpDownMaxNumberOfConsecutiveUnusedAddresses, textBoxThemeName, textBox1, lblCurrentVersion, textBoxUniversalSearch, textBoxDCAAmountInput, comboBoxDCAFrequency };
                foreach (Control control in listOtherTextToColor)
                {
                    control.ForeColor = thiscolor;
                }
                comboBoxCustomizeScreenThemeList.ForeColor = thiscolor;
                comboBoxCustomizeScreenThemeList.ListTextColor = thiscolor;
                comboBoxCustomizeScreenThemeList.ListBackColor = chartsBackgroundColor;
                comboBoxStartupScreen.ForeColor = thiscolor;
                comboBoxStartupScreen.ListTextColor = thiscolor;
                comboBoxStartupScreen.ListBackColor = chartsBackgroundColor;
                comboBoxTitlesBackgroundImage.ForeColor = thiscolor;
                comboBoxTitlesBackgroundImage.ListTextColor = thiscolor;
                comboBoxTitlesBackgroundImage.ListBackColor = chartsBackgroundColor;
                rjDatePickerDCAStartDate.TextColor = thiscolor;
                rjDatePickerDCAEndDate.TextColor = thiscolor;
            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorOtherText");
            }
        }

        private void ColorPriceBlock(Color thiscolor)
        {
            try
            {
                lblHeaderPrice.ForeColor = thiscolor;
                lblBlockNumber.ForeColor = thiscolor;
                label175.ForeColor = thiscolor;
            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorPriceBlock");
            }
        }

        private void ColorStatusError(Color thiscolor)
        {
            try
            {

                labelSettingsSaved.ForeColor = thiscolor;
                lblErrorAlert.ForeColor = thiscolor;
                lblErrorMessage.ForeColor = thiscolor;
                label176.ForeColor = thiscolor;
                lblOfflineModeActive.ForeColor = thiscolor;
                lblElapsedSinceUpdate.ForeColor = thiscolor;
                headerSelectedNodeStatus.ForeColor = thiscolor;
            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorStatusError");
            }
        }

        private void ColorButtons(Color thiscolor)
        {
            try
            {
                //header
                Control[] listHeaderButtonsToColor = { btnAnimation, btnAddToBookmarks, btnHelp, btnMinimise, btnShowGlobalSearch, btnMoveWindow, btnExit, btnMenuCreateTheme, btnMenuThemeFranklin, btnMenuThemeSatsuma, btnMenuThemeHoneyBadger, btnMenuThemeStackSats, btnMenuThemeSymbol ,BtnMenuThemeGenesis, btnUSD, btnEUR, btnGBP, btnXAU, btnHideErrorMessage, btnCopyErrorMessage };
                foreach (Control control in listHeaderButtonsToColor)
                {
                    control.BackColor = chartsBackgroundColor;
                }
                lblHelpOffline.BackColor = chartsBackgroundColor;
                lblCurrencyMenuHighlightedButtonText.BackColor = chartsBackgroundColor;
                lblThemeMenuHighlightedButtonText.BackColor = chartsBackgroundColor;
                lblApplyThemeButtonDisabledMask.BackColor = chartsBackgroundColor;
                comboBoxHeaderCustomThemes.BackColor = chartsBackgroundColor;
                comboBoxHeaderCustomThemes.ListBackColor = chartsBackgroundColor;
                btnMenuApplyCustomTheme.BackColor = chartsBackgroundColor;
                btnMenuSplash.FlatAppearance.BorderColor = chartsBackgroundColor;
                btnMenuHelp.FlatAppearance.BorderColor = chartsBackgroundColor;

                btnUniversalSearch.BackColor = thiscolor;

                //settings & appearance
                Control[] listSettingsButtonsToColor = { btnResetAll, button1, button2, btnSaveTheme, btnLoadTheme, btnDeleteTheme, btnSquareCorners, btnPartialCorners, btnRoundCorners };
                foreach (Control control in listSettingsButtonsToColor)
                {
                    control.BackColor = thiscolor;
                }
                btnPreviewAnimations.ForeColor = thiscolor;
                //address
                Control[] listAddressButtonsToColor = { btnShowAllTX, btnShowConfirmedTX, btnShowUnconfirmedTX, btnFirstAddressTransaction, btnNextAddressTransactions, BtnViewTransactionFromAddress, BtnViewBlockFromAddress };
                foreach (Control control in listAddressButtonsToColor)
                {
                    control.BackColor = thiscolor;
                }
                //block
                Control[] listBlockButtonsToColor = { btnViewTransactionFromBlock, btnPreviousBlockTransactions, btnNextBlockTransactions, btnLookUpBlock };
                foreach (Control control in listBlockButtonsToColor)
                {
                    control.BackColor = thiscolor;
                }
                //blocklist
                Control[] listBlockListButtonsToColor = { btnLookUpBlockList, btnViewBlockFromBlockList, btnNewer15Blocks, btnOlder15Blocks };
                foreach (Control control in listBlockListButtonsToColor)
                {
                    control.BackColor = thiscolor;
                }

                //transaction
                Control[] listTransactionButtonsToColor = { btnViewAddressFromTXInput, btnViewAddressFromTXOutput, btnTransactionInputsUp, btnTransactionInputDown, btnTransactionOutputsUp, btnTransactionOutputsDown };
                foreach (Control control in listTransactionButtonsToColor)
                {
                    control.BackColor = thiscolor;
                }
                //xpub
                Control[] listXpubButtonsToColor = { btnViewAddressFromXpub, btnXpubAddressesUp, btnXpubAddressesDown };
                foreach (Control control in listXpubButtonsToColor)
                {
                    control.BackColor = thiscolor;
                }
                //bookmarks
                Control[] listBookmarksButtonsToColor = { btnBookmarksListUp, btnBookmarksListDown, btnBookmarkUnlock, btnDecryptBookmark, btnDeleteBookmark, btnViewBookmark, btnCommitToBookmarks, btnCancelAddToBookmarks, btnDeleteAllBookmarks, btnDeleteAllBookmarksNo, btnDeleteAllBookmarksYes };
                foreach (Control control in listBookmarksButtonsToColor)
                {
                    control.BackColor = thiscolor;
                }
                //charts
                Control[] listChartsButtonsToColor = { btnChartFeeRates, btnChartBlockFees, btnChartReward, btnChartBlockSize, btnChartHashrate, btnChartDifficulty, btnChartCirculation, btnChartUniqueAddresses, btnChartUTXO, btnChartPoolsRanking, btnChartNodesByNetwork, btnChartNodesByCountry, btnChartLightningCapacity, btnChartLightningChannels, btnChartPrice, btnChartMarketCap, btnChartPeriod24h, btnChartPeriod3d, btnChartPeriod1w, btnChartPeriod1m, btnChartPeriod3m, btnChartPeriod6m, btnChartPeriod1y, btnChartPeriod2y, btnChartPeriod3y, btnChartPeriodAll, btnPriceChartScaleLinear, btnPriceChartScaleLog, btnChartMarketCapScaleLinear, btnChartMarketCapScaleLog, btnChartUTXOScaleLinear, btnChartUTXOScaleLog, btnChartAddressScaleLinear, btnChartAddressScaleLog, btnSaveChart, btnHashrateScaleLinear, btnHashrateScaleLog, btnChartDifficultyLinear, btnChartDifficultyLog };
                foreach (Control control in listChartsButtonsToColor)
                {
                    control.BackColor = thiscolor;
                }
                //directory
                Control[] listDirectoryButtonsToColor = { btnDirectoryScrollUp, btnDirectoryScrollDown };
                foreach (Control control in listDirectoryButtonsToColor)
                {
                    control.BackColor = thiscolor;
                }
                //dca calculator
                btnCalculateDCA.BackColor = thiscolor;
                //add to bookmarks panel (uses button colour)
                panelAddToBookmarksBorder.BackColor = thiscolor;
            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorButtons");
            }
        }

        private void ColorButtonText(Color thiscolor)
        {
            try
            {
                Control[] listHeaderButtonTextToColor = { btnCurrency, btnAddToBookmarks, btnHelp, btnMinimise, btnShowGlobalSearch, btnMoveWindow, btnExit, btnCommitToBookmarks, btnCancelAddToBookmarks, btnMenuAddress, btnMenuCreateTheme, btnMenuBitcoinDashboard, btnMenuBlock, btnMenuPriceConverter, btnMenuBlockList, btnMenuDirectory, btnMenuBookmarks, btnMenuCharts, btnMenuHelp, btnMenuLightningDashboard, btnMenuSettings, btnMenuSplash, btnMenuTransaction, btnMenuDCACalculator ,btnMenuXpub, btnThemeMenu, btnMenuThemeFranklin, btnMenuThemeSatsuma, BtnMenuThemeGenesis, btnMenuThemeStackSats, btnMenuThemeSymbol, btnMenuThemeHoneyBadger, btnUSD, btnEUR, btnGBP, btnXAU, btnHideErrorMessage, btnCopyErrorMessage };
                if (lblChartsDarkBackground.Text == "✔️")
                {
                    //header

                    foreach (Control control in listHeaderButtonTextToColor)
                    {
                        control.ForeColor = Color.Silver;
                    }
                    comboBoxHeaderCustomThemes.ForeColor = Color.Silver;
                    comboBoxHeaderCustomThemes.ListTextColor = Color.Silver;
                    btnMenuApplyCustomTheme.ForeColor = Color.Silver;
                    lblCurrencyMenuHighlightedButtonText.ForeColor = Color.DimGray;
                    lblMenuHighlightedButtonText.ForeColor = Color.DimGray;
                    lblHelpOffline.ForeColor = Color.DimGray;
                    lblThemeMenuHighlightedButtonText.ForeColor = Color.DimGray;
                    lblApplyThemeButtonDisabledMask.ForeColor = Color.DimGray;
                }
                else
                {
                    //header
                    foreach (Control control in listHeaderButtonTextToColor)
                    {
                        control.ForeColor = Color.DimGray;
                    }
                    comboBoxHeaderCustomThemes.ForeColor = Color.DimGray;
                    comboBoxHeaderCustomThemes.ListTextColor = Color.DimGray;
                    btnMenuApplyCustomTheme.ForeColor = Color.DimGray;
                    lblCurrencyMenuHighlightedButtonText.ForeColor = Color.Silver;
                    lblMenuHighlightedButtonText.ForeColor = Color.Silver;
                    lblHelpOffline.ForeColor = Color.Silver;
                    lblThemeMenuHighlightedButtonText.ForeColor = Color.Silver;
                    lblApplyThemeButtonDisabledMask.ForeColor = Color.Silver;
                }
                btnUniversalSearch.ForeColor = thiscolor;

                //settings & appearance
                Control[] listSettingsButtonTextToColor = { btnResetAll, button1, button2, btnSaveTheme, btnLoadTheme, btnDeleteTheme, btnSquareCorners, btnPartialCorners, btnRoundCorners };
                foreach (Control control in listSettingsButtonTextToColor)
                {
                    control.ForeColor = thiscolor;
                }
                //address
                Control[] listAddressButtonTextToColor = { btnShowAllTX, btnShowConfirmedTX, btnShowUnconfirmedTX, btnFirstAddressTransaction, btnNextAddressTransactions, BtnViewTransactionFromAddress, BtnViewBlockFromAddress };
                foreach (Control control in listAddressButtonTextToColor)
                {
                    control.ForeColor = thiscolor;
                }
                //block
                Control[] listBlockButtonTextToColor = { btnViewTransactionFromBlock, btnPreviousBlockTransactions, btnNextBlockTransactions, btnLookUpBlock };
                foreach (Control control in listBlockButtonTextToColor)
                {
                    control.ForeColor = thiscolor;
                }
                //blocklist
                Control[] listBlockListButtonTextToColor = { btnLookUpBlockList, btnViewBlockFromBlockList, btnNewer15Blocks, btnOlder15Blocks };
                foreach (Control control in listBlockListButtonTextToColor)
                {
                    control.ForeColor = thiscolor;
                }
                //transaction
                Control[] listTransactionButtonTextToColor = { btnViewAddressFromTXInput, btnViewAddressFromTXOutput, btnTransactionInputsUp, btnTransactionInputDown, btnTransactionOutputsUp, btnTransactionOutputsDown };
                foreach (Control control in listTransactionButtonTextToColor)
                {
                    control.ForeColor = thiscolor;
                }
                //xpub
                Control[] listXpubButtonTextToColor = { btnViewAddressFromXpub, btnXpubAddressesUp, btnXpubAddressesDown };
                foreach (Control control in listXpubButtonTextToColor)
                {
                    control.ForeColor = thiscolor;
                }
                //bookmarks
                Control[] listBookmarksButtonTextToColor = { btnBookmarksListUp, btnBookmarksListDown, btnBookmarkUnlock, btnDecryptBookmark, btnDeleteBookmark, btnViewBookmark, btnCommitToBookmarks, btnCancelAddToBookmarks, btnDeleteAllBookmarks, btnDeleteAllBookmarksNo, btnDeleteAllBookmarksYes };
                foreach (Control control in listBookmarksButtonTextToColor)
                {
                    control.ForeColor = thiscolor;
                }
                //charts
                Control[] listChartsButtonsTextToColor = { btnChartFeeRates, btnChartBlockFees, btnChartReward, btnChartBlockSize, btnChartHashrate, btnChartDifficulty, btnChartCirculation, btnChartUniqueAddresses, btnChartUTXO, btnChartPoolsRanking, btnChartNodesByNetwork, btnChartNodesByCountry, btnChartLightningCapacity, btnChartLightningChannels, btnChartPrice, btnChartMarketCap, btnChartPeriod24h, btnChartPeriod3d, btnChartPeriod1w, btnChartPeriod1m, btnChartPeriod3m, btnChartPeriod6m, btnChartPeriod1y, btnChartPeriod2y, btnChartPeriod3y, btnChartPeriodAll, btnPriceChartScaleLinear, btnPriceChartScaleLog, btnChartMarketCapScaleLinear, btnChartMarketCapScaleLog, btnChartUTXOScaleLinear, btnChartUTXOScaleLog, btnChartAddressScaleLinear, btnChartAddressScaleLog, btnSaveChart, btnChartDifficultyLinear, btnChartDifficultyLog, btnHashrateScaleLinear, btnHashrateScaleLog };
                foreach (Control control in listChartsButtonsTextToColor)
                {
                    control.ForeColor = thiscolor;
                }
                //directory
                Control[] listDirectoryButtonsTextToColor = { btnDirectoryScrollDown, btnDirectoryScrollUp };
                foreach (Control control in listDirectoryButtonsTextToColor)
                {
                    control.ForeColor = thiscolor;
                }
                //dca calculator
                btnCalculateDCA.ForeColor = thiscolor;
            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorButtonText");
            }
        }

        private void ColorLines(Color thiscolor)
        {
            try
            {
                Control[] listLinesToColor = { panel14, panel17, panel19, panel61 };
                foreach (Control control in listLinesToColor)
                {
                    control.BackColor = thiscolor;
                }
                linesColor = thiscolor;
            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorLines");
            }
        }

        private void ColorTextBoxes(Color thiscolor) // and textbox panel containers
        {
            try
            {
                Control[] listTextBoxesToColor = { lblShowClock, btnDataRefreshPeriodDown, btnDataRefreshPeriodUp, btnBiggerScale, btnSmallerScale, btnNonZeroBalancesUp, btnNonZeroBalancesDown, btnDerivationPathsDown, btnDerivationPathsUp, panel93, panel95, panel98, btnNumericUpDownSubmittedBlockNumberUp, numericUpDownOpacity, btnOpacityDown, btnOpacityUp ,btnNumericUpDownSubmittedBlockNumberDown, numericUpDownSubmittedBlockNumber, numericUpDownBlockHeightToStartListFrom, numericUpDownMaxNumberOfConsecutiveUnusedAddresses, panel75, textBox1, textBoxBookmarkProposedNote, textBoxBookmarkEncryptionKey, textboxSubmittedAddress, textBoxTransactionID, textBoxXpubScreenOwnNodeURL, numberUpDownDerivationPathsToCheck, textBoxSubmittedXpub, textBoxBookmarkKey, textBoxSettingsOwnNodeURL, numericUpDownDashboardRefresh, lblAlwaysOnTop, textBoxThemeName, lblTitleBackgroundCustom, lblTitlesBackgroundImage, lblTitleBackgroundNone, lblBackgroundFranklinSelected, lblBackgroundCustomColorSelected, lblBackgroundCustomImageSelected, lblBackgroundGenesisSelected, lblBackgroundSatsumaSelected, lblBackgroundHoneyBadgerSelected, lblBackgroundSymbolSelected, lblBackgroundStackSatsSelected, lblSettingsOwnNodeSelected, lblSettingsNodeMainnetSelected, lblSettingsNodeTestnetSelected, lblBitcoinExplorerEndpoints, lblBlockchainInfoEndpoints, lblBlockchairComJSON, lblOfflineMode, lblConfirmReset, lblChartsDarkBackground, lblChartsLightBackground, textBoxConvertBTCtoFiat, textBoxConvertEURtoBTC, textBoxConvertGBPtoBTC, textBoxConvertUSDtoBTC, textBoxConvertXAUtoBTC, panelThemeNameContainer, panelOptionalNotesContainer, panelEncryptionKeyContainer, panelSubmittedAddressContainer, panelBlockHeightToStartFromContainer, panelTransactionIDContainer, panelSubmittedXpubContainer, panelXpubScreenOwnNodeURLContainer, panelBookmarkKeyContainer, panelConvertBTCToFiatContainer, panelConvertUSDToBTCContainer, panelConvertEURToBTCContainer, panelConvertGBPToBTCContainer, panelConvertXAUToBTCContainer, panelSettingsOwnNodeURLContainer, panelAppearanceTextbox1Container, panelComboBoxStartupScreenContainer, panelCustomizeThemeListContainer, panelHeadingBackgroundSelect, panelSelectBlockNumberContainer, lblInfinity1, lblInfinity2, lblInfinity3, lblEnableDirectory, btnNumericUpDownBlockHeightToStartListFromUp, btnNumericUpDownBlockHeightToStartListFromDown, panelUniversalSearchContainer, textBoxUniversalSearch, panelSettingsUIScaleContainer, textBoxDCAAmountInput, panel111, panel113, panel114, panel115 };
                foreach (Control control in listTextBoxesToColor)
                {
                    control.BackColor = thiscolor;
                }
                rjDatePickerDCAStartDate.SkinColor = thiscolor;
                rjDatePickerDCAEndDate.SkinColor = thiscolor;
            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorTextBoxes");
            }
        }

        private void ColorProgressBars(Color thiscolor)
        {
            try
            {
                //settings
                colorProgressBar1.BarColor = thiscolor;
                //bitcoindashboard
                progressBarNextDiffAdj.BarColor = thiscolor;
                progressBarProgressToHalving.BarColor = thiscolor;
                progressBarPercentIssued.BarColor = thiscolor;
                //blocklist
                progressBarBlockListNextDiffAdj.BarColor = thiscolor;
                progressBarBlockListHalvingProgress.BarColor = thiscolor;
                //xpub
                progressBarCheckEachAddressType.BarColor = thiscolor;
                progressBarCheckAllAddressTypes.BarColor = thiscolor;
            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorProgressBars");
            }
        }

        private void ColorTableBackgrounds(Color thiscolor)
        {
            try
            {
                Control[] listListViewBackgroundsToColor = { panelTransactionOutputs, panelTransactionInputs, panel102, listViewBlockList, listViewTransactionInputs, listViewTransactionOutputs, listViewXpubAddresses, listViewBookmarks, listViewAddressTransactions, listViewBlockTransactions, panel66, panel24, panel25, panel30, panel33, panel100, panel101, panelXpubContainer };
                foreach (Control control in listListViewBackgroundsToColor)
                {
                    {
                        control.BackColor = thiscolor;
                    }
                }
                subItemBackColor = MakeColorLighter(thiscolor, -10);
            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorTableBackgrounds");
            }
        }

        private void ColorTableTitleBars(Color thiscolor)
        {
            try
            {
                listViewHeaderColor = thiscolor;
                panel67.BackColor = thiscolor;
                panel68.BackColor = thiscolor;
            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorTableTitleBars");
            }
        }

        private void HeadingBackgroundsToImage()
        {
            try
            {
                // Declare ImageFile variable
                Image ImageFile = Properties.Resources.titleBGLongerOrange;
                if (comboBoxTitlesBackgroundImage.SelectedIndex == 0)
                {
                    ImageFile = Properties.Resources.titleBGLongerOrange;
                }
                if (comboBoxTitlesBackgroundImage.SelectedIndex == 1)
                {
                    ImageFile = Properties.Resources.OrangePaler;
                }
                if (comboBoxTitlesBackgroundImage.SelectedIndex == 2)
                {
                    ImageFile = Properties.Resources.OrangeFade; // it's kind of brown really!
                }
                if (comboBoxTitlesBackgroundImage.SelectedIndex == 3)
                {
                    ImageFile = Properties.Resources.BlueFade;
                }
                if (comboBoxTitlesBackgroundImage.SelectedIndex == 4)
                {
                    ImageFile = Properties.Resources.GreenFade;
                }
                if (comboBoxTitlesBackgroundImage.SelectedIndex == 5)
                {
                    ImageFile = Properties.Resources.PurpleFade;
                }
                if (comboBoxTitlesBackgroundImage.SelectedIndex == 6)
                {
                    ImageFile = Properties.Resources.RedFade;
                }
                if (comboBoxTitlesBackgroundImage.SelectedIndex == 7)
                {
                    ImageFile = Properties.Resources.YellowFade;
                }
                if (comboBoxTitlesBackgroundImage.SelectedIndex == 8)
                {
                    ImageFile = Properties.Resources.BlackFade;
                }
                if (comboBoxTitlesBackgroundImage.SelectedIndex == 9)
                {
                    ImageFile = Properties.Resources.WhiteFade;
                }
                if (comboBoxTitlesBackgroundImage.SelectedIndex == 10)
                {
                    ImageFile = Properties.Resources.transpTitle;
                }
                if (comboBoxTitlesBackgroundImage.SelectedIndex == 11)
                {
                    ImageFile = Properties.Resources.Polygons;
                }
                if (comboBoxTitlesBackgroundImage.SelectedIndex == 12)
                {
                    ImageFile = Properties.Resources.marbled;
                }
                if (comboBoxTitlesBackgroundImage.SelectedIndex == 13)
                {
                    ImageFile = Properties.Resources.squares;
                }
                //header
                Control[] listHeaderHeadingsToColor = { panel38, panel39, panel40, panel57 };
                foreach (Control control in listHeaderHeadingsToColor)
                {
                    control.BackColor = Color.Transparent;
                    control.BackgroundImage = ImageFile;
                }
                //settings & appearance
                Control[] listSettingsHeadingsToColor = { panel110, panel97, panel108, panel54, panel52, panel47, panel58, panel59, panel60, panel62, panel63, panel64, panel22, panel34, panel37, panel65, panel69, panel72, panel82, panel83, panel104, panel112 };
                foreach (Control control in listSettingsHeadingsToColor)
                {
                    control.BackColor = Color.Transparent;
                    control.BackgroundImage = ImageFile;
                }
                //bitcoindashboard
                Control[] listBitcoinDashboardHeadingsToColor = { panel6, panel11, panel7, panel8, panel10, panel12, panel9, panel109 };
                foreach (Control control in listBitcoinDashboardHeadingsToColor)
                {
                    control.BackColor = Color.Transparent;
                    control.BackgroundImage = ImageFile;
                }
                //lightningdashboard
                Control[] listLightningDashboardHeadingsToColor = { panel4, panel5, panel1, panel2, panel3 };
                foreach (Control control in listLightningDashboardHeadingsToColor)
                {
                    control.BackColor = Color.Transparent;
                    control.BackgroundImage = ImageFile;
                }
                //address
                Control[] listAddressHeadingsToColor = { panel41, panel42, panel43, panel44 };
                foreach (Control control in listAddressHeadingsToColor)
                {
                    control.BackColor = Color.Transparent;
                    control.BackgroundImage = ImageFile;
                }
                //block
                Control[] listBlockHeadingsToColor = { panel105, panel55 };
                foreach (Control control in listBlockHeadingsToColor)
                {
                    control.BackColor = Color.Transparent;
                    control.BackgroundImage = ImageFile;
                }
                //blocklist
                Control[] listBlockListHeadingsToColor = { panel45, panel13, panel15 };
                foreach (Control control in listBlockListHeadingsToColor)
                {
                    control.BackColor = Color.Transparent;
                    control.BackgroundImage = ImageFile;
                }
                //transaction
                Control[] listTransactionHeadingsToColor = { panel27, panel28 };
                foreach (Control control in listTransactionHeadingsToColor)
                {
                    control.BackColor = Color.Transparent;
                    control.BackgroundImage = ImageFile;
                }
                //xpub
                Control[] listXpubHeadingsToColor = { panel23, panel26, panel29 };
                foreach (Control control in listXpubHeadingsToColor)
                {
                    control.BackColor = Color.Transparent;
                    control.BackgroundImage = ImageFile;
                }
                //charts
                Control[] listChartsHeadingsToColor = { panel80, panel79, panel81, panel78, panel49, panel50 };
                foreach (Control control in listChartsHeadingsToColor)
                {
                    control.BackColor = Color.Transparent;
                    control.BackgroundImage = ImageFile;
                }
                //dca
                panel116.BackColor = Color.Transparent;
                panel116.BackgroundImage = ImageFile;
                panel118.BackColor = Color.Transparent;
                panel118.BackgroundImage = ImageFile;
            }
            catch (Exception ex)
            {
                HandleException(ex, "HeadingBackgroundsToDefault");
            }
        }

        private void HeadingBackgroundsToNone()
        {
            try
            {
                lblTitleBackgroundNone.Invoke((MethodInvoker)delegate
                {
                    lblTitleBackgroundNone.ForeColor = Color.Green;
                    lblTitleBackgroundNone.Text = "✔️";
                });
                lblTitlesBackgroundImage.Invoke((MethodInvoker)delegate
                {
                    lblTitlesBackgroundImage.ForeColor = Color.IndianRed;
                    lblTitlesBackgroundImage.Text = "❌";
                });
                lblTitleBackgroundCustom.Invoke((MethodInvoker)delegate
                {
                    lblTitleBackgroundCustom.ForeColor = Color.IndianRed;
                    lblTitleBackgroundCustom.Text = "❌";
                });

                //header
                Control[] listHeaderHeadingsToColor = { panel38, panel39, panel40, panel57 };
                foreach (Control control in listHeaderHeadingsToColor)
                {
                    control.BackColor = Color.Transparent;
                    control.BackgroundImage = null;
                }
                //settings & appearance
                Control[] listSettingsHeadingsToColor = { panel110, panel97, panel108, panel54, panel52, panel47, panel58, panel59, panel60, panel62, panel63, panel64, panel22, panel34, panel37, panel65, panel69, panel72, panel82, panel83, panel104, panel112 };
                foreach (Control control in listSettingsHeadingsToColor)
                {
                    control.BackColor = Color.Transparent;
                    control.BackgroundImage = null;
                }
                //bitcoindashboard
                Control[] listBitcoinDashboardHeadingsToColor = { panel6, panel11, panel7, panel8, panel10, panel12, panel9, panel109 };
                foreach (Control control in listBitcoinDashboardHeadingsToColor)
                {
                    control.BackColor = Color.Transparent;
                    control.BackgroundImage = null;
                }
                //lightningdashboard
                Control[] listLightningDashboardHeadingsToColor = { panel4, panel5, panel1, panel2, panel3 };
                foreach (Control control in listLightningDashboardHeadingsToColor)
                {
                    control.BackColor = Color.Transparent;
                    control.BackgroundImage = null;
                }
                //address
                Control[] listAddressHeadingsToColor = { panel41, panel42, panel43, panel44 };
                foreach (Control control in listAddressHeadingsToColor)
                {
                    control.BackColor = Color.Transparent;
                    control.BackgroundImage = null;
                }
                //block
                Control[] listBlockHeadingsToColor = { panel105, panel55 };
                foreach (Control control in listBlockHeadingsToColor)
                {
                    control.BackColor = Color.Transparent;
                    control.BackgroundImage = null;
                }
                //blocklist
                Control[] listBlockListHeadingsToColor = { panel45, panel13, panel15 };
                foreach (Control control in listBlockListHeadingsToColor)
                {
                    control.BackColor = Color.Transparent;
                    control.BackgroundImage = null;
                }
                //transaction
                Control[] listTransactionHeadingsToColor = { panel27, panel28 };
                foreach (Control control in listTransactionHeadingsToColor)
                {
                    control.BackColor = Color.Transparent;
                    control.BackgroundImage = null;
                }
                //xpub
                Control[] listXpubHeadingsToColor = { panel23, panel26, panel29 };
                foreach (Control control in listXpubHeadingsToColor)
                {
                    control.BackColor = Color.Transparent;
                    control.BackgroundImage = null;
                }
                //charts
                Control[] listChartsHeadingsToColor = { panel80, panel79, panel81, panel78, panel49, panel50 };
                foreach (Control control in listChartsHeadingsToColor)
                {
                    control.BackColor = Color.Transparent;
                    control.BackgroundImage = null;
                }
                //dca
                panel116.BackColor = Color.Transparent;
                panel116.BackgroundImage = null;
                panel118.BackColor = Color.Transparent;
                panel118.BackgroundImage = null;
            }
            catch (Exception ex)
            {
                HandleException(ex, "HeadingBackgroundsToNone");
            }
        }

        private void HeadingBackgroundsToCustomColor()
        {
            try
            {
                //header
                Control[] listHeaderHeadingsToColor = { panel38, panel39, panel40, panel57 };
                foreach (Control control in listHeaderHeadingsToColor)
                {
                    control.BackgroundImage = null;
                    control.BackColor = titleBackgroundColor;
                }
                //settings & appearance
                Control[] listSettingsHeadingsToColor = { panel110, panel97, panel54, panel108, panel52, panel47, panel58, panel59, panel60, panel62, panel63, panel64, panel22, panel34, panel37, panel65, panel69, panel72, panel82, panel83, panel104, panel112 };
                foreach (Control control in listSettingsHeadingsToColor)
                {
                    control.BackgroundImage = null;
                    control.BackColor = titleBackgroundColor;
                }
                //bitcoindashboard
                Control[] listBitcoinDashboardHeadingsToColor = { panel6, panel11, panel7, panel8, panel10, panel12, panel9, panel109 };
                foreach (Control control in listBitcoinDashboardHeadingsToColor)
                {
                    control.BackgroundImage = null;
                    control.BackColor = titleBackgroundColor;
                }
                //lightningdashboard
                Control[] listLightningDashboardHeadingsToColor = { panel4, panel5, panel1, panel2, panel3 };
                foreach (Control control in listLightningDashboardHeadingsToColor)
                {
                    control.BackgroundImage = null;
                    control.BackColor = titleBackgroundColor;
                }
                //address
                Control[] listAddressHeadingsToColor = { panel41, panel42, panel43, panel44 };
                foreach (Control control in listAddressHeadingsToColor)
                {
                    control.BackgroundImage = null;
                    control.BackColor = titleBackgroundColor;
                }
                //block
                Control[] listBlockHeadingsToColor = { panel105, panel55 };
                foreach (Control control in listBlockHeadingsToColor)
                {
                    control.BackgroundImage = null;
                    control.BackColor = titleBackgroundColor;
                }
                //blocklist
                Control[] listBlockListHeadingsToColor = { panel45, panel13, panel15 };
                foreach (Control control in listBlockListHeadingsToColor)
                {
                    control.BackgroundImage = null;
                    control.BackColor = titleBackgroundColor;
                }
                //transaction
                Control[] listTransactionHeadingsToColor = { panel27, panel28 };
                foreach (Control control in listTransactionHeadingsToColor)
                {
                    control.BackgroundImage = null;
                    control.BackColor = titleBackgroundColor;
                }
                //xpub
                Control[] listXpubHeadingsToColor = { panel23, panel26, panel29 };
                foreach (Control control in listXpubHeadingsToColor)
                {
                    control.BackgroundImage = null;
                    control.BackColor = titleBackgroundColor;
                }
                //charts
                Control[] listChartsHeadingsToColor = { panel80, panel79, panel81, panel78, panel49, panel50 };
                foreach (Control control in listChartsHeadingsToColor)
                {
                    control.BackgroundImage = null;
                    control.BackColor = titleBackgroundColor;
                }
                //dca
                panel116.BackgroundImage = null;
                panel116.BackColor = titleBackgroundColor;
                panel118.BackgroundImage = null;
                panel118.BackColor = titleBackgroundColor;
            }
            catch (Exception ex)
            {
                HandleException(ex, "HeadingBackgroundsToCustomColor");
            }
        }

        private void ColorPanels(Color thiscolor)
        {
            try
            {
                Control[] listPanelsToColor = { panel92, panelAddToBookmarks, panelThemeMenu, panelCurrency, panel46, panel103, panelOwnNodeBlockTXInfo, panel119, panelPriceConvert, panel106, panel107, panel53, panel96, panel70, panel71, panel73, panel20, panel32, panel74, panel76, panel77, panel88, panel89, panel90, panel86, panel87, panel91, panel84, panel85, panel99, panel94, panelTransactionMiddle, panelOwnNodeAddressTXInfo, panel51, panel16, panel21, panelSettingsUIScale, panelDCAMessages, panelDCASummary, panel117 };
                foreach (Control control in listPanelsToColor)
                {
                    {
                        control.BackColor = thiscolor;
                    }
                }
                
            }
            catch (Exception ex)
            {
                HandleException(ex, "ColorPanels");
            }
        }

        // all menu buttons derive their colour from chartbackgroundcolor
        private void BtnMenuButtons_MouseEnter(object sender, EventArgs e)
        {
            try
            {
                Button[] buttonsToUpdateBackColor =
                {
                    btnMenuApplyCustomTheme, btnMenuBitcoinDashboard, btnThemeMenu, btnMenuAddress,
                    btnMenuCreateTheme, btnMenuBlock, btnMenuBlockList, btnMenuBookmarks, btnMenuCharts,
                    btnMenuDirectory, btnMenuHelp, btnMenuLightningDashboard, btnMenuSettings,
                    btnMenuTransaction, btnMenuDCACalculator, btnMenuPriceConverter, btnMenuXpub, btnMenuSplash, btnMenuThemeFranklin,
                    BtnMenuThemeGenesis, btnMenuThemeSatsuma, btnMenuThemeHoneyBadger,
                    btnMenuThemeStackSats, btnMenuThemeSymbol, btnUSD, btnEUR, btnGBP,
                    btnXAU, btnCurrency, btnHelp, btnMinimise, btnShowGlobalSearch,
                    btnMoveWindow, btnExit, btnAddToBookmarks, btnHideErrorMessage,
                    btnCopyErrorMessage
                };
                if (buttonsToUpdateBackColor.Contains((Button)sender))
                {
                    ((Button)sender).BackColor = btnDeleteTheme.BackColor;
                }

                if (sender == comboBoxHeaderCustomThemes)
                {
                    comboBoxHeaderCustomThemes.BackColor = btnDeleteTheme.BackColor;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuButtons_MouseEnter");
            }
        }

        private void BtnMenuButtons_MouseLeave(object sender, EventArgs e)
        {
            try
            {
                Button[] buttonsToMatchChartsBackgroundColor =
                {
                    btnMenuApplyCustomTheme, btnMenuCreateTheme, btnMenuThemeFranklin, BtnMenuThemeGenesis, btnMenuThemeSatsuma, btnMenuThemeHoneyBadger, btnMenuThemeStackSats, btnMenuThemeSymbol, btnShowGlobalSearch, btnUSD, btnEUR, btnGBP, btnXAU, btnHelp, btnMinimise, btnShowGlobalSearch, btnMoveWindow, btnExit, btnAddToBookmarks, btnHideErrorMessage, btnCopyErrorMessage
                };
                if (buttonsToMatchChartsBackgroundColor.Contains((Button)sender))
                {
                    ((Button)sender).BackColor = chartsBackgroundColor;
                }

                Button[] buttonstoMakeTransparent =
                {
                    btnMenuBitcoinDashboard, btnMenuAddress, btnMenuBlock, btnMenuBlockList, btnMenuBookmarks, btnMenuDirectory, btnMenuPriceConverter, btnMenuCharts, btnMenuHelp, btnMenuLightningDashboard, btnMenuSettings, btnMenuTransaction, btnMenuDCACalculator, btnMenuXpub, btnMenuSplash
                };
                if (buttonstoMakeTransparent.Contains((Button)sender))
                {
                    ((Button)sender).BackColor = Color.Transparent;
                }

                if (sender == btnThemeMenu)
                {
                    if (panelThemeMenu.Height == 0)
                    {
                        btnThemeMenu.BackColor = Color.Transparent;
                    }
                }
                if (sender == btnCurrency)
                {
                    if (panelCurrency.Height == 0)
                    {
                        btnCurrency.BackColor = Color.Transparent;
                    }
                }
                if (sender == comboBoxHeaderCustomThemes)
                {
                    comboBoxHeaderCustomThemes.BackColor = chartsBackgroundColor;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuButtons_MouseLeave");
            }
        }

        private void ComboBoxHeaderCustomThemes_MouseEnter(object sender, EventArgs e)
        {
            comboBoxHeaderCustomThemes.BackColor = btnDeleteTheme.BackColor;
        }

        private void ComboBoxHeaderCustomThemes_MouseLeave(object sender, EventArgs e)
        {
            comboBoxHeaderCustomThemes.BackColor = chartsBackgroundColor;
        }

        #endregion
        #region save theme as default
        private void TextBoxThemeName_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Return)
            {
                BtnSaveTheme_Click(sender, e);
            }
        }
        private void SaveThemeAsDefault(string themename)
        {
            try
            {
                // write the theme name to the bookmarks file for auto retrieval next time
                DateTime today = DateTime.Today;
                string bookmarkData;
                string keyCheck = "";
                bookmarkData = themename;
                var newBookmark = new Bookmark { DateAdded = today, Type = "defaulttheme", Data = bookmarkData, Note = "", Encrypted = false, KeyCheck = keyCheck };
                if (!defaultThemeAlreadySavedInFile)
                {
                    // Read the existing bookmarks from the JSON file
                    var bookmarks = ReadBookmarksFromJsonFile();

                    // Add the new bookmark to the list
                    bookmarks.Add(newBookmark);

                    // Write the updated list of bookmarks back to the JSON file
                    WriteBookmarksToJsonFile(bookmarks);
                    defaultThemeAlreadySavedInFile = true;
                    defaultThemeInFile = bookmarkData;
                }
                else
                {
                    if (defaultThemeInFile != themename)
                    {
                        //delete the currently saved default theme
                        DeleteBookmarkFromJsonFile(defaultThemeInFile);
                        // Read the existing bookmarks from the JSON file
                        var bookmarks = ReadBookmarksFromJsonFile();
                        // Add the new bookmark to the list
                        bookmarks.Add(newBookmark);
                        // Write the updated list of bookmarks back to the JSON file
                        WriteBookmarksToJsonFile(bookmarks);
                        defaultThemeAlreadySavedInFile = true;
                        defaultThemeInFile = bookmarkData;
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "SaveThemeAsDefault");
            }
        }
        #endregion
        #region delete theme

        private void BtnDeleteTheme_Click(object sender, EventArgs e)
        {
            try
            {
                if (comboBoxCustomizeScreenThemeList.Texts == currentlyActiveTheme)
                {
                    lblThemeDeleted.Text = "unable to delete active theme   ";
                    lblThemeDeleted.Invoke((MethodInvoker)delegate
                    {
                        lblThemeDeleted.Location = new Point(panel72.Width - lblThemeDeleted.Width, 0);
                    });
                    lblThemeDeleted.Visible = true;
                    hideThemeDeletedTimer.Start();
                    return;
                }
                // Read the existing thenes from the JSON file
                var themes = ReadThemesFromJsonFile();

                // Find the index of the bookmark with the specified data
                int index = themes.FindIndex(theme =>
                    theme.ThemeName == comboBoxCustomizeScreenThemeList.Texts);

                // If a matching bookmark was found, remove it from the list
                if (index >= 0)
                {
                    themes.RemoveAt(index);

                    // Write the updated list of bookmarks back to the JSON file
                    WriteThemeToJsonFile(themes);
                    PopulateThemeComboboxes();
                    lblThemeDeleted.Text = "theme deleted   ";
                    lblThemeDeleted.Invoke((MethodInvoker)delegate
                    {
                        lblThemeDeleted.Location = new Point(panel72.Width - lblThemeDeleted.Width, 0);
                    });
                    lblThemeDeleted.Visible = true;
                    hideThemeDeletedTimer.Start();
                }
                else
                {
                    lblThemeDeleted.Text = "no theme selected   ";
                    lblThemeDeleted.Invoke((MethodInvoker)delegate
                    {
                        lblThemeDeleted.Location = new Point(panel72.Width - lblThemeDeleted.Width, 0);
                    });
                    lblThemeDeleted.Visible = true;
                    hideThemeDeletedTimer.Start();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnDeleteTheme_Click");
            }
        }
        #endregion region
        #region timers to hide saved/deleted/nameInUse messages after display
        private void HideThemeSavedTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                lblThemeSaved.Visible = false;
                hideThemeSavedTimer.Stop();
            }
            catch (Exception ex)
            {
                HandleException(ex, "HideThemeSavedTimer_Tick");
            }
        }

        private void HideThemeDeletedTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                lblThemeDeleted.Visible = false;
                hideThemeDeletedTimer.Stop();
            }
            catch (Exception ex)
            {
                HandleException(ex, "HideThemeDeletedTimer_Tick");
            }
        }

        private void TimerHideThemeNameInUse_Tick(object sender, EventArgs e)
        {
            try
            {
                lblThemeNameInUse.Visible = false;
                timerHideThemeNameInUse.Stop();
            }
            catch (Exception ex)
            {
                HandleException(ex, "timerHideThemeNameInUse_Tick");
            }
        }
        #endregion
        #endregion

        #region ⚡COMMON CODE⚡

        #region expanding panels (vert)

        private void StartExpandingPanelVert(Panel panel)
        {
            panelToExpandVert = panel;
            ExpandPanelTimerVert.Start();
        }

        private void ExpandPanelTimerVert_Tick(object sender, EventArgs e)
        {
            currentHeightExpandingPanel += (int)(16 * UIScale);

            if (panelToExpandVert == panelCurrency)
            {
                panelMaxHeight = (int)(112 * UIScale);
            }
            if (panelToExpandVert == panelThemeMenu)
            {
                panelMaxHeight = (int)(280 * UIScale);
            }
            if (currentHeightExpandingPanel >= panelMaxHeight) // expanding is complete
            {
                panelToExpandVert.Invoke((MethodInvoker)delegate
                {
                    panelToExpandVert.Height = panelMaxHeight;
                });
                ExpandPanelTimerVert.Stop();
            }
            else // expand further
            {
                panelToExpandVert.Invoke((MethodInvoker)delegate
                {
                    panelToExpandVert.Height = currentHeightExpandingPanel;
                    panelToExpandVert.Invalidate();
                });
            }
        }
        #endregion
        #region expanding panels (horiz)

        private void StartExpandingPanelHoriz(Panel panel)
        {
            panelToExpand = panel;
            panelToExpand.Width = 0;
            currentWidthExpandingPanel = 0;
            ExpandPanelTimerHoriz.Start();
        }

        private void StartShrinkingPanel(Panel panel)
        {
            panelToShrink = panel;
            ShrinkPanelTimerHoriz.Start();
        }

        private void ShrinkPanelTimerHoriz_Tick(object sender, EventArgs e)
        {
            currentWidthShrinkingPanel -= (int)(12 * UIScale);
            if (panelToShrink == panel107)
            {
                panelMinWidth = 0;
            }

            if (panelToShrink == panelErrorMessage)
            {
                panelMinWidth = 0;
            }

            if (currentWidthShrinkingPanel <= panelMinWidth) // shrinking is complete
            {
                panelToShrink.Invoke((MethodInvoker)delegate
                {
                    panelToShrink.Width = panelMinWidth;
                });
                if (panelToShrink == panel107)
                {
                    panel107.Invoke((MethodInvoker)delegate
                    {
                        panel107.Location = new Point((int)(774 * UIScale), panel107.Location.Y);
                    });
                }
                panelToShrink.Invalidate();

                ShrinkPanelTimerHoriz.Stop();
            }
            else // shrink further
            {
                panelToShrink.Invoke((MethodInvoker)delegate
                {
                    panelToShrink.Width = currentWidthShrinkingPanel;
                });
                if (panelToExpand == panel107)
                {
                    panel107.Invoke((MethodInvoker)delegate
                    {
                        panel107.Location = new Point(panel107.Location.X + (int)(12 * UIScale), panel107.Location.Y);
                    });
                }
                panelToShrink.Invalidate();
            }
        }

        private void ExpandPanelTimerHoriz_Tick(object sender, EventArgs e)
        {
            currentWidthExpandingPanel += (int)(12 * UIScale);
            if (panelToExpand == panel107)
            {
                panelMaxWidth = (int)(394 * UIScale);
            }

            if (panelToExpand == panelErrorMessage)
            {
                panelMaxWidth = (int)(604 * UIScale);
            }

            if (currentWidthExpandingPanel >= panelMaxWidth) // expanding is complete
            {
                
                panelToExpand.Invoke((MethodInvoker)delegate
                {
                    panelToExpand.Width = panelMaxWidth;
                });
                if (panelToExpand == panel107)
                {
                    panel107.Invoke((MethodInvoker)delegate
                    {
                        panel107.Location = new Point((int)(378 * UIScale), panel107.Location.Y);
                    });
                }
                ExpandPanelTimerHoriz.Stop();
            }
            else // expand further
            {
                panelToExpand.Invoke((MethodInvoker)delegate
                {
                    panelToExpand.Width = currentWidthExpandingPanel;
                });
                if (panelToExpand == panel107)
                {
                    panel107.Invoke((MethodInvoker)delegate
                    {
                        panel107.Location = new Point(panel107.Location.X - (int)(12 * UIScale), panel107.Location.Y);
                    });
                }
                panelToExpand.Invalidate();
            }
        }

        #endregion
        #region hide/show all fiat conversion fields
        private void HideAllFiatConversionFields()
        {
            try
            {
                Control[] listFiatConversionsToHide = { lblNextBlockTotalFeesFiat, lblBlockListTotalFeesInNextBlockFiat, lblBlockRewardFiat, lblBlockRewardAfterHalvingFiat, lblBlockListBlockRewardFiat, lbl24HourBTCSentFiat, lblAddressConfirmedReceivedFiat, lblAddressConfirmedSpentFiat, lblAddressConfirmedUnspentFiat, lblTotalFeesFiat, lblRewardFiat, lblTransactionFeeFiat, lblTotalInputValueFiat, lblTotalOutputValueFiat, lblXpubConfirmedReceivedFiat, lblXpubConfirmedSpentFiat, lblXpubConfirmedUnspentFiat };
                foreach (Control control in listFiatConversionsToHide)
                {
                    control.Visible = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "HideAllFiatConversionFields");
            }
        }
        private void ShowAllFiatConversionFields()
        {
            try
            {
                if (!testNet && !offlineMode && RunBitcoinExplorerEndpointAPI && RunBitcoinExplorerOrgJSONAPI)
                {
                    Control[] listFiatConversionsToShow = { lblNextBlockTotalFeesFiat, lblBlockListTotalFeesInNextBlockFiat, lblBlockRewardFiat, lblBlockRewardAfterHalvingFiat, lblBlockListBlockRewardFiat, lbl24HourBTCSentFiat, lblAddressConfirmedReceivedFiat, lblAddressConfirmedSpentFiat, lblAddressConfirmedUnspentFiat, lblTotalFeesFiat, lblRewardFiat, lblTransactionFeeFiat, lblTotalInputValueFiat, lblTotalOutputValueFiat, lblXpubConfirmedReceivedFiat, lblXpubConfirmedSpentFiat, lblXpubConfirmedUnspentFiat };
                    foreach (Control control in listFiatConversionsToShow)
                    {
                        control.Visible = true;
                    }
                }
                // undo the above for fiat values on xpub screen if they're all = 0
                if (lblXpubConfirmedReceivedFiat.Text == "0" && lblXpubConfirmedSpentFiat.Text == "0" && lblXpubConfirmedUnspentFiat.Text == "0")
                {
                    lblXpubConfirmedReceivedFiat.Visible = false;
                    lblXpubConfirmedSpentFiat.Visible = false;
                    lblXpubConfirmedUnspentFiat.Visible = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "HideAllFiatConversionFields");
            }
        }
        #endregion
        #region populate the theme list comboboxes
        private void PopulateThemeComboboxes()
        {
            try
            {
                var themes = ReadThemesFromJsonFile();
                List<string> themeNames = themes.Select(t => t.ThemeName).ToList();
                themeNames.RemoveAll(theme => theme.Contains("(preset)")); // exclude the preset themes
                comboBoxCustomizeScreenThemeList.DataSource = themeNames; // show all the themes in the combobox on customize screen
                comboBoxCustomizeScreenThemeList.Texts = "select theme";
                comboBoxHeaderCustomThemes.DataSource = themeNames;
                comboBoxHeaderCustomThemes.Texts = "   select theme ▼";
            }
            catch (Exception ex)
            {
                HandleException(ex, "PopulateThemeComboboxes");
            }
        }
        #endregion
        #region clear all button markers on theme menu
        private void ClearThemeMenuMarkers()
        {
            try
            {
                btnMenuApplyCustomTheme.Invoke((MethodInvoker)delegate
                {
                    btnMenuApplyCustomTheme.BackgroundImage = null;
                });
                BtnMenuThemeGenesis.Invoke((MethodInvoker)delegate
                {
                    BtnMenuThemeGenesis.BackgroundImage = null;
                });
                btnMenuThemeFranklin.Invoke((MethodInvoker)delegate
                {
                    btnMenuThemeFranklin.BackgroundImage = null;
                });
                btnMenuThemeSatsuma.Invoke((MethodInvoker)delegate
                {
                    btnMenuThemeSatsuma.BackgroundImage = null;
                });
                btnMenuThemeHoneyBadger.Invoke((MethodInvoker)delegate
                {
                    btnMenuThemeHoneyBadger.BackgroundImage = null;
                });
                btnMenuThemeStackSats.Invoke((MethodInvoker)delegate
                {
                    btnMenuThemeStackSats.BackgroundImage = null;
                });
                btnMenuThemeSymbol.Invoke((MethodInvoker)delegate
                {
                    btnMenuThemeSymbol.BackgroundImage = null;
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "ClearThemeMenuMarkers");
            }
        }
        #endregion
        #region clear all button markers on currency menu
        private void ClearCurrencyMenuMarkers()
        {
            try
            {
                btnUSD.Invoke((MethodInvoker)delegate
                {
                    btnUSD.BackgroundImage = null;
                });
                btnEUR.Invoke((MethodInvoker)delegate
                {
                    btnEUR.BackgroundImage = null;
                });
                btnGBP.Invoke((MethodInvoker)delegate
                {
                    btnGBP.BackgroundImage = null;
                });
                btnXAU.Invoke((MethodInvoker)delegate
                {
                    btnXAU.BackgroundImage = null;
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "ClearCurrencyMenuMarkers");
            }
        }
        #endregion
        #region check for updates
        private void CheckForUpdates()
        {
            try
            {
                if (!offlineMode)
                {
                    using WebClient client = new WebClient();
                    string VersionURL = "https://satsuma.btcdir.org/SATSumaVersion.txt";
                    string LatestVersion = client.DownloadString(VersionURL);
                    if (LatestVersion != CurrentVersion)
                    {
                        lblUpdaterLight.Visible = true;
                    }
                    else
                    {
                        lblUpdaterLight.Visible = false;
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "CheckForUpdates");
            }
        }
        #endregion
        #region refresh screens with listviews to ensure new theme colours are applied to lists
        private void ReloadScreensWithListviews()
        {
            try
            {
                numericUpDownBlockHeightToStartListFrom.Enabled = true;
                btnNumericUpDownBlockHeightToStartListFromDown.Enabled = true;
                btnNumericUpDownBlockHeightToStartListFromUp.Enabled = true;
                btnLookUpBlockList.Enabled = true;

                numericUpDownSubmittedBlockNumber.Enabled = true;
                btnNumericUpDownSubmittedBlockNumberDown.Enabled = true;
                btnNumericUpDownSubmittedBlockNumberUp.Enabled = true;
                btnLookUpBlock.Enabled = true;

                #region hacky way of overcoming titlebar of listviews getting color artefacts when changing themes.
                listViewBlockList.Visible = false;
                listViewBlockList.Visible = true;
                listViewBlockTransactions.Visible = false;
                listViewBlockTransactions.Visible = true;
                listViewBookmarks.Visible = false;
                listViewBookmarks.Visible = true;
                if (listViewTransactionInputs.Visible)
                {
                    listViewTransactionInputs.Visible = false;
                    listViewTransactionInputs.Visible = true;
                }
                if (listViewTransactionOutputs.Visible)
                {
                    listViewTransactionOutputs.Visible = false;
                    listViewTransactionOutputs.Visible = true;
                }
                if (listViewAddressTransactions.Visible)
                {
                    listViewAddressTransactions.Visible = false;
                    listViewAddressTransactions.Visible = true;
                }
                if (listViewXpubAddresses.Visible)
                {
                    listViewXpubAddresses.Visible = false;
                    listViewXpubAddresses.Visible = true;
                }
                #endregion
            }
            catch (Exception ex)
            {
                HandleException(ex, "ReloadScreensWithListviews");
            }
        }
        #endregion
        #region lighten a colour by n percent
        public Color MakeColorLighter(Color originalColor, int increment)
        {
            int r = originalColor.R + increment;
            int g = originalColor.G + increment;
            int b = originalColor.B + increment;

            // stay within valid range (0 to 255)
            r = Math.Min(255, Math.Max(0, r));
            g = Math.Min(255, Math.Max(0, g));
            b = Math.Min(255, Math.Max(0, b));

            return Color.FromArgb(r, g, b);
        }
        #endregion
        #region form paint - border round window, relocate objects, set window title, bookmark button state
        private void SATSuma_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                #region smooth buttons a bit if using a background image
                if (this.BackgroundImage != null)
                {
                    this.BackColor = chartsBackgroundColor; //if using a theme with a background image, this makes the rounded buttons look smoother
                }
                #endregion
                #region rounded border around rounded form
                if (BtnMenuThemeGenesis.Enabled == false || btnMenuThemeFranklin.Enabled == false || btnMenuThemeSatsuma.Enabled == false)
                {
                    // Paint the border with a 1-pixel width
                    using var pen = new Pen(Color.DimGray, 1);
                    var rect = ClientRectangle;
                    rect.Inflate(-1, -1);
                    e.Graphics.DrawPath(pen, GetRoundedRect(rect, 30));
                }
                #endregion
                #region 'Now Viewing' title text and set state of 'add bookmark' button
                if (panelAddress.Visible || panelBlock.Visible || panelTransaction.Visible || panelXpub.Visible)
                {
                    if (panelAddress.Visible && lblAddressType.Text != "Invalid address format" && lblAddressType.Text != "no data")
                    {
                        btnAddToBookmarks.Enabled = true;
                        btnAddToBookmarks.Invoke((MethodInvoker)delegate
                        {
                            btnAddToBookmarks.Text = "🖤";
                        });
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Address";
                        });
                    }
                    if (panelAddress.Visible && (lblAddressType.Text == "Invalid address format" || lblAddressType.Text == "no data"))
                    {
                        btnAddToBookmarks.Enabled = false;
                        btnAddToBookmarks.Invoke((MethodInvoker)delegate
                        {
                            btnAddToBookmarks.Text = "🤍";
                        });
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Address";
                        });
                    }
                    if (panelBlock.Visible && lblBlockHash.Text != "")
                    {
                        btnAddToBookmarks.Enabled = true;
                        btnAddToBookmarks.Invoke((MethodInvoker)delegate
                        {
                            btnAddToBookmarks.Text = "🖤";
                        });
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Block";
                        });
                    }
                    if (panelBlock.Visible && lblBlockHash.Text == "")
                    {
                        btnAddToBookmarks.Enabled = false;
                        btnAddToBookmarks.Invoke((MethodInvoker)delegate
                        {
                            btnAddToBookmarks.Text = "🤍";
                        });
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Block";
                        });
                    }
                    if (panelTransaction.Visible && lblInvalidTransaction.Text == "✔️ valid transaction ID")
                    {
                        btnAddToBookmarks.Enabled = true;
                        btnAddToBookmarks.Invoke((MethodInvoker)delegate
                        {
                            btnAddToBookmarks.Text = "🖤";
                        });
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Transaction";
                        });
                    }
                    if (panelTransaction.Visible && lblInvalidTransaction.Text != "✔️ valid transaction ID")
                    {
                        btnAddToBookmarks.Enabled = false;
                        btnAddToBookmarks.Invoke((MethodInvoker)delegate
                        {
                            btnAddToBookmarks.Text = "🤍";
                        });
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Transaction";
                        });
                    }
                    if (panelXpub.Visible && lblValidXpubIndicator.Text != "✔️ valid Xpub")
                    {
                        btnAddToBookmarks.Enabled = false;
                        btnAddToBookmarks.Invoke((MethodInvoker)delegate
                        {
                            btnAddToBookmarks.Text = "🤍";
                        });
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Xpub";
                        });
                    }
                    if (panelXpub.Visible && lblValidXpubIndicator.Text == "✔️ valid Xpub")
                    {
                        btnAddToBookmarks.Enabled = true;
                        btnAddToBookmarks.Invoke((MethodInvoker)delegate
                        {
                            btnAddToBookmarks.Text = "🖤";
                        });
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Xpub";
                        });
                    }
                }
                else
                {
                    if (panelBitcoinDashboard.Visible)
                    {
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Bitcoin dashboard";
                        });
                    }
                    if (panelLightningDashboard.Visible)
                    {
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Lightning dashboard";
                        });
                    }
                    if (panelDirectory.Visible)
                    {
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Directory";
                        });
                    }
                    if (panelBlockList.Visible)
                    {
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Blocks";
                        });
                    }
                    if (panelBookmarks.Visible)
                    {
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Bookmarks";
                        });
                    }
                    if (panelSettings.Visible)
                    {
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Settings";
                        });
                    }
                    if (panelAppearance.Visible)
                    {
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Create custom theme";
                        });
                    }
                    if (panelCharts.Visible)
                    {
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "Charts";
                        });
                    }
                    if (panelDCACalculator.Visible)
                    {
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "DCA calculator";
                        });
                    }
                    if (panelPriceConverter.Visible)
                    {
                        lblNowViewing.Invoke((MethodInvoker)delegate
                        {
                            lblNowViewing.Text = "BTC/Fiat converter";
                        });
                    }
                    btnAddToBookmarks.Enabled = false;
                    btnAddToBookmarks.Invoke((MethodInvoker)delegate
                    {
                        btnAddToBookmarks.Text = "🤍";
                    });
                }
                #endregion
            }
            catch (Exception ex)
            {
                HandleException(ex, "SATSuma_Paint");
            }
        }

        private GraphicsPath GetRoundedRect(Rectangle rectangle, int radius)
        {
            GraphicsPath path = new GraphicsPath();
            path.AddArc(rectangle.X, rectangle.Y, radius, radius, 180, 90);
            path.AddArc(rectangle.Width - radius, rectangle.Y, radius, radius, 270, 90);
            path.AddArc(rectangle.Width - radius, rectangle.Height - radius, radius, radius, 0, 90);
            path.AddArc(rectangle.X, rectangle.Height - radius, radius, radius, 90, 90);
            path.CloseFigure();
            return path;
        }
        #endregion
        #region panels paint - rounded corners
        private void Panel_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                Panel panel = (Panel)sender;

                // Create a GraphicsPath object with rounded corners
                System.Drawing.Drawing2D.GraphicsPath path = new System.Drawing.Drawing2D.GraphicsPath();
                int cornerRadius = (int)(12 * UIScale);
                if (btnSquareCorners.Enabled == false)
                {
                    cornerRadius = 1;
                }
                else
                {
                    if (btnPartialCorners.Enabled == false)
                    {
                        cornerRadius = (int)(6 * UIScale);
                    }
                    else
                    {
                        if (btnRoundCorners.Enabled == false)
                        {
                            cornerRadius = (int)(12 * UIScale);
                        }
                    }
                }
                if (panel.Name == "panelLoadingAnimationContainer")
                {
                    cornerRadius = (int)(12 * UIScale);
                }
                if (panel.Name == "panelLeftPanel")
                {
                    cornerRadius = 12;
                }
                cornerRadius *= 2;
                path.AddArc(0, 0, cornerRadius, cornerRadius, 180, 90);
                path.AddArc(panel.Width - cornerRadius, 0, cornerRadius, cornerRadius, 270, 90);
                path.AddArc(panel.Width - cornerRadius, panel.Height - cornerRadius, cornerRadius, cornerRadius, 0, 90);
                path.AddArc(0, panel.Height - cornerRadius, cornerRadius, cornerRadius, 90, 90);
                path.CloseFigure();

                // Set the panel's region to the rounded path
                panel.Region = new Region(path);
            }
            catch (Exception ex)
            {
                HandleException(ex, "Panel_Paint");
            }
        }
        #endregion
        #region status message/alert at bottom of window
        private void UpdateOnScreenElapsedTimeSinceUpdate()
        {
            try
            {
                intDisplaySecondsElapsedSinceUpdate++; // increment displayed time elapsed since last update
                lblElapsedSinceUpdate.Invoke((MethodInvoker)delegate
                {
                    lblElapsedSinceUpdate.Text = "Refreshing data in " + Convert.ToString(intDisplayCountdownToRefresh);
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "UpdateOnScreenElapsedTimeSinceUpdate");
            }
        }

        private void ShowAlertSymbol()
        {
            try
            {
                lblAlert.Invoke((MethodInvoker)delegate
                {
                    lblAlert.Visible = true;
                });
                lblErrorAlert.Invoke((MethodInvoker)delegate
                {
                    lblErrorAlert.Visible = true;
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "ShowAlertSymbol");
            }
        }

        private void ToggleLoadingAnimation(string enableOrDisableAnimation)
        {
            try
            {
                if (enableOrDisableAnimation == "enable")
                {
                    //start the loading animation
                    pictureBoxLoadingAnimation.Enabled = true;
                }
                else
                {
                    //stop the animation
                    pictureBoxLoadingAnimation.Enabled = false;
                    //reset the image to return to the original frame in the animation
                    if (btnExit.BackColor == Color.FromArgb(20,20,20))
                    {
                        pictureBoxLoadingAnimation.Image = Properties.Resources.SatsumaAnimated;
                    }
                    else
                    {
                        pictureBoxLoadingAnimation.Image = Properties.Resources.SatsumaAnimatedWhite;
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "DisableEnableLoadingAnimation");
            }
        }

        private void UpdateOnScreenCountdownAndFlashLights()
        {
            try
            {
                intDisplayCountdownToRefresh--; // reduce the countdown of the 1 minute timer by 1 second
                if (intDisplayCountdownToRefresh <= 0) // if the 1 minute timer countdown has reached zero...
                {
                    intDisplayCountdownToRefresh = APIGroup1DisplayTimerIntervalSecsConstant; // reset it
                }
                if (intDisplayCountdownToRefresh < (APIGroup1DisplayTimerIntervalSecsConstant - 1)) // if more than a second has expired since the data from the blocktimer was refreshed...
                {
                    ChangeStatusLights();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "UpdateOnScreenCountdownAndFlashLights");
            }
        }

        private void ChangeStatusLights()
        {
            try
            {
                if (lblStatusLight.ForeColor != Color.IndianRed && lblStatusLight.ForeColor != Color.OliveDrab) // check whether a data refresh has just occured to see if a status light flash needs dimming
                {
                    if (lblStatusLight.ForeColor == Color.Lime) // successful data refresh has occured
                    {
                        lblStatusLight.Invoke((MethodInvoker)delegate
                        {
                            lblStatusLight.ForeColor = Color.OliveDrab; // reset the colours to a duller version to give appearance of a flash
                        });
                    }
                    else // an error must have just occured
                    {
                        lblStatusLight.Invoke((MethodInvoker)delegate
                        {
                            lblStatusLight.ForeColor = Color.IndianRed; // reset the colours to a duller version to give appearance of a flash
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "ChangeStatusLights");
            }
        }

        private void ClearAlertAndErrorMessage()
        {
            try
            {
                lblAlert.Invoke((MethodInvoker)delegate
                {
                    lblAlert.Visible = false;
                });
                lblErrorAlert.Invoke((MethodInvoker)delegate
                {
                    lblErrorAlert.Visible = false;
                });
                currentWidthShrinkingPanel = panelErrorMessage.Width;
                StartShrinkingPanel(panelErrorMessage);
                lblErrorMessage.Invoke((MethodInvoker)delegate
                {
                    lblErrorMessage.Text = ""; // clear any error message
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "ClearAlertAndErrorMessage");
            }
        }

        private void SetLightsMessagesAndResetTimers()
        {
            try
            {
                // set successful lights and messages on the form
                lblStatusLight.Invoke((MethodInvoker)delegate
                {
                    lblStatusLight.ForeColor = Color.Lime; // for a bright green flash
                });
                lblStatusLight.Invoke((MethodInvoker)delegate
                {
                    lblStatusLight.Text = "🟢"; // circle/light
                });
                intDisplayCountdownToRefresh = APIGroup1DisplayTimerIntervalSecsConstant; // reset the timer
                intDisplaySecondsElapsedSinceUpdate = 0; // reset the seconds since last refresh
            }
            catch (Exception ex)
            {
                HandleException(ex, "SetLightsMessagesAndResetTimers");
            }
        }
        #endregion
        #region error alerts and messages
        private void LblErrorAlert_Click(object sender, EventArgs e)
        {
            try
            {
                if (panelErrorMessage.Width == 0)
                {
                    currentWidthExpandingPanel = 0;
                    StartExpandingPanelHoriz(panelErrorMessage);
                    
                }
                else
                {
                    currentWidthShrinkingPanel = panelErrorMessage.Width;
                    StartShrinkingPanel(panelErrorMessage);
                    
                }

            }
            catch (WebException ex)
            {
                HandleException(ex, "lblErrorAlert_Click");
            }
        }

        private void HideErrorMessage_Click(object sender, EventArgs e)
        {
            StartShrinkingPanel(panelErrorMessage);
            currentWidthShrinkingPanel = panelErrorMessage.Width;
        }

        private void BtnCopyErrorMessage_Click(object sender, EventArgs e)
        {
            Clipboard.SetText(lblErrorMessage.Text);
        }

        private void LightUpNodeLight()
        {
            headerSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
            {
                headerSelectedNodeStatusLight.ForeColor = Color.Lime;
            });
            timerNodeStatusLight.Start();
        }

        private void TimerNodeStatusLight_Tick(object sender, EventArgs e)
        {
            headerSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
            {
                headerSelectedNodeStatusLight.ForeColor = Color.OliveDrab;
            });
        }
        #endregion
        #region create data services
        private void CreateDataServices()
        {
            try
            {
                _transactionsForAddressService = new TransactionsForAddressService(NodeURL);
                _blockService = new BlockDataService(NodeURL);
                _transactionsForBlockService = new TransactionsForBlockService(NodeURL);
                _transactionService = new TransactionService(NodeURL);
                _hashrateAndDifficultyService = new HashrateAndDifficultyService(NodeURL);
                _historicPriceDataService = new HistoricPriceDataService();
                _blockFeeRatesDataService = new BlockFeeRatesDataService(NodeURL);
                _bitcoinsInCirculationDataService = new BitcoinsInCirculationDataService();
                _blockSizeAndWeightService = new BlockSizeAndWeightService(NodeURL);
                _uniqueAddressesDataService = new UniqueAddressesDataService();
                _utxoDataService = new UTXODataService();
                _poolsRankingDataService = new PoolsRankingDataService(NodeURL);
                _lightningNodesByCountryService = new LightningNodesByCountryService(NodeURL);
                _marketCapDataService = new MarketCapDataService();
            }
            catch (Exception ex)
            {
                HandleException(ex, "CreateDataServices");
            }
        }
        #endregion
        #region get block tip
        private void GetBlockTip()
        {
            try
            {
                using WebClient client = new WebClient();
                string BlockTipURL = NodeURL + "blocks/tip/height";
                string BlockTip = client.DownloadString(BlockTipURL);
                lblBlockNumber.Invoke((MethodInvoker)delegate
                {
                    lblBlockNumber.Text = BlockTip;
                });
                numericUpDownBlockHeightToStartListFrom.Invoke((MethodInvoker)delegate
                {
                    numericUpDownBlockHeightToStartListFrom.Text = BlockTip;
                });
                lblHeaderBlockAge.Invoke((MethodInvoker)delegate
                {
                    lblHeaderBlockAge.Location = new Point(lblBlockNumber.Location.X + lblBlockNumber.Width, lblHeaderBlockAge.Location.Y);
                });
                numericUpDownSubmittedBlockNumber.Maximum = Convert.ToDecimal(BlockTip);
                numericUpDownBlockHeightToStartListFrom.Maximum = Convert.ToDecimal(BlockTip);
            }
            catch (Exception ex)
            {
                HandleException(ex, "GetBlockTip");
            }
        }

        #endregion
        #region is string numeric
        static bool IsNumeric(string input)
        {
            return int.TryParse(input, out _);
        }
        #endregion
        #region encrypt/decrypt string using SHA-256
        private string Encrypt(string input, string key) // encrypt a string using SHA-256
        {
            byte[] keyBytes = Encoding.UTF8.GetBytes(key);
            byte[] inputBytes = Encoding.UTF8.GetBytes(input);
            using var sha256 = new SHA256Managed();
            byte[] hashedBytes = sha256.ComputeHash(keyBytes);
            byte[] encryptedBytes = new byte[inputBytes.Length];
            for (int i = 0; i < inputBytes.Length; i++)
            {
                encryptedBytes[i] = (byte)(inputBytes[i] ^ hashedBytes[i % hashedBytes.Length]);
            }
            return Convert.ToBase64String(encryptedBytes);
        }

        private string Decrypt(string input, string key) // decrypt a string using SHA-256
        {
            byte[] keyBytes = Encoding.UTF8.GetBytes(key);
            byte[] inputBytes = Convert.FromBase64String(input);
            using var sha256 = new SHA256Managed();
            byte[] hashedBytes = sha256.ComputeHash(keyBytes);
            byte[] decryptedBytes = new byte[inputBytes.Length];
            for (int i = 0; i < inputBytes.Length; i++)
            {
                decryptedBytes[i] = (byte)(inputBytes[i] ^ hashedBytes[i % hashedBytes.Length]);
            }
            return Encoding.UTF8.GetString(decryptedBytes);
        }
        #endregion
        #region error handler
        private void HandleException(Exception ex, string methodName)
        {
            string errorMessage;
            if (ex is WebException)
            {
                errorMessage = $"Web exception - {methodName}: {ex.Message}";
            }
            else if (ex is HttpRequestException)
            {
                errorMessage = $"HTTP Request error - {methodName}: {ex.Message}";
            }
            else if (ex is JsonException)
            {
                errorMessage = $"JSON parsing error in - {methodName}: {ex.Message}";
            }
            else
            {
                errorMessage = $"Error in {methodName}: {ex.Message}";
            }

            const int MaxErrorMessageLength = 130;

            if (errorMessage.Length > MaxErrorMessageLength)
            {
                errorMessage = errorMessage.Substring(0, MaxErrorMessageLength) + "...";
            }

            lblErrorMessage.Invoke((MethodInvoker)delegate
            {
                lblErrorMessage.Text = errorMessage;
            });
            ShowAlertSymbol();
        }
        #endregion
        #region override colours for listview headings
        private void AllListViews_DrawColumnHeader(object sender, DrawListViewColumnHeaderEventArgs e)
        {
            try
            {
                SolidBrush brush = new SolidBrush(listViewHeaderColor);
                e.Graphics.FillRectangle(brush, e.Bounds);
                // Change text color and alignment
                SolidBrush textBrush = new SolidBrush(listViewHeaderTextColor);
                StringFormat format = new StringFormat
                {
                    Alignment = StringAlignment.Near,
                    LineAlignment = StringAlignment.Center
                };
                e.Graphics.DrawString(e.Header.Text, e.Font, textBrush, e.Bounds, format);
            }
            catch (Exception ex)
            {
                HandleException(ex, "AllListViews_DrawColumnHeader");
            }
        }
        #endregion
        #region convert sats to bitcoin
        private decimal ConvertSatsToBitcoin(string numerics)
        {
            decimal number = decimal.Parse(numerics);
            decimal result = number / 100000000;
            return result;
        }
        #endregion
        #region check network status
        private async void CheckNetworkStatus()
        {
            try
            {
                string hostnameForDisplay = "";
                #region if we're looking at the xpub screen
                if (panelXpub.Visible)
                {
                    CheckOwnNodeIsOnline();
                    Uri uri = new Uri(xpubNodeURL);

                    hostnameForDisplay = uri.Host;
                    if (lblXpubScreenOwnNodeStatusLight.ForeColor == Color.OliveDrab)
                    {
                        headerSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                        {
                            headerSelectedNodeStatusLight.ForeColor = Color.OliveDrab;
                        });
                        headerSelectedNodeStatus.Invoke((MethodInvoker)delegate
                        {
                            headerSelectedNodeStatus.Text = hostnameForDisplay + " (Xpub queries only)";
                        });
                        lblSettingsOwnNodeSelected.Enabled = true;
                        lblSettingsOwnNodeStatus.Invoke((MethodInvoker)delegate
                        {
                            lblSettingsOwnNodeStatus.Text = hostnameForDisplay;
                            lblSettingsOwnNodeStatus.Location = new Point((int)(755 * UIScale) - lblSettingsOwnNodeStatus.Width, lblSettingsOwnNodeStatus.Location.Y);
                        });
                        lblSettingsOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                        {
                            lblSettingsOwnNodeStatusLight.ForeColor = Color.OliveDrab;
                            lblSettingsOwnNodeStatusLight.Location = new Point(lblSettingsOwnNodeStatus.Location.X - lblSettingsOwnNodeStatusLight.Width, lblSettingsOwnNodeStatusLight.Location.Y);
                        });

                        lblXpubScreenOwnNodeStatus.Invoke((MethodInvoker)delegate
                        {
                            lblXpubScreenOwnNodeStatus.Text = hostnameForDisplay;
                        });
                        label174.Invoke((MethodInvoker)delegate
                        {
                            label174.Text = hostnameForDisplay;
                        });
                        MoveNodeSelections();
                        lblXpubScreenOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                        {
                            lblXpubScreenOwnNodeStatusLight.ForeColor = Color.OliveDrab;
                        });
                    }
                    else
                    {
                        headerSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                        {
                            headerSelectedNodeStatusLight.ForeColor = Color.IndianRed;
                        });
                        headerSelectedNodeStatus.Invoke((MethodInvoker)delegate
                        {
                            headerSelectedNodeStatus.Text = hostnameForDisplay + " (Xpub queries only)";
                        });
                        label174.Invoke((MethodInvoker)delegate
                        {
                            label174.Text = "your node (not connected)";
                        });
                        MoveNodeSelections();
                        lblSettingsOwnNodeSelected.Enabled = false;
                        lblSettingsOwnNodeStatus.Invoke((MethodInvoker)delegate
                        {
                            lblSettingsOwnNodeStatus.Text = hostnameForDisplay;
                            lblSettingsOwnNodeStatus.Location = new Point((int)(755 * UIScale) - lblSettingsOwnNodeStatus.Width, lblSettingsOwnNodeStatus.Location.Y);
                        });
                        lblSettingsOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                        {
                            lblSettingsOwnNodeStatusLight.ForeColor = Color.IndianRed;
                            lblSettingsOwnNodeStatusLight.Location = new Point(lblSettingsOwnNodeStatus.Location.X - lblSettingsOwnNodeStatusLight.Width, lblSettingsOwnNodeStatusLight.Location.Y);
                        });

                        lblXpubScreenOwnNodeStatus.Invoke((MethodInvoker)delegate
                        {
                            lblXpubScreenOwnNodeStatus.Text = hostnameForDisplay;
                        });
                        lblXpubScreenOwnNodeStatusLight.Invoke((MethodInvoker)delegate
                        {
                            lblXpubScreenOwnNodeStatusLight.ForeColor = Color.IndianRed;
                        });
                    }
                }
                #endregion
                #region if we're looking at any other screen
                if (!panelXpub.Visible)
                {
                    using var client = new HttpClient();
                    try
                    {
                        Ping pingSender = new Ping();
                        string pingAddress = null;
                        if (NodeURL == "https://mempool.space/api/")
                        {
                            pingAddress = "mempool.space";
                        }
                        else
                        {
                            if (NodeURL == "https://mempool.space/testnet/api/")
                            {
                                pingAddress = "mempool.space";
                            }
                            else
                            {
                                if (NodeURL == null)
                                {
                                    pingAddress = "mempool.space";
                                    NodeURL = "https://mempool.space/api/";
                                }
                                else
                                {
                                    if (textBoxSettingsOwnNodeURL.Text != "")
                                    {
                                        // get the contents of the textbox
                                        string url = textBoxSettingsOwnNodeURL.Text;

                                        // create a regex pattern to match URLs
                                        string pattern = @"^(http|https):\/\/.*\/api\/$";

                                        // create a regex object
                                        Regex regex = new Regex(pattern);

                                        // use the regex object to match the contents of the textbox
                                        if (regex.IsMatch(url)) // (at least partially) valid url
                                        {
                                            try
                                            {
                                                NodeURL = textBoxSettingsOwnNodeURL.Text;
                                                // parse the URL to extract the hostname
                                                Uri uri = new Uri(NodeURL);
                                                string hostname = uri.Host;
                                                hostnameForDisplay = hostname;
                                                // resolve the hostname to an IP address
                                                IPHostEntry hostEntry = Dns.GetHostEntry(hostname);
                                                IPAddress ipAddress = hostEntry.AddressList[0];
                                                pingAddress = ipAddress.ToString();
                                            }
                                            catch
                                            {
                                                lblSettingsSelectedNodeStatus.Invoke((MethodInvoker)delegate
                                                {
                                                    lblSettingsSelectedNodeStatus.Text = "node offline";
                                                    lblSettingsSelectedNodeStatus.Location = new Point((int)(755 * UIScale) - lblSettingsSelectedNodeStatus.Width, lblSettingsSelectedNodeStatus.Location.Y);
                                                });
                                                lblSettingsSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                                                {
                                                    lblSettingsSelectedNodeStatusLight.ForeColor = Color.IndianRed;
                                                    lblSettingsSelectedNodeStatusLight.Location = new Point(lblSettingsSelectedNodeStatus.Location.X - lblSettingsSelectedNodeStatusLight.Width, lblSettingsSelectedNodeStatusLight.Location.Y);
                                                });
                                                return;
                                            }
                                        }
                                        else
                                        {
                                            lblSettingsSelectedNodeStatus.Invoke((MethodInvoker)delegate
                                            {
                                                lblSettingsSelectedNodeStatus.Text = "node offline";
                                                lblSettingsSelectedNodeStatus.Location = new Point((int)(755 * UIScale) - lblSettingsSelectedNodeStatus.Width, lblSettingsSelectedNodeStatus.Location.Y);
                                            });
                                            lblSettingsSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                                            {
                                                lblSettingsSelectedNodeStatusLight.ForeColor = Color.IndianRed;
                                                lblSettingsSelectedNodeStatusLight.Location = new Point(lblSettingsSelectedNodeStatus.Location.X - lblSettingsSelectedNodeStatusLight.Width, lblSettingsSelectedNodeStatusLight.Location.Y);
                                            });
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                        PingReply reply = await pingSender.SendPingAsync(pingAddress);
                        if (reply.Status == IPStatus.Success)
                        {
                            headerSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                            {
                                headerSelectedNodeStatusLight.ForeColor = Color.OliveDrab;
                            });
                            var displayNodeName = "";
                            if (NodeURL == "https://mempool.space/api/")
                            {
                                displayNodeName = "mempool.space (mainnet)";
                            }
                            else
                            {
                                if (NodeURL == "https://mempool.space/testnet/api/")
                                {
                                    displayNodeName = "mempool.space (testnet)";
                                }
                                else
                                {
                                    displayNodeName = hostnameForDisplay;
                                }
                            }
                            lblSettingsSelectedNodeStatus.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsSelectedNodeStatus.Text = displayNodeName;
                                lblSettingsSelectedNodeStatus.Location = new Point((int)(755 * UIScale) - lblSettingsSelectedNodeStatus.Width, lblSettingsSelectedNodeStatus.Location.Y);
                            });
                            lblSettingsSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsSelectedNodeStatusLight.ForeColor = Color.OliveDrab;
                                lblSettingsSelectedNodeStatusLight.Location = new Point(lblSettingsSelectedNodeStatus.Location.X - lblSettingsSelectedNodeStatusLight.Width, lblSettingsSelectedNodeStatusLight.Location.Y);
                            });
                            headerSelectedNodeStatus.Invoke((MethodInvoker)delegate
                            {
                                headerSelectedNodeStatus.Text = displayNodeName;
                            });

                            if (lblErrorMessage.Text == "Node disconnected/offline")
                            {
                                ClearAlertAndErrorMessage();
                            }
                        }
                        else
                        {
                            // API is not online
                            headerSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                            {
                                headerSelectedNodeStatusLight.ForeColor = Color.IndianRed;
                            });
                            var displayNodeName = "";
                            if (NodeURL == "https://mempool.space/api/")
                            {
                                displayNodeName = "mempool.space (mainnet)";
                            }
                            else
                            {
                                if (NodeURL == "https://mempool.space/testnet/api/")
                                {
                                    displayNodeName = "mempool.space (testnet)";
                                }
                                else
                                {
                                    displayNodeName = hostnameForDisplay;
                                }
                            }
                            lblSettingsSelectedNodeStatus.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsSelectedNodeStatus.Text = displayNodeName;
                                lblSettingsSelectedNodeStatus.Location = new Point((int)(755 * UIScale) - lblSettingsSelectedNodeStatus.Width, lblSettingsSelectedNodeStatus.Location.Y);
                            });
                            lblSettingsSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                            {
                                lblSettingsSelectedNodeStatusLight.ForeColor = Color.IndianRed;
                                lblSettingsSelectedNodeStatusLight.Location = new Point(lblSettingsSelectedNodeStatus.Location.X - lblSettingsSelectedNodeStatusLight.Width, lblSettingsSelectedNodeStatusLight.Location.Y);
                            });
                            headerSelectedNodeStatus.Invoke((MethodInvoker)delegate
                            {
                                headerSelectedNodeStatus.Text = displayNodeName;
                            });
                            ShowAlertSymbol();
                            lblErrorMessage.Invoke((MethodInvoker)delegate
                            {
                                lblErrorMessage.Text = "Node disconnected/offline";
                            });
                        }
                    }
                    catch (HttpRequestException)
                    {
                        // API is not online
                        var displayNodeName = "";
                        if (NodeURL == "https://mempool.space/api/")
                        {
                            displayNodeName = "mempool.space (mainnet)";
                        }
                        else
                        {
                            if (NodeURL == "https://mempool.space/testnet/api/")
                            {
                                displayNodeName = "mempool.space (testnet)";
                            }
                            else
                            {
                                displayNodeName = hostnameForDisplay;
                            }
                        }
                        lblSettingsSelectedNodeStatus.Invoke((MethodInvoker)delegate
                        {
                            lblSettingsSelectedNodeStatus.Text = displayNodeName;
                            lblSettingsSelectedNodeStatus.Location = new Point((int)(755 * UIScale) - lblSettingsSelectedNodeStatus.Width, lblSettingsSelectedNodeStatus.Location.Y);
                        });
                        lblSettingsSelectedNodeStatusLight.Invoke((MethodInvoker)delegate
                        {
                            lblSettingsSelectedNodeStatusLight.ForeColor = Color.IndianRed;
                            lblSettingsSelectedNodeStatusLight.Location = new Point(lblSettingsSelectedNodeStatus.Location.X - lblSettingsSelectedNodeStatusLight.Width, lblSettingsSelectedNodeStatusLight.Location.Y);
                        });
                        headerSelectedNodeStatus.Invoke((MethodInvoker)delegate
                        {
                            headerSelectedNodeStatus.Text = displayNodeName;
                        });
                        ShowAlertSymbol();
                        lblErrorMessage.Invoke((MethodInvoker)delegate
                        {
                            lblErrorMessage.Text = "Node disconnected/offline";
                        });
                    }
                    catch (Exception ex)
                    {
                        lblErrorMessage.Invoke((MethodInvoker)delegate
                        {
                            lblErrorMessage.Text = "CheckNetworkStatus: " + ex.Message;
                        });
                    }
                }
                #endregion
            }
            catch (Exception ex)
            {
                HandleException(ex, "CheckNetworkStatus");
            }
        }
        #endregion
        #region update genesis background clock
        private void UpdateOnScreenClock()
        {
            try
            {
                lblTime.Invoke((MethodInvoker)delegate
                {
                    lblTime.Text = DateTime.Now.ToString("HH:mm:ss");
                });

            }
            catch (Exception ex)
            {
                HandleException(ex, "UpdateOnScreenClock");
            }
        }
        #endregion
        #region continuous increment/decrement of numericupdown controls
        private void TimerNumUpDownContinuous_Tick(object sender, EventArgs e)
        {
            try
            {
                #region block screen
                if (isSubmittedBlockNumberUpHeldDown)
                {
                    if (numericUpDownSubmittedBlockNumber.Value < Convert.ToInt64(lblBlockNumber.Text))
                    {
                        numericUpDownSubmittedBlockNumber.Value++;
                    }
                }
                if (isSubmittedBlockNumberDownHeldDown)
                {
                    if (numericUpDownSubmittedBlockNumber.Value > 0)
                    {
                        numericUpDownSubmittedBlockNumber.Value--;
                    }
                }
                #endregion
                #region block list screen
                if (isBlockHeightToStartFromUpHeldDown)
                {
                    if (numericUpDownBlockHeightToStartListFrom.Value < Convert.ToInt64(lblBlockNumber.Text))
                    {
                        numericUpDownBlockHeightToStartListFrom.Value++;
                    }
                }
                if (isBlockHeightToStartFromDownHeldDown)
                {
                    if (numericUpDownBlockHeightToStartListFrom.Value > 0)
                    {
                        numericUpDownBlockHeightToStartListFrom.Value--;
                    }
                }
                #endregion
                #region settings screen
                if (isDataRefreshPeriodUpHeldDown)
                {
                    if (numericUpDownDashboardRefresh.Value < 1440)
                    {
                        numericUpDownDashboardRefresh.Value++;
                    }
                }
                if (isDataRefreshPeriodDownHeldDown)
                {
                    if (numericUpDownDashboardRefresh.Value > 1)
                    {
                        numericUpDownDashboardRefresh.Value--;
                    }
                }
                #endregion
                #region xpub screen
                if (isDerivationPathsUpHeldDown)
                {
                    if (numberUpDownDerivationPathsToCheck.Value < 99)
                    {
                        numberUpDownDerivationPathsToCheck.Value++;
                    }
                }
                if (isDerivationPathsDownHeldDown)
                {
                    if (numberUpDownDerivationPathsToCheck.Value > 1)
                    {
                        numberUpDownDerivationPathsToCheck.Value--;
                    }
                }
                if (isZeroBalanceAdddressUpHeldDown)
                {
                    if (numericUpDownMaxNumberOfConsecutiveUnusedAddresses.Value < 99)
                    {
                        numericUpDownMaxNumberOfConsecutiveUnusedAddresses.Value++;
                    }
                }
                if (isZeroBalanceAdddressDownHeldDown)
                {
                    if (numericUpDownMaxNumberOfConsecutiveUnusedAddresses.Value > 1)
                    {
                        numericUpDownMaxNumberOfConsecutiveUnusedAddresses.Value--;
                    }
                }
                #endregion
                #region create theme screen
                if (isOpacityUpHeldDown)
                {
                    if (numericUpDownOpacity.Value < 100)
                    {
                        numericUpDownOpacity.Value++;
                    }
                }
                if (isOpacityDownHeldDown)
                {
                    if (numericUpDownOpacity.Value > 10)
                    {
                        numericUpDownOpacity.Value--;
                    }
                }
                #endregion
            }
            catch (Exception ex)
            {
                HandleException(ex, "TimerNumUpDownContinuous_Tick");
            }
        }
        #endregion
        #region force a pause
        private async Task BriefPause(int pauselength)
        {
            await Task.Delay(pauselength);
        }
        #endregion

        #endregion

        #region ⚡GENERAL FORM NAVIGATION AND CONTROLS⚡
        #region main menu

        private void EnableAllMenuButtons()
        {
            btnMenuXpub.Enabled = true;
            btnMenuAddress.Enabled = true;
            btnMenuTransaction.Enabled = true;
            btnMenuBookmarks.Enabled = true;
            btnMenuCreateTheme.Enabled = true;
            btnMenuDirectory.Enabled = true;
            btnMenuBitcoinDashboard.Enabled = true;
            btnMenuBlockList.Enabled = true;
            btnMenuLightningDashboard.Enabled = true;
            btnMenuBlock.Enabled = true;
            if (!testNet)
            {
                btnMenuCharts.Enabled = true;
                btnMenuDCACalculator.Enabled = true;
                btnMenuPriceConverter.Enabled = true;
            }
            btnMenuSettings.Enabled = true;
        }

        private void HideAllScreens()
        {
            panelBookmarks.Visible = false;
            panelBlockList.Visible = false;
            panelLightningDashboard.Visible = false;
            panelDirectory.Visible = false;
            panelCharts.Visible = false;
            panelAddress.Visible = false;
            panelBlock.Visible = false;
            panelTransaction.Visible = false;
            panelSettings.Visible = false;
            panelAppearance.Visible = false;
            panelXpub.Visible = false;
            panelDCACalculator.Visible = false;
            panelPriceConverter.Visible = false;
            panelBitcoinDashboard.Visible = false;
        }

        private async void BtnMenuBitcoinDashboard_Click(object sender, EventArgs e)
        {
            try
            {
                lblMenuHighlightedButtonText.Visible = true;
                lblMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblMenuHighlightedButtonText.Text = "₿ dashboard";
                    lblMenuHighlightedButtonText.Location = new Point(lblMenuHighlightedButtonText.Location.X, btnMenuBitcoinDashboard.Location.Y);
                });
                lblMenuArrow.Invoke((MethodInvoker)delegate
                {
                    lblMenuArrow.Visible = true;
                    lblMenuArrow.Location = new Point(lblMenuArrow.Location.X, btnMenuBitcoinDashboard.Location.Y);
                });
                EnableAllMenuButtons();
                btnMenuBitcoinDashboard.Enabled = false;
                SuspendLayout();
                #region display loading screen
                // work out the position to place the loading form
                Point panelScreenLocation = lblNowViewing.PointToScreen(Point.Empty);
                panelScreenLocation.Y -= (int)(161 * UIScale);
                panelScreenLocation.X -= (int)(13 * UIScale);

                Form loadingScreen = new loadingScreen(UIScale)
                {
                    Owner = this, 
                    StartPosition = FormStartPosition.Manual, // Set the start position manually
                    FormBorderStyle = FormBorderStyle.None, 
                    BackColor = panel84.BackColor, // Set the background color to match panel colours
                    Opacity = 1, // Set the opacity to 100%
                    Location = panelScreenLocation // Set the location of the loadingScreen form
                };
                loadingScreen.Show(this);
                await BriefPause(100);
                #endregion
                HideAllScreens();
                panelBitcoinDashboard.Visible = true;
                #region close loading screen
                //wait a moment to give time for screen to paint
                await BriefPause(400);
                //close the loading screen
                loadingScreen.Close();
                #endregion
                ResumeLayout();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuBitcoinDashboard_Click");
            }
        }

        private async void BtnMenuLightningDashboard_Click(object sender, EventArgs e)
        {
            try
            {
                lblMenuHighlightedButtonText.Visible = true;
                lblMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblMenuHighlightedButtonText.Text = "⚡dashboard";
                    lblMenuHighlightedButtonText.Location = new Point(lblMenuHighlightedButtonText.Location.X, btnMenuLightningDashboard.Location.Y);
                });
                lblMenuArrow.Invoke((MethodInvoker)delegate
                {
                    lblMenuArrow.Visible = true;
                    lblMenuArrow.Location = new Point(lblMenuArrow.Location.X, btnMenuLightningDashboard.Location.Y);
                });
                EnableAllMenuButtons();
                btnMenuLightningDashboard.Enabled = false;
                SuspendLayout();
                #region display loading screen
                // work out the position to place the loading form
                Point panelScreenLocation = lblNowViewing.PointToScreen(Point.Empty);
                panelScreenLocation.Y -= (int)(161 * UIScale);
                panelScreenLocation.X -= (int)(13 * UIScale);

                Form loadingScreen = new loadingScreen(UIScale)
                {
                    Owner = this, 
                    StartPosition = FormStartPosition.Manual, // Set the start position manually
                    FormBorderStyle = FormBorderStyle.None, 
                    BackColor = panel84.BackColor, // Set the background color to match panel colours
                    Opacity = 1, // Set the opacity to 100%
                    Location = panelScreenLocation // Set the location of the loadingScreen form
                };
                loadingScreen.Show(this);
                await BriefPause(100);
                #endregion
                HideAllScreens();
                panelLightningDashboard.Visible = true;
                #region close loading screen
                //wait a moment to give time for screen to paint
                await BriefPause(400);
                //close the loading screen
                loadingScreen.Close();
                #endregion
                ResumeLayout();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuLightningDashboard_Click");
            }
        }

        private async void BtnMenuCharts_Click(object sender, EventArgs e)
        {
            try
            {
                lblMenuHighlightedButtonText.Visible = true;
                lblMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblMenuHighlightedButtonText.Text = "charts";
                    lblMenuHighlightedButtonText.Location = new Point(lblMenuHighlightedButtonText.Location.X, btnMenuCharts.Location.Y);
                });
                lblMenuArrow.Invoke((MethodInvoker)delegate
                {
                    lblMenuArrow.Visible = true;
                    lblMenuArrow.Location = new Point(lblMenuArrow.Location.X, btnMenuCharts.Location.Y);
                });
                EnableAllMenuButtons();
                btnMenuCharts.Enabled = false;
                SuspendLayout();
                #region display loading screen
                // work out the position to place the loading form
                Point panelScreenLocation = lblNowViewing.PointToScreen(Point.Empty);
                panelScreenLocation.Y -= (int)(161 * UIScale);
                panelScreenLocation.X -= (int)(13 * UIScale);

                Form loadingScreen = new loadingScreen(UIScale)
                {
                    Owner = this, 
                    StartPosition = FormStartPosition.Manual, // Set the start position manually
                    FormBorderStyle = FormBorderStyle.None, 
                    BackColor = panel84.BackColor, // Set the background color to match panel colours
                    Opacity = 1, // Set the opacity to 100%
                    Location = panelScreenLocation // Set the location of the loadingScreen form
                };
                loadingScreen.Show(this);
                await BriefPause(500);
                #endregion
                HideAllScreens();
                panelCharts.Visible = true;
                #region close loading screen
                //wait a moment to give time for screen to paint
                await BriefPause(2000);
                //close the loading screen
                loadingScreen.Close();
                #endregion
                ResumeLayout();

            }
            catch (Exception ex)
            {
                HandleException(ex, "btnMenuGraphs_Click");
            }
        }

        private async void BtnMenuAddress_Click(object sender, EventArgs e)
        {
            try
            {
                lblMenuHighlightedButtonText.Visible = true;
                lblMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblMenuHighlightedButtonText.Text = "address";
                    lblMenuHighlightedButtonText.Location = new Point(lblMenuHighlightedButtonText.Location.X, btnMenuAddress.Location.Y);
                });
                lblMenuArrow.Invoke((MethodInvoker)delegate
                {
                    lblMenuArrow.Visible = true;
                    lblMenuArrow.Location = new Point(lblMenuArrow.Location.X, btnMenuAddress.Location.Y);
                });
                EnableAllMenuButtons();
                btnMenuAddress.Enabled = false;
                SuspendLayout();
                #region display loading screen
                // work out the position to place the loading form
                Point panelScreenLocation = lblNowViewing.PointToScreen(Point.Empty);
                panelScreenLocation.Y -= (int)(161 * UIScale);
                panelScreenLocation.X -= (int)(13 * UIScale);

                Form loadingScreen = new loadingScreen(UIScale)
                {
                    Owner = this, 
                    StartPosition = FormStartPosition.Manual, // Set the start position manually
                    FormBorderStyle = FormBorderStyle.None, 
                    BackColor = panel84.BackColor, // Set the background color to match panel colours
                    Opacity = 1, // Set the opacity to 100%
                    Location = panelScreenLocation // Set the location of the loadingScreen form
                };
                loadingScreen.Show(this);
                await BriefPause(100);
                #endregion
                HideAllScreens();
                panelAddress.Visible = true;
                #region close loading screen
                //wait a moment to give time for screen to paint
                await BriefPause(400);
                //close the loading screen
                loadingScreen.Close();
                #endregion
                ResumeLayout();
                CheckNetworkStatus();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuAddress_Click");
            }
        }

        private async void BtnMenuBlock_Click(object sender, EventArgs e)
        {
            try
            {
                
                lblMenuHighlightedButtonText.Visible = true;
                lblMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblMenuHighlightedButtonText.Text = "block";
                    lblMenuHighlightedButtonText.Location = new Point(lblMenuHighlightedButtonText.Location.X, btnMenuBlock.Location.Y);
                });
                lblMenuArrow.Invoke((MethodInvoker)delegate
                {
                    lblMenuArrow.Visible = true;
                    lblMenuArrow.Location = new Point(lblMenuArrow.Location.X, btnMenuBlock.Location.Y);
                });
                EnableAllMenuButtons();
                btnMenuBlock.Enabled = false;
                SuspendLayout();

                #region display loading screen
                // work out the position to place the loading form
                Point panelScreenLocation = lblNowViewing.PointToScreen(Point.Empty);
                panelScreenLocation.Y -= (int)(161 * UIScale);
                panelScreenLocation.X -= (int)(13 * UIScale);

                Form loadingScreen = new loadingScreen(UIScale)
                {
                    Owner = this, 
                    StartPosition = FormStartPosition.Manual, // Set the start position manually
                    FormBorderStyle = FormBorderStyle.None, 
                    BackColor = panel84.BackColor, // Set the background color to match panel colours
                    Opacity = 1, // Set the opacity to 100%
                    Location = panelScreenLocation // Set the location of the loadingScreen form
                };
                loadingScreen.Show(this);
                await BriefPause(100);
                #endregion
                HideAllScreens();
                if (numericUpDownSubmittedBlockNumber.Text == "673298")
                {
                    numericUpDownSubmittedBlockNumber.Invoke((MethodInvoker)delegate
                    {
                        numericUpDownSubmittedBlockNumber.Text = lblBlockNumber.Text; // pre-populate the block field on the Block screen)
                    });
                    LookupBlock(); // fetch all the block data automatically for the initial view. 
                }
                panelBlock.Visible = true;
                ResumeLayout();
                CheckNetworkStatus();
                #region close loading screen
                //wait a moment to give time for screen to paint
                await BriefPause(400);
                //close the loading screen
                loadingScreen.Close();
                #endregion
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuBlock_Click");
            }
        }

        private async void BtnMenuXpub_Click(object sender, EventArgs e)
        {
            try
            {
                lblMenuHighlightedButtonText.Visible = true;
                lblMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblMenuHighlightedButtonText.Text = "xpub";
                    lblMenuHighlightedButtonText.Location = new Point(lblMenuHighlightedButtonText.Location.X, btnMenuXpub.Location.Y);
                });
                lblMenuArrow.Invoke((MethodInvoker)delegate
                {
                    lblMenuArrow.Visible = true;
                    lblMenuArrow.Location = new Point(lblMenuArrow.Location.X, btnMenuXpub.Location.Y);
                });
                EnableAllMenuButtons();
                btnMenuXpub.Enabled = false;
                SuspendLayout();
                #region display loading screen
                // work out the position to place the loading form
                Point panelScreenLocation = lblNowViewing.PointToScreen(Point.Empty);
                panelScreenLocation.Y -= (int)(161 * UIScale);
                panelScreenLocation.X -= (int)(13 * UIScale);

                Form loadingScreen = new loadingScreen(UIScale)
                {
                    Owner = this, 
                    StartPosition = FormStartPosition.Manual, // Set the start position manually
                    FormBorderStyle = FormBorderStyle.None, 
                    BackColor = panel84.BackColor, // Set the background color to match panel colours
                    Opacity = 1, // Set the opacity to 100%
                    Location = panelScreenLocation // Set the location of the loadingScreen form
                };
                loadingScreen.Show(this);
                await BriefPause(100);
                #endregion
                HideAllScreens();
                panelXpub.Visible = true;
                #region close loading screen
                //wait a moment to give time for screen to paint
                await BriefPause(400);
                //close the loading screen
                loadingScreen.Close();
                #endregion
                ResumeLayout();
                CheckNetworkStatus();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuXpub_Click");
            }
        }

        private async void BtnMenuBlockList_Click(object sender, EventArgs e)
        {
            try
            {
                lblMenuHighlightedButtonText.Visible = true;
                lblMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblMenuHighlightedButtonText.Text = "blocks";
                    lblMenuHighlightedButtonText.Location = new Point(lblMenuHighlightedButtonText.Location.X, btnMenuBlockList.Location.Y);
                });
                lblMenuArrow.Invoke((MethodInvoker)delegate
                {
                    lblMenuArrow.Visible = true;
                    lblMenuArrow.Location = new Point(lblMenuArrow.Location.X, btnMenuBlockList.Location.Y);
                });
                btnMenuBlockList.Enabled = false;
                EnableAllMenuButtons();
                btnMenuBlockList.Enabled = false;
                SuspendLayout();
                #region display loading screen
                // work out the position to place the loading form
                Point panelScreenLocation = lblNowViewing.PointToScreen(Point.Empty);
                panelScreenLocation.Y -= (int)(161 * UIScale);
                panelScreenLocation.X -= (int)(13 * UIScale);

                Form loadingScreen = new loadingScreen(UIScale)
                {
                    Owner = this, 
                    StartPosition = FormStartPosition.Manual, // Set the start position manually
                    FormBorderStyle = FormBorderStyle.None, 
                    BackColor = panel84.BackColor, // Set the background color to match panel colours
                    Opacity = 1, // Set the opacity to 100%
                    Location = panelScreenLocation // Set the location of the loadingScreen form
                };
                loadingScreen.Show(this);
                await BriefPause(100);
                #endregion
                HideAllScreens();
                if (numericUpDownBlockHeightToStartListFrom.Text == "673298")
                {
                    numericUpDownBlockHeightToStartListFrom.Invoke((MethodInvoker)delegate
                    {
                        numericUpDownBlockHeightToStartListFrom.Text = lblBlockNumber.Text; // pre-populate the block field on the Block screen)
                    });
                    LookupBlockList(); // fetch the first 15 blocks automatically for the initial view.
                }
                panelBlockList.Visible = true;
                CheckNetworkStatus();

                #region close loading screen
                //wait a moment to give time for screen to paint
                await BriefPause(400);
                //close the loading screen
                loadingScreen.Close();
                #endregion
                ResumeLayout();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuBlockList_Click");
            }
        }

        private async void BtnMenuTransaction_Click(object sender, EventArgs e)
        {
            try
            {
                lblMenuHighlightedButtonText.Visible = true;
                lblMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblMenuHighlightedButtonText.Text = "transaction";
                    lblMenuHighlightedButtonText.Location = new Point(lblMenuHighlightedButtonText.Location.X, btnMenuTransaction.Location.Y);
                });
                lblMenuArrow.Invoke((MethodInvoker)delegate
                {
                    lblMenuArrow.Visible = true;
                    lblMenuArrow.Location = new Point(lblMenuArrow.Location.X, btnMenuTransaction.Location.Y);
                });
                btnMenuTransaction.Enabled = false;
                EnableAllMenuButtons();
                btnMenuTransaction.Enabled = false;
                SuspendLayout();
                #region display loading screen
                // work out the position to place the loading form
                Point panelScreenLocation = lblNowViewing.PointToScreen(Point.Empty);
                panelScreenLocation.Y -= (int)(161 * UIScale);
                panelScreenLocation.X -= (int)(13 * UIScale);

                Form loadingScreen = new loadingScreen(UIScale)
                {
                    Owner = this, 
                    StartPosition = FormStartPosition.Manual, // Set the start position manually
                    FormBorderStyle = FormBorderStyle.None, 
                    BackColor = panel84.BackColor, // Set the background color to match panel colours
                    Opacity = 1, // Set the opacity to 100%
                    Location = panelScreenLocation // Set the location of the loadingScreen form
                };
                loadingScreen.Show(this);
                await BriefPause(100);
                #endregion
                HideAllScreens();
                panelTransaction.Visible = true;
                #region close loading screen
                //wait a moment to give time for screen to paint
                await BriefPause(1500);
                //close the loading screen
                loadingScreen.Close();
                #endregion
                ResumeLayout();
                CheckNetworkStatus();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuTransaction_Click");
            }
        }

        private async void BtnMenuBookmarks_Click(object sender, EventArgs e)
        {
            try
            {
                lblMenuHighlightedButtonText.Visible = true;
                lblMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblMenuHighlightedButtonText.Text = "bookmarks";
                    lblMenuHighlightedButtonText.Location = new Point(lblMenuHighlightedButtonText.Location.X, btnMenuBookmarks.Location.Y);
                });
                lblMenuArrow.Invoke((MethodInvoker)delegate
                {
                    lblMenuArrow.Visible = true;
                    lblMenuArrow.Location = new Point(lblMenuArrow.Location.X, btnMenuBookmarks.Location.Y);
                });
                EnableAllMenuButtons();
                btnMenuBookmarks.Enabled = false;
                SuspendLayout();
                #region display loading screen
                // work out the position to place the loading form
                Point panelScreenLocation = lblNowViewing.PointToScreen(Point.Empty);
                panelScreenLocation.Y -= (int)(161 * UIScale);
                panelScreenLocation.X -= (int)(13 * UIScale);

                Form loadingScreen = new loadingScreen(UIScale)
                {
                    Owner = this, 
                    StartPosition = FormStartPosition.Manual, // Set the start position manually
                    FormBorderStyle = FormBorderStyle.None, 
                    BackColor = panel84.BackColor, // Set the background color to match panel colours
                    Opacity = 1, // Set the opacity to 100%
                    Location = panelScreenLocation // Set the location of the loadingScreen form
                };
                loadingScreen.Show(this);
                await BriefPause(100);
                #endregion
                HideAllScreens();
                CheckNetworkStatus();
                SetupBookmarksScreen();
                panelBookmarks.Visible = true;
                #region close loading screen
                //wait a moment to give time for screen to paint
                await BriefPause(700);
                //close the loading screen
                loadingScreen.Close();
                #endregion
                ResumeLayout();
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnMenuBookmarks_Click");
            }
        }

        private async void BtnMenuPriceConverter_Click(object sender, EventArgs e)
        {
            try
            { 
                lblMenuHighlightedButtonText.Visible = true;
                lblMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblMenuHighlightedButtonText.Text = "convert fiat/btc";
                    lblMenuHighlightedButtonText.Location = new Point(lblMenuHighlightedButtonText.Location.X, btnMenuPriceConverter.Location.Y);
                });
                lblMenuArrow.Invoke((MethodInvoker)delegate
                {
                    lblMenuArrow.Visible = true;
                    lblMenuArrow.Location = new Point(lblMenuArrow.Location.X, btnMenuPriceConverter.Location.Y);
                });
                EnableAllMenuButtons();
                btnMenuPriceConverter.Enabled = false;
                SuspendLayout();
                #region display loading screen
                // work out the position to place the loading form
                Point panelScreenLocation = lblNowViewing.PointToScreen(Point.Empty);
                panelScreenLocation.Y -= (int)(161 * UIScale);
                panelScreenLocation.X -= (int)(13 * UIScale);

                Form loadingScreen = new loadingScreen(UIScale)
                {
                    Owner = this,
                    StartPosition = FormStartPosition.Manual, // Set the start position manually
                    FormBorderStyle = FormBorderStyle.None,
                    BackColor = panel84.BackColor, // Set the background color to match panel colours
                    Opacity = 1, // Set the opacity to 100%
                    Location = panelScreenLocation // Set the location of the loadingScreen form
                };
                loadingScreen.Show(this);
                await BriefPause(100);
                #endregion
                HideAllScreens();
                CheckNetworkStatus();
                PopulateConverterScreen();
                panelPriceConverter.Visible = true;
                #region close loading screen
                //wait a moment to give time for screen to paint
                await BriefPause(700);
                //close the loading screen
                loadingScreen.Close();
                #endregion
                ResumeLayout();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuPriceConverter_Click");
            }
}

        private async void BtnMenuDCACalculator_Click(object sender, EventArgs e)
        {
            try
            {
                lblMenuHighlightedButtonText.Visible = true;
                lblMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblMenuHighlightedButtonText.Text = "dca calculator";
                    lblMenuHighlightedButtonText.Location = new Point(lblMenuHighlightedButtonText.Location.X, btnMenuDCACalculator.Location.Y);
                });
                lblMenuArrow.Invoke((MethodInvoker)delegate
                {
                    lblMenuArrow.Visible = true;
                    lblMenuArrow.Location = new Point(lblMenuArrow.Location.X, btnMenuDCACalculator.Location.Y);
                });
                EnableAllMenuButtons();
                btnMenuDCACalculator.Enabled = false;
                SuspendLayout();
                #region display loading screen
                // work out the position to place the loading form
                Point panelScreenLocation = lblNowViewing.PointToScreen(Point.Empty);
                panelScreenLocation.Y -= (int)(161 * UIScale);
                panelScreenLocation.X -= (int)(13 * UIScale);

                Form loadingScreen = new loadingScreen(UIScale)
                {
                    Owner = this,
                    StartPosition = FormStartPosition.Manual, // Set the start position manually
                    FormBorderStyle = FormBorderStyle.None,
                    BackColor = panel84.BackColor, // Set the background color to match panel colours
                    Opacity = 1, // Set the opacity to 100%
                    Location = panelScreenLocation // Set the location of the loadingScreen form
                };
                loadingScreen.Show(this);
                await BriefPause(500);
                #endregion
                HideAllScreens();
                panelDCACalculator.Visible = true;
                #region close loading screen
                //wait a moment to give time for screen to paint
                await BriefPause(2000);
                //close the loading screen
                loadingScreen.Close();
                #endregion
                ResumeLayout();

            }
            catch (Exception ex)
            {
                HandleException(ex, "btnMenuDCACalculator_Click");
            }
        }

        private async void BtnMenuDirectory_Click(object sender, EventArgs e)
        {
            try
            {
                lblMenuHighlightedButtonText.Visible = true;
                lblMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblMenuHighlightedButtonText.Text = "directory";
                    lblMenuHighlightedButtonText.Location = new Point(lblMenuHighlightedButtonText.Location.X, btnMenuDirectory.Location.Y);
                });
                lblMenuArrow.Invoke((MethodInvoker)delegate
                {
                    lblMenuArrow.Visible = true;
                    lblMenuArrow.Location = new Point(lblMenuArrow.Location.X, btnMenuDirectory.Location.Y);
                });
                EnableAllMenuButtons();
                btnMenuDirectory.Enabled = false;
                SuspendLayout();
                #region display loading screen
                // work out the position to place the loading form
                Point panelScreenLocation = lblNowViewing.PointToScreen(Point.Empty);
                panelScreenLocation.Y -= (int)(161 * UIScale);
                panelScreenLocation.X -= (int)(13 * UIScale);

                Form loadingScreen = new loadingScreen(UIScale)
                {
                    Owner = this, 
                    StartPosition = FormStartPosition.Manual, // Set the start position manually
                    FormBorderStyle = FormBorderStyle.None, 
                    BackColor = panel84.BackColor, // Set the background color to match panel colours
                    Opacity = 1, // Set the opacity to 100%
                    Location = panelScreenLocation // Set the location of the loadingScreen form
                };
                loadingScreen.Show(this);
                await BriefPause(100);
                #endregion
                HideAllScreens();
                panelDirectory.Visible = true;
                #region close loading screen
                //wait a moment to give time for screen to paint
                await BriefPause(700);
                //close the loading screen
                loadingScreen.Close();
                #endregion
                ResumeLayout();
                CheckNetworkStatus();
            }
            catch (Exception ex)
            {
                HandleException(ex, "btnMenuDirectory_Click");
            }
        }

        private async void BtnMenuSettings_Click(object sender, EventArgs e)
        {
            try
            {
                lblMenuHighlightedButtonText.Visible = true;
                lblMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblMenuHighlightedButtonText.Text = "settings";
                    lblMenuHighlightedButtonText.Location = new Point(lblMenuHighlightedButtonText.Location.X, btnMenuSettings.Location.Y);
                });
                lblMenuArrow.Invoke((MethodInvoker)delegate
                {
                    lblMenuArrow.Visible = true;
                    lblMenuArrow.Location = new Point(lblMenuArrow.Location.X, btnMenuSettings.Location.Y);
                });
                EnableAllMenuButtons();
                btnMenuSettings.Enabled = false;
                SuspendLayout();
                #region display loading screen
                // work out the position to place the loading form
                Point panelScreenLocation = lblNowViewing.PointToScreen(Point.Empty);
                panelScreenLocation.Y -= (int)(161 * UIScale);
                panelScreenLocation.X -= (int)(13 * UIScale);

                Form loadingScreen = new loadingScreen(UIScale)
                {
                    Owner = this, 
                    StartPosition = FormStartPosition.Manual, // Set the start position manually
                    FormBorderStyle = FormBorderStyle.None, 
                    BackColor = panel84.BackColor, // Set the background color to match panel colours
                    Opacity = 1, // Set the opacity to 100%
                    Location = panelScreenLocation // Set the location of the loadingScreen form
                };
                loadingScreen.Show(this);
                await BriefPause(100);
                #endregion
                HideAllScreens();
                panelSettings.Visible = true;
                #region close loading screen
                //wait a moment to give time for screen to paint
                await BriefPause(400);
                //close the loading screen
                loadingScreen.Close();
                #endregion
                ResumeLayout();
                CheckNetworkStatus();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuSettings2_Click");
            }
        }

        #endregion
        #region show help screen
        private void BtnMenuHelp_Click(object sender, EventArgs e)
        {
            try
            {
                OpenHelpScreen();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuHelp_Click");
            }
        }

        private void BtnHelp_Click(object sender, EventArgs e) // help screen
        {
            try
            {
                OpenHelpScreen();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnHelp_Click");
            }
        }

        private void OpenHelpScreen()
        {
            try
            {
                // display semi-transparent overlay form
                Form overlay = new overlayForm(UIScale)
                {
                    Owner = this, 
                    StartPosition = FormStartPosition.CenterParent, 
                    FormBorderStyle = FormBorderStyle.None, 
                    BackColor = Color.Black, 
                    Opacity = 0.5, 
            };
                overlay.StartPosition = FormStartPosition.CenterParent;
                // Calculate the overlay form's location to place it in the center of the parent form
                overlay.StartPosition = FormStartPosition.Manual;
                int parentCenterX = this.Location.X + this.Width / 2;
                int parentCenterY = this.Location.Y + this.Height / 2;
                int overlayX = parentCenterX - overlay.Width / 2;
                int overlayY = parentCenterY - overlay.Height / 2;
                overlay.Location = new Point(overlayX, overlayY);
                
                overlay.Show(this);

                Form frm = new HelpScreen(UIScale)
                {
                    Owner = this, 
                    StartPosition = FormStartPosition.CenterParent, 
                    TextColor = label77.ForeColor, // random label color to pass to the help screen
                    HeadingTextColor = label26.ForeColor, // random heading color to pass to the help screen
                    ButtonTextColor = btnExit.ForeColor,
                    ButtonBackColor = btnExit.BackColor,
                    ButtonTextColor2 = btnPreviousBlock.ForeColor,
                    ButtonBackColor2 = btnPreviousBlock.BackColor,
                    TextBoxBackColor = chartsBackgroundColor,
                    TextBoxForeColor = numericUpDownBlockHeightToStartListFrom.ForeColor,
                    WindowBackgroundColor = panel76.BackColor,
                    ButtonRadius = btnExit.BorderRadius,
                    ButtonBorderColor = btnExit.BorderColor,
                    ButtonBorderSize = btnExit.BorderSize,
                    DataFieldColor = lblHeaderMarketCap.ForeColor
                };
                frm.StartPosition = FormStartPosition.CenterParent;
                frm.ShowDialog(this);
                overlay.Close();
                this.Focus();
                this.BringToFront();
            }
            catch (Exception ex)
            {
                HandleException(ex, "OpenHelpScreen");
            }
        }
        #endregion
        #region show about screen
        private void BtnMenuSplash_Click(object sender, EventArgs e)
        {
            try
            {
                // display semi-transparent overlay form
                Form overlay = new overlayForm(UIScale)
                {
                    Owner = this, 
                    StartPosition = FormStartPosition.CenterParent, 
                    FormBorderStyle = FormBorderStyle.None, 
                    BackColor = Color.Black, 
                    Opacity = 0.5, 
                };
                overlay.StartPosition = FormStartPosition.CenterParent;
                // Calculate the overlay form's location to place it in the center of the parent form
                overlay.StartPosition = FormStartPosition.Manual;
                int parentCenterX = this.Location.X + this.Width / 2;
                int parentCenterY = this.Location.Y + this.Height / 2;
                int overlayX = parentCenterX - overlay.Width / 2;
                int overlayY = parentCenterY - overlay.Height / 2;
                overlay.Location = new Point(overlayX, overlayY);
                overlay.Show(this);
                
                // display about screen on top of the overlay
                Form frm = new Splash(UIScale)
                    {
                        Owner = this, 
                        StartPosition = FormStartPosition.CenterParent, 
                        WindowBackgroundColor = panel88.BackColor,
                        LabelColor = label77.ForeColor,
                        LinksColor = lblHeaderMarketCap.ForeColor,
                        ButtonTextColor = btnExit.ForeColor,
                        ButtonBackColor = btnExit.BackColor,
                        CurrentVersion = CurrentVersion,
                        OfflineMode = offlineMode,
                        ButtonRadius = btnExit.BorderRadius,
                        ButtonBorderColor = btnExit.BorderColor,
                        ButtonBorderSize = btnExit.BorderSize
                    };
                    frm.StartPosition = FormStartPosition.CenterParent;
//                    frm.FormClosed += ModalForm_FormClosed;
                    frm.ShowDialog(this);
                    
                overlay.Close();
                this.Focus();
                this.BringToFront();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnMenuSplash_Click");
            }
        }

        #endregion
        #region currency menu & get market data
        private void BtnCurrency_Click(object sender, EventArgs e)
        {
            try
            {
                CloseThemeMenu();
                btnCurrency.BringToFront();
                if (panelCurrency.Height == 0)
                {
                    //expand the panel
                    currentHeightExpandingPanel = panelCurrency.Height;
                    StartExpandingPanelVert(panelCurrency);
                }
                else
                {
                    CloseCurrencyMenu();
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnCurrency_Click");
            }
        }

        private void BtnUSD_Click(object sender, EventArgs e)
        {
            try
            {
                btnUSD.Enabled = false;
                btnEUR.Enabled = true;
                btnGBP.Enabled = true;
                btnXAU.Enabled = true;
                btnCurrency.Text = "   currency (USD)  ▼";
                CloseCurrencyMenuGetMarketDataSaveCurrency();
                lblCurrencyMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblCurrencyMenuHighlightedButtonText.Text = "USD $";
                    lblCurrencyMenuHighlightedButtonText.Location = new Point(btnUSD.Location.X + (int)(11 * UIScale), btnUSD.Location.Y + (int)(5 * UIScale));
                });
                ClearCurrencyMenuMarkers();
                btnUSD.Invoke((MethodInvoker)delegate
                {
                    btnUSD.BackgroundImage = Resources.marker;
                });
                #region update the market charts
                //if either the price or marketcap charts were active, refresh them with the new currency, just in case they were visible at the time
                if (!btnChartPrice.Enabled)
                {
                    if (!btnPriceChartScaleLog.Enabled)
                    {
                        BtnChartPriceLog_Click(sender, e);
                    }
                    else
                    {
                        BtnChartPrice_Click(sender, e);
                    }
                    return;
                }
                if (!btnChartMarketCap.Enabled)
                {
                    if (!btnChartMarketCapScaleLog.Enabled)
                    {
                        BtnChartMarketCapScaleLog_Click(sender, e);
                    }
                    else
                    {
                        BtnChartMarketCap_Click(sender, e);
                    }
                    return;
                }
                #endregion
                RefreshFiatValuesEverywhere();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnUSD_Click");
            }
        }

        private void BtnEUR_Click(object sender, EventArgs e)
        {
            try
            {
                btnUSD.Enabled = true;
                btnEUR.Enabled = false;
                btnGBP.Enabled = true;
                btnXAU.Enabled = true;
                btnCurrency.Text = "   currency (EUR)  ▼";
                CloseCurrencyMenuGetMarketDataSaveCurrency();
                lblCurrencyMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblCurrencyMenuHighlightedButtonText.Text = "EUR €";
                    lblCurrencyMenuHighlightedButtonText.Location = new Point(btnEUR.Location.X + (int)(11 * UIScale), btnEUR.Location.Y + (int)(5 * UIScale));
                });
                ClearCurrencyMenuMarkers();
                btnEUR.Invoke((MethodInvoker)delegate
                {
                    btnEUR.BackgroundImage = Resources.marker;
                });
                #region update the market charts
                //if either the price or marketcap charts were active, refresh them with the new currency, just in case they were visible at the time
                if (!btnChartPrice.Enabled)
                {
                    if (!btnPriceChartScaleLog.Enabled)
                    {
                        BtnChartPriceLog_Click(sender, e);
                    }
                    else
                    {
                        BtnChartPrice_Click(sender, e);
                    }
                    return;
                }
                if (!btnChartMarketCap.Enabled)
                {
                    if (!btnChartMarketCapScaleLog.Enabled)
                    {
                        BtnChartMarketCapScaleLog_Click(sender, e);
                    }
                    else
                    {
                        BtnChartMarketCap_Click(sender, e);
                    }
                    return;
                }
                #endregion
                RefreshFiatValuesEverywhere();
            }
            catch (Exception ex)
            {
                HandleException(ex, "   BtnEUR_Click");
            }
        }

        private void BtnGBP_Click(object sender, EventArgs e)
        {
            try
            {
                btnUSD.Enabled = true;
                btnEUR.Enabled = true;
                btnGBP.Enabled = false;
                btnXAU.Enabled = true;
                btnCurrency.Text = "   currency (GBP)  ▼";
                CloseCurrencyMenuGetMarketDataSaveCurrency();
                lblCurrencyMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblCurrencyMenuHighlightedButtonText.Text = "GBP £";
                    lblCurrencyMenuHighlightedButtonText.Location = new Point(btnGBP.Location.X + (int)(11 * UIScale), btnGBP.Location.Y + (int)(5 * UIScale));
                });
                ClearCurrencyMenuMarkers();
                btnGBP.Invoke((MethodInvoker)delegate
                {
                    btnGBP.BackgroundImage = Resources.marker;
                });
                #region update the market charts
                //if either the price or marketcap charts were active, refresh them with the new currency, just in case they were visible at the time
                if (!btnChartPrice.Enabled)
                {
                    if (!btnPriceChartScaleLog.Enabled)
                    {
                        BtnChartPriceLog_Click(sender, e);
                    }
                    else
                    {
                        BtnChartPrice_Click(sender, e);
                    }
                    return;
                }
                if (!btnChartMarketCap.Enabled)
                {
                    if (!btnChartMarketCapScaleLog.Enabled)
                    {
                        BtnChartMarketCapScaleLog_Click(sender, e);
                    }
                    else
                    {
                        BtnChartMarketCap_Click(sender, e);
                    }
                    return;
                }
                #endregion
                RefreshFiatValuesEverywhere();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnGBP_Click");
            }
        }

        private void BtnXAU_Click(object sender, EventArgs e)
        {
            try
            {
                btnUSD.Enabled = true;
                btnEUR.Enabled = true;
                btnGBP.Enabled = true;
                btnXAU.Enabled = false;
                btnCurrency.Text = "   currency (XAU)  ▼";
                CloseCurrencyMenuGetMarketDataSaveCurrency();
                lblCurrencyMenuHighlightedButtonText.Invoke((MethodInvoker)delegate
                {
                    lblCurrencyMenuHighlightedButtonText.Text = "XAU 🪙";
                    lblCurrencyMenuHighlightedButtonText.Location = new Point(btnXAU.Location.X + (int)(11 * UIScale), btnXAU.Location.Y + (int)(5 * UIScale));
                });
                ClearCurrencyMenuMarkers();
                btnXAU.Invoke((MethodInvoker)delegate
                {
                    btnXAU.BackgroundImage = Resources.marker;
                });
                #region update the market charts
                //if either the price or marketcap charts were active, refresh them with the new currency, just in case they were visible at the time
                if (!btnChartPrice.Enabled)
                {
                    if (!btnPriceChartScaleLog.Enabled)
                    {
                        BtnChartPriceLog_Click(sender, e);
                    }
                    else
                    {
                        BtnChartPrice_Click(sender, e);
                    }
                    return;
                }
                if (!btnChartMarketCap.Enabled)
                {
                    if (!btnChartMarketCapScaleLog.Enabled)
                    {
                        BtnChartMarketCapScaleLog_Click(sender, e);
                    }
                    else
                    {
                        BtnChartMarketCap_Click(sender, e);
                    }
                    return;
                }
                #endregion
                RefreshFiatValuesEverywhere();
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnXAU_Click");
            }
        }

        private void RefreshFiatValuesEverywhere()
        {
            try
            {
                if (!offlineMode && !testNet && RunBitcoinExplorerEndpointAPI)
                {
                    #region recalculate fiat values on bitcoin dashboard
                    lblBlockRewardAfterHalvingFiat.Invoke((MethodInvoker)delegate
                {
                    lblBlockRewardAfterHalvingFiat.Text = lblHeaderPrice.Text[0] + (Convert.ToDecimal(lblBlockRewardAfterHalving.Text) * OneBTCinSelectedCurrency).ToString("N2");
                });
                    lblBlockRewardFiat.Invoke((MethodInvoker)delegate
                    {
                        lblBlockRewardFiat.Text = lblHeaderPrice.Text[0] + (Convert.ToDecimal(lblBlockReward.Text) * OneBTCinSelectedCurrency).ToString("N2");
                    });
                    lbl24HourBTCSentFiat.Invoke((MethodInvoker)delegate
                    {
                        lbl24HourBTCSentFiat.Text = lblHeaderPrice.Text[0] + (Convert.ToDecimal(lbl24HourBTCSent.Text) * OneBTCinSelectedCurrency).ToString("N2");
                    });
                    lblNextBlockTotalFeesFiat.Invoke((MethodInvoker)delegate
                    {
                        lblNextBlockTotalFeesFiat.Text = lblHeaderPrice.Text[0] + (Convert.ToDecimal(lblNextBlockTotalFees.Text) * OneBTCinSelectedCurrency).ToString("N2");
                    });
                    #endregion
                    #region recalculate fiat values on xpub screen 
                    lblXpubConfirmedReceivedFiat.Invoke((MethodInvoker)delegate
                    {
                        lblXpubConfirmedReceivedFiat.Text = lblHeaderPrice.Text[0] + (Convert.ToDecimal(lblXpubConfirmedReceived.Text) * OneBTCinSelectedCurrency).ToString("N2");
                    });
                    lblXpubConfirmedSpentFiat.Invoke((MethodInvoker)delegate
                    {
                        lblXpubConfirmedSpentFiat.Text = lblHeaderPrice.Text[0] + (Convert.ToDecimal(lblXpubConfirmedSpent.Text) * OneBTCinSelectedCurrency).ToString("N2");
                    });
                    lblXpubConfirmedUnspentFiat.Invoke((MethodInvoker)delegate
                    {
                        lblXpubConfirmedUnspentFiat.Text = lblHeaderPrice.Text[0] + (Convert.ToDecimal(lblXpubConfirmedUnspent.Text) * OneBTCinSelectedCurrency).ToString("N2");
                    });
                    #endregion
                    #region recalculate fiat values on blocks screen 
                    lblBlockListTotalFeesInNextBlockFiat.Invoke((MethodInvoker)delegate
                    {
                        lblBlockListTotalFeesInNextBlockFiat.Text = lblHeaderPrice.Text[0] + (Convert.ToDecimal(lblBlockListTotalFeesInNextBlock.Text) * OneBTCinSelectedCurrency).ToString("N2");
                    });
                    lblBlockListBlockRewardFiat.Invoke((MethodInvoker)delegate
                    {
                        lblBlockListBlockRewardFiat.Text = lblHeaderPrice.Text[0] + (Convert.ToDecimal(lblBlockListBlockReward.Text) * OneBTCinSelectedCurrency).ToString("N2");
                    });
                    #endregion
                    #region recalculate values on transaction screen
                    if (lblTotalOutputValue.Text != "totalOutputValue")
                    {
                        lblTotalOutputValueFiat.Invoke((MethodInvoker)delegate
                        {
                            lblTotalOutputValueFiat.Text = lblHeaderPrice.Text[0] + (Convert.ToDecimal(lblTotalOutputValue.Text) * OneBTCinSelectedCurrency).ToString("N2");
                        });
                    }
                    if (lblTotalInputValue.Text != "totalInputValue")
                    {
                        lblTotalInputValueFiat.Invoke((MethodInvoker)delegate
                        {
                            lblTotalInputValueFiat.Text = lblHeaderPrice.Text[0] + (Convert.ToDecimal(lblTotalInputValue.Text) * OneBTCinSelectedCurrency).ToString("N2");
                        });
                    }
                    if (lblTransactionFee.Text != "no data")
                    {
                        lblTransactionFeeFiat.Invoke((MethodInvoker)delegate
                        {
                            lblTransactionFeeFiat.Text = lblHeaderPrice.Text[0] + (Convert.ToDecimal(lblTransactionFee.Text) * OneBTCinSelectedCurrency).ToString("N2");
                        });
                    }
                    #endregion
                    #region recalculate fiat values on address screen
                    if (lblAddressConfirmedUnspent.Text != "no data")
                    {
                        lblAddressConfirmedUnspentFiat.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedUnspentFiat.Text = lblHeaderPrice.Text[0] + (Convert.ToDecimal(lblAddressConfirmedUnspent.Text) * OneBTCinSelectedCurrency).ToString("N2");
                        });
                    }
                    if (lblAddressConfirmedSpent.Text != "no data")
                    {
                        lblAddressConfirmedSpentFiat.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedSpentFiat.Text = lblHeaderPrice.Text[0] + (Convert.ToDecimal(lblAddressConfirmedSpent.Text) * OneBTCinSelectedCurrency).ToString("N2");
                        });
                    }
                    if (lblAddressConfirmedReceived.Text != "no data")
                    {
                        lblAddressConfirmedReceivedFiat.Invoke((MethodInvoker)delegate
                        {
                            lblAddressConfirmedReceivedFiat.Text = lblHeaderPrice.Text[0] + (Convert.ToDecimal(lblAddressConfirmedReceived.Text) * OneBTCinSelectedCurrency).ToString("N2");
                        });
                    }
                    #endregion
                    #region recalculate fiat values on block screen
                    if (lblReward.Text != "no data")
                    {
                        lblRewardFiat.Invoke((MethodInvoker)delegate
                        {
                            lblRewardFiat.Text = lblHeaderPrice.Text[0] + (Convert.ToDecimal(lblReward.Text) * OneBTCinSelectedCurrency).ToString("N2");
                        });
                    }
                    if (lblTotalFees.Text != "no data")
                    {
                        lblTotalFeesFiat.Invoke((MethodInvoker)delegate
                        {
                            lblTotalFeesFiat.Text = lblHeaderPrice.Text[0] + (Convert.ToDecimal(lblTotalFees.Text) * OneBTCinSelectedCurrency).ToString("N2");
                        });
                    }
                    #endregion
                    #region recalculate dca screen
                    if (lblBlockchainInfoEndpoints.Text == "✔️")
                    {
                        PopulateDCACalculator();
                    }
                    #endregion
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "RefreshFiatValuesEverywhere");
            }
        }

        private void CloseCurrencyMenuGetMarketDataSaveCurrency()
        {
            try
            {
                CloseCurrencyMenu();
                GetMarketData();
                SaveSettingsToBookmarksFile();
            }
            catch (Exception ex)
            {
                HandleException(ex, "CloseCurrencyMenuGetMarketDataSaveCurrency");
            }
        }

        private void GetMarketData()
        {
            try
            {
                if (!offlineMode && !testNet && RunBitcoinExplorerEndpointAPI)
                {
                    var (priceUSD, priceGBP, priceEUR, priceXAU) = BitcoinExplorerOrgGetPrice();
                    var (mCapUSD, mCapGBP, mCapEUR, mCapXAU) = BitcoinExplorerOrgGetMarketCap();
                    var (satsUSD, satsGBP, satsEUR, satsXAU) = BitcoinExplorerOrgGetMoscowTime();
                    if (testNet)
                    {
                        priceUSD = "0 (TestNet)";
                        priceGBP = "0 (TestNet)";
                        priceEUR = "0 (TestNet)";
                        priceXAU = "0 (TestNet)";
                        mCapUSD = "0 (TestNet)";
                        mCapGBP = "0 (TestNet)";
                        mCapEUR = "0 (TestNet)";
                        mCapXAU = "0 (TestNet)";
                        satsUSD = "0 (TestNet)";
                        satsGBP = "0 (TestNet)";
                        satsEUR = "0 (TestNet)";
                        satsXAU = "0 (TestNet)";
                    }
                    string price = "";
                    string mCap = "";
                    string satsPerUnit = "";
                    if (!btnUSD.Enabled)
                    {
                        OneBTCinSelectedCurrency = Convert.ToDecimal(priceUSD);
                        price = "$" + priceUSD;
                        mCap = "$" + Convert.ToDecimal(mCapUSD).ToString("F2");
                        satsPerUnit = satsUSD;
                        lblHeaderMoscowTimeLabel.Invoke((MethodInvoker)delegate
                        {
                            lblHeaderMoscowTimeLabel.Text = "1$ (USD) / sats";
                        });
                        lblMoscowTimeLabel.Invoke((MethodInvoker)delegate
                        {
                            lblMoscowTimeLabel.Text = "1 USD / sats";
                        });
                        lblPriceLabel.Invoke((MethodInvoker)delegate
                        {
                            lblPriceLabel.Text = "1 BTC / USD";
                        });
                        lblMarketCapLabel.Invoke((MethodInvoker)delegate
                        {
                            lblMarketCapLabel.Text = "Market cap (USD)";
                        });
                    }
                    if (!btnEUR.Enabled)
                    {
                        OneBTCinSelectedCurrency = Convert.ToDecimal(priceEUR);
                        price = "€" + priceEUR;
                        mCap = "€" + Convert.ToDecimal(mCapEUR).ToString("F2");
                        satsPerUnit = satsEUR;
                        lblHeaderMoscowTimeLabel.Invoke((MethodInvoker)delegate
                        {
                            lblHeaderMoscowTimeLabel.Text = "1€ (EUR) / sats";
                        });
                        lblMoscowTimeLabel.Invoke((MethodInvoker)delegate
                        {
                            lblMoscowTimeLabel.Text = "1 EUR / sats";
                        });
                        lblPriceLabel.Invoke((MethodInvoker)delegate
                        {
                            lblPriceLabel.Text = "1 BTC / EUR";
                        });
                        lblMarketCapLabel.Invoke((MethodInvoker)delegate
                        {
                            lblMarketCapLabel.Text = "Market cap (EUR)";
                        });
                    }
                    if (!btnGBP.Enabled)
                    {
                        OneBTCinSelectedCurrency = Convert.ToDecimal(priceGBP);
                        price = "£" + priceGBP;
                        mCap = "£" + Convert.ToDecimal(mCapGBP).ToString("F2");
                        satsPerUnit = satsGBP;
                        lblHeaderMoscowTimeLabel.Invoke((MethodInvoker)delegate
                        {
                            lblHeaderMoscowTimeLabel.Text = "1£ (GBP) / sats";
                        });
                        lblMoscowTimeLabel.Invoke((MethodInvoker)delegate
                        {
                            lblMoscowTimeLabel.Text = "1 GBP / sats";
                        });
                        lblPriceLabel.Invoke((MethodInvoker)delegate
                        {
                            lblPriceLabel.Text = "1 BTC / GBP";
                        });
                        lblMarketCapLabel.Invoke((MethodInvoker)delegate
                        {
                            lblMarketCapLabel.Text = "Market cap (GBP)";
                        });
                    }
                    if (!btnXAU.Enabled)
                    {
                        OneBTCinSelectedCurrency = Convert.ToDecimal(priceXAU);
                        price = "🪙" + priceXAU;
                        mCap = "🪙" + Convert.ToDecimal(mCapXAU).ToString("F2");
                        satsPerUnit = satsXAU;
                        lblHeaderMoscowTimeLabel.Invoke((MethodInvoker)delegate
                        {
                            lblHeaderMoscowTimeLabel.Text = "1🪙 (XAU) / sats";
                        });
                        lblMoscowTimeLabel.Invoke((MethodInvoker)delegate
                        {
                            lblMoscowTimeLabel.Text = "1 XAU / sats";
                        });
                        lblPriceLabel.Invoke((MethodInvoker)delegate
                        {
                            lblPriceLabel.Text = "1 BTC / XAU";
                        });
                        lblMarketCapLabel.Invoke((MethodInvoker)delegate
                        {
                            lblMarketCapLabel.Text = "Market cap (XAU)";
                        });
                    }

                    lblHeaderMoscowTime.Invoke((MethodInvoker)delegate
                    {
                        lblHeaderMoscowTime.Location = new Point(lblHeaderMoscowTimeLabel.Location.X + lblHeaderMoscowTimeLabel.Width, lblHeaderMoscowTimeLabel.Location.Y);
                    });
                    lblPriceUSD.Invoke((MethodInvoker)delegate
                    {
                        lblPriceUSD.Text = price;
                    });
                    lblHeaderPrice.Invoke((MethodInvoker)delegate
                    {
                        lblHeaderPrice.Text = price;
                    });
                    lblHeaderPriceChart.Invoke((MethodInvoker)delegate
                    {
                        lblHeaderPriceChart.Location = new Point(lblHeaderPrice.Location.X + lblHeaderPrice.Width, lblHeaderPriceChart.Location.Y);
                    });

                    lblMarketCapUSD.Invoke((MethodInvoker)delegate
                    {
                        lblMarketCapUSD.Text = mCap;
                    });
                    lblHeaderMarketCap.Invoke((MethodInvoker)delegate
                    {
                        lblHeaderMarketCap.Text = mCap;
                    });
                    lblHeaderMarketCapChart.Invoke((MethodInvoker)delegate
                    {
                        lblHeaderMarketCapChart.Location = new Point(lblHeaderMarketCap.Location.X + lblHeaderMarketCap.Width, lblHeaderMarketCapChart.Location.Y);
                    });
                    lblMoscowTime.Invoke((MethodInvoker)delegate
                    {
                        lblMoscowTime.Text = satsPerUnit;
                    });
                    lblHeaderMoscowTime.Invoke((MethodInvoker)delegate
                    {
                        lblHeaderMoscowTime.Text = satsPerUnit;
                    });
                    lblHeaderConverterChart.Invoke((MethodInvoker)delegate
                    {
                        lblHeaderConverterChart.Location = new Point(lblHeaderMoscowTime.Location.X + lblHeaderMoscowTime.Width, lblHeaderConverterChart.Location.Y);
                    });
                }
            }
            catch (WebException ex)
            {
                HandleException(ex, "getting market data");
            }
        }
        #endregion
        #region minimise/exit window
        private async void BtnExit_Click(object sender, EventArgs e) // exit
        {
            #region display loading screen
            Form loadingTheme = new loadingTheme(UIScale)
            {
                Owner = this, 
                StartPosition = FormStartPosition.CenterParent, 
                FormBorderStyle = FormBorderStyle.None, 
                BackColor = panel84.BackColor, // Set the background color to match panel colours
                Opacity = 1,
                BackgroundImage = Resources.Closing
            };
            loadingTheme.StartPosition = FormStartPosition.CenterParent;

            // Calculate the overlay form's location to place it in the center of the parent form
            loadingTheme.StartPosition = FormStartPosition.Manual;
            int parentCenterX = this.Location.X + this.Width / 2;
            int parentCenterY = this.Location.Y + this.Height / 2;
            int overlayX = parentCenterX - loadingTheme.Width / 2;
            int overlayY = parentCenterY - loadingTheme.Height / 2;
            loadingTheme.Location = new Point(overlayX, overlayY);
            loadingTheme.Show(this);
            #endregion

            // the closing screen exists only to hide the messy removal of all screen elements when closing the form
            await BriefPause(1000);
                        
            this.Close();
            loadingTheme.Close();
        }

        private void BtnMinimise_Click(object sender, EventArgs e) // minimise the form
        {
            this.WindowState = FormWindowState.Minimized;
        }
        #endregion
        #region move window
        private void BtnMoveWindow_MouseDown(object sender, MouseEventArgs e) // move the form when the move control is used
        {
            try
            {
                CloseCurrencyMenu();
                CloseThemeMenu();
                ReleaseCapture();
                SendMessage(this.Handle, 0x112, 0xf012, 0);
            }
            catch (WebException ex)
            {
                HandleException(ex, "BtnMoveWindow_MouseDown");
            }
        }

        private void BtnMoveWindow_MouseUp(object sender, MouseEventArgs e) // reset colour of the move form control
        {
            try
            {
                var args = e as MouseEventArgs;
                if (args.Button == MouseButtons.Right)
                {
                    return;
                }
                btnMoveWindow.BackColor = System.Drawing.ColorTranslator.FromHtml("#1D1D1D");
            }
            catch (WebException ex)
            {
                HandleException(ex, "BtnMoveWindow_MouseUp");
            }
        }

        private void BtnMoveWindow_Click(object sender, EventArgs e)
        {
            try
            {
                var args = e as MouseEventArgs;
                if (args.Button == MouseButtons.Right)
                {
                    return;
                }
                CloseCurrencyMenu();
                CloseThemeMenu();
            }
            catch (WebException ex)
            {
                HandleException(ex, "BtnMoveWindow_Click");
            }
        }
        #endregion
        #region global search

        private void BtnShowGlobalSearch_Click(object sender, EventArgs e)
        {
            try
            {
                if (panel107.Width == 0)
                {
                    StartExpandingPanelHoriz(panel107);
                    currentWidthExpandingPanel = panel107.Width;
                }
                else
                {
                    StartShrinkingPanel(panel107);
                    currentWidthShrinkingPanel = panel107.Width;
                }

            }
            catch (WebException ex)
            {
                HandleException(ex, "BtnShowGlobalSearch_Click");
            }
        }
        private void TextBoxUniversalSearch_Enter(object sender, EventArgs e)
        {
            try
            {
                if (isTextBoxUniversalSearchWatermarkTextDisplayed)
                {
                    textBoxUniversalSearch.Invoke((MethodInvoker)delegate
                    {
                        textBoxUniversalSearch.Invoke((MethodInvoker)delegate
                        {
                            textBoxUniversalSearch.Text = "";
                            textBoxUniversalSearch.ForeColor = numericUpDownBlockHeightToStartListFrom.ForeColor;
                        });
                    });
                    isTextBoxUniversalSearchWatermarkTextDisplayed = false;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "textBoxUniversalSearch_Enter");
            }
        }

        private void TextBoxUniversalSearch_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (isTextBoxUniversalSearchWatermarkTextDisplayed)
                {
                    textBoxUniversalSearch.Invoke((MethodInvoker)delegate
                    {
                        textBoxUniversalSearch.Invoke((MethodInvoker)delegate
                        {
                            textBoxUniversalSearch.Text = "";
                            textBoxUniversalSearch.ForeColor = numericUpDownBlockHeightToStartListFrom.ForeColor;
                        });
                    });
                    isTextBoxUniversalSearchWatermarkTextDisplayed = false;
                }
                if (e.KeyChar == (char)Keys.Return)
                {
                    BtnUniversalSearch_Click(sender, e);
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "textBoxUniversalSearch_KeyPress");
            }
        }

        private void TextBoxUniversalSearch_Leave(object sender, EventArgs e)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(textBoxUniversalSearch.Text))
                {
                    textBoxUniversalSearch.Invoke((MethodInvoker)delegate
                    {
                        textBoxUniversalSearch.Text = "block height, address, transaction ID or xpub...";
                        textBoxUniversalSearch.ForeColor = Color.Gray;
                    });
                    isTextBoxUniversalSearchWatermarkTextDisplayed = true;
                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "textBoxUniversalSearch_Leave");
            }
        }

        private void TextBoxUniversalSearch_TextChanged(object sender, EventArgs e)
        {
            try
            {
                btnUniversalSearch.Enabled = false;
                if (isTextBoxUniversalSearchWatermarkTextDisplayed)
                {
                    textBoxUniversalSearch.Invoke((MethodInvoker)delegate
                    {
                        textBoxUniversalSearch.ForeColor = numericUpDownBlockHeightToStartListFrom.ForeColor;
                    });
                    isTextBoxUniversalSearchWatermarkTextDisplayed = false;
                }
                else
                {
                    // check if it's a block number
                    if (IsNumeric(textBoxUniversalSearch.Text))
                    {
                        if (Convert.ToInt32(textBoxUniversalSearch.Text) <= Convert.ToInt32(lblBlockNumber.Text))
                        {
                            searchTarget = "block";
                            btnUniversalSearch.Enabled = true;
                        }
                    }
                    else
                    {
                        //check if its an address
                        string addressType = DetermineAddressType(textBoxUniversalSearch.Text); // check address is valid and what type of address
                        if (addressType == "P2PKH (legacy)" || addressType == "P2SH" || addressType == "P2WPKH (segwit)" || addressType == "P2WSH" || addressType == "P2TT (taproot)" || addressType == "unknown") // address is valid
                        {
                            searchTarget = "address";
                            btnUniversalSearch.Enabled = true;
                        }
                        else
                        {
                            //check if its a transaction id
                            if (ValidateTransactionId(textBoxUniversalSearch.Text)) // check if the entered string is valid
                            {
                                searchTarget = "transaction";
                                btnUniversalSearch.Enabled = true;
                            }
                            else
                            {
                                //check if its an xpub
                                try
                                {
                                    BitcoinExtPubKey xpub = new BitcoinExtPubKey(textBoxUniversalSearch.Text, Network.Main);
                                    PubKey OnlyUsedToCheckIfXpubIsValid = xpub.GetPublicKey();
                                }
                                catch
                                {
                                    return;
                                }
                                searchTarget = "xpub";
                                btnUniversalSearch.Enabled = true;
                            }
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                HandleException(ex, "textBoxUniversalSearch_TextChanged");
            }
        }

        private void BtnUniversalSearch_Click(object sender, EventArgs e)
        {
            try
            {
                // search for block
                if (searchTarget == "block")
                {
                    numericUpDownSubmittedBlockNumber.Invoke((MethodInvoker)delegate
                    {
                        numericUpDownSubmittedBlockNumber.Text = textBoxUniversalSearch.Text; // copy block number to block screen
                    });
                    LookupBlock();
                    //show the block screen
                    BtnMenuBlock_Click(sender, e);
                }

                //search for address
                if (searchTarget == "address")
                {
                    textboxSubmittedAddress.Invoke((MethodInvoker)delegate
                    {
                        textboxSubmittedAddress.Text = textBoxUniversalSearch.Text; // copy address to address screen
                    });
                    //show the address screen
                    BtnMenuAddress_Click(sender, e);
                }

                //search for transaction
                if (searchTarget == "transaction")
                {
                    // copy transaction ID to transaction screen
                    textBoxTransactionID.Invoke((MethodInvoker)delegate
                    {
                        textBoxTransactionID.Text = textBoxUniversalSearch.Text;
                    });
                    //show the transaction screen
                    BtnMenuTransaction_Click(sender, e);
                }

                //search for xpub
                if (searchTarget == "xpub")
                {
                    textBoxSubmittedXpub.Invoke((MethodInvoker)delegate
                    {
                        textBoxSubmittedXpub.Text = textBoxUniversalSearch.Text;
                    });
                    //show the xpub screen
                    BtnMenuXpub_Click(sender, e);
                }

                //reset the search
                textBoxUniversalSearch.Invoke((MethodInvoker)delegate
                {
                    textBoxUniversalSearch.Text = "block height, address, transaction ID or xpub...";
                    textBoxUniversalSearch.ForeColor = Color.Gray;
                });
                isTextBoxUniversalSearchWatermarkTextDisplayed = true;
                btnUniversalSearch.Enabled = false;
            }
            catch (Exception ex)
            {
                HandleException(ex, "BtnUniversalSearch_Click");
            }
        }
        #endregion
        #region chart icons in header area
        private void PictureBoxHeaderHashrateChart_Click(object sender, EventArgs e)
        {
            try
            {
                BtnChartHashrate_Click(sender, e);
                BtnMenuCharts_Click(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxHeaderHashrateChart_Click");
            }
        }

        private void PictureBoxHeaderPriceChart_Click(object sender, EventArgs e)
        {
            try
            {
                BtnChartPrice_Click(sender, e);
                BtnMenuCharts_Click(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxHeaderPriceChart_Click");
            }
        }

        private void PictureBoxHeaderFeeRatesChart_Click(object sender, EventArgs e)
        {
            try
            {
                BtnChartFeeRates_Click(sender, e);
                BtnMenuCharts_Click(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxHeaderFeeRatesChart_Click");
            }
        }

        private void PictureBoxChartCirculation_Click(object sender, EventArgs e)
        {
            try
            {
                BtnChartCirculation_Click(sender, e);
                BtnMenuCharts_Click(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxChartCirculation_Click");
            }
        }

        private void PictureBoxHeaderBlockSizeChart_Click(object sender, EventArgs e)
        {
            try
            {
                BtnChartBlockSize_Click(sender, e);
                BtnMenuCharts_Click(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxHeaderBlockSizeChart_Click");
            }
        }

        private void PictureBoxHeaderConverterChart_Click(object sender, EventArgs e)
        {
            try
            {
                BtnMenuPriceConverter_Click(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxHeaderConverterChart_Click");
            }
        }

        private void PictureBoxHeaderMarketCapChart_Click(object sender, EventArgs e)
        {
            try
            {
                BtnChartMarketCap_Click(sender, e);
                BtnMenuCharts_Click(sender, e);
            }
            catch (Exception ex)
            {
                HandleException(ex, "PictureBoxHeaderMarketCapChart_Click");
            }
        }
        #endregion
        #region get panel states
        public Panel GetPanelBlock() // enables help screen to get state (visible) of panel to determine which help text to show
        {
            return this.panelBlock;
        }

        public Panel GetPanelBlockList() // enables help screen to get state (visible) of panel to determine which help text to show
        {
            return this.panelBlockList;
        }

        public Panel GetPanelAddress() // enables help screen to get state (visible) of panel to determine which help text to show
        {
            return this.panelAddress;
        }

        public Panel GetPanelBitcoinDashboard() // enables help screen to get state (visible) of panel to determine which help text to show
        {
            return this.panelBitcoinDashboard;
        }

        public Panel GetPanelLightningDashboard() // enables help screen to get state (visible) of panel to determine which help text to show
        {
            return this.panelLightningDashboard;
        }

        public Panel GetPanelTransaction() // enables help screen to get state (visible) of panel to determine which help text to show
        {
            return this.panelTransaction;
        }

        public Panel GetPanelXpub() // enables help screen to get state (visible) of panel to determine which help text to show
        {
            return this.panelXpub;
        }

        public Panel GetPanelDCACalculator() // enables help screen to get state (visible) of panel to determine which help text to show
        {
            return this.panelDCACalculator;
        }

        public Panel GetPanelPriceConverter() // enables help screen to get state (visible) of panel to determine which help text to show
        {
            return this.panelPriceConverter;
        }

        public Panel GetPanelCharts() // enables help screen to get state (visible) of panel to determine which help text to show
        {
            return this.panelCharts;
        }

        public Panel GetPanelBookmarks() // enables help screen to get state (visible) of panel to determine which help text to show
        {
            return this.panelBookmarks;
        }

        public Panel GetPanelAppearance() // enables help screen to get state (visible) of panel to determine which help text to show
        {
            return this.panelAppearance;
        }

        public Panel GetPanelSettings() // enables help screen to get state (visible) of panel to determine which help text to show
        {
            return this.panelSettings;
        }

        public Panel GetPanelDirectory() // enables help screen to get state (visible) of panel to determine which help text to show
        {
            return this.panelDirectory;
        }

        public Panel GetPanelMenu() // enables help screen to get state (visible) of panel to determine which help text to show
        {
            return this.panelMenu;
        }
        #endregion
        #region close menus
        private void CloseThemeMenu()
        {
            try
            {
                panelThemeMenu.Invoke((MethodInvoker)delegate
                {
                    panelThemeMenu.Height = 0;
                });
                btnThemeMenu.Invoke((MethodInvoker)delegate
                {
                    btnThemeMenu.BackColor = Color.Transparent;
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "CloseThemeMenu");
            }
        }

        private void CloseCurrencyMenu()
        {
            try
            {
                panelCurrency.Invoke((MethodInvoker)delegate
                {
                    panelCurrency.Height = 0;
                });
                btnCurrency.Invoke((MethodInvoker)delegate
                {
                    btnCurrency.BackColor = Color.Transparent;
                });
            }
            catch (Exception ex)
            {
                HandleException(ex, "CloseCurrencyMenu");
            }
        }
        #endregion
        #endregion

        #region CLASSES
        #region bookmark
        public class Bookmark
        {
            public DateTime DateAdded { get; set; }
            public string Type { get; set; }
            public string Data { get; set; }
            public string Note { get; set; }
            public bool Encrypted { get; set; }
            public string KeyCheck { get; set; }
        }
        #endregion
        #region theme
        public class Theme
        {
            public string ThemeName { get; set; }
            public Color DataFields { get; set; }
            public Color Labels { get; set; }
            public Color Headings { get; set; }
            public Color Tables { get; set; }
            public Color TableHeadings { get; set; }
            public Color OtherText { get; set; }
            public Color PriceBlock { get; set; }
            public Color StatusErrors { get; set; }
            public Color Buttons { get; set; }
            public Color ButtonText { get; set; }
            public Color Lines { get; set; }
            public Color TextBoxes { get; set; }
            public Color ProgressBars { get; set; }
            public Color TableBackgrounds { get; set; }
            public Color TableTitleBars { get; set; }
            public bool ShowTime { get; set; }
            public bool HeadingBGDefault { get; set; }
            public bool HeadingBGNone { get; set; }
            public bool HeadingBGCustom { get; set; }
            public Color HeadingBackgrounds { get; set; }
            public Color WindowBackground { get; set; }
            public string WindowImage { get; set; }
            public bool BackgroundGenesis { get; set; }
            public bool BackgroundFranklin { get; set; }
            public bool BackgroundSatsuma { get; set; }
            public bool BackgroundHoneyBadger { get; set; }
            public bool BackgroundSymbol { get; set; }
            public bool BackgroundStackSats { get; set; }
            public bool BackgroundCustomColor { get; set; }
            public bool BackgroundCustomImage { get; set; }
            public Color Panels { get; set; }
            public bool ChartsDark { get; set; }
            public int OrangeInfinity { get; set; }
            public int BorderRadius { get; set; }
            public Color FiatConversionText { get; set; }
            public decimal Opacity { get; set; }
            public int TitlesBackgroundImage { get; set; }
        }
        #endregion
        #region address transactions
        // ------------------------------------- Address Transactions -----------------------------------
        public class TransactionsForAddressService
        {
            private readonly string _nodeUrl;

            public TransactionsForAddressService(string nodeUrl)
            {
                _nodeUrl = nodeUrl;
            }

            public async Task<string> GetTransactionsForAddressAsync(string address, string mempoolConfOrAllTx, string lastSeenTxId = "")
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri(_nodeUrl);
                        if (mempoolConfOrAllTx == "chain")
                        {
                            var response = await client.GetAsync($"address/{address}/txs/chain/{lastSeenTxId}");
                            if (response.IsSuccessStatusCode)
                            {
                                return await response.Content.ReadAsStringAsync();
                            }
                        }
                        if (mempoolConfOrAllTx == "mempool")
                        {
                            var response = await client.GetAsync($"address/{address}/txs/mempool");
                            if (response.IsSuccessStatusCode)
                            {
                                return await response.Content.ReadAsStringAsync();
                            }
                        }
                        if (mempoolConfOrAllTx == "all")
                        {
                            var response = await client.GetAsync($"address/{address}/txs");
                            if (response.IsSuccessStatusCode)
                            {
                                return await response.Content.ReadAsStringAsync();
                            }
                        }

                        retryCount--;
                        await Task.Delay(3000);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000);
                    }
                }
                return string.Empty;
            }
        }

        // ------------------------------------- Address Transactions (for xpub screen) -----------------------------------
        public class TransactionsForXpubAddressService
        {
            private readonly string _nodeUrl;

            public TransactionsForXpubAddressService(string nodeUrl)
            {
                _nodeUrl = nodeUrl;
            }

            public async Task<string> GetTransactionsForXpubAddressAsync(string address, string mempoolConfOrAllTx, string lastSeenTxId = "")
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri(_nodeUrl);
                        if (mempoolConfOrAllTx == "chain")
                        {
                            if (lastSeenTxId == "")
                            {
                                var response = await client.GetAsync($"address/{address}/txs/{lastSeenTxId}");
                                if (response.IsSuccessStatusCode)
                                {
                                    return await response.Content.ReadAsStringAsync();
                                }
                            }
                            else
                            {
                                var response = await client.GetAsync($"address/{address}/txs/chain/{lastSeenTxId}");
                                if (response.IsSuccessStatusCode)
                                {
                                    return await response.Content.ReadAsStringAsync();
                                }
                            }

                        }
                        retryCount--;
                        await Task.Delay(3000);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000);
                    }
                }
                return string.Empty;
            }
        }

        public class AddressTransactions
        {
            public string Txid { get; set; }
            public Status_AddressTransactions Status { get; set; }
            public List<Vout_AddressTransactions> Vout { get; set; }
            public List<Vin_AddressTransactions> Vin { get; set; }
        }

        public class Vin_AddressTransactions
        {
            public Prevout_AddressTransactions Prevout { get; set; }
            //public decimal Value { get; set; }
            //public decimal Amount { get; set; }
        }

        public class Prevout_AddressTransactions
        {
            public string Scriptpubkey_address { get; set; }
            public decimal Value { get; set; }
        }

        public class Vout_AddressTransactions
        {
            public double Value { get; set; }
            // public decimal Amount { get; set; }
            public string Scriptpubkey_address { get; set; }
            // public string Scriptpubkey_asm { get; set; }
        }

        public class Status_AddressTransactions
        {
            public int Block_height { get; set; }
            public string Confirmed { get; set; }
        }
        #endregion
        #region blocks
        public class BlockDataService
        {
            private readonly string _nodeUrl;
            public BlockDataService(string nodeUrl)
            {
                _nodeUrl = nodeUrl;
            }
            public async Task<string> GetBlockDataAsync(string blockHeight)
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        if (blockHeight == "000000")
                        {
                            blockHeight = "";
                        }

                        client.BaseAddress = new Uri(_nodeUrl);

                        var response = await client.GetAsync($"v1/blocks/{blockHeight}");

                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        retryCount--;
                        await Task.Delay(3000);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000);
                    }
                }
                return string.Empty;
            }
        }

        public class Block
        {
            public Block_extras Extras { get; set; }
            //  public string Id { get; set; }
            public string Height { get; set; }
            public string Version { get; set; }
            public string Timestamp { get; set; }
            //  public string Bits { get; set; }
            public string Nonce { get; set; }
            // public string Difficulty { get; set; }
            // public string Merkle_root { get; set; }
            public int Tx_count { get; set; }
            public int Size { get; set; }
            public string Weight { get; set; }
            // public string Previousblockhash { get; set; }
        }

        public class Block_extras
        {
            public string Reward { get; set; }
            public decimal MedianFee { get; set; }
            public decimal[] FeeRange { get; set; }
            public int TotalFees { get; set; }
            public string AvgFee { get; set; }
            //  public string AvgFeeRate { get; set; }
            public string AvgTxSize { get; set; }
            public string TotalInputs { get; set; }
            public string TotalOutputs { get; set; }
            // public string TotalOutputAmt { get; set; }
            public Block_pool Pool { get; set; }

        }

        public class Block_pool
        {
            public string Name { get; set; }
        }
        #endregion
        #region transaction
        public class TransactionService
        {
            private readonly string _nodeUrl;
            public TransactionService(string nodeUrl)
            {
                _nodeUrl = nodeUrl;
            }
            public async Task<string> GetTransactionAsync(string TransactionID)
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri(_nodeUrl);
                        var response = await client.GetAsync($"tx/{TransactionID}");
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        retryCount--;
                        await Task.Delay(3000);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000);
                    }
                }
                return string.Empty;
            }
        }

        public class Transaction
        {
            //  public string Txid { get; set; }
            public int Version { get; set; }
            public int Locktime { get; set; }
            public TransactionVin[] Vin { get; set; }
            public TransactionVout[] Vout { get; set; }
            public int Size { get; set; }
            public int Weight { get; set; }
            public int Fee { get; set; }
            public TransactionStatus Status { get; set; }
        }

        public class TransactionStatus
        {
            //  public bool Confirmed { get; set; }
            public int Block_height { get; set; }
            // public string Block_hash { get; set; }
            public int Block_time { get; set; }
        }

        public class TransactionVin
        {
            //  public string Txid { get; set; }
            //  public long Vout { get; set; }
            public TransactionVinPrevout Prevout { get; set; }
            // public string Scriptsig { get; set; }
            // public string Scriptsig_asm { get; set; }
            // public string[] Witness { get; set; }
            public bool Is_coinbase { get; set; }
            // public long Sequence { get; set; }
            // public string Inner_redeemscript_asm { get; set; }
        }

        public class TransactionVinPrevout
        {
            // public string Scriptpubkey { get; set; }
            // public string Scriptpubkey_asm { get; set; }
            // public string Scriptpubkey_type { get; set; }
            public string Scriptpubkey_address { get; set; }
            public long Value { get; set; }
        }

        public class TransactionVout
        {
            //  public string Scriptpubkey { get; set; }
            public string Scriptpubkey_asm { get; set; }
            //  public string Scriptpubkey_type { get; set; }
            public string Scriptpubkey_address { get; set; }
            public long Value { get; set; }
        }
        #endregion
        #region block transactions
        public class TransactionsForBlockService
        {
            private readonly string _nodeUrl;

            public TransactionsForBlockService(string nodeUrl)
            {
                _nodeUrl = nodeUrl;
            }

            public async Task<string> GetTransactionsForBlockAsync(string blockHash, string lastSeenBlockTransaction)
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri(_nodeUrl);
                        var response = await client.GetAsync($"block/{blockHash}/txs/{lastSeenBlockTransaction}");
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }

                        retryCount--;
                        await Task.Delay(3000);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000);
                    }
                }
                return null;
            }
        }

        public class Block_Transactions
        {
            public string Txid { get; set; }
            //      public string version { get; set; }
            //     public string locktime { get; set; }
            public List<Vin_BlockTransactions> Vin { get; set; }
            public List<Vout_BlockTransactions> Vout { get; set; }
            //      public string size { get; set; }
            //      public string weight { get; set; }
            public string Fee { get; set; }
            //     public List<Status_BlockTransactions> status { get; set; }
        }

        public class Vin_BlockTransactions
        {
            //public string Is_coinbase { get; set; }
            //public string sequence { get; set; }
        }

        public class Vout_BlockTransactions
        {
            //     public string scriptpubkey { get; set; }
            //     public string scriptpubkey_asm { get; set; }
            //    public string scriptpubkey_type { get; set; }
            //    public string scriptpubkey_address { get; set; }
            public string Value { get; set; }
        }
        #endregion
        #region date/time
        public static class DateTimeExtensions
        {
            public static DateTime FromUnixTimeMilliseconds(long milliseconds)
            {
                DateTimeOffset dateTimeOffset = DateTimeOffset.FromUnixTimeMilliseconds(milliseconds);
                return dateTimeOffset.UtcDateTime;
            }
        }
        #endregion
        #region charts
        #region price chart
        public class PriceCoordinatesList
        {
            public string X { get; set; }
            public decimal Y { get; set; }
        }

        public class HistoricPriceDataService
        {
            public async Task<string> GetHistoricPriceDataAsync(string chartPeriod)
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri("https://api.blockchain.info/");
                        string blockChainInfoPeriod = "";
                        if (chartPeriod == "1m")
                        {
                            blockChainInfoPeriod = "1months";
                        }
                        if (chartPeriod == "3m")
                        {
                            blockChainInfoPeriod = "3months";
                        }
                        if (chartPeriod == "6m")
                        {
                            blockChainInfoPeriod = "6months";
                        }
                        if (chartPeriod == "1y")
                        {
                            blockChainInfoPeriod = "1years";
                        }
                        if (chartPeriod == "3y")
                        {
                            blockChainInfoPeriod = "3years";
                        }
                        if (chartPeriod == "all")
                        {
                            blockChainInfoPeriod = "all";
                        }
                        var response = await client.GetAsync($"charts/market-price?timespan=" + blockChainInfoPeriod + "&format=json");
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        retryCount--;
                        await Task.Delay(3000);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000);
                    }
                }
                return string.Empty;
            }
        }
        #endregion
        #region market cap chart
        public class MarketCapCoordinatesList
        {
            public string X { get; set; }
            public decimal Y { get; set; }
        }

        public class MarketCapDataService
        {
            public async Task<string> GetMarketCapDataAsync(string chartPeriod)
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri("https://api.blockchain.info/");
                        string blockChainInfoPeriod = "";
                        if (chartPeriod == "1m")
                        {
                            blockChainInfoPeriod = "1months";
                        }
                        if (chartPeriod == "3m")
                        {
                            blockChainInfoPeriod = "3months";
                        }
                        if (chartPeriod == "6m")
                        {
                            blockChainInfoPeriod = "6months";
                        }
                        if (chartPeriod == "1y")
                        {
                            blockChainInfoPeriod = "1years";
                        }
                        if (chartPeriod == "3y")
                        {
                            blockChainInfoPeriod = "3years";
                        }
                        if (chartPeriod == "all")
                        {
                            blockChainInfoPeriod = "all";
                        }
                        var response = await client.GetAsync($"charts/market-cap?timespan=" + blockChainInfoPeriod + "&format=json");
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        retryCount--;
                        await Task.Delay(3000);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000);
                    }
                }
                return string.Empty;
            }
        }
        #endregion
        #region reward chart
        public class HistoricRewardsAndPrice
        {
            //  public string AvgHeight { get; set; }
            public string Timestamp { get; set; }
            public decimal AvgRewards { get; set; }
            //  public decimal USD { get; set; }
        }
        #endregion
        #region fees chart
        public class HistoricFeesAndPrice
        {
            //   public string AvgHeight { get; set; }
            public string Timestamp { get; set; }
            public decimal AvgFees { get; set; }
            //  public decimal USD { get; set; }
        }
        #endregion
        #region hashrate and difficulty charts
        public class HashrateSnapshot
        {
            public string Timestamp { get; set; }
            public decimal AvgHashrate { get; set; }
        }

        public class DifficultySnapshot
        {
            public string Time { get; set; }
            //   public long Height { get; set; }
            public decimal Difficulty { get; set; }
            //  public decimal Adjustment { get; set; }
        }

        public class HashrateAndDifficultyService
        {
            private readonly string _nodeUrl;
            public HashrateAndDifficultyService(string nodeUrl)
            {
                _nodeUrl = nodeUrl;
            }
            public async Task<string> GetHashrateAndDifficultyAsync(string chartPeriod)
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri(_nodeUrl);
                        var response = await client.GetAsync($"v1/mining/hashrate/" + chartPeriod);
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        retryCount--;
                        await Task.Delay(3000);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000);
                    }
                }
                return string.Empty;
            }
        }
        #endregion
        #region fee rates chart
        public class BlockFeeRates
        {
            //  public string AvgHeight { get; set; }
            public string Timestamp { get; set; }
            public double AvgFee_0 { get; set; }
            public double AvgFee_10 { get; set; }
            public double AvgFee_25 { get; set; }
            public double AvgFee_50 { get; set; }
            public double AvgFee_75 { get; set; }
            public double AvgFee_90 { get; set; }
            public double AvgFee_100 { get; set; }
        }

        public class BlockFeeRatesDataService
        {
            private readonly string _nodeUrl;
            public BlockFeeRatesDataService(string nodeUrl)
            {
                _nodeUrl = nodeUrl;
            }
            public async Task<string> GetBlockFeeRatesAsync(string chartPeriod)
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri(_nodeUrl);
                        var response = await client.GetAsync($"v1/mining/blocks/fee-rates/" + chartPeriod);
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        retryCount--;
                        await Task.Delay(3000);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000);
                    }
                }
                return string.Empty;
            }
        }
        #endregion
        #region circulation chart
        public class BTCInCircChartCoordinates
        {
            public string X { get; set; } // date
            public decimal Y { get; set; } // BTC in circ
        }

        public class BitcoinsInCirculationDataService
        {
            public async Task<string> GetBitcoinsInCirculationAsync(string chartPeriod)
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri("https://api.blockchain.info/");
                        string blockChainInfoPeriod = "";
                        if (chartPeriod == "1m")
                        {
                            blockChainInfoPeriod = "1months";
                        }
                        if (chartPeriod == "3m")
                        {
                            blockChainInfoPeriod = "3months";
                        }
                        if (chartPeriod == "6m")
                        {
                            blockChainInfoPeriod = "6months";
                        }
                        if (chartPeriod == "1y")
                        {
                            blockChainInfoPeriod = "1years";
                        }
                        if (chartPeriod == "3y")
                        {
                            blockChainInfoPeriod = "3years";
                        }
                        if (chartPeriod == "all")
                        {
                            blockChainInfoPeriod = "all";
                        }
                        var response = await client.GetAsync($"charts/total-bitcoins?timespan=" + blockChainInfoPeriod + "&format=json");
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        retryCount--;
                        await Task.Delay(3000);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000);
                    }
                }
                return string.Empty;
            }
        }
        #endregion
        #region block size chart
        public class Sizes
        {
            //   public string AvgHeight { get; set; }
            public string Timestamp { get; set; }
            public decimal AvgSize { get; set; }
        }

        public class Weights
        {
            //   public string AvgHeight { get; set; }
            //  public string Timestamp { get; set; }
            //   public decimal AvgWeight { get; set; }
        }

        public class BlockSizeAndWeightService
        {
            private readonly string _nodeUrl;
            public BlockSizeAndWeightService(string nodeUrl)
            {
                _nodeUrl = nodeUrl;
            }
            public async Task<string> GetBlockSizeAndWeightServiceAsync(string chartPeriod)
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri(_nodeUrl);
                        var response = await client.GetAsync($"v1/mining/blocks/sizes-weights/" + chartPeriod);
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        retryCount--;
                        await Task.Delay(3000);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000);
                    }
                }
                return string.Empty;
            }
        }
        #endregion
        #region unique addresses chart
        public class UniqueAddressesList
        {
            public string X { get; set; }
            public decimal Y { get; set; }
        }

        public class UniqueAddressesDataService
        {
            public async Task<string> GetUniqueAddressesDataAsync(string chartPeriod)
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri("https://api.blockchain.info/");
                        string blockChainInfoPeriod = "";
                        if (chartPeriod == "1m")
                        {
                            blockChainInfoPeriod = "1months";
                        }
                        if (chartPeriod == "3m")
                        {
                            blockChainInfoPeriod = "3months";
                        }
                        if (chartPeriod == "6m")
                        {
                            blockChainInfoPeriod = "6months";
                        }
                        if (chartPeriod == "1y")
                        {
                            blockChainInfoPeriod = "1years";
                        }
                        if (chartPeriod == "3y")
                        {
                            blockChainInfoPeriod = "3years";
                        }
                        if (chartPeriod == "all")
                        {
                            blockChainInfoPeriod = "all";
                        }
                        var response = await client.GetAsync($"charts/n-unique-addresses?timespan=" + blockChainInfoPeriod + "&format=json");
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        retryCount--;
                        await Task.Delay(3000);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000);
                    }
                }
                return string.Empty;
            }
        }
        #endregion
        #region utxo chart
        public class UTXOList
        {
            public string X { get; set; }
            public decimal Y { get; set; }
        }

        public class UTXODataService
        {
            public async Task<string> GetUTXODataAsync(string chartPeriod)
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri("https://api.blockchain.info/");
                        string blockChainInfoPeriod = "";
                        if (chartPeriod == "1m")
                        {
                            blockChainInfoPeriod = "1months";
                        }
                        if (chartPeriod == "3m")
                        {
                            blockChainInfoPeriod = "3months";
                        }
                        if (chartPeriod == "6m")
                        {
                            blockChainInfoPeriod = "6months";
                        }
                        if (chartPeriod == "1y")
                        {
                            blockChainInfoPeriod = "1years";
                        }
                        if (chartPeriod == "3y")
                        {
                            blockChainInfoPeriod = "3years";
                        }
                        if (chartPeriod == "all")
                        {
                            blockChainInfoPeriod = "all";
                        }
                        var response = await client.GetAsync($"charts/utxo-count?timespan=" + blockChainInfoPeriod + "&format=json");
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        retryCount--;
                        await Task.Delay(3000);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000);
                    }
                }
                return string.Empty;
            }
        }
        #endregion
        #region pools ranking chart
        public class PoolsRanking
        {
            // public string PoolId { get; set; } 
            public string Name { get; set; }
            //public string Link { get; set; }
            public string BlockCount { get; set; }
            //public string Rank { get; set; }
            //public string EmptyBlocks { get; set; }
            //public string Slug { get; set; }
            //public string AvgMatchRate { get; set; }
        }

        public class PoolsRankingDataService
        {
            private readonly string _nodeUrl;
            public PoolsRankingDataService(string nodeUrl)
            {
                _nodeUrl = nodeUrl;
            }
            public async Task<string> GetPoolsRankingDataAsync(string chartPeriod)
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri(_nodeUrl);
                        var response = await client.GetAsync($"v1/mining/pools/" + chartPeriod);
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        retryCount--;
                        await Task.Delay(3000);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000);
                    }
                }
                return string.Empty;
            }
        }
        #endregion
        #region nodes per network, channels and capacity charts
        public class NodesPerNetworkAndCapacity
        {
            public string Added { get; set; }
            public double Channel_count { get; set; }
            public double Total_capacity { get; set; }
            public double Tor_nodes { get; set; }
            public double Clearnet_nodes { get; set; }
            public double Unannounced_nodes { get; set; }
            public double Clearnet_tor_nodes { get; set; }
        }

        public class NodesPerNetworkAndCapacityDataService
        {
            private readonly string _nodeUrl;
            public NodesPerNetworkAndCapacityDataService(string nodeUrl)
            {
                _nodeUrl = nodeUrl;
            }
            public async Task<string> GetNodesPerNetworkAndCapacityAsync(string chartPeriod)
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri(_nodeUrl);
                        var response = await client.GetAsync($"v1/lightning/statistics/" + chartPeriod);
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        retryCount--;
                        await Task.Delay(3000);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000);
                    }
                }
                return string.Empty;
            }
        }
        #endregion
        #region nodes by country chart
        public class CountryName
        {
            public string En { get; set; }
        }

        public class LightningNodeCountry
        {
            public CountryName Name { get; set; }
            //   public string Iso { get; set; }
            public decimal Count { get; set; }
            //   public decimal Share { get; set; }
            //   public decimal? Capacity { get; set; } // Nullable decimal
        }

        public class LightningNodesByCountryService
        {
            private readonly string _nodeUrl;
            public LightningNodesByCountryService(string nodeUrl)
            {
                _nodeUrl = nodeUrl;
            }
            public async Task<string> GetLightningNodesByCountryAsync()
            {
                int retryCount = 3;
                while (retryCount > 0)
                {
                    using var client = new HttpClient();
                    try
                    {
                        client.BaseAddress = new Uri(_nodeUrl);
                        var response = await client.GetAsync($"v1/lightning/nodes/countries");
                        if (response.IsSuccessStatusCode)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        retryCount--;
                        await Task.Delay(3000);
                    }
                    catch (HttpRequestException)
                    {
                        retryCount--;
                        await Task.Delay(3000);
                    }
                }
                return string.Empty;
            }
        }







        #endregion

        #endregion

        #endregion
    }
}                